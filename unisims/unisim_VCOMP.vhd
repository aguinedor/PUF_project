--**************************************************************
--  Copyright (c) 1995/2017 Xilinx, Inc.  All rights reserved.
--  File Name    : unisim_VCOMP.vhd
--  Library      : unisim
--  Version      : 2018.1
--  Entity Count : 344
--  Generated by : gencomp.pl
--**************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;
package VCOMPONENTS is
attribute BOX_TYPE : string;


-- synopsys translate_off

-----------------------------------------
-----------   FPGA Globals --------------
-----------------------------------------
signal GSR : std_logic := '0';
signal GTS : std_logic := '0';
signal GWE : std_logic;
signal PLL_LOCKG : std_logic := 'H';
signal PROGB_GLBL : std_logic;
signal CCLKO_GLBL : std_logic;
signal FCSBO_GLBL : std_logic;
signal DO_GLBL : std_logic_vector(3 downto 0);
signal DI_GLBL : std_logic_vector(3 downto 0);

-----------------------------------------
-----------   CPLD Globals --------------
-----------------------------------------
signal PRLD : std_logic := '0';

-----------------------------------------
-----------   JTAG Globals --------------
-----------------------------------------
signal JTAG_TDO_GLBL  : std_logic;
signal JTAG_TDI_GLBL  : std_logic;
signal JTAG_TMS_GLBL  : std_logic;
signal JTAG_TCK_GLBL  : std_logic;
signal JTAG_TRST_GLBL : std_logic;

signal JTAG_CAPTURE_GLBL : std_logic;
signal JTAG_RESET_GLBL : std_logic;
signal JTAG_SHIFT_GLBL : std_logic;
signal JTAG_UPDATE_GLBL : std_logic;
signal JTAG_RUNTEST_GLBL : std_logic;

signal JTAG_SEL1_GLBL : std_logic := '0';
signal JTAG_SEL2_GLBL : std_logic := '0';
signal JTAG_SEL3_GLBL : std_logic := '0';
signal JTAG_SEL4_GLBL : std_logic := '0';

signal JTAG_USER_TDO1_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO2_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO3_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO4_GLBL : std_logic := 'Z';

-- synopsys translate_on

-- START COMPONENT
----- component AIE_NOC_M_AXI -----
component AIE_NOC_M_AXI
  port (
     DESTID_RD : out std_logic_vector(11 downto 0);
     DESTID_WR : out std_logic_vector(11 downto 0);
     DESTMODE_RD : out std_ulogic;
     DESTMODE_WR : out std_ulogic;
     M_AXI_ACLK : out std_ulogic;
     M_AXI_ARADDR : out std_logic_vector(63 downto 0);
     M_AXI_ARBURST : out std_logic_vector(1 downto 0);
     M_AXI_ARCACHE : out std_logic_vector(3 downto 0);
     M_AXI_ARID : out std_logic_vector(15 downto 0);
     M_AXI_ARLEN : out std_logic_vector(7 downto 0);
     M_AXI_ARLOCK : out std_logic_vector(0 to 0);
     M_AXI_ARPROT : out std_logic_vector(2 downto 0);
     M_AXI_ARQOS : out std_logic_vector(3 downto 0);
     M_AXI_ARREGION : out std_logic_vector(3 downto 0);
     M_AXI_ARSIZE : out std_logic_vector(2 downto 0);
     M_AXI_ARUSER : out std_logic_vector(17 downto 0);
     M_AXI_ARVALID : out std_ulogic;
     M_AXI_AWADDR : out std_logic_vector(63 downto 0);
     M_AXI_AWBURST : out std_logic_vector(1 downto 0);
     M_AXI_AWCACHE : out std_logic_vector(3 downto 0);
     M_AXI_AWID : out std_logic_vector(15 downto 0);
     M_AXI_AWLEN : out std_logic_vector(7 downto 0);
     M_AXI_AWLOCK : out std_logic_vector(0 to 0);
     M_AXI_AWPROT : out std_logic_vector(2 downto 0);
     M_AXI_AWQOS : out std_logic_vector(3 downto 0);
     M_AXI_AWREGION : out std_logic_vector(3 downto 0);
     M_AXI_AWSIZE : out std_logic_vector(2 downto 0);
     M_AXI_AWUSER : out std_logic_vector(17 downto 0);
     M_AXI_AWVALID : out std_ulogic;
     M_AXI_BREADY : out std_ulogic;
     M_AXI_RREADY : out std_ulogic;
     M_AXI_TDEST : out std_logic_vector(9 downto 0);
     M_AXI_WDATA : out std_logic_vector(127 downto 0);
     M_AXI_WID : out std_logic_vector(5 downto 0);
     M_AXI_WLAST : out std_logic_vector(0 to 0);
     M_AXI_WSTRB : out std_logic_vector(15 downto 0);
     M_AXI_WUSER : out std_logic_vector(16 downto 0);
     M_AXI_WVALID : out std_ulogic;
     FROM_AIE_2 : in std_ulogic;
     FROM_AIE_3 : in std_ulogic;
     FROM_AIE_4 : in std_ulogic;
     FROM_AIE_5 : in std_ulogic;
     M_AXI_ARREADY : in std_ulogic;
     M_AXI_AWREADY : in std_ulogic;
     M_AXI_BID : in std_logic_vector(15 downto 0);
     M_AXI_BRESP : in std_logic_vector(1 downto 0);
     M_AXI_BUSER : in std_logic_vector(15 downto 0);
     M_AXI_BVALID : in std_ulogic;
     M_AXI_RDATA : in std_logic_vector(127 downto 0);
     M_AXI_RID : in std_logic_vector(15 downto 0);
     M_AXI_RLAST : in std_logic_vector(0 to 0);
     M_AXI_RRESP : in std_logic_vector(1 downto 0);
     M_AXI_RUSER : in std_logic_vector(16 downto 0);
     M_AXI_RVALID : in std_ulogic;
     M_AXI_WREADY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_NOC_M_AXI : component is "PRIMITIVE";

----- component AIE_NOC_M_AXIS -----
component AIE_NOC_M_AXIS
  port (
     M_AXIS_ACLK : out std_ulogic;
     M_AXIS_TDATA : out std_logic_vector(127 downto 0);
     M_AXIS_TDEST : out std_logic_vector(9 downto 0);
     M_AXIS_TID : out std_logic_vector(1 downto 0);
     M_AXIS_TKEEP : out std_logic_vector(15 downto 0);
     M_AXIS_TLAST : out std_ulogic;
     M_AXIS_TVALID : out std_ulogic;
     FROM_AIE_2 : in std_ulogic;
     FROM_AIE_3 : in std_ulogic;
     FROM_AIE_4 : in std_ulogic;
     FROM_AIE_5 : in std_ulogic;
     M_AXIS_TREADY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_NOC_M_AXIS : component is "PRIMITIVE";

----- component AIE_NOC_S_AXI -----
component AIE_NOC_S_AXI
  port (
     S_AXI_ACLK : out std_ulogic;
     S_AXI_ARREADY : out std_ulogic;
     S_AXI_AWREADY : out std_ulogic;
     S_AXI_BID : out std_logic_vector(1 downto 0);
     S_AXI_BRESP : out std_logic_vector(1 downto 0);
     S_AXI_BUSER : out std_logic_vector(15 downto 0);
     S_AXI_BVALID : out std_ulogic;
     S_AXI_RDATA : out std_logic_vector(127 downto 0);
     S_AXI_RID : out std_logic_vector(1 downto 0);
     S_AXI_RLAST : out std_logic_vector(0 to 0);
     S_AXI_RRESP : out std_logic_vector(1 downto 0);
     S_AXI_RUSER : out std_logic_vector(16 downto 0);
     S_AXI_RVALID : out std_ulogic;
     S_AXI_WREADY : out std_ulogic;
     TO_AIE_2 : out std_ulogic;
     TO_AIE_3 : out std_ulogic;
     TO_AIE_6 : out std_ulogic;
     TO_AIE_7 : out std_ulogic;
     S_AXI_ARADDR : in std_logic_vector(63 downto 0);
     S_AXI_ARBURST : in std_logic_vector(1 downto 0);
     S_AXI_ARCACHE : in std_logic_vector(3 downto 0);
     S_AXI_ARID : in std_logic_vector(1 downto 0);
     S_AXI_ARLEN : in std_logic_vector(7 downto 0);
     S_AXI_ARLOCK : in std_logic_vector(0 to 0);
     S_AXI_ARPROT : in std_logic_vector(2 downto 0);
     S_AXI_ARQOS : in std_logic_vector(3 downto 0);
     S_AXI_ARREGION : in std_logic_vector(3 downto 0);
     S_AXI_ARSIZE : in std_logic_vector(2 downto 0);
     S_AXI_ARUSER : in std_logic_vector(17 downto 0);
     S_AXI_ARVALID : in std_ulogic;
     S_AXI_AWADDR : in std_logic_vector(63 downto 0);
     S_AXI_AWBURST : in std_logic_vector(1 downto 0);
     S_AXI_AWCACHE : in std_logic_vector(3 downto 0);
     S_AXI_AWID : in std_logic_vector(1 downto 0);
     S_AXI_AWLEN : in std_logic_vector(7 downto 0);
     S_AXI_AWLOCK : in std_logic_vector(0 to 0);
     S_AXI_AWPROT : in std_logic_vector(2 downto 0);
     S_AXI_AWQOS : in std_logic_vector(3 downto 0);
     S_AXI_AWREGION : in std_logic_vector(3 downto 0);
     S_AXI_AWSIZE : in std_logic_vector(2 downto 0);
     S_AXI_AWUSER : in std_logic_vector(17 downto 0);
     S_AXI_AWVALID : in std_ulogic;
     S_AXI_BREADY : in std_ulogic;
     S_AXI_RREADY : in std_ulogic;
     S_AXI_TDEST : in std_logic_vector(9 downto 0);
     S_AXI_WDATA : in std_logic_vector(127 downto 0);
     S_AXI_WID : in std_logic_vector(5 downto 0);
     S_AXI_WLAST : in std_logic_vector(0 to 0);
     S_AXI_WSTRB : in std_logic_vector(15 downto 0);
     S_AXI_WUSER : in std_logic_vector(16 downto 0);
     S_AXI_WVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_NOC_S_AXI : component is "PRIMITIVE";

----- component AIE_NOC_S_AXIS -----
component AIE_NOC_S_AXIS
  port (
     S_AXIS_ACLK : out std_ulogic;
     S_AXIS_TREADY : out std_ulogic;
     TO_AIE_2 : out std_ulogic;
     TO_AIE_3 : out std_ulogic;
     TO_AIE_6 : out std_ulogic;
     TO_AIE_7 : out std_ulogic;
     S_AXIS_TDATA : in std_logic_vector(127 downto 0);
     S_AXIS_TDEST : in std_logic_vector(9 downto 0);
     S_AXIS_TID : in std_logic_vector(1 downto 0);
     S_AXIS_TKEEP : in std_logic_vector(15 downto 0);
     S_AXIS_TLAST : in std_ulogic;
     S_AXIS_TVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_NOC_S_AXIS : component is "PRIMITIVE";

----- component AIE_PL_M_AXIS128 -----
component AIE_PL_M_AXIS128
  port (
     M_AXIS_TDATA : out std_logic_vector(127 downto 0);
     M_AXIS_TKEEP : out std_logic_vector(1 downto 0);
     M_AXIS_TLAST : out std_logic_vector(1 downto 0);
     M_AXIS_TVALID : out std_logic_vector(1 downto 0);
     FROM_AIE : in std_logic_vector(1 downto 0);
     M_AXIS_ACLK : in std_ulogic;
     M_AXIS_TREADY : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  AIE_PL_M_AXIS128 : component is "PRIMITIVE";

----- component AIE_PL_M_AXIS32 -----
component AIE_PL_M_AXIS32
  port (
     M_AXIS_TDATA : out std_logic_vector(31 downto 0);
     M_AXIS_TKEEP : out std_ulogic;
     M_AXIS_TLAST : out std_ulogic;
     M_AXIS_TVALID : out std_ulogic;
     FROM_AIE : in std_ulogic;
     M_AXIS_ACLK : in std_ulogic;
     M_AXIS_TREADY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_PL_M_AXIS32 : component is "PRIMITIVE";

----- component AIE_PL_M_AXIS64 -----
component AIE_PL_M_AXIS64
  port (
     M_AXIS_TDATA : out std_logic_vector(63 downto 0);
     M_AXIS_TKEEP : out std_ulogic;
     M_AXIS_TLAST : out std_ulogic;
     M_AXIS_TVALID : out std_ulogic;
     FROM_AIE : in std_ulogic;
     M_AXIS_ACLK : in std_ulogic;
     M_AXIS_TREADY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_PL_M_AXIS64 : component is "PRIMITIVE";

----- component AIE_PL_M_EVENTS -----
component AIE_PL_M_EVENTS
  port (
     TRIG : out std_logic_vector(15 downto 0);
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_PL_M_EVENTS : component is "PRIMITIVE";

----- component AIE_PL_S_AXIS128 -----
component AIE_PL_S_AXIS128
  port (
     S_AXIS_TREADY : out std_logic_vector(1 downto 0);
     TO_AIE : out std_logic_vector(1 downto 0);
     S_AXIS_ACLK : in std_ulogic;
     S_AXIS_TDATA : in std_logic_vector(127 downto 0);
     S_AXIS_TKEEP : in std_logic_vector(1 downto 0);
     S_AXIS_TLAST : in std_logic_vector(1 downto 0);
     S_AXIS_TVALID : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  AIE_PL_S_AXIS128 : component is "PRIMITIVE";

----- component AIE_PL_S_AXIS32 -----
component AIE_PL_S_AXIS32
  port (
     S_AXIS_TREADY : out std_ulogic;
     TO_AIE : out std_ulogic;
     S_AXIS_ACLK : in std_ulogic;
     S_AXIS_TDATA : in std_logic_vector(31 downto 0);
     S_AXIS_TKEEP : in std_ulogic;
     S_AXIS_TLAST : in std_ulogic;
     S_AXIS_TVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_PL_S_AXIS32 : component is "PRIMITIVE";

----- component AIE_PL_S_AXIS64 -----
component AIE_PL_S_AXIS64
  port (
     S_AXIS_TREADY : out std_ulogic;
     TO_AIE : out std_ulogic;
     S_AXIS_ACLK : in std_ulogic;
     S_AXIS_TDATA : in std_logic_vector(63 downto 0);
     S_AXIS_TKEEP : in std_ulogic;
     S_AXIS_TLAST : in std_ulogic;
     S_AXIS_TVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AIE_PL_S_AXIS64 : component is "PRIMITIVE";

----- component AIE_PL_S_EVENTS -----
component AIE_PL_S_EVENTS
  port (
     CLK : in std_ulogic;
     TRIG : in std_logic_vector(15 downto 0)
  );
end component;
attribute BOX_TYPE of
  AIE_PL_S_EVENTS : component is "PRIMITIVE";

----- component AND2B1L -----
component AND2B1L
  generic (
     IS_SRI_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     DI : in std_ulogic;
     SRI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND2B1L : component is "PRIMITIVE";

----- component AUTOBUF -----
component AUTOBUF
  generic (
     BUFFER_TYPE : string := "AUTO"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AUTOBUF : component is "PRIMITIVE";

----- component BIBUF -----
component BIBUF
  port (
     IO : inout std_ulogic;
     PAD : inout std_ulogic
  );
end component;
attribute BOX_TYPE of
  BIBUF : component is "PRIMITIVE";

----- component BITSLICE_CONTROL -----
component BITSLICE_CONTROL
  generic (
     CTRL_CLK : string := "EXTERNAL";
     DIV_MODE : string := "DIV2";
     EN_CLK_TO_EXT_NORTH : string := "DISABLE";
     EN_CLK_TO_EXT_SOUTH : string := "DISABLE";
     EN_DYN_ODLY_MODE : string := "FALSE";
     EN_OTHER_NCLK : string := "FALSE";
     EN_OTHER_PCLK : string := "FALSE";
     IDLY_VT_TRACK : string := "TRUE";
     INV_RXCLK : string := "FALSE";
     ODLY_VT_TRACK : string := "TRUE";
     QDLY_VT_TRACK : string := "TRUE";
     READ_IDLE_COUNT : std_logic_vector(5 downto 0) := "00" & X"0";
     REFCLK_SRC : string := "PLLCLK";
     ROUNDING_FACTOR : integer := 16;
     RXGATE_EXTEND : string := "FALSE";
     RX_CLK_PHASE_N : string := "SHIFT_0";
     RX_CLK_PHASE_P : string := "SHIFT_0";
     RX_GATING : string := "DISABLE";
     SELF_CALIBRATE : string := "ENABLE";
     SERIAL_MODE : string := "FALSE";
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_SPEEDUP : string := "FAST";
     SIM_VERSION : real := 2.0;
     TX_GATING : string := "DISABLE"
  );
  port (
     CLK_TO_EXT_NORTH : out std_ulogic;
     CLK_TO_EXT_SOUTH : out std_ulogic;
     DLY_RDY : out std_ulogic;
     DYN_DCI : out std_logic_vector(6 downto 0);
     NCLK_NIBBLE_OUT : out std_ulogic;
     PCLK_NIBBLE_OUT : out std_ulogic;
     RIU_RD_DATA : out std_logic_vector(15 downto 0);
     RIU_VALID : out std_ulogic;
     RX_BIT_CTRL_OUT0 : out std_logic_vector(39 downto 0);
     RX_BIT_CTRL_OUT1 : out std_logic_vector(39 downto 0);
     RX_BIT_CTRL_OUT2 : out std_logic_vector(39 downto 0);
     RX_BIT_CTRL_OUT3 : out std_logic_vector(39 downto 0);
     RX_BIT_CTRL_OUT4 : out std_logic_vector(39 downto 0);
     RX_BIT_CTRL_OUT5 : out std_logic_vector(39 downto 0);
     RX_BIT_CTRL_OUT6 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT0 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT1 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT2 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT3 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT4 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT5 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT6 : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT_TRI : out std_logic_vector(39 downto 0);
     VTC_RDY : out std_ulogic;
     CLK_FROM_EXT : in std_ulogic;
     EN_VTC : in std_ulogic;
     NCLK_NIBBLE_IN : in std_ulogic;
     PCLK_NIBBLE_IN : in std_ulogic;
     PHY_RDCS0 : in std_logic_vector(3 downto 0);
     PHY_RDCS1 : in std_logic_vector(3 downto 0);
     PHY_RDEN : in std_logic_vector(3 downto 0);
     PHY_WRCS0 : in std_logic_vector(3 downto 0);
     PHY_WRCS1 : in std_logic_vector(3 downto 0);
     PLL_CLK : in std_ulogic;
     REFCLK : in std_ulogic;
     RIU_ADDR : in std_logic_vector(5 downto 0);
     RIU_CLK : in std_ulogic;
     RIU_NIBBLE_SEL : in std_ulogic;
     RIU_WR_DATA : in std_logic_vector(15 downto 0);
     RIU_WR_EN : in std_ulogic;
     RST : in std_ulogic;
     RX_BIT_CTRL_IN0 : in std_logic_vector(39 downto 0);
     RX_BIT_CTRL_IN1 : in std_logic_vector(39 downto 0);
     RX_BIT_CTRL_IN2 : in std_logic_vector(39 downto 0);
     RX_BIT_CTRL_IN3 : in std_logic_vector(39 downto 0);
     RX_BIT_CTRL_IN4 : in std_logic_vector(39 downto 0);
     RX_BIT_CTRL_IN5 : in std_logic_vector(39 downto 0);
     RX_BIT_CTRL_IN6 : in std_logic_vector(39 downto 0);
     TBYTE_IN : in std_logic_vector(3 downto 0);
     TX_BIT_CTRL_IN0 : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN1 : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN2 : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN3 : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN4 : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN5 : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN6 : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN_TRI : in std_logic_vector(39 downto 0)
  );
end component;
attribute BOX_TYPE of
  BITSLICE_CONTROL : component is "PRIMITIVE";

----- component BSCANE2 -----
component BSCANE2
  generic (
     DISABLE_JTAG : string := "FALSE";
     JTAG_CHAIN : integer := 1
  );
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK : out std_ulogic := 'H';
     RESET : out std_ulogic := 'H';
     RUNTEST : out std_ulogic := 'L';
     SEL : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TCK : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     TMS : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCANE2 : component is "PRIMITIVE";

----- component BUF -----
component BUF
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUF : component is "PRIMITIVE";

----- component BUFCE_LEAF -----
component BUFCE_LEAF
  generic (
     CE_TYPE : string := "SYNC";
     IS_CE_INVERTED : bit := '0';
     IS_I_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFCE_LEAF : component is "PRIMITIVE";

----- component BUFCE_ROW -----
component BUFCE_ROW
  generic (
     CE_TYPE : string := "SYNC";
     IS_CE_INVERTED : bit := '0';
     IS_I_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFCE_ROW : component is "PRIMITIVE";

----- component BUFDIV_LEAF -----
component BUFDIV_LEAF
  generic (
     DIVIDE : integer := 1;
     IS_I_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     CLR_B : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFDIV_LEAF : component is "PRIMITIVE";

----- component BUFG -----
component BUFG
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFG : component is "PRIMITIVE";

----- component BUFGCE -----
component BUFGCE
  generic (
     CE_TYPE : string := "SYNC";
     IS_CE_INVERTED : bit := '0';
     IS_I_INVERTED : bit := '0';
     SIM_DEVICE : string := "ULTRASCALE";
     STARTUP_SYNC : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGCE : component is "PRIMITIVE";

----- component BUFGCE_DIV -----
component BUFGCE_DIV
  generic (
     BUFGCE_DIVIDE : integer := 1;
     CE_TYPE : string := "SYNC";
     HARDSYNC_CLR : string := "FALSE";
     IS_CE_INVERTED : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_I_INVERTED : bit := '0';
     SIM_DEVICE : string := "ULTRASCALE";
     STARTUP_SYNC : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGCE_DIV : component is "PRIMITIVE";

----- component BUFGCTRL -----
component BUFGCTRL
  generic (
     CE_TYPE_CE0 : string := "SYNC";
     CE_TYPE_CE1 : string := "SYNC";
     INIT_OUT : integer := 0;
     IS_CE0_INVERTED : bit := '0';
     IS_CE1_INVERTED : bit := '0';
     IS_I0_INVERTED : bit := '0';
     IS_I1_INVERTED : bit := '0';
     IS_IGNORE0_INVERTED : bit := '0';
     IS_IGNORE1_INVERTED : bit := '0';
     IS_S0_INVERTED : bit := '0';
     IS_S1_INVERTED : bit := '0';
     PRESELECT_I0 : boolean := FALSE;
     PRESELECT_I1 : boolean := FALSE;
     SIM_DEVICE : string := "ULTRASCALE";
     STARTUP_SYNC : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     CE0 : in std_ulogic;
     CE1 : in std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     IGNORE0 : in std_ulogic;
     IGNORE1 : in std_ulogic;
     S0 : in std_ulogic;
     S1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGCTRL : component is "PRIMITIVE";

----- component BUFGP -----
component BUFGP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGP : component is "PRIMITIVE";

----- component BUFG_FABRIC -----
component BUFG_FABRIC
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFG_FABRIC : component is "PRIMITIVE";

----- component BUFG_GT -----
component BUFG_GT
  generic (
     SIM_DEVICE : string := "ULTRASCALE";
     STARTUP_SYNC : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     CEMASK : in std_ulogic;
     CLR : in std_ulogic;
     CLRMASK : in std_ulogic;
     DIV : in std_logic_vector(2 downto 0);
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFG_GT : component is "PRIMITIVE";

----- component BUFG_GT_SYNC -----
component BUFG_GT_SYNC
  port (
     CESYNC : out std_ulogic;
     CLRSYNC : out std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CLR : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFG_GT_SYNC : component is "PRIMITIVE";

----- component BUFG_PS -----
component BUFG_PS
  generic (
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     STARTUP_SYNC : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFG_PS : component is "PRIMITIVE";

----- component BUFH -----
component BUFH
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFH : component is "PRIMITIVE";

----- component BUFHCE -----
component BUFHCE
  generic (
     CE_TYPE : string := "SYNC";
     INIT_OUT : integer := 0;
     IS_CE_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFHCE : component is "PRIMITIVE";

----- component BUFIO -----
component BUFIO
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFIO : component is "PRIMITIVE";

----- component BUFMR -----
component BUFMR
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFMR : component is "PRIMITIVE";

----- component BUFMRCE -----
component BUFMRCE
  generic (
     CE_TYPE : string := "SYNC";
     INIT_OUT : integer := 0;
     IS_CE_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFMRCE : component is "PRIMITIVE";

----- component BUFR -----
component BUFR
  generic (
     BUFR_DIVIDE : string := "BYPASS";
     SIM_DEVICE : string := "7SERIES"
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFR : component is "PRIMITIVE";

----- component CAPTUREE2 -----
component CAPTUREE2
  generic (
     ONESHOT : string := "TRUE"
  );
  port (
     CAP : in std_ulogic;
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CAPTUREE2 : component is "PRIMITIVE";

----- component CARRY4 -----
component CARRY4
  port (
     CO : out std_logic_vector(3 downto 0);
     O : out std_logic_vector(3 downto 0);
     CI : in std_ulogic;
     CYINIT : in std_ulogic;
     DI : in std_logic_vector(3 downto 0);
     S : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  CARRY4 : component is "PRIMITIVE";

----- component CARRY8 -----
component CARRY8
  generic (
     CARRY_TYPE : string := "SINGLE_CY8"
  );
  port (
     CO : out std_logic_vector(7 downto 0);
     O : out std_logic_vector(7 downto 0);
     CI : in std_ulogic := '0';
     CI_TOP : in std_ulogic := '0';
     DI : in std_logic_vector(7 downto 0) := (others => '0');
     S : in std_logic_vector(7 downto 0) := (others => '0')
  );
end component;
attribute BOX_TYPE of
  CARRY8 : component is "PRIMITIVE";

----- component CFGLUT5 -----
component CFGLUT5
  generic (
     INIT : bit_vector := X"00000000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     CDO : out STD_ULOGIC;
     O5 : out STD_ULOGIC;
     O6 : out STD_ULOGIC;
     CDI : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     I0 : in STD_ULOGIC;
     I1 : in STD_ULOGIC;
     I2 : in STD_ULOGIC;
     I3 : in STD_ULOGIC;
     I4 : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  CFGLUT5 : component is "PRIMITIVE";

----- component CMAC -----
component CMAC
  generic (
     CTL_PTP_TRANSPCLK_MODE : string := "FALSE";
     CTL_RX_CHECK_ACK : string := "TRUE";
     CTL_RX_CHECK_PREAMBLE : string := "FALSE";
     CTL_RX_CHECK_SFD : string := "FALSE";
     CTL_RX_DELETE_FCS : string := "TRUE";
     CTL_RX_ETYPE_GCP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_GPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_PCP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_PPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_FORWARD_CONTROL : string := "FALSE";
     CTL_RX_IGNORE_FCS : string := "FALSE";
     CTL_RX_MAX_PACKET_LEN : std_logic_vector(14 downto 0) := "101" & X"580";
     CTL_RX_MIN_PACKET_LEN : std_logic_vector(7 downto 0) := X"40";
     CTL_RX_OPCODE_GPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_RX_OPCODE_MAX_GCP : std_logic_vector(15 downto 0) := X"FFFF";
     CTL_RX_OPCODE_MAX_PCP : std_logic_vector(15 downto 0) := X"FFFF";
     CTL_RX_OPCODE_MIN_GCP : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_PCP : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_PPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_RX_PAUSE_DA_MCAST : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_RX_PAUSE_DA_UCAST : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_SA : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PROCESS_LFI : string := "FALSE";
     CTL_RX_VL_LENGTH_MINUS1 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_RX_VL_MARKER_ID0 : std_logic_vector(63 downto 0) := X"C16821003E97DE00";
     CTL_RX_VL_MARKER_ID1 : std_logic_vector(63 downto 0) := X"9D718E00628E7100";
     CTL_RX_VL_MARKER_ID10 : std_logic_vector(63 downto 0) := X"FD6C990002936600";
     CTL_RX_VL_MARKER_ID11 : std_logic_vector(63 downto 0) := X"B9915500466EAA00";
     CTL_RX_VL_MARKER_ID12 : std_logic_vector(63 downto 0) := X"5CB9B200A3464D00";
     CTL_RX_VL_MARKER_ID13 : std_logic_vector(63 downto 0) := X"1AF8BD00E5074200";
     CTL_RX_VL_MARKER_ID14 : std_logic_vector(63 downto 0) := X"83C7CA007C383500";
     CTL_RX_VL_MARKER_ID15 : std_logic_vector(63 downto 0) := X"3536CD00CAC93200";
     CTL_RX_VL_MARKER_ID16 : std_logic_vector(63 downto 0) := X"C4314C003BCEB300";
     CTL_RX_VL_MARKER_ID17 : std_logic_vector(63 downto 0) := X"ADD6B70052294800";
     CTL_RX_VL_MARKER_ID18 : std_logic_vector(63 downto 0) := X"5F662A00A099D500";
     CTL_RX_VL_MARKER_ID19 : std_logic_vector(63 downto 0) := X"C0F0E5003F0F1A00";
     CTL_RX_VL_MARKER_ID2 : std_logic_vector(63 downto 0) := X"594BE800A6B41700";
     CTL_RX_VL_MARKER_ID3 : std_logic_vector(63 downto 0) := X"4D957B00B26A8400";
     CTL_RX_VL_MARKER_ID4 : std_logic_vector(63 downto 0) := X"F50709000AF8F600";
     CTL_RX_VL_MARKER_ID5 : std_logic_vector(63 downto 0) := X"DD14C20022EB3D00";
     CTL_RX_VL_MARKER_ID6 : std_logic_vector(63 downto 0) := X"9A4A260065B5D900";
     CTL_RX_VL_MARKER_ID7 : std_logic_vector(63 downto 0) := X"7B45660084BA9900";
     CTL_RX_VL_MARKER_ID8 : std_logic_vector(63 downto 0) := X"A02476005FDB8900";
     CTL_RX_VL_MARKER_ID9 : std_logic_vector(63 downto 0) := X"68C9FB0097360400";
     CTL_TEST_MODE_PIN_CHAR : string := "FALSE";
     CTL_TX_DA_GPP : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_TX_DA_PPP : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_TX_ETHERTYPE_GPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_TX_ETHERTYPE_PPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_TX_FCS_INS_ENABLE : string := "TRUE";
     CTL_TX_IGNORE_FCS : string := "FALSE";
     CTL_TX_OPCODE_GPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_TX_OPCODE_PPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_TX_PTP_1STEP_ENABLE : string := "FALSE";
     CTL_TX_PTP_LATENCY_ADJUST : std_logic_vector(10 downto 0) := "000" & X"C1";
     CTL_TX_SA_GPP : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_PPP : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_VL_LENGTH_MINUS1 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_TX_VL_MARKER_ID0 : std_logic_vector(63 downto 0) := X"C16821003E97DE00";
     CTL_TX_VL_MARKER_ID1 : std_logic_vector(63 downto 0) := X"9D718E00628E7100";
     CTL_TX_VL_MARKER_ID10 : std_logic_vector(63 downto 0) := X"FD6C990002936600";
     CTL_TX_VL_MARKER_ID11 : std_logic_vector(63 downto 0) := X"B9915500466EAA00";
     CTL_TX_VL_MARKER_ID12 : std_logic_vector(63 downto 0) := X"5CB9B200A3464D00";
     CTL_TX_VL_MARKER_ID13 : std_logic_vector(63 downto 0) := X"1AF8BD00E5074200";
     CTL_TX_VL_MARKER_ID14 : std_logic_vector(63 downto 0) := X"83C7CA007C383500";
     CTL_TX_VL_MARKER_ID15 : std_logic_vector(63 downto 0) := X"3536CD00CAC93200";
     CTL_TX_VL_MARKER_ID16 : std_logic_vector(63 downto 0) := X"C4314C003BCEB300";
     CTL_TX_VL_MARKER_ID17 : std_logic_vector(63 downto 0) := X"ADD6B70052294800";
     CTL_TX_VL_MARKER_ID18 : std_logic_vector(63 downto 0) := X"5F662A00A099D500";
     CTL_TX_VL_MARKER_ID19 : std_logic_vector(63 downto 0) := X"C0F0E5003F0F1A00";
     CTL_TX_VL_MARKER_ID2 : std_logic_vector(63 downto 0) := X"594BE800A6B41700";
     CTL_TX_VL_MARKER_ID3 : std_logic_vector(63 downto 0) := X"4D957B00B26A8400";
     CTL_TX_VL_MARKER_ID4 : std_logic_vector(63 downto 0) := X"F50709000AF8F600";
     CTL_TX_VL_MARKER_ID5 : std_logic_vector(63 downto 0) := X"DD14C20022EB3D00";
     CTL_TX_VL_MARKER_ID6 : std_logic_vector(63 downto 0) := X"9A4A260065B5D900";
     CTL_TX_VL_MARKER_ID7 : std_logic_vector(63 downto 0) := X"7B45660084BA9900";
     CTL_TX_VL_MARKER_ID8 : std_logic_vector(63 downto 0) := X"A02476005FDB8900";
     CTL_TX_VL_MARKER_ID9 : std_logic_vector(63 downto 0) := X"68C9FB0097360400";
     SIM_VERSION : string := "2.0";
     TEST_MODE_PIN_CHAR : string := "FALSE"
  );
  port (
     DRP_DO : out std_logic_vector(15 downto 0);
     DRP_RDY : out std_ulogic;
     RX_DATAOUT0 : out std_logic_vector(127 downto 0);
     RX_DATAOUT1 : out std_logic_vector(127 downto 0);
     RX_DATAOUT2 : out std_logic_vector(127 downto 0);
     RX_DATAOUT3 : out std_logic_vector(127 downto 0);
     RX_ENAOUT0 : out std_ulogic;
     RX_ENAOUT1 : out std_ulogic;
     RX_ENAOUT2 : out std_ulogic;
     RX_ENAOUT3 : out std_ulogic;
     RX_EOPOUT0 : out std_ulogic;
     RX_EOPOUT1 : out std_ulogic;
     RX_EOPOUT2 : out std_ulogic;
     RX_EOPOUT3 : out std_ulogic;
     RX_ERROUT0 : out std_ulogic;
     RX_ERROUT1 : out std_ulogic;
     RX_ERROUT2 : out std_ulogic;
     RX_ERROUT3 : out std_ulogic;
     RX_LANE_ALIGNER_FILL_0 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_1 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_10 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_11 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_12 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_13 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_14 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_15 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_16 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_17 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_18 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_19 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_2 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_3 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_4 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_5 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_6 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_7 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_8 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_9 : out std_logic_vector(6 downto 0);
     RX_MTYOUT0 : out std_logic_vector(3 downto 0);
     RX_MTYOUT1 : out std_logic_vector(3 downto 0);
     RX_MTYOUT2 : out std_logic_vector(3 downto 0);
     RX_MTYOUT3 : out std_logic_vector(3 downto 0);
     RX_PTP_PCSLANE_OUT : out std_logic_vector(4 downto 0);
     RX_PTP_TSTAMP_OUT : out std_logic_vector(79 downto 0);
     RX_SOPOUT0 : out std_ulogic;
     RX_SOPOUT1 : out std_ulogic;
     RX_SOPOUT2 : out std_ulogic;
     RX_SOPOUT3 : out std_ulogic;
     STAT_RX_ALIGNED : out std_ulogic;
     STAT_RX_ALIGNED_ERR : out std_ulogic;
     STAT_RX_BAD_CODE : out std_logic_vector(6 downto 0);
     STAT_RX_BAD_FCS : out std_logic_vector(3 downto 0);
     STAT_RX_BAD_PREAMBLE : out std_ulogic;
     STAT_RX_BAD_SFD : out std_ulogic;
     STAT_RX_BIP_ERR_0 : out std_ulogic;
     STAT_RX_BIP_ERR_1 : out std_ulogic;
     STAT_RX_BIP_ERR_10 : out std_ulogic;
     STAT_RX_BIP_ERR_11 : out std_ulogic;
     STAT_RX_BIP_ERR_12 : out std_ulogic;
     STAT_RX_BIP_ERR_13 : out std_ulogic;
     STAT_RX_BIP_ERR_14 : out std_ulogic;
     STAT_RX_BIP_ERR_15 : out std_ulogic;
     STAT_RX_BIP_ERR_16 : out std_ulogic;
     STAT_RX_BIP_ERR_17 : out std_ulogic;
     STAT_RX_BIP_ERR_18 : out std_ulogic;
     STAT_RX_BIP_ERR_19 : out std_ulogic;
     STAT_RX_BIP_ERR_2 : out std_ulogic;
     STAT_RX_BIP_ERR_3 : out std_ulogic;
     STAT_RX_BIP_ERR_4 : out std_ulogic;
     STAT_RX_BIP_ERR_5 : out std_ulogic;
     STAT_RX_BIP_ERR_6 : out std_ulogic;
     STAT_RX_BIP_ERR_7 : out std_ulogic;
     STAT_RX_BIP_ERR_8 : out std_ulogic;
     STAT_RX_BIP_ERR_9 : out std_ulogic;
     STAT_RX_BLOCK_LOCK : out std_logic_vector(19 downto 0);
     STAT_RX_BROADCAST : out std_ulogic;
     STAT_RX_FRAGMENT : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_0 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_1 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_10 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_11 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_12 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_13 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_14 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_15 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_16 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_17 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_18 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_19 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_2 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_3 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_4 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_5 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_6 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_7 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_8 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_9 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_VALID_0 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_1 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_10 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_11 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_12 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_13 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_14 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_15 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_16 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_17 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_18 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_19 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_2 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_3 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_4 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_5 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_6 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_7 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_8 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_9 : out std_ulogic;
     STAT_RX_GOT_SIGNAL_OS : out std_ulogic;
     STAT_RX_HI_BER : out std_ulogic;
     STAT_RX_INRANGEERR : out std_ulogic;
     STAT_RX_INTERNAL_LOCAL_FAULT : out std_ulogic;
     STAT_RX_JABBER : out std_ulogic;
     STAT_RX_LANE0_VLM_BIP7 : out std_logic_vector(7 downto 0);
     STAT_RX_LANE0_VLM_BIP7_VALID : out std_ulogic;
     STAT_RX_LOCAL_FAULT : out std_ulogic;
     STAT_RX_MF_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MF_LEN_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MF_REPEAT_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MISALIGNED : out std_ulogic;
     STAT_RX_MULTICAST : out std_ulogic;
     STAT_RX_OVERSIZE : out std_ulogic;
     STAT_RX_PACKET_1024_1518_BYTES : out std_ulogic;
     STAT_RX_PACKET_128_255_BYTES : out std_ulogic;
     STAT_RX_PACKET_1519_1522_BYTES : out std_ulogic;
     STAT_RX_PACKET_1523_1548_BYTES : out std_ulogic;
     STAT_RX_PACKET_1549_2047_BYTES : out std_ulogic;
     STAT_RX_PACKET_2048_4095_BYTES : out std_ulogic;
     STAT_RX_PACKET_256_511_BYTES : out std_ulogic;
     STAT_RX_PACKET_4096_8191_BYTES : out std_ulogic;
     STAT_RX_PACKET_512_1023_BYTES : out std_ulogic;
     STAT_RX_PACKET_64_BYTES : out std_ulogic;
     STAT_RX_PACKET_65_127_BYTES : out std_ulogic;
     STAT_RX_PACKET_8192_9215_BYTES : out std_ulogic;
     STAT_RX_PACKET_BAD_FCS : out std_ulogic;
     STAT_RX_PACKET_LARGE : out std_ulogic;
     STAT_RX_PACKET_SMALL : out std_logic_vector(3 downto 0);
     STAT_RX_PAUSE : out std_ulogic;
     STAT_RX_PAUSE_QUANTA0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA4 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA5 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA6 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA7 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA8 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_REQ : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_VALID : out std_logic_vector(8 downto 0);
     STAT_RX_RECEIVED_LOCAL_FAULT : out std_ulogic;
     STAT_RX_REMOTE_FAULT : out std_ulogic;
     STAT_RX_STATUS : out std_ulogic;
     STAT_RX_STOMPED_FCS : out std_logic_vector(3 downto 0);
     STAT_RX_SYNCED : out std_logic_vector(19 downto 0);
     STAT_RX_SYNCED_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_TEST_PATTERN_MISMATCH : out std_logic_vector(2 downto 0);
     STAT_RX_TOOLONG : out std_ulogic;
     STAT_RX_TOTAL_BYTES : out std_logic_vector(7 downto 0);
     STAT_RX_TOTAL_GOOD_BYTES : out std_logic_vector(13 downto 0);
     STAT_RX_TOTAL_GOOD_PACKETS : out std_ulogic;
     STAT_RX_TOTAL_PACKETS : out std_logic_vector(3 downto 0);
     STAT_RX_TRUNCATED : out std_ulogic;
     STAT_RX_UNDERSIZE : out std_logic_vector(3 downto 0);
     STAT_RX_UNICAST : out std_ulogic;
     STAT_RX_USER_PAUSE : out std_ulogic;
     STAT_RX_VLAN : out std_ulogic;
     STAT_RX_VL_DEMUXED : out std_logic_vector(19 downto 0);
     STAT_RX_VL_NUMBER_0 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_1 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_10 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_11 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_12 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_13 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_14 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_15 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_16 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_17 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_18 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_19 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_2 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_3 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_4 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_5 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_6 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_7 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_8 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_9 : out std_logic_vector(4 downto 0);
     STAT_TX_BAD_FCS : out std_ulogic;
     STAT_TX_BROADCAST : out std_ulogic;
     STAT_TX_FRAME_ERROR : out std_ulogic;
     STAT_TX_LOCAL_FAULT : out std_ulogic;
     STAT_TX_MULTICAST : out std_ulogic;
     STAT_TX_PACKET_1024_1518_BYTES : out std_ulogic;
     STAT_TX_PACKET_128_255_BYTES : out std_ulogic;
     STAT_TX_PACKET_1519_1522_BYTES : out std_ulogic;
     STAT_TX_PACKET_1523_1548_BYTES : out std_ulogic;
     STAT_TX_PACKET_1549_2047_BYTES : out std_ulogic;
     STAT_TX_PACKET_2048_4095_BYTES : out std_ulogic;
     STAT_TX_PACKET_256_511_BYTES : out std_ulogic;
     STAT_TX_PACKET_4096_8191_BYTES : out std_ulogic;
     STAT_TX_PACKET_512_1023_BYTES : out std_ulogic;
     STAT_TX_PACKET_64_BYTES : out std_ulogic;
     STAT_TX_PACKET_65_127_BYTES : out std_ulogic;
     STAT_TX_PACKET_8192_9215_BYTES : out std_ulogic;
     STAT_TX_PACKET_LARGE : out std_ulogic;
     STAT_TX_PACKET_SMALL : out std_ulogic;
     STAT_TX_PAUSE : out std_ulogic;
     STAT_TX_PAUSE_VALID : out std_logic_vector(8 downto 0);
     STAT_TX_PTP_FIFO_READ_ERROR : out std_ulogic;
     STAT_TX_PTP_FIFO_WRITE_ERROR : out std_ulogic;
     STAT_TX_TOTAL_BYTES : out std_logic_vector(6 downto 0);
     STAT_TX_TOTAL_GOOD_BYTES : out std_logic_vector(13 downto 0);
     STAT_TX_TOTAL_GOOD_PACKETS : out std_ulogic;
     STAT_TX_TOTAL_PACKETS : out std_ulogic;
     STAT_TX_UNICAST : out std_ulogic;
     STAT_TX_USER_PAUSE : out std_ulogic;
     STAT_TX_VLAN : out std_ulogic;
     TX_OVFOUT : out std_ulogic;
     TX_PTP_PCSLANE_OUT : out std_logic_vector(4 downto 0);
     TX_PTP_TSTAMP_OUT : out std_logic_vector(79 downto 0);
     TX_PTP_TSTAMP_TAG_OUT : out std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_VALID_OUT : out std_ulogic;
     TX_RDYOUT : out std_ulogic;
     TX_SERDES_ALT_DATA0 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA1 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA2 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA3 : out std_logic_vector(15 downto 0);
     TX_SERDES_DATA0 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA1 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA2 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA3 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA4 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA5 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA6 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA7 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA8 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA9 : out std_logic_vector(31 downto 0);
     TX_UNFOUT : out std_ulogic;
     CTL_CAUI4_MODE : in std_ulogic;
     CTL_RX_CHECK_ETYPE_GCP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_GPP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_PCP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_PPP : in std_ulogic;
     CTL_RX_CHECK_MCAST_GCP : in std_ulogic;
     CTL_RX_CHECK_MCAST_GPP : in std_ulogic;
     CTL_RX_CHECK_MCAST_PCP : in std_ulogic;
     CTL_RX_CHECK_MCAST_PPP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_GCP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_GPP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_PCP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_PPP : in std_ulogic;
     CTL_RX_CHECK_SA_GCP : in std_ulogic;
     CTL_RX_CHECK_SA_GPP : in std_ulogic;
     CTL_RX_CHECK_SA_PCP : in std_ulogic;
     CTL_RX_CHECK_SA_PPP : in std_ulogic;
     CTL_RX_CHECK_UCAST_GCP : in std_ulogic;
     CTL_RX_CHECK_UCAST_GPP : in std_ulogic;
     CTL_RX_CHECK_UCAST_PCP : in std_ulogic;
     CTL_RX_CHECK_UCAST_PPP : in std_ulogic;
     CTL_RX_ENABLE : in std_ulogic;
     CTL_RX_ENABLE_GCP : in std_ulogic;
     CTL_RX_ENABLE_GPP : in std_ulogic;
     CTL_RX_ENABLE_PCP : in std_ulogic;
     CTL_RX_ENABLE_PPP : in std_ulogic;
     CTL_RX_FORCE_RESYNC : in std_ulogic;
     CTL_RX_PAUSE_ACK : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ENABLE : in std_logic_vector(8 downto 0);
     CTL_RX_SYSTEMTIMERIN : in std_logic_vector(79 downto 0);
     CTL_RX_TEST_PATTERN : in std_ulogic;
     CTL_TX_ENABLE : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE_VALUE : in std_logic_vector(7 downto 0);
     CTL_TX_PAUSE_ENABLE : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_QUANTA0 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA1 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA2 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA3 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA4 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA5 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA6 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA7 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA8 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER0 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER1 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER2 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER3 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER4 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER5 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER6 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER7 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER8 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REQ : in std_logic_vector(8 downto 0);
     CTL_TX_PTP_VLANE_ADJUST_MODE : in std_ulogic;
     CTL_TX_RESEND_PAUSE : in std_ulogic;
     CTL_TX_SEND_IDLE : in std_ulogic;
     CTL_TX_SEND_RFI : in std_ulogic;
     CTL_TX_SYSTEMTIMERIN : in std_logic_vector(79 downto 0);
     CTL_TX_TEST_PATTERN : in std_ulogic;
     DRP_ADDR : in std_logic_vector(9 downto 0);
     DRP_CLK : in std_ulogic;
     DRP_DI : in std_logic_vector(15 downto 0);
     DRP_EN : in std_ulogic;
     DRP_WE : in std_ulogic;
     RX_CLK : in std_ulogic;
     RX_RESET : in std_ulogic;
     RX_SERDES_ALT_DATA0 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA1 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA2 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA3 : in std_logic_vector(15 downto 0);
     RX_SERDES_CLK : in std_logic_vector(9 downto 0);
     RX_SERDES_DATA0 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA1 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA2 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA3 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA4 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA5 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA6 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA7 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA8 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA9 : in std_logic_vector(31 downto 0);
     RX_SERDES_RESET : in std_logic_vector(9 downto 0);
     TX_CLK : in std_ulogic;
     TX_DATAIN0 : in std_logic_vector(127 downto 0);
     TX_DATAIN1 : in std_logic_vector(127 downto 0);
     TX_DATAIN2 : in std_logic_vector(127 downto 0);
     TX_DATAIN3 : in std_logic_vector(127 downto 0);
     TX_ENAIN0 : in std_ulogic;
     TX_ENAIN1 : in std_ulogic;
     TX_ENAIN2 : in std_ulogic;
     TX_ENAIN3 : in std_ulogic;
     TX_EOPIN0 : in std_ulogic;
     TX_EOPIN1 : in std_ulogic;
     TX_EOPIN2 : in std_ulogic;
     TX_EOPIN3 : in std_ulogic;
     TX_ERRIN0 : in std_ulogic;
     TX_ERRIN1 : in std_ulogic;
     TX_ERRIN2 : in std_ulogic;
     TX_ERRIN3 : in std_ulogic;
     TX_MTYIN0 : in std_logic_vector(3 downto 0);
     TX_MTYIN1 : in std_logic_vector(3 downto 0);
     TX_MTYIN2 : in std_logic_vector(3 downto 0);
     TX_MTYIN3 : in std_logic_vector(3 downto 0);
     TX_PTP_1588OP_IN : in std_logic_vector(1 downto 0);
     TX_PTP_CHKSUM_OFFSET_IN : in std_logic_vector(15 downto 0);
     TX_PTP_RXTSTAMP_IN : in std_logic_vector(63 downto 0);
     TX_PTP_TAG_FIELD_IN : in std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_OFFSET_IN : in std_logic_vector(15 downto 0);
     TX_PTP_UPD_CHKSUM_IN : in std_ulogic;
     TX_RESET : in std_ulogic;
     TX_SOPIN0 : in std_ulogic;
     TX_SOPIN1 : in std_ulogic;
     TX_SOPIN2 : in std_ulogic;
     TX_SOPIN3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CMAC : component is "PRIMITIVE";

----- component CMACE4 -----
component CMACE4
  generic (
     CTL_PTP_TRANSPCLK_MODE : string := "FALSE";
     CTL_RX_CHECK_ACK : string := "TRUE";
     CTL_RX_CHECK_PREAMBLE : string := "FALSE";
     CTL_RX_CHECK_SFD : string := "FALSE";
     CTL_RX_DELETE_FCS : string := "TRUE";
     CTL_RX_ETYPE_GCP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_GPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_PCP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_PPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_FORWARD_CONTROL : string := "FALSE";
     CTL_RX_IGNORE_FCS : string := "FALSE";
     CTL_RX_MAX_PACKET_LEN : std_logic_vector(14 downto 0) := "010" & X"580";
     CTL_RX_MIN_PACKET_LEN : std_logic_vector(7 downto 0) := X"40";
     CTL_RX_OPCODE_GPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_RX_OPCODE_MAX_GCP : std_logic_vector(15 downto 0) := X"FFFF";
     CTL_RX_OPCODE_MAX_PCP : std_logic_vector(15 downto 0) := X"FFFF";
     CTL_RX_OPCODE_MIN_GCP : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_PCP : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_PPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_RX_PAUSE_DA_MCAST : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_RX_PAUSE_DA_UCAST : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_SA : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PROCESS_LFI : string := "FALSE";
     CTL_RX_RSFEC_AM_THRESHOLD : std_logic_vector(8 downto 0) := "0" & X"46";
     CTL_RX_RSFEC_FILL_ADJUST : std_logic_vector(1 downto 0) := "00";
     CTL_RX_VL_LENGTH_MINUS1 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_RX_VL_MARKER_ID0 : std_logic_vector(63 downto 0) := X"C16821003E97DE00";
     CTL_RX_VL_MARKER_ID1 : std_logic_vector(63 downto 0) := X"9D718E00628E7100";
     CTL_RX_VL_MARKER_ID10 : std_logic_vector(63 downto 0) := X"FD6C990002936600";
     CTL_RX_VL_MARKER_ID11 : std_logic_vector(63 downto 0) := X"B9915500466EAA00";
     CTL_RX_VL_MARKER_ID12 : std_logic_vector(63 downto 0) := X"5CB9B200A3464D00";
     CTL_RX_VL_MARKER_ID13 : std_logic_vector(63 downto 0) := X"1AF8BD00E5074200";
     CTL_RX_VL_MARKER_ID14 : std_logic_vector(63 downto 0) := X"83C7CA007C383500";
     CTL_RX_VL_MARKER_ID15 : std_logic_vector(63 downto 0) := X"3536CD00CAC93200";
     CTL_RX_VL_MARKER_ID16 : std_logic_vector(63 downto 0) := X"C4314C003BCEB300";
     CTL_RX_VL_MARKER_ID17 : std_logic_vector(63 downto 0) := X"ADD6B70052294800";
     CTL_RX_VL_MARKER_ID18 : std_logic_vector(63 downto 0) := X"5F662A00A099D500";
     CTL_RX_VL_MARKER_ID19 : std_logic_vector(63 downto 0) := X"C0F0E5003F0F1A00";
     CTL_RX_VL_MARKER_ID2 : std_logic_vector(63 downto 0) := X"594BE800A6B41700";
     CTL_RX_VL_MARKER_ID3 : std_logic_vector(63 downto 0) := X"4D957B00B26A8400";
     CTL_RX_VL_MARKER_ID4 : std_logic_vector(63 downto 0) := X"F50709000AF8F600";
     CTL_RX_VL_MARKER_ID5 : std_logic_vector(63 downto 0) := X"DD14C20022EB3D00";
     CTL_RX_VL_MARKER_ID6 : std_logic_vector(63 downto 0) := X"9A4A260065B5D900";
     CTL_RX_VL_MARKER_ID7 : std_logic_vector(63 downto 0) := X"7B45660084BA9900";
     CTL_RX_VL_MARKER_ID8 : std_logic_vector(63 downto 0) := X"A02476005FDB8900";
     CTL_RX_VL_MARKER_ID9 : std_logic_vector(63 downto 0) := X"68C9FB0097360400";
     CTL_TEST_MODE_PIN_CHAR : string := "FALSE";
     CTL_TX_CUSTOM_PREAMBLE_ENABLE : string := "FALSE";
     CTL_TX_DA_GPP : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_TX_DA_PPP : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_TX_ETHERTYPE_GPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_TX_ETHERTYPE_PPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_TX_FCS_INS_ENABLE : string := "TRUE";
     CTL_TX_IGNORE_FCS : string := "FALSE";
     CTL_TX_IPG_VALUE : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_OPCODE_GPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_TX_OPCODE_PPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_TX_PTP_1STEP_ENABLE : string := "FALSE";
     CTL_TX_PTP_LATENCY_ADJUST : std_logic_vector(10 downto 0) := "010" & X"C1";
     CTL_TX_SA_GPP : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_PPP : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_VL_LENGTH_MINUS1 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_TX_VL_MARKER_ID0 : std_logic_vector(63 downto 0) := X"C16821003E97DE00";
     CTL_TX_VL_MARKER_ID1 : std_logic_vector(63 downto 0) := X"9D718E00628E7100";
     CTL_TX_VL_MARKER_ID10 : std_logic_vector(63 downto 0) := X"FD6C990002936600";
     CTL_TX_VL_MARKER_ID11 : std_logic_vector(63 downto 0) := X"B9915500466EAA00";
     CTL_TX_VL_MARKER_ID12 : std_logic_vector(63 downto 0) := X"5CB9B200A3464D00";
     CTL_TX_VL_MARKER_ID13 : std_logic_vector(63 downto 0) := X"1AF8BD00E5074200";
     CTL_TX_VL_MARKER_ID14 : std_logic_vector(63 downto 0) := X"83C7CA007C383500";
     CTL_TX_VL_MARKER_ID15 : std_logic_vector(63 downto 0) := X"3536CD00CAC93200";
     CTL_TX_VL_MARKER_ID16 : std_logic_vector(63 downto 0) := X"C4314C003BCEB300";
     CTL_TX_VL_MARKER_ID17 : std_logic_vector(63 downto 0) := X"ADD6B70052294800";
     CTL_TX_VL_MARKER_ID18 : std_logic_vector(63 downto 0) := X"5F662A00A099D500";
     CTL_TX_VL_MARKER_ID19 : std_logic_vector(63 downto 0) := X"C0F0E5003F0F1A00";
     CTL_TX_VL_MARKER_ID2 : std_logic_vector(63 downto 0) := X"594BE800A6B41700";
     CTL_TX_VL_MARKER_ID3 : std_logic_vector(63 downto 0) := X"4D957B00B26A8400";
     CTL_TX_VL_MARKER_ID4 : std_logic_vector(63 downto 0) := X"F50709000AF8F600";
     CTL_TX_VL_MARKER_ID5 : std_logic_vector(63 downto 0) := X"DD14C20022EB3D00";
     CTL_TX_VL_MARKER_ID6 : std_logic_vector(63 downto 0) := X"9A4A260065B5D900";
     CTL_TX_VL_MARKER_ID7 : std_logic_vector(63 downto 0) := X"7B45660084BA9900";
     CTL_TX_VL_MARKER_ID8 : std_logic_vector(63 downto 0) := X"A02476005FDB8900";
     CTL_TX_VL_MARKER_ID9 : std_logic_vector(63 downto 0) := X"68C9FB0097360400";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     TEST_MODE_PIN_CHAR : string := "FALSE"
  );
  port (
     DRP_DO : out std_logic_vector(15 downto 0);
     DRP_RDY : out std_ulogic;
     RSFEC_BYPASS_RX_DOUT : out std_logic_vector(329 downto 0);
     RSFEC_BYPASS_RX_DOUT_CW_START : out std_ulogic;
     RSFEC_BYPASS_RX_DOUT_VALID : out std_ulogic;
     RSFEC_BYPASS_TX_DOUT : out std_logic_vector(329 downto 0);
     RSFEC_BYPASS_TX_DOUT_CW_START : out std_ulogic;
     RSFEC_BYPASS_TX_DOUT_VALID : out std_ulogic;
     RX_DATAOUT0 : out std_logic_vector(127 downto 0);
     RX_DATAOUT1 : out std_logic_vector(127 downto 0);
     RX_DATAOUT2 : out std_logic_vector(127 downto 0);
     RX_DATAOUT3 : out std_logic_vector(127 downto 0);
     RX_ENAOUT0 : out std_ulogic;
     RX_ENAOUT1 : out std_ulogic;
     RX_ENAOUT2 : out std_ulogic;
     RX_ENAOUT3 : out std_ulogic;
     RX_EOPOUT0 : out std_ulogic;
     RX_EOPOUT1 : out std_ulogic;
     RX_EOPOUT2 : out std_ulogic;
     RX_EOPOUT3 : out std_ulogic;
     RX_ERROUT0 : out std_ulogic;
     RX_ERROUT1 : out std_ulogic;
     RX_ERROUT2 : out std_ulogic;
     RX_ERROUT3 : out std_ulogic;
     RX_LANE_ALIGNER_FILL_0 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_1 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_10 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_11 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_12 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_13 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_14 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_15 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_16 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_17 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_18 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_19 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_2 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_3 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_4 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_5 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_6 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_7 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_8 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_9 : out std_logic_vector(6 downto 0);
     RX_MTYOUT0 : out std_logic_vector(3 downto 0);
     RX_MTYOUT1 : out std_logic_vector(3 downto 0);
     RX_MTYOUT2 : out std_logic_vector(3 downto 0);
     RX_MTYOUT3 : out std_logic_vector(3 downto 0);
     RX_OTN_BIP8_0 : out std_logic_vector(7 downto 0);
     RX_OTN_BIP8_1 : out std_logic_vector(7 downto 0);
     RX_OTN_BIP8_2 : out std_logic_vector(7 downto 0);
     RX_OTN_BIP8_3 : out std_logic_vector(7 downto 0);
     RX_OTN_BIP8_4 : out std_logic_vector(7 downto 0);
     RX_OTN_DATA_0 : out std_logic_vector(65 downto 0);
     RX_OTN_DATA_1 : out std_logic_vector(65 downto 0);
     RX_OTN_DATA_2 : out std_logic_vector(65 downto 0);
     RX_OTN_DATA_3 : out std_logic_vector(65 downto 0);
     RX_OTN_DATA_4 : out std_logic_vector(65 downto 0);
     RX_OTN_ENA : out std_ulogic;
     RX_OTN_LANE0 : out std_ulogic;
     RX_OTN_VLMARKER : out std_ulogic;
     RX_PREOUT : out std_logic_vector(55 downto 0);
     RX_PTP_PCSLANE_OUT : out std_logic_vector(4 downto 0);
     RX_PTP_TSTAMP_OUT : out std_logic_vector(79 downto 0);
     RX_SOPOUT0 : out std_ulogic;
     RX_SOPOUT1 : out std_ulogic;
     RX_SOPOUT2 : out std_ulogic;
     RX_SOPOUT3 : out std_ulogic;
     STAT_RX_ALIGNED : out std_ulogic;
     STAT_RX_ALIGNED_ERR : out std_ulogic;
     STAT_RX_BAD_CODE : out std_logic_vector(2 downto 0);
     STAT_RX_BAD_FCS : out std_logic_vector(2 downto 0);
     STAT_RX_BAD_PREAMBLE : out std_ulogic;
     STAT_RX_BAD_SFD : out std_ulogic;
     STAT_RX_BIP_ERR_0 : out std_ulogic;
     STAT_RX_BIP_ERR_1 : out std_ulogic;
     STAT_RX_BIP_ERR_10 : out std_ulogic;
     STAT_RX_BIP_ERR_11 : out std_ulogic;
     STAT_RX_BIP_ERR_12 : out std_ulogic;
     STAT_RX_BIP_ERR_13 : out std_ulogic;
     STAT_RX_BIP_ERR_14 : out std_ulogic;
     STAT_RX_BIP_ERR_15 : out std_ulogic;
     STAT_RX_BIP_ERR_16 : out std_ulogic;
     STAT_RX_BIP_ERR_17 : out std_ulogic;
     STAT_RX_BIP_ERR_18 : out std_ulogic;
     STAT_RX_BIP_ERR_19 : out std_ulogic;
     STAT_RX_BIP_ERR_2 : out std_ulogic;
     STAT_RX_BIP_ERR_3 : out std_ulogic;
     STAT_RX_BIP_ERR_4 : out std_ulogic;
     STAT_RX_BIP_ERR_5 : out std_ulogic;
     STAT_RX_BIP_ERR_6 : out std_ulogic;
     STAT_RX_BIP_ERR_7 : out std_ulogic;
     STAT_RX_BIP_ERR_8 : out std_ulogic;
     STAT_RX_BIP_ERR_9 : out std_ulogic;
     STAT_RX_BLOCK_LOCK : out std_logic_vector(19 downto 0);
     STAT_RX_BROADCAST : out std_ulogic;
     STAT_RX_FRAGMENT : out std_logic_vector(2 downto 0);
     STAT_RX_FRAMING_ERR_0 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_1 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_10 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_11 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_12 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_13 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_14 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_15 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_16 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_17 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_18 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_19 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_2 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_3 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_4 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_5 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_6 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_7 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_8 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_9 : out std_logic_vector(1 downto 0);
     STAT_RX_FRAMING_ERR_VALID_0 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_1 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_10 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_11 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_12 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_13 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_14 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_15 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_16 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_17 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_18 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_19 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_2 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_3 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_4 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_5 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_6 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_7 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_8 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_9 : out std_ulogic;
     STAT_RX_GOT_SIGNAL_OS : out std_ulogic;
     STAT_RX_HI_BER : out std_ulogic;
     STAT_RX_INRANGEERR : out std_ulogic;
     STAT_RX_INTERNAL_LOCAL_FAULT : out std_ulogic;
     STAT_RX_JABBER : out std_ulogic;
     STAT_RX_LANE0_VLM_BIP7 : out std_logic_vector(7 downto 0);
     STAT_RX_LANE0_VLM_BIP7_VALID : out std_ulogic;
     STAT_RX_LOCAL_FAULT : out std_ulogic;
     STAT_RX_MF_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MF_LEN_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MF_REPEAT_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MISALIGNED : out std_ulogic;
     STAT_RX_MULTICAST : out std_ulogic;
     STAT_RX_OVERSIZE : out std_ulogic;
     STAT_RX_PACKET_1024_1518_BYTES : out std_ulogic;
     STAT_RX_PACKET_128_255_BYTES : out std_ulogic;
     STAT_RX_PACKET_1519_1522_BYTES : out std_ulogic;
     STAT_RX_PACKET_1523_1548_BYTES : out std_ulogic;
     STAT_RX_PACKET_1549_2047_BYTES : out std_ulogic;
     STAT_RX_PACKET_2048_4095_BYTES : out std_ulogic;
     STAT_RX_PACKET_256_511_BYTES : out std_ulogic;
     STAT_RX_PACKET_4096_8191_BYTES : out std_ulogic;
     STAT_RX_PACKET_512_1023_BYTES : out std_ulogic;
     STAT_RX_PACKET_64_BYTES : out std_ulogic;
     STAT_RX_PACKET_65_127_BYTES : out std_ulogic;
     STAT_RX_PACKET_8192_9215_BYTES : out std_ulogic;
     STAT_RX_PACKET_BAD_FCS : out std_ulogic;
     STAT_RX_PACKET_LARGE : out std_ulogic;
     STAT_RX_PACKET_SMALL : out std_logic_vector(2 downto 0);
     STAT_RX_PAUSE : out std_ulogic;
     STAT_RX_PAUSE_QUANTA0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA4 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA5 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA6 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA7 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA8 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_REQ : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_VALID : out std_logic_vector(8 downto 0);
     STAT_RX_RECEIVED_LOCAL_FAULT : out std_ulogic;
     STAT_RX_REMOTE_FAULT : out std_ulogic;
     STAT_RX_RSFEC_AM_LOCK0 : out std_ulogic;
     STAT_RX_RSFEC_AM_LOCK1 : out std_ulogic;
     STAT_RX_RSFEC_AM_LOCK2 : out std_ulogic;
     STAT_RX_RSFEC_AM_LOCK3 : out std_ulogic;
     STAT_RX_RSFEC_CORRECTED_CW_INC : out std_ulogic;
     STAT_RX_RSFEC_CW_INC : out std_ulogic;
     STAT_RX_RSFEC_ERR_COUNT0_INC : out std_logic_vector(2 downto 0);
     STAT_RX_RSFEC_ERR_COUNT1_INC : out std_logic_vector(2 downto 0);
     STAT_RX_RSFEC_ERR_COUNT2_INC : out std_logic_vector(2 downto 0);
     STAT_RX_RSFEC_ERR_COUNT3_INC : out std_logic_vector(2 downto 0);
     STAT_RX_RSFEC_HI_SER : out std_ulogic;
     STAT_RX_RSFEC_LANE_ALIGNMENT_STATUS : out std_ulogic;
     STAT_RX_RSFEC_LANE_FILL_0 : out std_logic_vector(13 downto 0);
     STAT_RX_RSFEC_LANE_FILL_1 : out std_logic_vector(13 downto 0);
     STAT_RX_RSFEC_LANE_FILL_2 : out std_logic_vector(13 downto 0);
     STAT_RX_RSFEC_LANE_FILL_3 : out std_logic_vector(13 downto 0);
     STAT_RX_RSFEC_LANE_MAPPING : out std_logic_vector(7 downto 0);
     STAT_RX_RSFEC_RSVD : out std_logic_vector(31 downto 0);
     STAT_RX_RSFEC_UNCORRECTED_CW_INC : out std_ulogic;
     STAT_RX_STATUS : out std_ulogic;
     STAT_RX_STOMPED_FCS : out std_logic_vector(2 downto 0);
     STAT_RX_SYNCED : out std_logic_vector(19 downto 0);
     STAT_RX_SYNCED_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_TEST_PATTERN_MISMATCH : out std_logic_vector(2 downto 0);
     STAT_RX_TOOLONG : out std_ulogic;
     STAT_RX_TOTAL_BYTES : out std_logic_vector(6 downto 0);
     STAT_RX_TOTAL_GOOD_BYTES : out std_logic_vector(13 downto 0);
     STAT_RX_TOTAL_GOOD_PACKETS : out std_ulogic;
     STAT_RX_TOTAL_PACKETS : out std_logic_vector(2 downto 0);
     STAT_RX_TRUNCATED : out std_ulogic;
     STAT_RX_UNDERSIZE : out std_logic_vector(2 downto 0);
     STAT_RX_UNICAST : out std_ulogic;
     STAT_RX_USER_PAUSE : out std_ulogic;
     STAT_RX_VLAN : out std_ulogic;
     STAT_RX_VL_DEMUXED : out std_logic_vector(19 downto 0);
     STAT_RX_VL_NUMBER_0 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_1 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_10 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_11 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_12 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_13 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_14 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_15 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_16 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_17 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_18 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_19 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_2 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_3 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_4 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_5 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_6 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_7 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_8 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_9 : out std_logic_vector(4 downto 0);
     STAT_TX_BAD_FCS : out std_ulogic;
     STAT_TX_BROADCAST : out std_ulogic;
     STAT_TX_FRAME_ERROR : out std_ulogic;
     STAT_TX_LOCAL_FAULT : out std_ulogic;
     STAT_TX_MULTICAST : out std_ulogic;
     STAT_TX_PACKET_1024_1518_BYTES : out std_ulogic;
     STAT_TX_PACKET_128_255_BYTES : out std_ulogic;
     STAT_TX_PACKET_1519_1522_BYTES : out std_ulogic;
     STAT_TX_PACKET_1523_1548_BYTES : out std_ulogic;
     STAT_TX_PACKET_1549_2047_BYTES : out std_ulogic;
     STAT_TX_PACKET_2048_4095_BYTES : out std_ulogic;
     STAT_TX_PACKET_256_511_BYTES : out std_ulogic;
     STAT_TX_PACKET_4096_8191_BYTES : out std_ulogic;
     STAT_TX_PACKET_512_1023_BYTES : out std_ulogic;
     STAT_TX_PACKET_64_BYTES : out std_ulogic;
     STAT_TX_PACKET_65_127_BYTES : out std_ulogic;
     STAT_TX_PACKET_8192_9215_BYTES : out std_ulogic;
     STAT_TX_PACKET_LARGE : out std_ulogic;
     STAT_TX_PACKET_SMALL : out std_ulogic;
     STAT_TX_PAUSE : out std_ulogic;
     STAT_TX_PAUSE_VALID : out std_logic_vector(8 downto 0);
     STAT_TX_PTP_FIFO_READ_ERROR : out std_ulogic;
     STAT_TX_PTP_FIFO_WRITE_ERROR : out std_ulogic;
     STAT_TX_TOTAL_BYTES : out std_logic_vector(5 downto 0);
     STAT_TX_TOTAL_GOOD_BYTES : out std_logic_vector(13 downto 0);
     STAT_TX_TOTAL_GOOD_PACKETS : out std_ulogic;
     STAT_TX_TOTAL_PACKETS : out std_ulogic;
     STAT_TX_UNICAST : out std_ulogic;
     STAT_TX_USER_PAUSE : out std_ulogic;
     STAT_TX_VLAN : out std_ulogic;
     TX_OVFOUT : out std_ulogic;
     TX_PTP_PCSLANE_OUT : out std_logic_vector(4 downto 0);
     TX_PTP_TSTAMP_OUT : out std_logic_vector(79 downto 0);
     TX_PTP_TSTAMP_TAG_OUT : out std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_VALID_OUT : out std_ulogic;
     TX_RDYOUT : out std_ulogic;
     TX_SERDES_ALT_DATA0 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA1 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA2 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA3 : out std_logic_vector(15 downto 0);
     TX_SERDES_DATA0 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA1 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA2 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA3 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA4 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA5 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA6 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA7 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA8 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA9 : out std_logic_vector(31 downto 0);
     TX_UNFOUT : out std_ulogic;
     CTL_CAUI4_MODE : in std_ulogic;
     CTL_RSFEC_ENABLE_TRANSCODER_BYPASS_MODE : in std_ulogic;
     CTL_RSFEC_IEEE_ERROR_INDICATION_MODE : in std_ulogic;
     CTL_RX_CHECK_ETYPE_GCP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_GPP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_PCP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_PPP : in std_ulogic;
     CTL_RX_CHECK_MCAST_GCP : in std_ulogic;
     CTL_RX_CHECK_MCAST_GPP : in std_ulogic;
     CTL_RX_CHECK_MCAST_PCP : in std_ulogic;
     CTL_RX_CHECK_MCAST_PPP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_GCP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_GPP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_PCP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_PPP : in std_ulogic;
     CTL_RX_CHECK_SA_GCP : in std_ulogic;
     CTL_RX_CHECK_SA_GPP : in std_ulogic;
     CTL_RX_CHECK_SA_PCP : in std_ulogic;
     CTL_RX_CHECK_SA_PPP : in std_ulogic;
     CTL_RX_CHECK_UCAST_GCP : in std_ulogic;
     CTL_RX_CHECK_UCAST_GPP : in std_ulogic;
     CTL_RX_CHECK_UCAST_PCP : in std_ulogic;
     CTL_RX_CHECK_UCAST_PPP : in std_ulogic;
     CTL_RX_ENABLE : in std_ulogic;
     CTL_RX_ENABLE_GCP : in std_ulogic;
     CTL_RX_ENABLE_GPP : in std_ulogic;
     CTL_RX_ENABLE_PCP : in std_ulogic;
     CTL_RX_ENABLE_PPP : in std_ulogic;
     CTL_RX_FORCE_RESYNC : in std_ulogic;
     CTL_RX_PAUSE_ACK : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ENABLE : in std_logic_vector(8 downto 0);
     CTL_RX_RSFEC_ENABLE : in std_ulogic;
     CTL_RX_RSFEC_ENABLE_CORRECTION : in std_ulogic;
     CTL_RX_RSFEC_ENABLE_INDICATION : in std_ulogic;
     CTL_RX_SYSTEMTIMERIN : in std_logic_vector(79 downto 0);
     CTL_RX_TEST_PATTERN : in std_ulogic;
     CTL_TX_ENABLE : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE_VALUE : in std_logic_vector(7 downto 0);
     CTL_TX_PAUSE_ENABLE : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_QUANTA0 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA1 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA2 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA3 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA4 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA5 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA6 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA7 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA8 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER0 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER1 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER2 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER3 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER4 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER5 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER6 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER7 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER8 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REQ : in std_logic_vector(8 downto 0);
     CTL_TX_PTP_VLANE_ADJUST_MODE : in std_ulogic;
     CTL_TX_RESEND_PAUSE : in std_ulogic;
     CTL_TX_RSFEC_ENABLE : in std_ulogic;
     CTL_TX_SEND_IDLE : in std_ulogic;
     CTL_TX_SEND_LFI : in std_ulogic;
     CTL_TX_SEND_RFI : in std_ulogic;
     CTL_TX_SYSTEMTIMERIN : in std_logic_vector(79 downto 0);
     CTL_TX_TEST_PATTERN : in std_ulogic;
     DRP_ADDR : in std_logic_vector(9 downto 0);
     DRP_CLK : in std_ulogic;
     DRP_DI : in std_logic_vector(15 downto 0);
     DRP_EN : in std_ulogic;
     DRP_WE : in std_ulogic;
     RSFEC_BYPASS_RX_DIN : in std_logic_vector(329 downto 0);
     RSFEC_BYPASS_RX_DIN_CW_START : in std_ulogic;
     RSFEC_BYPASS_TX_DIN : in std_logic_vector(329 downto 0);
     RSFEC_BYPASS_TX_DIN_CW_START : in std_ulogic;
     RX_CLK : in std_ulogic;
     RX_RESET : in std_ulogic;
     RX_SERDES_ALT_DATA0 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA1 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA2 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA3 : in std_logic_vector(15 downto 0);
     RX_SERDES_CLK : in std_logic_vector(9 downto 0);
     RX_SERDES_DATA0 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA1 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA2 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA3 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA4 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA5 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA6 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA7 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA8 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA9 : in std_logic_vector(31 downto 0);
     RX_SERDES_RESET : in std_logic_vector(9 downto 0);
     TX_CLK : in std_ulogic;
     TX_DATAIN0 : in std_logic_vector(127 downto 0);
     TX_DATAIN1 : in std_logic_vector(127 downto 0);
     TX_DATAIN2 : in std_logic_vector(127 downto 0);
     TX_DATAIN3 : in std_logic_vector(127 downto 0);
     TX_ENAIN0 : in std_ulogic;
     TX_ENAIN1 : in std_ulogic;
     TX_ENAIN2 : in std_ulogic;
     TX_ENAIN3 : in std_ulogic;
     TX_EOPIN0 : in std_ulogic;
     TX_EOPIN1 : in std_ulogic;
     TX_EOPIN2 : in std_ulogic;
     TX_EOPIN3 : in std_ulogic;
     TX_ERRIN0 : in std_ulogic;
     TX_ERRIN1 : in std_ulogic;
     TX_ERRIN2 : in std_ulogic;
     TX_ERRIN3 : in std_ulogic;
     TX_MTYIN0 : in std_logic_vector(3 downto 0);
     TX_MTYIN1 : in std_logic_vector(3 downto 0);
     TX_MTYIN2 : in std_logic_vector(3 downto 0);
     TX_MTYIN3 : in std_logic_vector(3 downto 0);
     TX_PREIN : in std_logic_vector(55 downto 0);
     TX_PTP_1588OP_IN : in std_logic_vector(1 downto 0);
     TX_PTP_CHKSUM_OFFSET_IN : in std_logic_vector(15 downto 0);
     TX_PTP_RXTSTAMP_IN : in std_logic_vector(63 downto 0);
     TX_PTP_TAG_FIELD_IN : in std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_OFFSET_IN : in std_logic_vector(15 downto 0);
     TX_PTP_UPD_CHKSUM_IN : in std_ulogic;
     TX_RESET : in std_ulogic;
     TX_SOPIN0 : in std_ulogic;
     TX_SOPIN1 : in std_ulogic;
     TX_SOPIN2 : in std_ulogic;
     TX_SOPIN3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CMACE4 : component is "PRIMITIVE";

----- component CPM -----
component CPM
  port (
     CPMDPLLPCIE0USERCLK : out std_ulogic;
     CPMDPLLPCIE1USERCLK : out std_ulogic;
     IFCPMPCIEADPLLCPMDPLL0RSTN : out std_ulogic;
     IFCPMPCIEADPLLCPMDPLL1RSTN : out std_ulogic;
     IFCPMPLISRCORREVENT : out std_ulogic;
     IFCPMPLISRMISCEVENT : out std_ulogic;
     IFCPMPLISRUNCORREVENT : out std_ulogic;
     IFCPMPSAXI0ARADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI0ARBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI0ARCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0ARLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI0ARLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI0ARPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0ARQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0ARUSER : out std_logic_vector(31 downto 0);
     IFCPMPSAXI0ARVALID : out std_ulogic;
     IFCPMPSAXI0AWADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI0AWBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI0AWCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0AWLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI0AWLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI0AWPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0AWQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0AWUSER : out std_logic_vector(31 downto 0);
     IFCPMPSAXI0AWVALID : out std_ulogic;
     IFCPMPSAXI0BREADY : out std_ulogic;
     IFCPMPSAXI0RREADY : out std_ulogic;
     IFCPMPSAXI0WDATA : out std_logic_vector(127 downto 0);
     IFCPMPSAXI0WID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0WLAST : out std_logic_vector(0 to 0);
     IFCPMPSAXI0WSTRB : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0WUSER : out std_logic_vector(17 downto 0);
     IFCPMPSAXI0WVALID : out std_ulogic;
     IFCPMPSAXI1ARADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI1ARBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI1ARCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1ARLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI1ARLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI1ARPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1ARQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1ARUSER : out std_logic_vector(17 downto 0);
     IFCPMPSAXI1ARVALID : out std_ulogic;
     IFCPMPSAXI1AWADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI1AWBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI1AWCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1AWLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI1AWLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI1AWPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1AWQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1AWUSER : out std_logic_vector(17 downto 0);
     IFCPMPSAXI1AWVALID : out std_ulogic;
     IFCPMPSAXI1BREADY : out std_ulogic;
     IFCPMPSAXI1RREADY : out std_ulogic;
     IFCPMPSAXI1WDATA : out std_logic_vector(127 downto 0);
     IFCPMPSAXI1WID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1WLAST : out std_logic_vector(0 to 0);
     IFCPMPSAXI1WSTRB : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1WUSER : out std_logic_vector(16 downto 0);
     IFCPMPSAXI1WVALID : out std_ulogic;
     IFCPMPSISRCORREVENT : out std_ulogic;
     IFCPMPSISRMISCEVENT : out std_ulogic;
     IFCPMPSISRUNCORREVENT : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL0XPIPERXGEARBOXSLIP : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXPCSRESET : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL0XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFCPMXPIPEHSDPCHANNEL1XPIPERXGEARBOXSLIP : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXPCSRESET : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL1XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFCPMXPIPEHSDPCHANNEL2XPIPERXGEARBOXSLIP : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXPCSRESET : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL2XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFCPMXPIPEHSDPLINKXPIPEGTRXUSRCLK : out std_ulogic;
     IFCPMXPIPEINTQUADXPIPEPHYREADYFRBOT : out std_ulogic;
     IFCPMXPIPELINK0XPIPEGTPIPECLK : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPCIELINKREACHTARGET : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPCIELTSSMSTATE : out std_logic_vector(5 downto 0);
     IFCPMXPIPELINK0XPIPEPCIEPERSTN : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPHYESMADAPTATIONSAVE : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPIPERATE : out std_logic_vector(2 downto 0);
     IFCPMXPIPELINK1XPIPEGTPIPECLK : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPCIELINKREACHTARGET : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPCIELTSSMSTATE : out std_logic_vector(5 downto 0);
     IFCPMXPIPELINK1XPIPEPCIEPERSTN : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPHYESMADAPTATIONSAVE : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPIPERATE : out std_logic_vector(2 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD0XPIPERXMARGINRESACK : out std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINRESACK : out std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINRESACK : out std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINRESACK : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGCCIXEDRDATARATECHANGEREQ : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEDRENABLE : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGERRCOROUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGERRFATALOUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGERRNONFATALOUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTREADRECEIVED : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTWRITERECEIVED : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGFCNPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCNPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCNPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCNPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGHOTRESETOUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGINTERRUPTSENT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     IFEXTPLPCIE0CFGHPOCFGLOCALERRORVALID : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     IFEXTPLPCIE0CFGHPOCFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE0CFGHPOCFGMGMTREADWRITEDONE : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPASIDENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPASIDEXECPERMISSIONENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPASIDPRIVILMODEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPHYLINKDOWN : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPLSTATUSCHANGE : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGRXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGTXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFG10BTAGREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGATOMICREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGEXTTAGENABLE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGFCCPLD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFCCPLDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFCCPLH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFCCPLHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIFAIL : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSISENT : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIXVECPENDINGSTATUS : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGMAXPAYLOAD : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMAXREADREQ : out std_logic_vector(2 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMSGRECEIVED : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMSGTRANSMITDONE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGRCBSTATUS : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGTPHSTMODE : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGVC1ENABLE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGVC1NEGOTIATIONPENDING : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISCQTDATA : out std_logic_vector(511 downto 0);
     IFEXTPLPCIE0UNIFIEDCQAXISAXISCQTKEEP : out std_logic_vector(15 downto 0);
     IFEXTPLPCIE0UNIFIEDCQAXISAXISCQTUSER : out std_logic_vector(228 downto 0);
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT0CQTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT0RCTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT1CQTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT1RCTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQVLD : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCVLD : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQVLD : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCVLD : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGCCIXEDRDATARATECHANGEREQ : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEDRENABLE : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGERRCOROUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGERRFATALOUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGERRNONFATALOUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTREADRECEIVED : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTWRITERECEIVED : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGFCNPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCNPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCNPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCNPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGHOTRESETOUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGINTERRUPTSENT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     IFEXTPLPCIE1CFGHPOCFGLOCALERRORVALID : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     IFEXTPLPCIE1CFGHPOCFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE1CFGHPOCFGMGMTREADWRITEDONE : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPASIDENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPASIDEXECPERMISSIONENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPASIDPRIVILMODEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPHYLINKDOWN : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPLSTATUSCHANGE : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGRXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGTXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISCQTDATA : out std_logic_vector(511 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISCQTKEEP : out std_logic_vector(15 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISCQTUSER : out std_logic_vector(228 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT0CQTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT0RCTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT1CQTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT1RCTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQVLD : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCVLD : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQVLD : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCVLD : out std_ulogic;
     IFPCIE0PLCCAXISAXISCCTREADY : out std_logic_vector(3 downto 0);
     IFPCIE0PLRQAXISAXISRQTREADY : out std_logic_vector(3 downto 0);
     IFPCIE1PLCCAXISAXISCCTREADY : out std_logic_vector(3 downto 0);
     IFPCIE1PLRQAXISAXISRQTREADY : out std_logic_vector(3 downto 0);
     IFPLCPMP0CHICRSPFLIT : out std_logic_vector(50 downto 0);
     IFPLCPMP0CHICRSPFLITPEND : out std_ulogic;
     IFPLCPMP0CHICRSPFLITV : out std_ulogic;
     IFPLCPMP0CHIMLINKACTIVEACK : out std_ulogic;
     IFPLCPMP0CHIRDATFLIT : out std_logic_vector(704 downto 0);
     IFPLCPMP0CHIRDATFLITPEND : out std_ulogic;
     IFPLCPMP0CHIRDATFLITV : out std_ulogic;
     IFPLCPMP0CHIREQLCRDV : out std_ulogic;
     IFPLCPMP0CHISLINKACTIVEREQ : out std_ulogic;
     IFPLCPMP0CHISNPFLIT : out std_logic_vector(87 downto 0);
     IFPLCPMP0CHISNPFLITPEND : out std_ulogic;
     IFPLCPMP0CHISNPFLITV : out std_ulogic;
     IFPLCPMP0CHISRSPLCRDV : out std_ulogic;
     IFPLCPMP0CHISSACTIVE : out std_ulogic;
     IFPLCPMP0CHISYSCOACK : out std_ulogic;
     IFPLCPMP0CHIWDATLCRDV : out std_ulogic;
     IFPLCPMP1CHICRSPFLIT : out std_logic_vector(50 downto 0);
     IFPLCPMP1CHICRSPFLITPEND : out std_ulogic;
     IFPLCPMP1CHICRSPFLITV : out std_ulogic;
     IFPLCPMP1CHIMLINKACTIVEACK : out std_ulogic;
     IFPLCPMP1CHIRDATFLIT : out std_logic_vector(704 downto 0);
     IFPLCPMP1CHIRDATFLITPEND : out std_ulogic;
     IFPLCPMP1CHIRDATFLITV : out std_ulogic;
     IFPLCPMP1CHIREQLCRDV : out std_ulogic;
     IFPLCPMP1CHISLINKACTIVEREQ : out std_ulogic;
     IFPLCPMP1CHISNPFLIT : out std_logic_vector(87 downto 0);
     IFPLCPMP1CHISNPFLITPEND : out std_ulogic;
     IFPLCPMP1CHISNPFLITV : out std_ulogic;
     IFPLCPMP1CHISRSPLCRDV : out std_ulogic;
     IFPLCPMP1CHISSACTIVE : out std_ulogic;
     IFPLCPMP1CHISYSCOACK : out std_ulogic;
     IFPLCPMP1CHIWDATLCRDV : out std_ulogic;
     IFPLEXTPCIE0AXIPCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE0AXIPCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE0AXIPCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE0AXIPCIERQSEQNUMVLD0 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIERQSEQNUMVLD1 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIERQTAG0 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE0AXIPCIERQTAG1 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE0AXIPCIERQTAGAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE0AXIPCIERQTAGVLD0 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIERQTAGVLD1 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIETFCNPDAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE0AXIPCIETFCNPHAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE1AXIPCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE1AXIPCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE1AXIPCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE1AXIPCIERQSEQNUMVLD0 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIERQSEQNUMVLD1 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIERQTAG0 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE1AXIPCIERQTAG1 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE1AXIPCIERQTAGAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE1AXIPCIERQTAGVLD0 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIERQTAGVLD1 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIETFCNPDAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE1AXIPCIETFCNPHAV : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARREADY : out std_ulogic;
     IFPSCPMCFGAXIAWREADY : out std_ulogic;
     IFPSCPMCFGAXIBID : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIBRESP : out std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIBUSER : out std_logic_vector(0 to 0);
     IFPSCPMCFGAXIBVALID : out std_ulogic;
     IFPSCPMCFGAXIRDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCFGAXIRID : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIRLAST : out std_logic_vector(0 to 0);
     IFPSCPMCFGAXIRRESP : out std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIRUSER : out std_logic_vector(5 downto 0);
     IFPSCPMCFGAXIRVALID : out std_ulogic;
     IFPSCPMCFGAXIWREADY : out std_ulogic;
     IFPSCPMCHANNEL0XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL0XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL0XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL10XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL10XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL10XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL11XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL11XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL11XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL12XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL12XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL12XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL13XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL13XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL13XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL14XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL14XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL14XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL15XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL15XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL15XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL1XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL1XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL1XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL2XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL2XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL2XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL3XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL3XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL3XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL4XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL4XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL4XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL5XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL5XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL5XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL6XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL6XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL6XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL7XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL7XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL7XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL8XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL8XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL8XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL9XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL9XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL9XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPERXHEADERVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPETXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPERXHEADERVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPETXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPERXHEADERVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPETXRESETDONE : out std_ulogic;
     IFPSCPMHSDPLINKXPIPEGTRXOUTCLK : out std_ulogic;
     IFPSCPMINTQUADXPIPEPHYREADYTOBOT : out std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTCE : out std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTCEMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK0XPIPEBUFGTDIV : out std_logic_vector(11 downto 0);
     IFPSCPMLINK0XPIPEBUFGTRST : out std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTRSTMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK0XPIPEGTOUTCLK : out std_ulogic;
     IFPSCPMLINK0XPIPEPHYREADY : out std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTCE : out std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTCEMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK1XPIPEBUFGTDIV : out std_logic_vector(11 downto 0);
     IFPSCPMLINK1XPIPEBUFGTRST : out std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTRSTMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK1XPIPEGTOUTCLK : out std_ulogic;
     IFPSCPMLINK1XPIPEPHYREADY : out std_ulogic;
     IFPSCPMPCIEAXIARREADY : out std_ulogic;
     IFPSCPMPCIEAXIAWREADY : out std_ulogic;
     IFPSCPMPCIEAXIBID : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIBRESP : out std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIBUSER : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIBVALID : out std_ulogic;
     IFPSCPMPCIEAXIRDATA : out std_logic_vector(127 downto 0);
     IFPSCPMPCIEAXIRID : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIRLAST : out std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIRRESP : out std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIRUSER : out std_logic_vector(16 downto 0);
     IFPSCPMPCIEAXIRVALID : out std_ulogic;
     IFPSCPMPCIEAXIWREADY : out std_ulogic;
     IFPSCPMPCSRPSRBISRDONE : out std_ulogic;
     IFPSCPMPCSRPSRBISRERR : out std_ulogic;
     IFPSCPMPCSRPSRCALDONE : out std_ulogic;
     IFPSCPMPCSRPSRCALERROR : out std_ulogic;
     IFPSCPMPCSRPSRINCAL : out std_ulogic;
     IFPSCPMPCSRPSRMEMCLRDONE : out std_ulogic;
     IFPSCPMPCSRPSRMEMCLRPASS : out std_ulogic;
     IFPSCPMPCSRPSRSCANCLRDONE : out std_ulogic;
     IFPSCPMPCSRPSRSCANCLRPASS : out std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESREQ : out std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESREQ : out std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESREQ : out std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESREQ : out std_ulogic;
     CPMOSCCLKDIV2 : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGCCIXEDRDATARATECHANGEACK : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGERRCORIN : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGERRUNCORIN : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGEXTREADDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGEXTREADDATAVALID : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGFCSEL : in std_logic_vector(2 downto 0);
     IFCPMPCIEA0CFGHPICFGFCVCSEL : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGFLRDONE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGHOTRESETIN : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSISELECT : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSITPHSTTAG : in std_logic_vector(7 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXINT : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXVECPENDING : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTADDR : in std_logic_vector(9 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTDEBUGACCESS : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMGMTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTREAD : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMGMTWRITE : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGMSGTRANSMIT : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     IFCPMPCIEA0CFGHPICFGPOWERSTATECHANGEACK : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGVFFLRDONE : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGVFFLRFUNCNUM : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGCCIXEDRDATARATECHANGEACK : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGERRCORIN : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGERRUNCORIN : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGEXTREADDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGEXTREADDATAVALID : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGFCSEL : in std_logic_vector(2 downto 0);
     IFCPMPCIEA1CFGHPICFGFCVCSEL : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGFLRDONE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGHOTRESETIN : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSISELECT : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSITPHSTTAG : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXINT : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXVECPENDING : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTADDR : in std_logic_vector(9 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTDEBUGACCESS : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMGMTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTREAD : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMGMTWRITE : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGMSGTRANSMIT : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     IFCPMPCIEA1CFGHPICFGPOWERSTATECHANGEACK : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGVFFLRDONE : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGVFFLRFUNCNUM : in std_logic_vector(7 downto 0);
     IFCPMPCIEADPLLDPLL0CPMLOCKED : in std_ulogic;
     IFCPMPCIEADPLLDPLL1CPMLOCKED : in std_ulogic;
     IFCPMPSAXI0ARREADY : in std_ulogic;
     IFCPMPSAXI0AWREADY : in std_ulogic;
     IFCPMPSAXI0BID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0BRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI0BUSER : in std_logic_vector(0 to 0);
     IFCPMPSAXI0BVALID : in std_ulogic;
     IFCPMPSAXI0RDATA : in std_logic_vector(127 downto 0);
     IFCPMPSAXI0RID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0RLAST : in std_logic_vector(0 to 0);
     IFCPMPSAXI0RRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI0RUSER : in std_logic_vector(17 downto 0);
     IFCPMPSAXI0RVALID : in std_ulogic;
     IFCPMPSAXI0WREADY : in std_ulogic;
     IFCPMPSAXI1ARREADY : in std_ulogic;
     IFCPMPSAXI1AWREADY : in std_ulogic;
     IFCPMPSAXI1BID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1BRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI1BUSER : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1BVALID : in std_ulogic;
     IFCPMPSAXI1RDATA : in std_logic_vector(127 downto 0);
     IFCPMPSAXI1RID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1RLAST : in std_logic_vector(0 to 0);
     IFCPMPSAXI1RRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI1RUSER : in std_logic_vector(16 downto 0);
     IFCPMPSAXI1RVALID : in std_ulogic;
     IFCPMPSAXI1WREADY : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL0XPIPERXHEADERVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPETXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL1XPIPERXHEADERVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPETXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL2XPIPERXHEADERVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPETXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPLINKXPIPEGTRXOUTCLK : in std_ulogic;
     IFCPMXPIPEINTQUADXPIPEPHYREADYTOBOT : in std_ulogic;
     IFCPMXPIPELINK0XPIPEBUFGTCE : in std_ulogic;
     IFCPMXPIPELINK0XPIPEBUFGTCEMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK0XPIPEBUFGTDIV : in std_logic_vector(11 downto 0);
     IFCPMXPIPELINK0XPIPEBUFGTRST : in std_ulogic;
     IFCPMXPIPELINK0XPIPEBUFGTRSTMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK0XPIPEGTOUTCLK : in std_ulogic;
     IFCPMXPIPELINK0XPIPEPHYREADY : in std_ulogic;
     IFCPMXPIPELINK1XPIPEBUFGTCE : in std_ulogic;
     IFCPMXPIPELINK1XPIPEBUFGTCEMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK1XPIPEBUFGTDIV : in std_logic_vector(11 downto 0);
     IFCPMXPIPELINK1XPIPEBUFGTRST : in std_ulogic;
     IFCPMXPIPELINK1XPIPEBUFGTRSTMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK1XPIPEGTOUTCLK : in std_ulogic;
     IFCPMXPIPELINK1XPIPEPHYREADY : in std_ulogic;
     IFCPMXPIPEQUAD0XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD0XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINRESREQ : in std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINRESREQ : in std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINRESREQ : in std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINRESREQ : in std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : in std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : in std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : in std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : in std_ulogic;
     IFPCIE0PLCCAXISAXISCCTDATA : in std_logic_vector(511 downto 0);
     IFPCIE0PLCCAXISAXISCCTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE0PLCCAXISAXISCCTLAST : in std_ulogic;
     IFPCIE0PLCCAXISAXISCCTUSER : in std_logic_vector(80 downto 0);
     IFPCIE0PLCCAXISAXISCCTVALID : in std_ulogic;
     IFPCIE0PLRQAXISAXISRQTDATA : in std_logic_vector(511 downto 0);
     IFPCIE0PLRQAXISAXISRQTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE0PLRQAXISAXISRQTLAST : in std_ulogic;
     IFPCIE0PLRQAXISAXISRQTUSER : in std_logic_vector(136 downto 0);
     IFPCIE0PLRQAXISAXISRQTVALID : in std_ulogic;
     IFPCIE1PLCCAXISAXISCCTDATA : in std_logic_vector(511 downto 0);
     IFPCIE1PLCCAXISAXISCCTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE1PLCCAXISAXISCCTLAST : in std_ulogic;
     IFPCIE1PLCCAXISAXISCCTUSER : in std_logic_vector(80 downto 0);
     IFPCIE1PLCCAXISAXISCCTVALID : in std_ulogic;
     IFPCIE1PLRQAXISAXISRQTDATA : in std_logic_vector(511 downto 0);
     IFPCIE1PLRQAXISAXISRQTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE1PLRQAXISAXISRQTLAST : in std_ulogic;
     IFPCIE1PLRQAXISAXISRQTUSER : in std_logic_vector(136 downto 0);
     IFPCIE1PLRQAXISAXISRQTVALID : in std_ulogic;
     IFPLCPMP0CHICRSPLCRDV : in std_ulogic;
     IFPLCPMP0CHIMLINKACTIVEREQ : in std_ulogic;
     IFPLCPMP0CHIMSACTIVE : in std_ulogic;
     IFPLCPMP0CHIRDATLCRDV : in std_ulogic;
     IFPLCPMP0CHIREQFLIT : in std_logic_vector(120 downto 0);
     IFPLCPMP0CHIREQFLITPEND : in std_ulogic;
     IFPLCPMP0CHIREQFLITV : in std_ulogic;
     IFPLCPMP0CHISLINKACTIVEACK : in std_ulogic;
     IFPLCPMP0CHISNPLCRDV : in std_ulogic;
     IFPLCPMP0CHISRSPFLIT : in std_logic_vector(50 downto 0);
     IFPLCPMP0CHISRSPFLITPEND : in std_ulogic;
     IFPLCPMP0CHISRSPFLITV : in std_ulogic;
     IFPLCPMP0CHISYSCOREQ : in std_ulogic;
     IFPLCPMP0CHIWDATFLIT : in std_logic_vector(704 downto 0);
     IFPLCPMP0CHIWDATFLITPEND : in std_ulogic;
     IFPLCPMP0CHIWDATFLITV : in std_ulogic;
     IFPLCPMP1CHICRSPLCRDV : in std_ulogic;
     IFPLCPMP1CHIMLINKACTIVEREQ : in std_ulogic;
     IFPLCPMP1CHIMSACTIVE : in std_ulogic;
     IFPLCPMP1CHIRDATLCRDV : in std_ulogic;
     IFPLCPMP1CHIREQFLIT : in std_logic_vector(120 downto 0);
     IFPLCPMP1CHIREQFLITPEND : in std_ulogic;
     IFPLCPMP1CHIREQFLITV : in std_ulogic;
     IFPLCPMP1CHISLINKACTIVEACK : in std_ulogic;
     IFPLCPMP1CHISNPLCRDV : in std_ulogic;
     IFPLCPMP1CHISRSPFLIT : in std_logic_vector(50 downto 0);
     IFPLCPMP1CHISRSPFLITPEND : in std_ulogic;
     IFPLCPMP1CHISRSPFLITV : in std_ulogic;
     IFPLCPMP1CHISYSCOREQ : in std_ulogic;
     IFPLCPMP1CHIWDATFLIT : in std_logic_vector(704 downto 0);
     IFPLCPMP1CHIWDATFLITPEND : in std_ulogic;
     IFPLCPMP1CHIWDATFLITV : in std_ulogic;
     IFPLEXTPCIE0AXIPCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXIPCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE0AXIPCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE0AXIPCIECQNPREQ : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXIPCIECQNPUSERCREDITRCVD : in std_ulogic;
     IFPLEXTPCIE0AXIPCIECQPIPELINEEMPTY : in std_ulogic;
     IFPLEXTPCIE0AXIPCIEPOSTEDREQDELIVERED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXCOMPLCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPLEXTPCIE0AXITLRXNONPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXITLRXPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPLEXTPCIE1AXIPCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXIPCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE1AXIPCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE1AXIPCIECQNPREQ : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXIPCIECQNPUSERCREDITRCVD : in std_ulogic;
     IFPLEXTPCIE1AXIPCIECQPIPELINEEMPTY : in std_ulogic;
     IFPLEXTPCIE1AXIPCIEPOSTEDREQDELIVERED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXCOMPLCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPLEXTPCIE1AXITLRXNONPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXITLRXPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPSCPMCFGAXIARADDR : in std_logic_vector(63 downto 0);
     IFPSCPMCFGAXIARBURST : in std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIARCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIARLEN : in std_logic_vector(7 downto 0);
     IFPSCPMCFGAXIARLOCK : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIARPROT : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIARQOS : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARREGION : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIARUSER : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIARVALID : in std_ulogic;
     IFPSCPMCFGAXIAWADDR : in std_logic_vector(63 downto 0);
     IFPSCPMCFGAXIAWBURST : in std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIAWCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIAWLEN : in std_logic_vector(7 downto 0);
     IFPSCPMCFGAXIAWLOCK : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIAWPROT : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIAWQOS : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWREGION : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIAWUSER : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIAWVALID : in std_ulogic;
     IFPSCPMCFGAXIBREADY : in std_ulogic;
     IFPSCPMCFGAXIRREADY : in std_ulogic;
     IFPSCPMCFGAXIWDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCFGAXIWID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIWLAST : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIWSTRB : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIWUSER : in std_logic_vector(5 downto 0);
     IFPSCPMCFGAXIWVALID : in std_ulogic;
     IFPSCPMCHANNEL0XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL0XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL0XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL0XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL0XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL0XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL0XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL10XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL10XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL10XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL10XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL10XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL10XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL11XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL11XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL11XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL11XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL11XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL11XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL12XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL12XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL12XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL12XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL12XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL12XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL13XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL13XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL13XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL13XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL13XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL13XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL14XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL14XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL14XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL14XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL14XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL14XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL15XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL15XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL15XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL15XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL15XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL15XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL1XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL1XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL1XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL1XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL1XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL1XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL2XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL2XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL2XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL2XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL2XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL2XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL3XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL3XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL3XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL3XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL3XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL3XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL4XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL4XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL4XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL4XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL4XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL4XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL5XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL5XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL5XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL5XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL5XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL5XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL6XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL6XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL6XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL6XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL6XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL6XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL7XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL7XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL7XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL7XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL7XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL7XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL8XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL8XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL8XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL8XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL8XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL8XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL9XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL9XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL9XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL9XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL9XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL9XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPERXGEARBOXSLIP : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXPCSRESET : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPETXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPETXSEQUENCE : in std_logic_vector(6 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPERXGEARBOXSLIP : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXPCSRESET : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPETXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPETXSEQUENCE : in std_logic_vector(6 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPERXGEARBOXSLIP : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXPCSRESET : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPETXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPETXSEQUENCE : in std_logic_vector(6 downto 0);
     IFPSCPMHSDPLINKXPIPEGTRXUSRCLK : in std_ulogic;
     IFPSCPMINTQUADXPIPEPHYREADYFRBOT : in std_ulogic;
     IFPSCPMLINK0XPIPEGTPIPECLK : in std_ulogic;
     IFPSCPMLINK0XPIPEPCIELINKREACHTARGET : in std_ulogic;
     IFPSCPMLINK0XPIPEPCIELTSSMSTATE : in std_logic_vector(5 downto 0);
     IFPSCPMLINK0XPIPEPCIEPERSTN : in std_ulogic;
     IFPSCPMLINK0XPIPEPHYESMADAPTATIONSAVE : in std_ulogic;
     IFPSCPMLINK0XPIPEPIPERATE : in std_logic_vector(2 downto 0);
     IFPSCPMLINK1XPIPEGTPIPECLK : in std_ulogic;
     IFPSCPMLINK1XPIPEPCIELINKREACHTARGET : in std_ulogic;
     IFPSCPMLINK1XPIPEPCIELTSSMSTATE : in std_logic_vector(5 downto 0);
     IFPSCPMLINK1XPIPEPCIEPERSTN : in std_ulogic;
     IFPSCPMLINK1XPIPEPHYESMADAPTATIONSAVE : in std_ulogic;
     IFPSCPMLINK1XPIPEPIPERATE : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARADDR : in std_logic_vector(63 downto 0);
     IFPSCPMPCIEAXIARBURST : in std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIARCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIARLEN : in std_logic_vector(7 downto 0);
     IFPSCPMPCIEAXIARLOCK : in std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIARPROT : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARQOS : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARREGION : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARUSER : in std_logic_vector(17 downto 0);
     IFPSCPMPCIEAXIARVALID : in std_ulogic;
     IFPSCPMPCIEAXIAWADDR : in std_logic_vector(63 downto 0);
     IFPSCPMPCIEAXIAWBURST : in std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIAWCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIAWLEN : in std_logic_vector(7 downto 0);
     IFPSCPMPCIEAXIAWLOCK : in std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIAWPROT : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIAWQOS : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWREGION : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIAWUSER : in std_logic_vector(17 downto 0);
     IFPSCPMPCIEAXIAWVALID : in std_ulogic;
     IFPSCPMPCIEAXIBREADY : in std_ulogic;
     IFPSCPMPCIEAXIRREADY : in std_ulogic;
     IFPSCPMPCIEAXIWDATA : in std_logic_vector(127 downto 0);
     IFPSCPMPCIEAXIWID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIWLAST : in std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIWSTRB : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIWUSER : in std_logic_vector(16 downto 0);
     IFPSCPMPCIEAXIWVALID : in std_ulogic;
     IFPSCPMPCSRPCRAPBEN : in std_ulogic;
     IFPSCPMPCSRPCRDISNPICLK : in std_ulogic;
     IFPSCPMPCSRPCRFABRICEN : in std_ulogic;
     IFPSCPMPCSRPCRGATEREG : in std_ulogic;
     IFPSCPMPCSRPCRHOLDSTATE : in std_ulogic;
     IFPSCPMPCSRPCRINITSTATE : in std_ulogic;
     IFPSCPMPCSRPCRMEMCLR : in std_ulogic;
     IFPSCPMPCSRPCRODISABLE : in std_logic_vector(3 downto 0);
     IFPSCPMPCSRPCRPCOMPLETE : in std_ulogic;
     IFPSCPMPCSRPCRPWRDN : in std_ulogic;
     IFPSCPMPCSRPCRSCANCLR : in std_ulogic;
     IFPSCPMPCSRPCRSTARTBISR : in std_ulogic;
     IFPSCPMPCSRPCRSTARTCAL : in std_ulogic;
     IFPSCPMPCSRPCRTRISTATE : in std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINRESACK : in std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINRESACK : in std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINRESACK : in std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINRESACK : in std_ulogic;
     LPDCPMINREFCLK : in std_ulogic;
     LPDCPMSWITCHTIMEOUTCNT : in std_ulogic;
     LPDCPMTOPSWCLK : in std_ulogic;
     PERST0N : in std_ulogic;
     PERST1N : in std_ulogic;
     PLCHI0CLK : in std_ulogic;
     PLCHI1CLK : in std_ulogic;
     PLCPMIRQ0 : in std_ulogic;
     PLCPMIRQ1 : in std_ulogic;
     PLREFCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CPM : component is "PRIMITIVE";

----- component CPM_EXT -----
component CPM_EXT
  port (
     IFCPMEXTCLKRSTECOOUT : out std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIECOMPLDELIVERED : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXIPCIECOMPLDELIVEREDTAG0 : out std_logic_vector(7 downto 0);
     IFEXTCPMPCIE0AXIPCIECOMPLDELIVEREDTAG1 : out std_logic_vector(7 downto 0);
     IFEXTCPMPCIE0AXIPCIECQNPREQ : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXIPCIECQNPUSERCREDITRCVD : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIECQPIPELINEEMPTY : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIEPOSTEDREQDELIVERED : out std_ulogic;
     IFEXTCPMPCIE0AXITLRXCOMPLCREDITRELEASED : out std_ulogic;
     IFEXTCPMPCIE0AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : out std_logic_vector(6 downto 0);
     IFEXTCPMPCIE0AXITLRXNONPOSTEDCREDITRELEASED : out std_ulogic;
     IFEXTCPMPCIE0AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXITLRXPOSTEDCREDITRELEASED : out std_ulogic;
     IFEXTCPMPCIE0AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : out std_logic_vector(6 downto 0);
     IFEXTCPMPCIE1AXIPCIECOMPLDELIVERED : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXIPCIECOMPLDELIVEREDTAG0 : out std_logic_vector(7 downto 0);
     IFEXTCPMPCIE1AXIPCIECOMPLDELIVEREDTAG1 : out std_logic_vector(7 downto 0);
     IFEXTCPMPCIE1AXIPCIECQNPREQ : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXIPCIECQNPUSERCREDITRCVD : out std_ulogic;
     IFEXTCPMPCIE1AXIPCIECQPIPELINEEMPTY : out std_ulogic;
     IFEXTCPMPCIE1AXIPCIEPOSTEDREQDELIVERED : out std_ulogic;
     IFEXTCPMPCIE1AXITLRXCOMPLCREDITRELEASED : out std_ulogic;
     IFEXTCPMPCIE1AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : out std_logic_vector(6 downto 0);
     IFEXTCPMPCIE1AXITLRXNONPOSTEDCREDITRELEASED : out std_ulogic;
     IFEXTCPMPCIE1AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : out std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXITLRXPOSTEDCREDITRELEASED : out std_ulogic;
     IFEXTCPMPCIE1AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : out std_logic_vector(6 downto 0);
     IFEXTPLPCIE0CFGHPOCFGCCIXEDRDATARATECHANGEREQ : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEDRENABLE : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGERRCOROUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGERRFATALOUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGERRNONFATALOUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTREADRECEIVED : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE0CFGHPOCFGEXTWRITERECEIVED : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGFCNPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCNPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCNPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCNPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGHPOCFGFCPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGHOTRESETOUT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGINTERRUPTSENT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     IFEXTPLPCIE0CFGHPOCFGLOCALERRORVALID : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     IFEXTPLPCIE0CFGHPOCFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE0CFGHPOCFGMGMTREADWRITEDONE : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPASIDENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPASIDEXECPERMISSIONENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPASIDPRIVILMODEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPHYLINKDOWN : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGPLSTATUSCHANGE : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     IFEXTPLPCIE0CFGHPOCFGRXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGHPOCFGTXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFG10BTAGREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGATOMICREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGEXTTAGENABLE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGFCCPLD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFCCPLDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFCCPLH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFCCPLHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIFAIL : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSISENT : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGINTERRUPTMSIXVECPENDINGSTATUS : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGMAXPAYLOAD : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMAXREADREQ : out std_logic_vector(2 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMSGRECEIVED : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     IFEXTPLPCIE0CFGLPOCFGMSGTRANSMITDONE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGRCBSTATUS : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE0CFGLPOCFGTPHSTMODE : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE0CFGLPOCFGVC1ENABLE : out std_ulogic;
     IFEXTPLPCIE0CFGLPOCFGVC1NEGOTIATIONPENDING : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISCQTDATA : out std_logic_vector(511 downto 0);
     IFEXTPLPCIE0UNIFIEDCQAXISAXISCQTKEEP : out std_logic_vector(15 downto 0);
     IFEXTPLPCIE0UNIFIEDCQAXISAXISCQTUSER : out std_logic_vector(228 downto 0);
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT0CQTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT0RCTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT1CQTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISAXISPORT1RCTLAST : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQVLD : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCVLD : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQVLD : out std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCVLD : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGCCIXEDRDATARATECHANGEREQ : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEDRENABLE : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGERRCOROUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGERRFATALOUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGERRNONFATALOUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTREADRECEIVED : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE1CFGHPOCFGEXTWRITERECEIVED : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGFCNPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCNPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCNPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCNPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPD : out std_logic_vector(11 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPDSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPH : out std_logic_vector(7 downto 0);
     IFEXTPLPCIE1CFGHPOCFGFCPHSCALE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGHOTRESETOUT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGINTERRUPTSENT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     IFEXTPLPCIE1CFGHPOCFGLOCALERRORVALID : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     IFEXTPLPCIE1CFGHPOCFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     IFEXTPLPCIE1CFGHPOCFGMGMTREADWRITEDONE : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPASIDENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPASIDEXECPERMISSIONENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPASIDPRIVILMODEENABLE : out std_logic_vector(3 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPHYLINKDOWN : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGPLSTATUSCHANGE : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     IFEXTPLPCIE1CFGHPOCFGRXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1CFGHPOCFGTXPMSTATE : out std_logic_vector(1 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISCQTDATA : out std_logic_vector(511 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISCQTKEEP : out std_logic_vector(15 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISCQTUSER : out std_logic_vector(228 downto 0);
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT0CQTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT0RCTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT1CQTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISAXISPORT1RCTLAST : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQVLD : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCVLD : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQVLD : out std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCVLD : out std_ulogic;
     IFPLEXTPCIE0AXIPCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE0AXIPCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE0AXIPCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE0AXIPCIERQSEQNUMVLD0 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIERQSEQNUMVLD1 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIERQTAG0 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE0AXIPCIERQTAG1 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE0AXIPCIERQTAGAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE0AXIPCIERQTAGVLD0 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIERQTAGVLD1 : out std_ulogic;
     IFPLEXTPCIE0AXIPCIETFCNPDAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE0AXIPCIETFCNPHAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE1AXIPCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE1AXIPCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE1AXIPCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     IFPLEXTPCIE1AXIPCIERQSEQNUMVLD0 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIERQSEQNUMVLD1 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIERQTAG0 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE1AXIPCIERQTAG1 : out std_logic_vector(9 downto 0);
     IFPLEXTPCIE1AXIPCIERQTAGAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE1AXIPCIERQTAGVLD0 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIERQTAGVLD1 : out std_ulogic;
     IFPLEXTPCIE1AXIPCIETFCNPDAV : out std_logic_vector(3 downto 0);
     IFPLEXTPCIE1AXIPCIETFCNPHAV : out std_logic_vector(3 downto 0);
     IFCPMEXTCLKRSTECOREG : in std_logic_vector(31 downto 0);
     IFCPMEXTCLKRSTPCIE0RAWRSTN : in std_ulogic;
     IFCPMEXTCLKRSTPCIE0USERCLK : in std_ulogic;
     IFCPMEXTCLKRSTPCIE1RAWRSTN : in std_ulogic;
     IFCPMEXTCLKRSTPCIE1USERCLK : in std_ulogic;
     IFCPMEXTCLKRSTTESTSCANRESETSEL : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGCCIXEDRDATARATECHANGEREQ : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGCURRENTSPEED : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEDRENABLE : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGERRCOROUT : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGERRFATALOUT : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGERRNONFATALOUT : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGEXTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTREADRECEIVED : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGEXTREGISTERNUMBER : in std_logic_vector(9 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTWRITEBYTEENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTWRITEDATA : in std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTWRITERECEIVED : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGFCNPD : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCNPDSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCNPH : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCNPHSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPD : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPDSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPH : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPHSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGHOTRESETOUT : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGINTERRUPTSENT : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGLINKPOWERSTATE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGLOCALERROROUT : in std_logic_vector(4 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGLOCALERRORVALID : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGLTSSMSTATE : in std_logic_vector(5 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGMGMTREADDATA : in std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGMGMTREADWRITEDONE : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGNEGOTIATEDWIDTH : in std_logic_vector(2 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPASIDENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPASIDEXECPERMISSIONENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPASIDPRIVILMODEENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPHYLINKDOWN : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGPHYLINKSTATUS : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPLSTATUSCHANGE : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGPOWERSTATECHANGEINTERRUPT : in std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGRXPMSTATE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGTXPMSTATE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFG10BTAGREQUESTERENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGATOMICREQUESTERENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGEXTTAGENABLE : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGFCCPLD : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFCCPLDSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFCCPLH : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFCCPLHSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFLRINPROCESS : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFUNCTIONPOWERSTATE : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFUNCTIONSTATUS : in std_logic_vector(15 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIDATA : in std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIFAIL : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIMASKUPDATE : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIMMENABLE : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSISENT : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIXENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIXMASK : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIXVECPENDINGSTATUS : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGMAXPAYLOAD : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMAXREADREQ : in std_logic_vector(2 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMSGRECEIVED : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGMSGRECEIVEDDATA : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMSGRECEIVEDTYPE : in std_logic_vector(4 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMSGTRANSMITDONE : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGRCBSTATUS : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGTPHREQUESTERENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGTPHSTMODE : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGVC1ENABLE : in std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGVC1NEGOTIATIONPENDING : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISCQTDATA : in std_logic_vector(511 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISCQTKEEP : in std_logic_vector(15 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISCQTUSER : in std_logic_vector(228 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT0CQTLAST : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT0RCTLAST : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT1CQTLAST : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT1RCTLAST : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQVLD : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCVLD : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQVLD : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCVLD : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGCCIXEDRDATARATECHANGEREQ : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGCURRENTSPEED : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEDRENABLE : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGERRCOROUT : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGERRFATALOUT : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGERRNONFATALOUT : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGEXTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTREADRECEIVED : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGEXTREGISTERNUMBER : in std_logic_vector(9 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTWRITEBYTEENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTWRITEDATA : in std_logic_vector(31 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTWRITERECEIVED : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGFCNPD : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCNPDSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCNPH : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCNPHSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPD : in std_logic_vector(11 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPDSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPH : in std_logic_vector(7 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPHSCALE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGHOTRESETOUT : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGINTERRUPTSENT : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGLINKPOWERSTATE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGLOCALERROROUT : in std_logic_vector(4 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGLOCALERRORVALID : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGLTSSMSTATE : in std_logic_vector(5 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGMGMTREADDATA : in std_logic_vector(31 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGMGMTREADWRITEDONE : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGNEGOTIATEDWIDTH : in std_logic_vector(2 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPASIDENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPASIDEXECPERMISSIONENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPASIDPRIVILMODEENABLE : in std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPHYLINKDOWN : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGPHYLINKSTATUS : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPLSTATUSCHANGE : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGPOWERSTATECHANGEINTERRUPT : in std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGRXPMSTATE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGTXPMSTATE : in std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISCQTDATA : in std_logic_vector(511 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISCQTKEEP : in std_logic_vector(15 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISCQTUSER : in std_logic_vector(228 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT0CQTLAST : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT0RCTLAST : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT1CQTLAST : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT1RCTLAST : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQVLD : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCVLD : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQVLD : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCVLD : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIECQNPREQCOUNT : in std_logic_vector(5 downto 0);
     IFEXTCPMPCIE0AXIPCIERQSEQNUM0 : in std_logic_vector(5 downto 0);
     IFEXTCPMPCIE0AXIPCIERQSEQNUM1 : in std_logic_vector(5 downto 0);
     IFEXTCPMPCIE0AXIPCIERQSEQNUMVLD0 : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIERQSEQNUMVLD1 : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIERQTAG0 : in std_logic_vector(9 downto 0);
     IFEXTCPMPCIE0AXIPCIERQTAG1 : in std_logic_vector(9 downto 0);
     IFEXTCPMPCIE0AXIPCIERQTAGAV : in std_logic_vector(3 downto 0);
     IFEXTCPMPCIE0AXIPCIERQTAGVLD0 : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIERQTAGVLD1 : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIETFCNPDAV : in std_logic_vector(3 downto 0);
     IFEXTCPMPCIE0AXIPCIETFCNPHAV : in std_logic_vector(3 downto 0);
     IFEXTCPMPCIE1AXIPCIECQNPREQCOUNT : in std_logic_vector(5 downto 0);
     IFEXTCPMPCIE1AXIPCIERQSEQNUM0 : in std_logic_vector(5 downto 0);
     IFEXTCPMPCIE1AXIPCIERQSEQNUM1 : in std_logic_vector(5 downto 0);
     IFEXTCPMPCIE1AXIPCIERQSEQNUMVLD0 : in std_ulogic;
     IFEXTCPMPCIE1AXIPCIERQSEQNUMVLD1 : in std_ulogic;
     IFEXTCPMPCIE1AXIPCIERQTAG0 : in std_logic_vector(9 downto 0);
     IFEXTCPMPCIE1AXIPCIERQTAG1 : in std_logic_vector(9 downto 0);
     IFEXTCPMPCIE1AXIPCIERQTAGAV : in std_logic_vector(3 downto 0);
     IFEXTCPMPCIE1AXIPCIERQTAGVLD0 : in std_ulogic;
     IFEXTCPMPCIE1AXIPCIERQTAGVLD1 : in std_ulogic;
     IFEXTCPMPCIE1AXIPCIETFCNPDAV : in std_logic_vector(3 downto 0);
     IFEXTCPMPCIE1AXIPCIETFCNPHAV : in std_logic_vector(3 downto 0);
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : in std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : in std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : in std_ulogic;
     IFEXTPLPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : in std_ulogic;
     IFEXTPLPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : in std_ulogic;
     IFPLEXTPCIE0AXIPCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXIPCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE0AXIPCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE0AXIPCIECQNPREQ : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXIPCIECQNPUSERCREDITRCVD : in std_ulogic;
     IFPLEXTPCIE0AXIPCIECQPIPELINEEMPTY : in std_ulogic;
     IFPLEXTPCIE0AXIPCIEPOSTEDREQDELIVERED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXCOMPLCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPLEXTPCIE0AXITLRXNONPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE0AXITLRXPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE0AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPLEXTPCIE1AXIPCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXIPCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE1AXIPCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     IFPLEXTPCIE1AXIPCIECQNPREQ : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXIPCIECQNPUSERCREDITRCVD : in std_ulogic;
     IFPLEXTPCIE1AXIPCIECQPIPELINEEMPTY : in std_ulogic;
     IFPLEXTPCIE1AXIPCIEPOSTEDREQDELIVERED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXCOMPLCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPLEXTPCIE1AXITLRXNONPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFPLEXTPCIE1AXITLRXPOSTEDCREDITRELEASED : in std_ulogic;
     IFPLEXTPCIE1AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0)
  );
end component;
attribute BOX_TYPE of
  CPM_EXT : component is "PRIMITIVE";

----- component CPM_MAIN -----
component CPM_MAIN
  port (
     CPMDPLLPCIE0USERCLK : out std_ulogic;
     CPMDPLLPCIE1USERCLK : out std_ulogic;
     IFCPMEXTCLKRSTECOREG : out std_logic_vector(31 downto 0);
     IFCPMEXTCLKRSTPCIE0RAWRSTN : out std_ulogic;
     IFCPMEXTCLKRSTPCIE0USERCLK : out std_ulogic;
     IFCPMEXTCLKRSTPCIE1RAWRSTN : out std_ulogic;
     IFCPMEXTCLKRSTPCIE1USERCLK : out std_ulogic;
     IFCPMEXTCLKRSTTESTSCANRESETSEL : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGCCIXEDRDATARATECHANGEREQ : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEDRENABLE : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGERRCOROUT : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGERRFATALOUT : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGERRNONFATALOUT : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTREADRECEIVED : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGEXTWRITERECEIVED : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGFCNPD : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCNPDSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCNPH : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCNPHSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPD : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPDSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPH : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGFCPHSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGHOTRESETOUT : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGINTERRUPTSENT : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGLOCALERRORVALID : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGMGMTREADWRITEDONE : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPASIDENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPASIDEXECPERMISSIONENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPASIDPRIVILMODEENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPHYLINKDOWN : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGPLSTATUSCHANGE : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     IFCPMEXTPCIE0CFGHPOCFGRXPMSTATE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGHPOCFGTXPMSTATE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFG10BTAGREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGATOMICREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGEXTTAGENABLE : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGFCCPLD : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFCCPLDSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFCCPLH : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFCCPLHSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIFAIL : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSISENT : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGINTERRUPTMSIXVECPENDINGSTATUS : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGMAXPAYLOAD : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMAXREADREQ : out std_logic_vector(2 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMSGRECEIVED : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGMSGTRANSMITDONE : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGRCBSTATUS : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGTPHSTMODE : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE0CFGLPOCFGVC1ENABLE : out std_ulogic;
     IFCPMEXTPCIE0CFGLPOCFGVC1NEGOTIATIONPENDING : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISCQTDATA : out std_logic_vector(511 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISCQTKEEP : out std_logic_vector(15 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISCQTUSER : out std_logic_vector(228 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT0CQTLAST : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT0RCTLAST : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT1CQTLAST : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISAXISPORT1RCTLAST : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQVLD : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCVLD : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQVLD : out std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCVLD : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGCCIXEDRDATARATECHANGEREQ : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEDRENABLE : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGERRCOROUT : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGERRFATALOUT : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGERRNONFATALOUT : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTREADRECEIVED : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGEXTWRITERECEIVED : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGFCNPD : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCNPDSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCNPH : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCNPHSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPD : out std_logic_vector(11 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPDSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPH : out std_logic_vector(7 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGFCPHSCALE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGHOTRESETOUT : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGINTERRUPTSENT : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGLOCALERRORVALID : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGMGMTREADWRITEDONE : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPASIDENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPASIDEXECPERMISSIONENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPASIDPRIVILMODEENABLE : out std_logic_vector(3 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPHYLINKDOWN : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGPLSTATUSCHANGE : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     IFCPMEXTPCIE1CFGHPOCFGRXPMSTATE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1CFGHPOCFGTXPMSTATE : out std_logic_vector(1 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISCQTDATA : out std_logic_vector(511 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISCQTKEEP : out std_logic_vector(15 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISCQTUSER : out std_logic_vector(228 downto 0);
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT0CQTLAST : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT0RCTLAST : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT1CQTLAST : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISAXISPORT1RCTLAST : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQVLD : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCVLD : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQVLD : out std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCVLD : out std_ulogic;
     IFCPMPCIEADPLLCPMDPLL0RSTN : out std_ulogic;
     IFCPMPCIEADPLLCPMDPLL1RSTN : out std_ulogic;
     IFCPMPLISRCORREVENT : out std_ulogic;
     IFCPMPLISRMISCEVENT : out std_ulogic;
     IFCPMPLISRUNCORREVENT : out std_ulogic;
     IFCPMPSAXI0ARADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI0ARBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI0ARCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0ARLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI0ARLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI0ARPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0ARQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0ARUSER : out std_logic_vector(31 downto 0);
     IFCPMPSAXI0ARVALID : out std_ulogic;
     IFCPMPSAXI0AWADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI0AWBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI0AWCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0AWLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI0AWLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI0AWPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0AWQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI0AWUSER : out std_logic_vector(31 downto 0);
     IFCPMPSAXI0AWVALID : out std_ulogic;
     IFCPMPSAXI0BREADY : out std_ulogic;
     IFCPMPSAXI0RREADY : out std_ulogic;
     IFCPMPSAXI0WDATA : out std_logic_vector(127 downto 0);
     IFCPMPSAXI0WID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0WLAST : out std_logic_vector(0 to 0);
     IFCPMPSAXI0WSTRB : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0WUSER : out std_logic_vector(17 downto 0);
     IFCPMPSAXI0WVALID : out std_ulogic;
     IFCPMPSAXI1ARADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI1ARBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI1ARCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1ARLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI1ARLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI1ARPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1ARQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1ARUSER : out std_logic_vector(17 downto 0);
     IFCPMPSAXI1ARVALID : out std_ulogic;
     IFCPMPSAXI1AWADDR : out std_logic_vector(63 downto 0);
     IFCPMPSAXI1AWBURST : out std_logic_vector(1 downto 0);
     IFCPMPSAXI1AWCACHE : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1AWLEN : out std_logic_vector(7 downto 0);
     IFCPMPSAXI1AWLOCK : out std_logic_vector(0 to 0);
     IFCPMPSAXI1AWPROT : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1AWQOS : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWREGION : out std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWSIZE : out std_logic_vector(2 downto 0);
     IFCPMPSAXI1AWUSER : out std_logic_vector(17 downto 0);
     IFCPMPSAXI1AWVALID : out std_ulogic;
     IFCPMPSAXI1BREADY : out std_ulogic;
     IFCPMPSAXI1RREADY : out std_ulogic;
     IFCPMPSAXI1WDATA : out std_logic_vector(127 downto 0);
     IFCPMPSAXI1WID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1WLAST : out std_logic_vector(0 to 0);
     IFCPMPSAXI1WSTRB : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1WUSER : out std_logic_vector(16 downto 0);
     IFCPMPSAXI1WVALID : out std_ulogic;
     IFCPMPSISRCORREVENT : out std_ulogic;
     IFCPMPSISRMISCEVENT : out std_ulogic;
     IFCPMPSISRUNCORREVENT : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL0XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL0XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL10XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL10XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL11XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL11XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL12XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL12XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL13XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL13XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL14XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL14XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL15XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL15XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL1XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL1XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL2XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL2XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL3XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL3XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL4XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL4XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL5XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL5XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL6XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL6XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL7XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL7XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL8XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL8XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXPOLARITY : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXTERMINATION : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXCOMPLIANCE : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXDATAVALID : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXDEEMPH : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXELECIDLE : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFCPMXPIPECHANNEL9XPIPETXSTARTBLOCK : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXSWING : out std_ulogic;
     IFCPMXPIPECHANNEL9XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL0XPIPERXGEARBOXSLIP : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXPCSRESET : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL0XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFCPMXPIPEHSDPCHANNEL1XPIPERXGEARBOXSLIP : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXPCSRESET : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL1XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFCPMXPIPEHSDPCHANNEL2XPIPERXGEARBOXSLIP : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXPCSRESET : out std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL2XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFCPMXPIPEHSDPLINKXPIPEGTRXUSRCLK : out std_ulogic;
     IFCPMXPIPEINTQUADXPIPEPHYREADYFRBOT : out std_ulogic;
     IFCPMXPIPELINK0XPIPEGTPIPECLK : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPCIELINKREACHTARGET : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPCIELTSSMSTATE : out std_logic_vector(5 downto 0);
     IFCPMXPIPELINK0XPIPEPCIEPERSTN : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPHYESMADAPTATIONSAVE : out std_ulogic;
     IFCPMXPIPELINK0XPIPEPIPERATE : out std_logic_vector(2 downto 0);
     IFCPMXPIPELINK1XPIPEGTPIPECLK : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPCIELINKREACHTARGET : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPCIELTSSMSTATE : out std_logic_vector(5 downto 0);
     IFCPMXPIPELINK1XPIPEPCIEPERSTN : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPHYESMADAPTATIONSAVE : out std_ulogic;
     IFCPMXPIPELINK1XPIPEPIPERATE : out std_logic_vector(2 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD0XPIPERXMARGINRESACK : out std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINRESACK : out std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINRESACK : out std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINREQREQ : out std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINRESACK : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     IFEXTCPMPCIE0AXIPCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     IFEXTCPMPCIE0AXIPCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     IFEXTCPMPCIE0AXIPCIERQSEQNUMVLD0 : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIERQSEQNUMVLD1 : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIERQTAG0 : out std_logic_vector(9 downto 0);
     IFEXTCPMPCIE0AXIPCIERQTAG1 : out std_logic_vector(9 downto 0);
     IFEXTCPMPCIE0AXIPCIERQTAGAV : out std_logic_vector(3 downto 0);
     IFEXTCPMPCIE0AXIPCIERQTAGVLD0 : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIERQTAGVLD1 : out std_ulogic;
     IFEXTCPMPCIE0AXIPCIETFCNPDAV : out std_logic_vector(3 downto 0);
     IFEXTCPMPCIE0AXIPCIETFCNPHAV : out std_logic_vector(3 downto 0);
     IFEXTCPMPCIE1AXIPCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     IFEXTCPMPCIE1AXIPCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     IFEXTCPMPCIE1AXIPCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     IFEXTCPMPCIE1AXIPCIERQSEQNUMVLD0 : out std_ulogic;
     IFEXTCPMPCIE1AXIPCIERQSEQNUMVLD1 : out std_ulogic;
     IFEXTCPMPCIE1AXIPCIERQTAG0 : out std_logic_vector(9 downto 0);
     IFEXTCPMPCIE1AXIPCIERQTAG1 : out std_logic_vector(9 downto 0);
     IFEXTCPMPCIE1AXIPCIERQTAGAV : out std_logic_vector(3 downto 0);
     IFEXTCPMPCIE1AXIPCIERQTAGVLD0 : out std_ulogic;
     IFEXTCPMPCIE1AXIPCIERQTAGVLD1 : out std_ulogic;
     IFEXTCPMPCIE1AXIPCIETFCNPDAV : out std_logic_vector(3 downto 0);
     IFEXTCPMPCIE1AXIPCIETFCNPHAV : out std_logic_vector(3 downto 0);
     IFPCIE0PLCCAXISAXISCCTREADY : out std_logic_vector(3 downto 0);
     IFPCIE0PLRQAXISAXISRQTREADY : out std_logic_vector(3 downto 0);
     IFPCIE1PLCCAXISAXISCCTREADY : out std_logic_vector(3 downto 0);
     IFPCIE1PLRQAXISAXISRQTREADY : out std_logic_vector(3 downto 0);
     IFPLCPMP0CHICRSPFLIT : out std_logic_vector(50 downto 0);
     IFPLCPMP0CHICRSPFLITPEND : out std_ulogic;
     IFPLCPMP0CHICRSPFLITV : out std_ulogic;
     IFPLCPMP0CHIMLINKACTIVEACK : out std_ulogic;
     IFPLCPMP0CHIRDATFLIT : out std_logic_vector(704 downto 0);
     IFPLCPMP0CHIRDATFLITPEND : out std_ulogic;
     IFPLCPMP0CHIRDATFLITV : out std_ulogic;
     IFPLCPMP0CHIREQLCRDV : out std_ulogic;
     IFPLCPMP0CHISLINKACTIVEREQ : out std_ulogic;
     IFPLCPMP0CHISNPFLIT : out std_logic_vector(87 downto 0);
     IFPLCPMP0CHISNPFLITPEND : out std_ulogic;
     IFPLCPMP0CHISNPFLITV : out std_ulogic;
     IFPLCPMP0CHISRSPLCRDV : out std_ulogic;
     IFPLCPMP0CHISSACTIVE : out std_ulogic;
     IFPLCPMP0CHISYSCOACK : out std_ulogic;
     IFPLCPMP0CHIWDATLCRDV : out std_ulogic;
     IFPLCPMP1CHICRSPFLIT : out std_logic_vector(50 downto 0);
     IFPLCPMP1CHICRSPFLITPEND : out std_ulogic;
     IFPLCPMP1CHICRSPFLITV : out std_ulogic;
     IFPLCPMP1CHIMLINKACTIVEACK : out std_ulogic;
     IFPLCPMP1CHIRDATFLIT : out std_logic_vector(704 downto 0);
     IFPLCPMP1CHIRDATFLITPEND : out std_ulogic;
     IFPLCPMP1CHIRDATFLITV : out std_ulogic;
     IFPLCPMP1CHIREQLCRDV : out std_ulogic;
     IFPLCPMP1CHISLINKACTIVEREQ : out std_ulogic;
     IFPLCPMP1CHISNPFLIT : out std_logic_vector(87 downto 0);
     IFPLCPMP1CHISNPFLITPEND : out std_ulogic;
     IFPLCPMP1CHISNPFLITV : out std_ulogic;
     IFPLCPMP1CHISRSPLCRDV : out std_ulogic;
     IFPLCPMP1CHISSACTIVE : out std_ulogic;
     IFPLCPMP1CHISYSCOACK : out std_ulogic;
     IFPLCPMP1CHIWDATLCRDV : out std_ulogic;
     IFPSCPMCFGAXIARREADY : out std_ulogic;
     IFPSCPMCFGAXIAWREADY : out std_ulogic;
     IFPSCPMCFGAXIBID : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIBRESP : out std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIBUSER : out std_logic_vector(0 to 0);
     IFPSCPMCFGAXIBVALID : out std_ulogic;
     IFPSCPMCFGAXIRDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCFGAXIRID : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIRLAST : out std_logic_vector(0 to 0);
     IFPSCPMCFGAXIRRESP : out std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIRUSER : out std_logic_vector(5 downto 0);
     IFPSCPMCFGAXIRVALID : out std_ulogic;
     IFPSCPMCFGAXIWREADY : out std_ulogic;
     IFPSCPMCHANNEL0XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL0XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL0XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL10XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL10XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL10XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL11XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL11XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL11XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL12XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL12XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL12XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL13XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL13XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL13XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL14XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL14XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL14XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL15XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL15XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL15XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL1XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL1XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL1XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL2XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL2XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL2XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL3XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL3XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL3XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL4XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL4XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL4XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL5XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL5XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL5XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL6XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL6XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL6XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL7XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL7XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL7XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL8XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL8XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL8XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXVALID : out std_ulogic;
     IFPSCPMCHANNEL9XPIPEPHYSTATUS : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL9XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXSTATUS : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL9XPIPERXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPERXHEADERVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPETXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPERXHEADERVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPETXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXDATAVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPERXHEADERVALID : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXRESETDONE : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPETXRESETDONE : out std_ulogic;
     IFPSCPMHSDPLINKXPIPEGTRXOUTCLK : out std_ulogic;
     IFPSCPMINTQUADXPIPEPHYREADYTOBOT : out std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTCE : out std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTCEMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK0XPIPEBUFGTDIV : out std_logic_vector(11 downto 0);
     IFPSCPMLINK0XPIPEBUFGTRST : out std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTRSTMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK0XPIPEGTOUTCLK : out std_ulogic;
     IFPSCPMLINK0XPIPEPHYREADY : out std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTCE : out std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTCEMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK1XPIPEBUFGTDIV : out std_logic_vector(11 downto 0);
     IFPSCPMLINK1XPIPEBUFGTRST : out std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTRSTMASK : out std_logic_vector(3 downto 0);
     IFPSCPMLINK1XPIPEGTOUTCLK : out std_ulogic;
     IFPSCPMLINK1XPIPEPHYREADY : out std_ulogic;
     IFPSCPMPCIEAXIARREADY : out std_ulogic;
     IFPSCPMPCIEAXIAWREADY : out std_ulogic;
     IFPSCPMPCIEAXIBID : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIBRESP : out std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIBUSER : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIBVALID : out std_ulogic;
     IFPSCPMPCIEAXIRDATA : out std_logic_vector(127 downto 0);
     IFPSCPMPCIEAXIRID : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIRLAST : out std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIRRESP : out std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIRUSER : out std_logic_vector(16 downto 0);
     IFPSCPMPCIEAXIRVALID : out std_ulogic;
     IFPSCPMPCIEAXIWREADY : out std_ulogic;
     IFPSCPMPCSRPSRBISRDONE : out std_ulogic;
     IFPSCPMPCSRPSRBISRERR : out std_ulogic;
     IFPSCPMPCSRPSRCALDONE : out std_ulogic;
     IFPSCPMPCSRPSRCALERROR : out std_ulogic;
     IFPSCPMPCSRPSRINCAL : out std_ulogic;
     IFPSCPMPCSRPSRMEMCLRDONE : out std_ulogic;
     IFPSCPMPCSRPSRMEMCLRPASS : out std_ulogic;
     IFPSCPMPCSRPSRSCANCLRDONE : out std_ulogic;
     IFPSCPMPCSRPSRSCANCLRPASS : out std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESREQ : out std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESREQ : out std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESREQ : out std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINREQACK : out std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINRESCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESREQ : out std_ulogic;
     CPMOSCCLKDIV2 : in std_ulogic;
     IFCPMEXTCLKRSTECOOUT : in std_logic_vector(31 downto 0);
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : in std_ulogic;
     IFCPMEXTPCIE0UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0CQCRDT : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT0RCCRDT : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1CQCRDT : in std_ulogic;
     IFCPMEXTPCIE1UNIFIEDCQAXISPCIEAXISPORT1RCCRDT : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGCCIXEDRDATARATECHANGEACK : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGERRCORIN : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGERRUNCORIN : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGEXTREADDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGEXTREADDATAVALID : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGFCSEL : in std_logic_vector(2 downto 0);
     IFCPMPCIEA0CFGHPICFGFCVCSEL : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGFLRDONE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGHOTRESETIN : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSISELECT : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSITPHSTTAG : in std_logic_vector(7 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXINT : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGINTERRUPTMSIXVECPENDING : in std_logic_vector(1 downto 0);
     IFCPMPCIEA0CFGHPICFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTADDR : in std_logic_vector(9 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTDEBUGACCESS : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMGMTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA0CFGHPICFGMGMTREAD : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMGMTWRITE : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGMSGTRANSMIT : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA0CFGHPICFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     IFCPMPCIEA0CFGHPICFGPOWERSTATECHANGEACK : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGVFFLRDONE : in std_ulogic;
     IFCPMPCIEA0CFGHPICFGVFFLRFUNCNUM : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGCCIXEDRDATARATECHANGEACK : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGERRCORIN : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGERRUNCORIN : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGEXTREADDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGEXTREADDATAVALID : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGFCSEL : in std_logic_vector(2 downto 0);
     IFCPMPCIEA1CFGHPICFGFCVCSEL : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGFLRDONE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGHOTRESETIN : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSISELECT : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSITPHSTTAG : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXINT : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGINTERRUPTMSIXVECPENDING : in std_logic_vector(1 downto 0);
     IFCPMPCIEA1CFGHPICFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTADDR : in std_logic_vector(9 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTDEBUGACCESS : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMGMTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     IFCPMPCIEA1CFGHPICFGMGMTREAD : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMGMTWRITE : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGMSGTRANSMIT : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     IFCPMPCIEA1CFGHPICFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     IFCPMPCIEA1CFGHPICFGPOWERSTATECHANGEACK : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGVFFLRDONE : in std_ulogic;
     IFCPMPCIEA1CFGHPICFGVFFLRFUNCNUM : in std_logic_vector(7 downto 0);
     IFCPMPCIEADPLLDPLL0CPMLOCKED : in std_ulogic;
     IFCPMPCIEADPLLDPLL1CPMLOCKED : in std_ulogic;
     IFCPMPSAXI0ARREADY : in std_ulogic;
     IFCPMPSAXI0AWREADY : in std_ulogic;
     IFCPMPSAXI0BID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0BRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI0BUSER : in std_logic_vector(0 to 0);
     IFCPMPSAXI0BVALID : in std_ulogic;
     IFCPMPSAXI0RDATA : in std_logic_vector(127 downto 0);
     IFCPMPSAXI0RID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0RLAST : in std_logic_vector(0 to 0);
     IFCPMPSAXI0RRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI0RUSER : in std_logic_vector(17 downto 0);
     IFCPMPSAXI0RVALID : in std_ulogic;
     IFCPMPSAXI0WREADY : in std_ulogic;
     IFCPMPSAXI1ARREADY : in std_ulogic;
     IFCPMPSAXI1AWREADY : in std_ulogic;
     IFCPMPSAXI1BID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1BRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI1BUSER : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1BVALID : in std_ulogic;
     IFCPMPSAXI1RDATA : in std_logic_vector(127 downto 0);
     IFCPMPSAXI1RID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1RLAST : in std_logic_vector(0 to 0);
     IFCPMPSAXI1RRESP : in std_logic_vector(1 downto 0);
     IFCPMPSAXI1RUSER : in std_logic_vector(16 downto 0);
     IFCPMPSAXI1RVALID : in std_ulogic;
     IFCPMPSAXI1WREADY : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL0XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL0XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL10XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL10XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL11XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL11XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL12XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL12XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL13XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL13XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL14XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL14XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL15XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL15XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL1XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL1XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL2XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL2XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL3XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL3XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL4XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL4XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL5XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL5XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL6XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL6XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL7XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL7XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL8XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL8XPIPERXVALID : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPEPHYSTATUS : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXELECIDLE : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXSTARTBLOCK : in std_ulogic;
     IFCPMXPIPECHANNEL9XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPECHANNEL9XPIPERXVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL0XPIPERXHEADERVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPERXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL0XPIPETXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL1XPIPERXHEADERVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPERXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL1XPIPETXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXDATAVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFCPMXPIPEHSDPCHANNEL2XPIPERXHEADERVALID : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPERXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPCHANNEL2XPIPETXRESETDONE : in std_ulogic;
     IFCPMXPIPEHSDPLINKXPIPEGTRXOUTCLK : in std_ulogic;
     IFCPMXPIPEINTQUADXPIPEPHYREADYTOBOT : in std_ulogic;
     IFCPMXPIPELINK0XPIPEBUFGTCE : in std_ulogic;
     IFCPMXPIPELINK0XPIPEBUFGTCEMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK0XPIPEBUFGTDIV : in std_logic_vector(11 downto 0);
     IFCPMXPIPELINK0XPIPEBUFGTRST : in std_ulogic;
     IFCPMXPIPELINK0XPIPEBUFGTRSTMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK0XPIPEGTOUTCLK : in std_ulogic;
     IFCPMXPIPELINK0XPIPEPHYREADY : in std_ulogic;
     IFCPMXPIPELINK1XPIPEBUFGTCE : in std_ulogic;
     IFCPMXPIPELINK1XPIPEBUFGTCEMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK1XPIPEBUFGTDIV : in std_logic_vector(11 downto 0);
     IFCPMXPIPELINK1XPIPEBUFGTRST : in std_ulogic;
     IFCPMXPIPELINK1XPIPEBUFGTRSTMASK : in std_logic_vector(3 downto 0);
     IFCPMXPIPELINK1XPIPEGTOUTCLK : in std_ulogic;
     IFCPMXPIPELINK1XPIPEPHYREADY : in std_ulogic;
     IFCPMXPIPEQUAD0XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD0XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD0XPIPERXMARGINRESREQ : in std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD1XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD1XPIPERXMARGINRESREQ : in std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD2XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD2XPIPERXMARGINRESREQ : in std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINREQACK : in std_ulogic;
     IFCPMXPIPEQUAD3XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFCPMXPIPEQUAD3XPIPERXMARGINRESREQ : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXIPCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     IFEXTCPMPCIE0AXIPCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     IFEXTCPMPCIE0AXIPCIECQNPREQ : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXIPCIECQNPUSERCREDITRCVD : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIECQPIPELINEEMPTY : in std_ulogic;
     IFEXTCPMPCIE0AXIPCIEPOSTEDREQDELIVERED : in std_ulogic;
     IFEXTCPMPCIE0AXITLRXCOMPLCREDITRELEASED : in std_ulogic;
     IFEXTCPMPCIE0AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFEXTCPMPCIE0AXITLRXNONPOSTEDCREDITRELEASED : in std_ulogic;
     IFEXTCPMPCIE0AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE0AXITLRXPOSTEDCREDITRELEASED : in std_ulogic;
     IFEXTCPMPCIE0AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFEXTCPMPCIE1AXIPCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXIPCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     IFEXTCPMPCIE1AXIPCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     IFEXTCPMPCIE1AXIPCIECQNPREQ : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXIPCIECQNPUSERCREDITRCVD : in std_ulogic;
     IFEXTCPMPCIE1AXIPCIECQPIPELINEEMPTY : in std_ulogic;
     IFEXTCPMPCIE1AXIPCIEPOSTEDREQDELIVERED : in std_ulogic;
     IFEXTCPMPCIE1AXITLRXCOMPLCREDITRELEASED : in std_ulogic;
     IFEXTCPMPCIE1AXITLRXCOMPLHEADERCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXITLRXCOMPLPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFEXTCPMPCIE1AXITLRXNONPOSTEDCREDITRELEASED : in std_ulogic;
     IFEXTCPMPCIE1AXITLRXNONPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(1 downto 0);
     IFEXTCPMPCIE1AXITLRXPOSTEDCREDITRELEASED : in std_ulogic;
     IFEXTCPMPCIE1AXITLRXPOSTEDPAYLOADCREDITRELEASEDVALUE : in std_logic_vector(6 downto 0);
     IFPCIE0PLCCAXISAXISCCTDATA : in std_logic_vector(511 downto 0);
     IFPCIE0PLCCAXISAXISCCTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE0PLCCAXISAXISCCTLAST : in std_ulogic;
     IFPCIE0PLCCAXISAXISCCTUSER : in std_logic_vector(80 downto 0);
     IFPCIE0PLCCAXISAXISCCTVALID : in std_ulogic;
     IFPCIE0PLRQAXISAXISRQTDATA : in std_logic_vector(511 downto 0);
     IFPCIE0PLRQAXISAXISRQTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE0PLRQAXISAXISRQTLAST : in std_ulogic;
     IFPCIE0PLRQAXISAXISRQTUSER : in std_logic_vector(136 downto 0);
     IFPCIE0PLRQAXISAXISRQTVALID : in std_ulogic;
     IFPCIE1PLCCAXISAXISCCTDATA : in std_logic_vector(511 downto 0);
     IFPCIE1PLCCAXISAXISCCTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE1PLCCAXISAXISCCTLAST : in std_ulogic;
     IFPCIE1PLCCAXISAXISCCTUSER : in std_logic_vector(80 downto 0);
     IFPCIE1PLCCAXISAXISCCTVALID : in std_ulogic;
     IFPCIE1PLRQAXISAXISRQTDATA : in std_logic_vector(511 downto 0);
     IFPCIE1PLRQAXISAXISRQTKEEP : in std_logic_vector(15 downto 0);
     IFPCIE1PLRQAXISAXISRQTLAST : in std_ulogic;
     IFPCIE1PLRQAXISAXISRQTUSER : in std_logic_vector(136 downto 0);
     IFPCIE1PLRQAXISAXISRQTVALID : in std_ulogic;
     IFPLCPMP0CHICRSPLCRDV : in std_ulogic;
     IFPLCPMP0CHIMLINKACTIVEREQ : in std_ulogic;
     IFPLCPMP0CHIMSACTIVE : in std_ulogic;
     IFPLCPMP0CHIRDATLCRDV : in std_ulogic;
     IFPLCPMP0CHIREQFLIT : in std_logic_vector(120 downto 0);
     IFPLCPMP0CHIREQFLITPEND : in std_ulogic;
     IFPLCPMP0CHIREQFLITV : in std_ulogic;
     IFPLCPMP0CHISLINKACTIVEACK : in std_ulogic;
     IFPLCPMP0CHISNPLCRDV : in std_ulogic;
     IFPLCPMP0CHISRSPFLIT : in std_logic_vector(50 downto 0);
     IFPLCPMP0CHISRSPFLITPEND : in std_ulogic;
     IFPLCPMP0CHISRSPFLITV : in std_ulogic;
     IFPLCPMP0CHISYSCOREQ : in std_ulogic;
     IFPLCPMP0CHIWDATFLIT : in std_logic_vector(704 downto 0);
     IFPLCPMP0CHIWDATFLITPEND : in std_ulogic;
     IFPLCPMP0CHIWDATFLITV : in std_ulogic;
     IFPLCPMP1CHICRSPLCRDV : in std_ulogic;
     IFPLCPMP1CHIMLINKACTIVEREQ : in std_ulogic;
     IFPLCPMP1CHIMSACTIVE : in std_ulogic;
     IFPLCPMP1CHIRDATLCRDV : in std_ulogic;
     IFPLCPMP1CHIREQFLIT : in std_logic_vector(120 downto 0);
     IFPLCPMP1CHIREQFLITPEND : in std_ulogic;
     IFPLCPMP1CHIREQFLITV : in std_ulogic;
     IFPLCPMP1CHISLINKACTIVEACK : in std_ulogic;
     IFPLCPMP1CHISNPLCRDV : in std_ulogic;
     IFPLCPMP1CHISRSPFLIT : in std_logic_vector(50 downto 0);
     IFPLCPMP1CHISRSPFLITPEND : in std_ulogic;
     IFPLCPMP1CHISRSPFLITV : in std_ulogic;
     IFPLCPMP1CHISYSCOREQ : in std_ulogic;
     IFPLCPMP1CHIWDATFLIT : in std_logic_vector(704 downto 0);
     IFPLCPMP1CHIWDATFLITPEND : in std_ulogic;
     IFPLCPMP1CHIWDATFLITV : in std_ulogic;
     IFPSCPMCFGAXIARADDR : in std_logic_vector(63 downto 0);
     IFPSCPMCFGAXIARBURST : in std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIARCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIARLEN : in std_logic_vector(7 downto 0);
     IFPSCPMCFGAXIARLOCK : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIARPROT : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIARQOS : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARREGION : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIARUSER : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIARVALID : in std_ulogic;
     IFPSCPMCFGAXIAWADDR : in std_logic_vector(63 downto 0);
     IFPSCPMCFGAXIAWBURST : in std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIAWCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIAWLEN : in std_logic_vector(7 downto 0);
     IFPSCPMCFGAXIAWLOCK : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIAWPROT : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIAWQOS : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWREGION : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIAWUSER : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIAWVALID : in std_ulogic;
     IFPSCPMCFGAXIBREADY : in std_ulogic;
     IFPSCPMCFGAXIRREADY : in std_ulogic;
     IFPSCPMCFGAXIWDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCFGAXIWID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIWLAST : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIWSTRB : in std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIWUSER : in std_logic_vector(5 downto 0);
     IFPSCPMCFGAXIWVALID : in std_ulogic;
     IFPSCPMCHANNEL0XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL0XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL0XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL0XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL0XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL0XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL0XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL0XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL10XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL10XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL10XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL10XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL10XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL10XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL10XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL11XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL11XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL11XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL11XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL11XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL11XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL11XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL12XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL12XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL12XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL12XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL12XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL12XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL12XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL13XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL13XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL13XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL13XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL13XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL13XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL13XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL14XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL14XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL14XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL14XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL14XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL14XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL14XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL15XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL15XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL15XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL15XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL15XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL15XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL15XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL1XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL1XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL1XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL1XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL1XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL1XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL1XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL2XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL2XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL2XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL2XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL2XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL2XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL2XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL3XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL3XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL3XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL3XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL3XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL3XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL3XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL4XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL4XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL4XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL4XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL4XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL4XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL4XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL5XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL5XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL5XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL5XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL5XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL5XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL5XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL6XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL6XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL6XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL6XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL6XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL6XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL6XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL7XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL7XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL7XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL7XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL7XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL7XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL7XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL8XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL8XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL8XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL8XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL8XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL8XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL8XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPEPOWERDOWN : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXPOLARITY : in std_ulogic;
     IFPSCPMCHANNEL9XPIPERXTERMINATION : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPETXCOMPLIANCE : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL9XPIPETXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDEEMPH : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDETECTRXLOOPBACK : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXMAINCURSOR : in std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL9XPIPETXMARGIN : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL9XPIPETXPOSTCURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL9XPIPETXPRECURSOR : in std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL9XPIPETXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXSWING : in std_ulogic;
     IFPSCPMCHANNEL9XPIPETXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPERXGEARBOXSLIP : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXPCSRESET : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPETXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPETXSEQUENCE : in std_logic_vector(6 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPERXGEARBOXSLIP : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXPCSRESET : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPETXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPETXSEQUENCE : in std_logic_vector(6 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPERXGEARBOXSLIP : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXPCSRESET : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPETXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPETXSEQUENCE : in std_logic_vector(6 downto 0);
     IFPSCPMHSDPLINKXPIPEGTRXUSRCLK : in std_ulogic;
     IFPSCPMINTQUADXPIPEPHYREADYFRBOT : in std_ulogic;
     IFPSCPMLINK0XPIPEGTPIPECLK : in std_ulogic;
     IFPSCPMLINK0XPIPEPCIELINKREACHTARGET : in std_ulogic;
     IFPSCPMLINK0XPIPEPCIELTSSMSTATE : in std_logic_vector(5 downto 0);
     IFPSCPMLINK0XPIPEPCIEPERSTN : in std_ulogic;
     IFPSCPMLINK0XPIPEPHYESMADAPTATIONSAVE : in std_ulogic;
     IFPSCPMLINK0XPIPEPIPERATE : in std_logic_vector(2 downto 0);
     IFPSCPMLINK1XPIPEGTPIPECLK : in std_ulogic;
     IFPSCPMLINK1XPIPEPCIELINKREACHTARGET : in std_ulogic;
     IFPSCPMLINK1XPIPEPCIELTSSMSTATE : in std_logic_vector(5 downto 0);
     IFPSCPMLINK1XPIPEPCIEPERSTN : in std_ulogic;
     IFPSCPMLINK1XPIPEPHYESMADAPTATIONSAVE : in std_ulogic;
     IFPSCPMLINK1XPIPEPIPERATE : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARADDR : in std_logic_vector(63 downto 0);
     IFPSCPMPCIEAXIARBURST : in std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIARCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIARLEN : in std_logic_vector(7 downto 0);
     IFPSCPMPCIEAXIARLOCK : in std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIARPROT : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARQOS : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARREGION : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARUSER : in std_logic_vector(17 downto 0);
     IFPSCPMPCIEAXIARVALID : in std_ulogic;
     IFPSCPMPCIEAXIAWADDR : in std_logic_vector(63 downto 0);
     IFPSCPMPCIEAXIAWBURST : in std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIAWCACHE : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIAWLEN : in std_logic_vector(7 downto 0);
     IFPSCPMPCIEAXIAWLOCK : in std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIAWPROT : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIAWQOS : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWREGION : in std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWSIZE : in std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIAWUSER : in std_logic_vector(17 downto 0);
     IFPSCPMPCIEAXIAWVALID : in std_ulogic;
     IFPSCPMPCIEAXIBREADY : in std_ulogic;
     IFPSCPMPCIEAXIRREADY : in std_ulogic;
     IFPSCPMPCIEAXIWDATA : in std_logic_vector(127 downto 0);
     IFPSCPMPCIEAXIWID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIWLAST : in std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIWSTRB : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIWUSER : in std_logic_vector(16 downto 0);
     IFPSCPMPCIEAXIWVALID : in std_ulogic;
     IFPSCPMPCSRPCRAPBEN : in std_ulogic;
     IFPSCPMPCSRPCRDISNPICLK : in std_ulogic;
     IFPSCPMPCSRPCRFABRICEN : in std_ulogic;
     IFPSCPMPCSRPCRGATEREG : in std_ulogic;
     IFPSCPMPCSRPCRHOLDSTATE : in std_ulogic;
     IFPSCPMPCSRPCRINITSTATE : in std_ulogic;
     IFPSCPMPCSRPCRMEMCLR : in std_ulogic;
     IFPSCPMPCSRPCRODISABLE : in std_logic_vector(3 downto 0);
     IFPSCPMPCSRPCRPCOMPLETE : in std_ulogic;
     IFPSCPMPCSRPCRPWRDN : in std_ulogic;
     IFPSCPMPCSRPCRSCANCLR : in std_ulogic;
     IFPSCPMPCSRPCRSTARTBISR : in std_ulogic;
     IFPSCPMPCSRPCRSTARTCAL : in std_ulogic;
     IFPSCPMPCSRPCRTRISTATE : in std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINRESACK : in std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINRESACK : in std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINRESACK : in std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINREQCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQREQ : in std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINRESACK : in std_ulogic;
     LPDCPMINREFCLK : in std_ulogic;
     LPDCPMSWITCHTIMEOUTCNT : in std_ulogic;
     LPDCPMTOPSWCLK : in std_ulogic;
     PERST0N : in std_ulogic;
     PERST1N : in std_ulogic;
     PLCHI0CLK : in std_ulogic;
     PLCHI1CLK : in std_ulogic;
     PLCPMIRQ0 : in std_ulogic;
     PLCPMIRQ1 : in std_ulogic;
     PLREFCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CPM_MAIN : component is "PRIMITIVE";

----- component DCIRESET -----
component DCIRESET
  port (
     LOCKED : out std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DCIRESET : component is "PRIMITIVE";

----- component DCM_ADV -----
component DCM_ADV
  generic (
     CLKDV_DIVIDE : real := 2.0;
     CLKFX_DIVIDE : integer := 1;
     CLKFX_MULTIPLY : integer := 4;
     CLKIN_DIVIDE_BY_2 : boolean := false;
     CLKIN_PERIOD : real := 10.0;
     CLKOUT_PHASE_SHIFT : string := "NONE";
     CLK_FEEDBACK : string := "1X";
     DCM_AUTOCALIBRATION : boolean := true;
     DCM_PERFORMANCE_MODE : string := "MAX_SPEED";
     DESKEW_ADJUST : string := "SYSTEM_SYNCHRONOUS";
     DFS_FREQUENCY_MODE : string := "LOW";
     DLL_FREQUENCY_MODE : string := "LOW";
     DUTY_CYCLE_CORRECTION : boolean := true;
     FACTORY_JF : bit_vector := X"F0F0";
     PHASE_SHIFT : integer := 0;
     SIM_DEVICE : string := "VIRTEX4";
     STARTUP_WAIT : boolean := false
  );
  port (
     CLK0 : out std_ulogic := '0';
     CLK180 : out std_ulogic := '0';
     CLK270 : out std_ulogic := '0';
     CLK2X : out std_ulogic := '0';
     CLK2X180 : out std_ulogic := '0';
     CLK90 : out std_ulogic := '0';
     CLKDV : out std_ulogic := '0';
     CLKFX : out std_ulogic := '0';
     CLKFX180 : out std_ulogic := '0';
     DO : out std_logic_vector(15 downto 0) := "0000000000000000";
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     CLKFB : in std_ulogic := '0';
     CLKIN : in std_ulogic := '0';
     DADDR : in std_logic_vector(6 downto 0) := "0000000";
     DCLK : in std_ulogic := '0';
     DEN : in std_ulogic := '0';
     DI : in std_logic_vector(15 downto 0) := "0000000000000000";
     DWE : in std_ulogic := '0';
     PSCLK : in std_ulogic := '0';
     PSEN : in std_ulogic := '0';
     PSINCDEC : in std_ulogic := '0';
     RST : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  DCM_ADV : component is "PRIMITIVE";

----- component DCM_SP -----
component DCM_SP
  generic (
     CLKDV_DIVIDE : real := 2.0;
     CLKFX_DIVIDE : integer := 1;
     CLKFX_MULTIPLY : integer := 4;
     CLKIN_DIVIDE_BY_2 : boolean := false;
     CLKIN_PERIOD : real := 10.0;
     CLKOUT_PHASE_SHIFT : string := "NONE";
     CLK_FEEDBACK : string := "1X";
     DESKEW_ADJUST : string := "SYSTEM_SYNCHRONOUS";
     DFS_FREQUENCY_MODE : string := "LOW";
     DLL_FREQUENCY_MODE : string := "LOW";
     DSS_MODE : string := "NONE";
     DUTY_CYCLE_CORRECTION : boolean := true;
     FACTORY_JF : bit_vector := X"C080";
     PHASE_SHIFT : integer := 0;
     STARTUP_WAIT : boolean := false
  );
  port (
     CLK0 : out std_ulogic := '0';
     CLK180 : out std_ulogic := '0';
     CLK270 : out std_ulogic := '0';
     CLK2X : out std_ulogic := '0';
     CLK2X180 : out std_ulogic := '0';
     CLK90 : out std_ulogic := '0';
     CLKDV : out std_ulogic := '0';
     CLKFX : out std_ulogic := '0';
     CLKFX180 : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     STATUS : out std_logic_vector(7 downto 0) := "00000000";
     CLKFB : in std_ulogic := '0';
     CLKIN : in std_ulogic := '0';
     DSSEN : in std_ulogic := '0';
     PSCLK : in std_ulogic := '0';
     PSEN : in std_ulogic := '0';
     PSINCDEC : in std_ulogic := '0';
     RST : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  DCM_SP : component is "PRIMITIVE";

----- component DDRMC -----
component DDRMC
  generic (
     ARBITER_CONFIG : bit := '1';
     CAL_CS_CH : std_logic_vector(1 downto 0) := "00";
     CAL_MODE : bit := '0';
     CLK_GATE : std_logic_vector(18 downto 0) := "111" & X"FFFF";
     CPLX_BURST_ARRAY0 : std_logic_vector(4 downto 0) := "0" & X"1";
     CPLX_BURST_ARRAY1 : std_logic_vector(4 downto 0) := "0" & X"2";
     CPLX_BURST_ARRAY10 : std_logic_vector(4 downto 0) := "0" & X"5";
     CPLX_BURST_ARRAY11 : std_logic_vector(4 downto 0) := "0" & X"6";
     CPLX_BURST_ARRAY12 : std_logic_vector(4 downto 0) := "0" & X"3";
     CPLX_BURST_ARRAY13 : std_logic_vector(4 downto 0) := "0" & X"4";
     CPLX_BURST_ARRAY14 : std_logic_vector(4 downto 0) := "0" & X"5";
     CPLX_BURST_ARRAY15 : std_logic_vector(4 downto 0) := "0" & X"7";
     CPLX_BURST_ARRAY16 : std_logic_vector(4 downto 0) := "0" & X"8";
     CPLX_BURST_ARRAY17 : std_logic_vector(4 downto 0) := "0" & X"9";
     CPLX_BURST_ARRAY18 : std_logic_vector(4 downto 0) := "0" & X"A";
     CPLX_BURST_ARRAY19 : std_logic_vector(4 downto 0) := "0" & X"C";
     CPLX_BURST_ARRAY2 : std_logic_vector(4 downto 0) := "0" & X"3";
     CPLX_BURST_ARRAY20 : std_logic_vector(4 downto 0) := "0" & X"D";
     CPLX_BURST_ARRAY21 : std_logic_vector(4 downto 0) := "0" & X"E";
     CPLX_BURST_ARRAY22 : std_logic_vector(4 downto 0) := "1" & X"E";
     CPLX_BURST_ARRAY3 : std_logic_vector(4 downto 0) := "0" & X"4";
     CPLX_BURST_ARRAY4 : std_logic_vector(4 downto 0) := "0" & X"5";
     CPLX_BURST_ARRAY5 : std_logic_vector(4 downto 0) := "0" & X"6";
     CPLX_BURST_ARRAY6 : std_logic_vector(4 downto 0) := "0" & X"1";
     CPLX_BURST_ARRAY7 : std_logic_vector(4 downto 0) := "0" & X"2";
     CPLX_BURST_ARRAY8 : std_logic_vector(4 downto 0) := "0" & X"3";
     CPLX_BURST_ARRAY9 : std_logic_vector(4 downto 0) := "0" & X"4";
     CPLX_CONFIG : std_logic_vector(30 downto 0) := "011" & X"B7F8084";
     CPLX_CONFIG2 : std_logic_vector(24 downto 0) := "1" & X"0E0480";
     CPLX_CONFIG3 : std_logic_vector(9 downto 0) := "00" & X"00";
     CPLX_PATTERN0 : std_logic_vector(15 downto 0) := X"AAAA";
     CPLX_PATTERN1 : std_logic_vector(15 downto 0) := X"CCCC";
     CPLX_PATTERN10 : std_logic_vector(15 downto 0) := X"F8F8";
     CPLX_PATTERN100 : std_logic_vector(15 downto 0) := X"AA31";
     CPLX_PATTERN101 : std_logic_vector(15 downto 0) := X"BF47";
     CPLX_PATTERN102 : std_logic_vector(15 downto 0) := X"F525";
     CPLX_PATTERN103 : std_logic_vector(15 downto 0) := X"549A";
     CPLX_PATTERN104 : std_logic_vector(15 downto 0) := X"007A";
     CPLX_PATTERN105 : std_logic_vector(15 downto 0) := X"AA95";
     CPLX_PATTERN106 : std_logic_vector(15 downto 0) := X"BFDB";
     CPLX_PATTERN107 : std_logic_vector(15 downto 0) := X"F5F0";
     CPLX_PATTERN108 : std_logic_vector(15 downto 0) := X"5421";
     CPLX_PATTERN109 : std_logic_vector(15 downto 0) := X"008A";
     CPLX_PATTERN11 : std_logic_vector(15 downto 0) := X"3E3E";
     CPLX_PATTERN110 : std_logic_vector(15 downto 0) := X"AA25";
     CPLX_PATTERN111 : std_logic_vector(15 downto 0) := X"BF9A";
     CPLX_PATTERN112 : std_logic_vector(15 downto 0) := X"F57A";
     CPLX_PATTERN113 : std_logic_vector(15 downto 0) := X"AABF";
     CPLX_PATTERN114 : std_logic_vector(15 downto 0) := X"A057";
     CPLX_PATTERN115 : std_logic_vector(15 downto 0) := X"026F";
     CPLX_PATTERN116 : std_logic_vector(15 downto 0) := X"AAC0";
     CPLX_PATTERN117 : std_logic_vector(15 downto 0) := X"8084";
     CPLX_PATTERN118 : std_logic_vector(15 downto 0) := X"0A31";
     CPLX_PATTERN119 : std_logic_vector(15 downto 0) := X"AA47";
     CPLX_PATTERN12 : std_logic_vector(15 downto 0) := X"0F0F";
     CPLX_PATTERN120 : std_logic_vector(15 downto 0) := X"0025";
     CPLX_PATTERN121 : std_logic_vector(15 downto 0) := X"2A9A";
     CPLX_PATTERN122 : std_logic_vector(15 downto 0) := X"A87A";
     CPLX_PATTERN123 : std_logic_vector(15 downto 0) := X"0095";
     CPLX_PATTERN124 : std_logic_vector(15 downto 0) := X"AADB";
     CPLX_PATTERN125 : std_logic_vector(15 downto 0) := X"A0F0";
     CPLX_PATTERN126 : std_logic_vector(15 downto 0) := X"0221";
     CPLX_PATTERN127 : std_logic_vector(15 downto 0) := X"5757";
     CPLX_PATTERN128 : std_logic_vector(15 downto 0) := X"6F6F";
     CPLX_PATTERN129 : std_logic_vector(15 downto 0) := X"C0C0";
     CPLX_PATTERN13 : std_logic_vector(15 downto 0) := X"8383";
     CPLX_PATTERN130 : std_logic_vector(15 downto 0) := X"8684";
     CPLX_PATTERN131 : std_logic_vector(15 downto 0) := X"2831";
     CPLX_PATTERN132 : std_logic_vector(15 downto 0) := X"E447";
     CPLX_PATTERN133 : std_logic_vector(15 downto 0) := X"B325";
     CPLX_PATTERN134 : std_logic_vector(15 downto 0) := X"4F9B";
     CPLX_PATTERN135 : std_logic_vector(15 downto 0) := X"B555";
     CPLX_PATTERN136 : std_logic_vector(15 downto 0) := X"B555";
     CPLX_PATTERN137 : std_logic_vector(15 downto 0) := X"8798";
     CPLX_PATTERN138 : std_logic_vector(15 downto 0) := X"E31C";
     CPLX_PATTERN139 : std_logic_vector(15 downto 0) := X"0AF5";
     CPLX_PATTERN14 : std_logic_vector(15 downto 0) := X"E0E0";
     CPLX_PATTERN140 : std_logic_vector(15 downto 0) := X"D42B";
     CPLX_PATTERN141 : std_logic_vector(15 downto 0) := X"48B7";
     CPLX_PATTERN142 : std_logic_vector(15 downto 0) := X"1FE0";
     CPLX_PATTERN143 : std_logic_vector(15 downto 0) := X"BC43";
     CPLX_PATTERN144 : std_logic_vector(15 downto 0) := X"8F14";
     CPLX_PATTERN145 : std_logic_vector(15 downto 0) := X"B44B";
     CPLX_PATTERN146 : std_logic_vector(15 downto 0) := X"CB34";
     CPLX_PATTERN147 : std_logic_vector(15 downto 0) := X"0AF5";
     CPLX_PATTERN148 : std_logic_vector(15 downto 0) := X"8000";
     CPLX_PATTERN149 : std_logic_vector(15 downto 0) := X"0000";
     CPLX_PATTERN15 : std_logic_vector(15 downto 0) := X"FCFC";
     CPLX_PATTERN150 : std_logic_vector(15 downto 0) := X"5555";
     CPLX_PATTERN151 : std_logic_vector(15 downto 0) := X"5555";
     CPLX_PATTERN152 : std_logic_vector(15 downto 0) := X"0000";
     CPLX_PATTERN153 : std_logic_vector(15 downto 0) := X"0000";
     CPLX_PATTERN154 : std_logic_vector(15 downto 0) := X"552A";
     CPLX_PATTERN155 : std_logic_vector(15 downto 0) := X"55AA";
     CPLX_PATTERN156 : std_logic_vector(15 downto 0) := X"0080";
     CPLX_PATTERN16 : std_logic_vector(15 downto 0) := X"0F0F";
     CPLX_PATTERN17 : std_logic_vector(15 downto 0) := X"C0C0";
     CPLX_PATTERN18 : std_logic_vector(15 downto 0) := X"FCFC";
     CPLX_PATTERN19 : std_logic_vector(15 downto 0) := X"0F0F";
     CPLX_PATTERN2 : std_logic_vector(15 downto 0) := X"CCCC";
     CPLX_PATTERN20 : std_logic_vector(15 downto 0) := X"C0C0";
     CPLX_PATTERN21 : std_logic_vector(15 downto 0) := X"AA55";
     CPLX_PATTERN22 : std_logic_vector(15 downto 0) := X"CC33";
     CPLX_PATTERN23 : std_logic_vector(15 downto 0) := X"CC33";
     CPLX_PATTERN24 : std_logic_vector(15 downto 0) := X"E31C";
     CPLX_PATTERN25 : std_logic_vector(15 downto 0) := X"FE71";
     CPLX_PATTERN26 : std_logic_vector(15 downto 0) := X"38C7";
     CPLX_PATTERN27 : std_logic_vector(15 downto 0) := X"F00F";
     CPLX_PATTERN28 : std_logic_vector(15 downto 0) := X"F00F";
     CPLX_PATTERN29 : std_logic_vector(15 downto 0) := X"F00F";
     CPLX_PATTERN3 : std_logic_vector(15 downto 0) := X"E3E3";
     CPLX_PATTERN30 : std_logic_vector(15 downto 0) := X"F00F";
     CPLX_PATTERN31 : std_logic_vector(15 downto 0) := X"F807";
     CPLX_PATTERN32 : std_logic_vector(15 downto 0) := X"3EC1";
     CPLX_PATTERN33 : std_logic_vector(15 downto 0) := X"0FF0";
     CPLX_PATTERN34 : std_logic_vector(15 downto 0) := X"837C";
     CPLX_PATTERN35 : std_logic_vector(15 downto 0) := X"E01F";
     CPLX_PATTERN36 : std_logic_vector(15 downto 0) := X"FC03";
     CPLX_PATTERN37 : std_logic_vector(15 downto 0) := X"0FF0";
     CPLX_PATTERN38 : std_logic_vector(15 downto 0) := X"C03F";
     CPLX_PATTERN39 : std_logic_vector(15 downto 0) := X"FC03";
     CPLX_PATTERN4 : std_logic_vector(15 downto 0) := X"8E8E";
     CPLX_PATTERN40 : std_logic_vector(15 downto 0) := X"0FF0";
     CPLX_PATTERN41 : std_logic_vector(15 downto 0) := X"C03F";
     CPLX_PATTERN42 : std_logic_vector(15 downto 0) := X"B457";
     CPLX_PATTERN43 : std_logic_vector(15 downto 0) := X"B46F";
     CPLX_PATTERN44 : std_logic_vector(15 downto 0) := X"B4C0";
     CPLX_PATTERN45 : std_logic_vector(15 downto 0) := X"A284";
     CPLX_PATTERN46 : std_logic_vector(15 downto 0) := X"8A31";
     CPLX_PATTERN47 : std_logic_vector(15 downto 0) := X"2847";
     CPLX_PATTERN48 : std_logic_vector(15 downto 0) := X"A225";
     CPLX_PATTERN49 : std_logic_vector(15 downto 0) := X"AF9A";
     CPLX_PATTERN5 : std_logic_vector(15 downto 0) := X"3838";
     CPLX_PATTERN50 : std_logic_vector(15 downto 0) := X"507A";
     CPLX_PATTERN51 : std_logic_vector(15 downto 0) := X"AF95";
     CPLX_PATTERN52 : std_logic_vector(15 downto 0) := X"50DB";
     CPLX_PATTERN53 : std_logic_vector(15 downto 0) := X"AFF0";
     CPLX_PATTERN54 : std_logic_vector(15 downto 0) := X"A821";
     CPLX_PATTERN55 : std_logic_vector(15 downto 0) := X"2A8A";
     CPLX_PATTERN56 : std_logic_vector(15 downto 0) := X"0A25";
     CPLX_PATTERN57 : std_logic_vector(15 downto 0) := X"829A";
     CPLX_PATTERN58 : std_logic_vector(15 downto 0) := X"A07A";
     CPLX_PATTERN59 : std_logic_vector(15 downto 0) := X"A8BF";
     CPLX_PATTERN6 : std_logic_vector(15 downto 0) := X"F0F0";
     CPLX_PATTERN60 : std_logic_vector(15 downto 0) := X"2A57";
     CPLX_PATTERN61 : std_logic_vector(15 downto 0) := X"AB6F";
     CPLX_PATTERN62 : std_logic_vector(15 downto 0) := X"F5C0";
     CPLX_PATTERN63 : std_logic_vector(15 downto 0) := X"4084";
     CPLX_PATTERN64 : std_logic_vector(15 downto 0) := X"AB31";
     CPLX_PATTERN65 : std_logic_vector(15 downto 0) := X"F547";
     CPLX_PATTERN66 : std_logic_vector(15 downto 0) := X"4025";
     CPLX_PATTERN67 : std_logic_vector(15 downto 0) := X"AB9A";
     CPLX_PATTERN68 : std_logic_vector(15 downto 0) := X"F57A";
     CPLX_PATTERN69 : std_logic_vector(15 downto 0) := X"AA95";
     CPLX_PATTERN7 : std_logic_vector(15 downto 0) := X"F0F0";
     CPLX_PATTERN70 : std_logic_vector(15 downto 0) := X"02DB";
     CPLX_PATTERN71 : std_logic_vector(15 downto 0) := X"A8F0";
     CPLX_PATTERN72 : std_logic_vector(15 downto 0) := X"0A21";
     CPLX_PATTERN73 : std_logic_vector(15 downto 0) := X"A08A";
     CPLX_PATTERN74 : std_logic_vector(15 downto 0) := X"2A25";
     CPLX_PATTERN75 : std_logic_vector(15 downto 0) := X"809A";
     CPLX_PATTERN76 : std_logic_vector(15 downto 0) := X"AA7A";
     CPLX_PATTERN77 : std_logic_vector(15 downto 0) := X"02BF";
     CPLX_PATTERN78 : std_logic_vector(15 downto 0) := X"AA57";
     CPLX_PATTERN79 : std_logic_vector(15 downto 0) := X"FF6F";
     CPLX_PATTERN8 : std_logic_vector(15 downto 0) := X"F0F0";
     CPLX_PATTERN80 : std_logic_vector(15 downto 0) := X"55C0";
     CPLX_PATTERN81 : std_logic_vector(15 downto 0) := X"0084";
     CPLX_PATTERN82 : std_logic_vector(15 downto 0) := X"AA31";
     CPLX_PATTERN83 : std_logic_vector(15 downto 0) := X"FF47";
     CPLX_PATTERN84 : std_logic_vector(15 downto 0) := X"5525";
     CPLX_PATTERN85 : std_logic_vector(15 downto 0) := X"009A";
     CPLX_PATTERN86 : std_logic_vector(15 downto 0) := X"AA7A";
     CPLX_PATTERN87 : std_logic_vector(15 downto 0) := X"FF95";
     CPLX_PATTERN88 : std_logic_vector(15 downto 0) := X"AADB";
     CPLX_PATTERN89 : std_logic_vector(15 downto 0) := X"80F0";
     CPLX_PATTERN9 : std_logic_vector(15 downto 0) := X"F0F0";
     CPLX_PATTERN90 : std_logic_vector(15 downto 0) := X"2A21";
     CPLX_PATTERN91 : std_logic_vector(15 downto 0) := X"A08A";
     CPLX_PATTERN92 : std_logic_vector(15 downto 0) := X"0A25";
     CPLX_PATTERN93 : std_logic_vector(15 downto 0) := X"A89A";
     CPLX_PATTERN94 : std_logic_vector(15 downto 0) := X"027A";
     CPLX_PATTERN95 : std_logic_vector(15 downto 0) := X"AABF";
     CPLX_PATTERN96 : std_logic_vector(15 downto 0) := X"0057";
     CPLX_PATTERN97 : std_logic_vector(15 downto 0) := X"AA6F";
     CPLX_PATTERN98 : std_logic_vector(15 downto 0) := X"80C0";
     CPLX_PATTERN99 : std_logic_vector(15 downto 0) := X"2A84";
     DBG_TRIGGER : std_logic_vector(2 downto 0) := "000";
     DC_CMD_CREDITS : std_logic_vector(11 downto 0) := X"2A8";
     DEFAULT_PATTERN : std_logic_vector(9 downto 0) := "00" & X"A5";
     EXMON_CLR_EXE : std_logic_vector(8 downto 0) := "1" & X"00";
     FIFO_RDEN : std_logic_vector(6 downto 0) := "000" & X"0";
     PHY_RANK_READ_OVERRIDE : std_logic_vector(17 downto 0) := "00" & X"0000";
     PHY_RANK_WRITE_OVERRIDE : std_logic_vector(17 downto 0) := "00" & X"0000";
     PHY_RDEN0 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN1 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN10 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN11 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN12 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN13 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN14 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN15 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN16 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN17 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN18 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN19 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN2 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN20 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN21 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN22 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN23 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN24 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN25 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN26 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN3 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN4 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN5 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN6 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN7 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN8 : std_logic_vector(6 downto 0) := "000" & X"5";
     PHY_RDEN9 : std_logic_vector(6 downto 0) := "000" & X"5";
     PRBS_CNT : std_logic_vector(31 downto 0) := X"00020004";
     PRBS_CONFIG : std_logic_vector(16 downto 0) := "0" & X"8244";
     PRBS_CONFIG2 : std_logic_vector(17 downto 0) := "00" & X"0000";
     PRBS_SEED0 : std_logic_vector(22 downto 0) := "000" & X"00001";
     PRBS_SEED1 : std_logic_vector(22 downto 0) := "000" & X"00002";
     PRBS_SEED2 : std_logic_vector(22 downto 0) := "000" & X"00004";
     PRBS_SEED3 : std_logic_vector(22 downto 0) := "000" & X"00008";
     PRBS_SEED4 : std_logic_vector(22 downto 0) := "000" & X"00010";
     PRBS_SEED5 : std_logic_vector(22 downto 0) := "000" & X"00020";
     PRBS_SEED6 : std_logic_vector(22 downto 0) := "000" & X"00040";
     PRBS_SEED7 : std_logic_vector(22 downto 0) := "000" & X"00080";
     PRBS_SEED8 : std_logic_vector(22 downto 0) := "000" & X"00100";
     RAM_SETTING_RF2PHS : std_logic_vector(7 downto 0) := X"12";
     RAM_SETTING_RFSPHD : std_logic_vector(6 downto 0) := "000" & X"A";
     RAM_SETTING_SRSPHD : std_logic_vector(6 downto 0) := "000" & X"A";
     REG_ADEC0 : std_logic_vector(19 downto 0) := X"00000";
     REG_ADEC1 : std_logic_vector(19 downto 0) := X"00000";
     REG_ADEC10 : std_logic_vector(29 downto 0) := "00" & X"0000000";
     REG_ADEC11 : std_logic_vector(23 downto 0) := X"000000";
     REG_ADEC2 : std_logic_vector(20 downto 0) := "1" & X"00000";
     REG_ADEC3 : std_logic_vector(19 downto 0) := X"00000";
     REG_ADEC4 : std_logic_vector(29 downto 0) := "00" & X"0000000";
     REG_ADEC5 : std_logic_vector(29 downto 0) := "00" & X"0000000";
     REG_ADEC6 : std_logic_vector(29 downto 0) := "00" & X"0000000";
     REG_ADEC7 : std_logic_vector(29 downto 0) := "00" & X"0000000";
     REG_ADEC8 : std_logic_vector(29 downto 0) := "00" & X"0000000";
     REG_ADEC9 : std_logic_vector(29 downto 0) := "00" & X"0000000";
     REG_CMDQ_BER_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_CMDQ_BEW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_CMDQ_CTRL0 : std_logic_vector(24 downto 0) := "1" & X"084210";
     REG_CMDQ_CTRL1 : std_logic_vector(24 downto 0) := "1" & X"084210";
     REG_CMDQ_ISR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_CMDQ_ISW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_CMDQ_LLR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_COM_1 : std_logic_vector(26 downto 0) := "000" & X"020000";
     REG_COM_2 : std_logic_vector(26 downto 0) := "000" & X"020000";
     REG_COM_3 : std_logic_vector(17 downto 0) := "01" & X"4410";
     REG_CONFIG0 : std_logic_vector(22 downto 0) := "100" & X"00000";
     REG_CONFIG1 : std_logic_vector(2 downto 0) := "000";
     REG_CONFIG2 : std_logic_vector(30 downto 0) := "000" & X"0000000";
     REG_CONFIG3 : std_logic_vector(31 downto 0) := X"FEC9FEC6";
     REG_CONFIG4 : std_logic_vector(22 downto 0) := "001" & X"318A5";
     REG_DRAM_ARB : std_logic_vector(12 downto 0) := "0" & X"910";
     REG_MRS_0 : std_logic_vector(25 downto 0) := "00" & X"200924";
     REG_MRS_1 : std_logic_vector(31 downto 0) := X"92000000";
     REG_MRS_2 : std_logic_vector(2 downto 0) := "000";
     REG_MRS_7 : std_logic_vector(7 downto 0) := X"28";
     REG_NSU0_PORT : std_logic_vector(11 downto 0) := X"000";
     REG_NSU1_PORT : std_logic_vector(11 downto 0) := X"000";
     REG_NSU2_PORT : std_logic_vector(11 downto 0) := X"000";
     REG_NSU3_PORT : std_logic_vector(11 downto 0) := X"000";
     REG_NSU_0_EGR : std_logic_vector(22 downto 0) := "110" & X"43210";
     REG_NSU_0_ING : std_logic_vector(26 downto 0) := "110" & X"432101";
     REG_NSU_0_R_EGR : std_logic_vector(27 downto 0) := X"1010100";
     REG_NSU_0_W_EGR : std_logic_vector(19 downto 0) := X"10100";
     REG_NSU_1_EGR : std_logic_vector(22 downto 0) := "110" & X"43210";
     REG_NSU_1_ING : std_logic_vector(26 downto 0) := "110" & X"432101";
     REG_NSU_1_R_EGR : std_logic_vector(27 downto 0) := X"1010100";
     REG_NSU_1_W_EGR : std_logic_vector(19 downto 0) := X"10100";
     REG_NSU_2_EGR : std_logic_vector(22 downto 0) := "110" & X"43210";
     REG_NSU_2_ING : std_logic_vector(26 downto 0) := "110" & X"432101";
     REG_NSU_2_R_EGR : std_logic_vector(27 downto 0) := X"1010100";
     REG_NSU_2_W_EGR : std_logic_vector(19 downto 0) := X"10100";
     REG_NSU_3_EGR : std_logic_vector(22 downto 0) := "110" & X"43210";
     REG_NSU_3_ING : std_logic_vector(26 downto 0) := "110" & X"432101";
     REG_NSU_3_R_EGR : std_logic_vector(27 downto 0) := X"1010100";
     REG_NSU_3_W_EGR : std_logic_vector(19 downto 0) := X"10100";
     REG_P0_BER_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P0_BEW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P0_ISR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P0_ISW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P0_LLR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P1_BER_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P1_BEW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P1_ISR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P1_ISW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P1_LLR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P2_BER_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P2_BEW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P2_ISR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P2_ISW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P2_LLR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P3_BER_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P3_BEW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P3_ISR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P3_ISW_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_P3_LLR_RATE_CTRL : std_logic_vector(21 downto 0) := "11" & X"FFC0F";
     REG_PINOUT : std_logic_vector(9 downto 0) := "00" & X"00";
     REG_PT_CONFIG : std_logic_vector(19 downto 0) := X"00401";
     REG_QOS0 : std_logic_vector(27 downto 0) := X"00F00F0";
     REG_QOS1 : std_logic_vector(29 downto 0) := "00" & X"0200804";
     REG_QOS2 : std_logic_vector(19 downto 0) := X"00802";
     REG_QOS_RATE_CTRL_SCALE : std_logic_vector(24 downto 0) := "0" & X"000000";
     REG_QOS_TIMEOUT0 : std_logic_vector(24 downto 0) := "1" & X"084210";
     REG_QOS_TIMEOUT1 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     REG_QOS_TIMEOUT2 : std_logic_vector(7 downto 0) := X"FF";
     REG_RATE_CTRL_SCALE : std_logic_vector(24 downto 0) := "0" & X"000000";
     REG_RD_CONFIG : std_logic_vector(29 downto 0) := "01" & X"0010010";
     REG_RD_DRR_TKN_P0 : std_logic_vector(23 downto 0) := X"040404";
     REG_RD_DRR_TKN_P1 : std_logic_vector(23 downto 0) := X"040404";
     REG_RD_DRR_TKN_P2 : std_logic_vector(23 downto 0) := X"040404";
     REG_RD_DRR_TKN_P3 : std_logic_vector(23 downto 0) := X"040404";
     REG_REF_0 : std_logic_vector(1 downto 0) := "00";
     REG_REF_1 : std_logic_vector(31 downto 0) := X"05100080";
     REG_REF_2 : std_logic_vector(1 downto 0) := "00";
     REG_REF_3 : std_logic_vector(15 downto 0) := X"C002";
     REG_RETRY_0 : std_logic_vector(28 downto 0) := "0" & X"A2B604C";
     REG_RETRY_1 : std_logic_vector(29 downto 0) := "01" & X"4528140";
     REG_SAFE_CONFIG0 : std_logic_vector(31 downto 0) := X"0A310304";
     REG_SAFE_CONFIG1 : std_logic_vector(31 downto 0) := X"40C20308";
     REG_SAFE_CONFIG2 : std_logic_vector(31 downto 0) := X"4181F3D0";
     REG_SAFE_CONFIG3 : std_logic_vector(27 downto 0) := X"1018912";
     REG_SAFE_CONFIG4 : std_logic_vector(30 downto 0) := "001" & X"A00610F";
     REG_SAFE_CONFIG5 : std_logic_vector(31 downto 0) := X"04101012";
     REG_SAFE_CONFIG6 : std_logic_vector(25 downto 0) := "00" & X"C80800";
     REG_SAFE_CONFIG7 : std_logic_vector(29 downto 0) := "00" & X"0040200";
     REG_SAFE_CONFIG8 : std_logic_vector(31 downto 0) := X"00002000";
     REG_SCRUB0 : std_logic_vector(31 downto 0) := X"FF408281";
     REG_SCRUB1 : std_logic_vector(31 downto 0) := X"FF000001";
     REG_SCRUB8 : std_logic_vector(1 downto 0) := "00";
     REG_SCRUB9 : bit := '0';
     REG_TXN_CONFIG : std_logic_vector(19 downto 0) := X"10500";
     REG_WR_CONFIG : std_logic_vector(31 downto 0) := X"05000500";
     REG_WR_DRR_TKN_P0 : std_logic_vector(15 downto 0) := X"0404";
     REG_WR_DRR_TKN_P1 : std_logic_vector(15 downto 0) := X"0404";
     REG_WR_DRR_TKN_P2 : std_logic_vector(15 downto 0) := X"0404";
     REG_WR_DRR_TKN_P3 : std_logic_vector(15 downto 0) := X"0404";
     SEQ_ADDR_DEFAULT : bit := '0';
     SEQ_BA_DEFAULT : bit := '0';
     SEQ_BG_DEFAULT : bit := '0';
     SEQ_CBIT_DEFAULT : bit := '0';
     SEQ_CK_CAL : std_logic_vector(15 downto 0) := X"F0F0";
     SEQ_CMD_DEFAULT : std_logic_vector(6 downto 0) := "000" & X"0";
     SEQ_CMD_POR : std_logic_vector(6 downto 0) := "000" & X"0";
     SEQ_DQS_DEFAULT : std_logic_vector(2 downto 0) := "000";
     SEQ_DQ_DEFAULT : std_logic_vector(4 downto 0) := "0" & X"0";
     SEQ_INIT_ADDR0 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR1 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR10 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR11 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR12 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR13 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR14 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR15 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR16 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR17 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR18 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR19 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR2 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR20 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR21 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR22 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR23 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR24 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR25 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR26 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR27 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR28 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR29 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR3 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR30 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR31 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR32 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR33 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR34 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR35 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR36 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR37 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR38 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR39 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR4 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR40 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR41 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR42 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR43 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR44 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR45 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR46 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR47 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR48 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR49 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR5 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR50 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR51 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR52 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR53 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR54 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR55 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR56 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR57 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR58 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR59 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR6 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR60 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR61 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR62 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR63 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR64 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR65 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR66 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR67 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR68 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR69 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR7 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR70 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR71 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR72 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR73 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR74 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR75 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR76 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR77 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR78 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR79 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR8 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR80 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR81 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR82 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR83 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR84 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR85 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR86 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR87 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR88 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR89 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR9 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR90 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR91 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR92 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR93 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR94 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR95 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR96 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR97 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR98 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_ADDR99 : std_logic_vector(27 downto 0) := X"0000000";
     SEQ_INIT_CMD0 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD1 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD10 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD11 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD12 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD13 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD14 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD15 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD16 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD17 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD18 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD19 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD2 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD20 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD21 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD22 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD23 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD24 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD25 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD26 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD27 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD28 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD29 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD3 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD30 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD31 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD32 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD33 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD34 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD35 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD36 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD37 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD38 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD39 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD4 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD40 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD41 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD42 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD43 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD44 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD45 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD46 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD47 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD48 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD49 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD5 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD50 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD51 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD52 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD53 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD54 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD55 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD56 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD57 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD58 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD59 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD6 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD60 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD61 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD62 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD63 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD64 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD65 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD66 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD67 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD68 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD69 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD7 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD70 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD71 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD72 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD73 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD74 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD75 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD76 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD77 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD78 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD79 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD8 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD80 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD81 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD82 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD83 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD84 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD85 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD86 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD87 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD88 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD89 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD9 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD90 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD91 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD92 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD93 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD94 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD95 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD96 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD97 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD98 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD99 : std_logic_vector(31 downto 0) := X"00000000";
     SEQ_INIT_CMD_SET : std_logic_vector(8 downto 0) := "0" & X"00";
     SEQ_INIT_CMD_VALID : std_logic_vector(6 downto 0) := "000" & X"0";
     SEQ_INIT_CNTRL0 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL1 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL10 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL11 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL12 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL13 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL14 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL15 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL16 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL17 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL18 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL19 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL2 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL20 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL21 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL22 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL23 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL24 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL25 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL26 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL27 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL28 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL29 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL3 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL30 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL31 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL32 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL33 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL34 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL35 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL36 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL37 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL38 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL39 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL4 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL40 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL41 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL42 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL43 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL44 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL45 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL46 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL47 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL48 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL49 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL5 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL50 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL51 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL52 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL53 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL54 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL55 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL56 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL57 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL58 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL59 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL6 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL60 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL61 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL62 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL63 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL64 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL65 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL66 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL67 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL68 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL69 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL7 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL70 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL71 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL72 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL73 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL74 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL75 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL76 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL77 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL78 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL79 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL8 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL80 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL81 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL82 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL83 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL84 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL85 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL86 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL87 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL88 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL89 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL9 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL90 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL91 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL92 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL93 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL94 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL95 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL96 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL97 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL98 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CNTRL99 : std_logic_vector(9 downto 0) := "00" & X"00";
     SEQ_INIT_CONFIG : std_logic_vector(16 downto 0) := "0" & X"F0F0";
     SEQ_MODE : std_logic_vector(2 downto 0) := "000";
     TXNQ_RD_PRIORITY : std_logic_vector(25 downto 0) := "00" & X"101010";
     TXNQ_WR_PRIORITY : std_logic_vector(24 downto 0) := "0" & X"101010";
     T_TXBIT : bit := '1';
     UB_CLK_MUX : std_logic_vector(1 downto 0) := "00";
     XMPU_CONFIG0 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG1 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG10 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG11 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG12 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG13 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG14 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG15 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG2 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG3 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG4 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG5 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG6 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG7 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG8 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CONFIG9 : std_logic_vector(4 downto 0) := "0" & X"8";
     XMPU_CTRL : std_logic_vector(3 downto 0) := X"B";
     XMPU_END_HI0 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI1 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI10 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI11 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI12 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI13 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI14 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI15 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI2 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI3 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI4 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI5 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI6 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI7 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI8 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_HI9 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_END_LO0 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO1 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO10 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO11 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO12 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO13 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO14 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO15 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO2 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO3 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO4 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO5 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO6 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO7 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO8 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_END_LO9 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_MASTER0 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER1 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER10 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER11 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER12 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER13 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER14 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER15 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER2 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER3 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER4 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER5 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER6 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER7 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER8 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_MASTER9 : std_logic_vector(25 downto 0) := "00" & X"000000";
     XMPU_START_HI0 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI1 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI10 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI11 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI12 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI13 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI14 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI15 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI2 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI3 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI4 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI5 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI6 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI7 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI8 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_HI9 : std_logic_vector(15 downto 0) := X"0000";
     XMPU_START_LO0 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO1 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO10 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO11 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO12 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO13 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO14 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO15 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO2 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO3 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO4 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO5 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO6 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO7 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO8 : std_logic_vector(31 downto 0) := X"00000000";
     XMPU_START_LO9 : std_logic_vector(31 downto 0) := X"00000000";
     XPI_DATA_NIB_CHAN : std_logic_vector(17 downto 0) := "00" & X"0000";
     XPI_DQS : std_logic_vector(7 downto 0) := X"50";
     XPI_NIB_CHAN : std_logic_vector(26 downto 0) := "000" & X"000000";
     XPI_OE : std_logic_vector(15 downto 0) := X"0000";
     XPI_OE_ALL_NIB : std_logic_vector(10 downto 0) := "100" & X"08";
     XPI_PMI_CONFIG : std_logic_vector(8 downto 0) := "0" & X"C0";
     XPI_READ_DBI : std_logic_vector(1 downto 0) := "00";
     XPI_READ_OFFSET : std_logic_vector(13 downto 0) := "00" & X"895";
     XPI_WRDATA_ALL_NIB : std_logic_vector(10 downto 0) := "100" & X"08";
     XPI_WRITE_DM_DBI : std_logic_vector(3 downto 0) := X"0"
  );
  port (
     DMC2PHY_CSSD_TRIG : out std_ulogic;
     DMC2PHY_FIFO_RDEN : out std_logic_vector(26 downto 0);
     DMC2PHY_RDCS0 : out std_logic_vector(53 downto 0);
     DMC2PHY_RDCS1 : out std_logic_vector(53 downto 0);
     DMC2PHY_RDEN : out std_logic_vector(53 downto 0);
     DMC2PHY_T_B : out std_logic_vector(53 downto 0);
     DMC2PHY_T_TXBIT_0 : out std_logic_vector(53 downto 0);
     DMC2PHY_T_TXBIT_1 : out std_logic_vector(53 downto 0);
     DMC2PHY_T_TXBIT_2 : out std_logic_vector(53 downto 0);
     DMC2PHY_WRCS0 : out std_logic_vector(53 downto 0);
     DMC2PHY_WRCS1 : out std_logic_vector(53 downto 0);
     DMC2PHY_WR_DQ0 : out std_logic_vector(107 downto 0);
     DMC2PHY_WR_DQ1 : out std_logic_vector(107 downto 0);
     DMC2PHY_WR_DQ2 : out std_logic_vector(107 downto 0);
     DMC2PHY_WR_DQ3 : out std_logic_vector(107 downto 0);
     DMC2PHY_WR_DQ4 : out std_logic_vector(107 downto 0);
     DMC2PHY_WR_DQ5 : out std_logic_vector(107 downto 0);
     IF_CAL_CAL_BUSY : out std_ulogic;
     IF_CAL_CAL_DONE : out std_ulogic;
     IF_DMC2NOC_OUT_0_NOC_CREDIT_RDY : out std_ulogic;
     IF_DMC2NOC_OUT_0_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_DMC2NOC_OUT_0_NOC_FLIT_EN : out std_ulogic;
     IF_DMC2NOC_OUT_0_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_0_NOC_VALID_EN : out std_ulogic;
     IF_DMC2NOC_OUT_1_NOC_CREDIT_RDY : out std_ulogic;
     IF_DMC2NOC_OUT_1_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_DMC2NOC_OUT_1_NOC_FLIT_EN : out std_ulogic;
     IF_DMC2NOC_OUT_1_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_1_NOC_VALID_EN : out std_ulogic;
     IF_DMC2NOC_OUT_2_NOC_CREDIT_RDY : out std_ulogic;
     IF_DMC2NOC_OUT_2_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_DMC2NOC_OUT_2_NOC_FLIT_EN : out std_ulogic;
     IF_DMC2NOC_OUT_2_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_2_NOC_VALID_EN : out std_ulogic;
     IF_DMC2NOC_OUT_3_NOC_CREDIT_RDY : out std_ulogic;
     IF_DMC2NOC_OUT_3_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_DMC2NOC_OUT_3_NOC_FLIT_EN : out std_ulogic;
     IF_DMC2NOC_OUT_3_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_3_NOC_VALID_EN : out std_ulogic;
     IF_DMC_FABRIC_ILA2BLI_ACK : out std_ulogic;
     IF_DMC_FABRIC_ILA2BLI_TRIG : out std_ulogic;
     IF_DMC_FABRIC_PADDR : out std_logic_vector(31 downto 25);
     IF_DMC_FABRIC_REF_ACK_0 : out std_logic_vector(3 downto 0);
     IF_DMC_FABRIC_REF_ACK_1 : out std_logic_vector(3 downto 0);
     IF_DMC_FABRIC_REF_USR_PORT_AVAILABLE : out std_ulogic;
     IF_DMC_FABRIC_UB2BLI_ACK : out std_ulogic;
     IF_DMC_FABRIC_UB2BLI_TRACE_TDATA : out std_logic_vector(15 downto 0);
     IF_DMC_FABRIC_UB2BLI_TRACE_TVALID : out std_ulogic;
     IF_DMC_FABRIC_UB2BLI_TRIG : out std_ulogic;
     IF_DMC_FABRIC_UB2BLI_UART_TX : out std_ulogic;
     IF_NOC2DMC_IN_0_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_0_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC2DMC_IN_1_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_1_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC2DMC_IN_2_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_2_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC2DMC_IN_3_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_3_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_UBLAZE_FABRIC_PADDR : out std_logic_vector(24 downto 0);
     IF_UBLAZE_FABRIC_PENABLE : out std_ulogic;
     IF_UBLAZE_FABRIC_PPROT : out std_logic_vector(2 downto 0);
     IF_UBLAZE_FABRIC_PSELX : out std_ulogic;
     IF_UBLAZE_FABRIC_PSTRB : out std_logic_vector(3 downto 0);
     IF_UBLAZE_FABRIC_PWDATA : out std_logic_vector(31 downto 0);
     IF_UBLAZE_FABRIC_PWRITE : out std_ulogic;
     IF_UBLAZE_FABRIC_UB_MISC_OUT : out std_logic_vector(1 downto 0);
     DBG_PLL1_CLK : in std_ulogic;
     DMC_CLK : in std_ulogic;
     IF_DMC2NOC_OUT_0_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_0_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_DMC2NOC_OUT_1_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_1_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_DMC2NOC_OUT_2_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_2_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_DMC2NOC_OUT_3_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_DMC2NOC_OUT_3_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_DMC_FABRIC_BLI2ILA_ACK : in std_ulogic;
     IF_DMC_FABRIC_BLI2ILA_TRIG : in std_ulogic;
     IF_DMC_FABRIC_BLI2UB_ACK : in std_ulogic;
     IF_DMC_FABRIC_BLI2UB_TRACE_CLK : in std_ulogic;
     IF_DMC_FABRIC_BLI2UB_TRACE_TREADY : in std_ulogic;
     IF_DMC_FABRIC_BLI2UB_TRIG : in std_ulogic;
     IF_DMC_FABRIC_BLI2UB_UART_RX : in std_ulogic;
     IF_DMC_FABRIC_BLOCK_PERIODIC_CAL : in std_ulogic;
     IF_DMC_FABRIC_CSSD_TRIG_IN_N_EXT : in std_ulogic;
     IF_DMC_FABRIC_PRDATA : in std_logic_vector(31 downto 29);
     IF_DMC_FABRIC_REF_RANK_EN_0 : in std_logic_vector(3 downto 0);
     IF_DMC_FABRIC_REF_RANK_EN_1 : in std_logic_vector(3 downto 0);
     IF_DMC_FABRIC_REF_REQ_0 : in std_ulogic;
     IF_DMC_FABRIC_REF_REQ_1 : in std_ulogic;
     IF_NOC2DMC_IN_0_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC2DMC_IN_0_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC2DMC_IN_0_NOC_FLIT_EN : in std_ulogic;
     IF_NOC2DMC_IN_0_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_0_NOC_VALID_EN : in std_ulogic;
     IF_NOC2DMC_IN_1_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC2DMC_IN_1_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC2DMC_IN_1_NOC_FLIT_EN : in std_ulogic;
     IF_NOC2DMC_IN_1_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_1_NOC_VALID_EN : in std_ulogic;
     IF_NOC2DMC_IN_2_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC2DMC_IN_2_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC2DMC_IN_2_NOC_FLIT_EN : in std_ulogic;
     IF_NOC2DMC_IN_2_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_2_NOC_VALID_EN : in std_ulogic;
     IF_NOC2DMC_IN_3_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC2DMC_IN_3_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC2DMC_IN_3_NOC_FLIT_EN : in std_ulogic;
     IF_NOC2DMC_IN_3_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC2DMC_IN_3_NOC_VALID_EN : in std_ulogic;
     IF_UBLAZE_FABRIC_PRDATA : in std_logic_vector(28 downto 0);
     IF_UBLAZE_FABRIC_PREADY : in std_ulogic;
     IF_UBLAZE_FABRIC_PSLVERR : in std_ulogic;
     IF_UBLAZE_FABRIC_UB_MISC_IN : in std_logic_vector(2 downto 0);
     NOC_CLK : in std_ulogic;
     PHY2DMC_FIFO_EMPTY : in std_logic_vector(26 downto 0);
     PHY2DMC_GT_STATUS : in std_logic_vector(26 downto 0);
     PHY2DMC_RD_DQ0 : in std_logic_vector(107 downto 0);
     PHY2DMC_RD_DQ1 : in std_logic_vector(107 downto 0);
     PHY2DMC_RD_DQ2 : in std_logic_vector(107 downto 0);
     PHY2DMC_RD_DQ3 : in std_logic_vector(107 downto 0);
     PHY2DMC_RD_DQ4 : in std_logic_vector(107 downto 0);
     PHY2DMC_RD_DQ5 : in std_logic_vector(107 downto 0);
     SYS_RST_NOC_N : in std_ulogic;
     SYS_RST_PL_N : in std_ulogic;
     SYS_RST_PS_N : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DDRMC : component is "PRIMITIVE";

----- component DDRMC_RIU -----
component DDRMC_RIU
  port (
     IF_DMC2PHY0_RIU_DMC2PHY_CTRL_CLK : out std_logic_vector(9 downto 0);
     IF_DMC2PHY0_RIU_DMC2RIU_ADDR : out std_logic_vector(79 downto 0);
     IF_DMC2PHY0_RIU_DMC2RIU_NIBBLE_SEL : out std_logic_vector(10 downto 0);
     IF_DMC2PHY0_RIU_DMC2RIU_WR_DATA : out std_logic_vector(159 downto 0);
     IF_DMC2PHY0_RIU_DMC2RIU_WR_EN : out std_logic_vector(9 downto 0);
     IF_DMC2PHY1_RIU_DMC2PHY_CTRL_CLK : out std_logic_vector(9 downto 0);
     IF_DMC2PHY1_RIU_DMC2RIU_ADDR : out std_logic_vector(79 downto 0);
     IF_DMC2PHY1_RIU_DMC2RIU_NIBBLE_SEL : out std_logic_vector(10 downto 0);
     IF_DMC2PHY1_RIU_DMC2RIU_WR_DATA : out std_logic_vector(159 downto 0);
     IF_DMC2PHY1_RIU_DMC2RIU_WR_EN : out std_logic_vector(9 downto 0);
     IF_DMC2PHY2_RIU_DMC2PHY_CTRL_CLK : out std_logic_vector(9 downto 0);
     IF_DMC2PHY2_RIU_DMC2RIU_ADDR : out std_logic_vector(79 downto 0);
     IF_DMC2PHY2_RIU_DMC2RIU_NIBBLE_SEL : out std_logic_vector(10 downto 0);
     IF_DMC2PHY2_RIU_DMC2RIU_WR_DATA : out std_logic_vector(159 downto 0);
     IF_DMC2PHY2_RIU_DMC2RIU_WR_EN : out std_logic_vector(9 downto 0);
     IF_DMC2PHY0_RIU_RIU2DMC_RD_DATA : in std_logic_vector(159 downto 0);
     IF_DMC2PHY0_RIU_RIU2DMC_VALID : in std_logic_vector(9 downto 0);
     IF_DMC2PHY1_RIU_RIU2DMC_RD_DATA : in std_logic_vector(159 downto 0);
     IF_DMC2PHY1_RIU_RIU2DMC_VALID : in std_logic_vector(9 downto 0);
     IF_DMC2PHY2_RIU_RIU2DMC_RD_DATA : in std_logic_vector(159 downto 0);
     IF_DMC2PHY2_RIU_RIU2DMC_VALID : in std_logic_vector(9 downto 0)
  );
end component;
attribute BOX_TYPE of
  DDRMC_RIU : component is "PRIMITIVE";

----- component DIFFINBUF -----
component DIFFINBUF
  generic (
     DIFF_TERM : boolean := FALSE;
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     ISTANDARD : string := "UNUSED";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     O_B : out std_ulogic;
     DIFF_IN_N : in std_ulogic;
     DIFF_IN_P : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_logic_vector(1 downto 0);
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DIFFINBUF : component is "PRIMITIVE";

----- component DNA_PORT -----
component DNA_PORT
  generic (
     SIM_DNA_VALUE : bit_vector := X"000000000000000"
  );
  port (
     DOUT : out std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_ulogic;
     READ : in std_ulogic;
     SHIFT : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DNA_PORT : component is "PRIMITIVE";

----- component DNA_PORTE2 -----
component DNA_PORTE2
  generic (
     SIM_DNA_VALUE : std_logic_vector(95 downto 0) := X"000000000000000000000000"
  );
  port (
     DOUT : out std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_ulogic;
     READ : in std_ulogic;
     SHIFT : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DNA_PORTE2 : component is "PRIMITIVE";

----- component DPHY_DIFFINBUF -----
component DPHY_DIFFINBUF
  generic (
     DIFF_TERM : boolean := TRUE;
     ISTANDARD : string := "DEFAULT"
  );
  port (
     HSRX_O : out std_ulogic;
     LPRX_O_N : out std_ulogic;
     LPRX_O_P : out std_ulogic;
     HSRX_DISABLE : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     LPRX_DISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DPHY_DIFFINBUF : component is "PRIMITIVE";

----- component DPLL -----
component DPLL
  generic (
     CLKFBOUT_FRACT : integer := 0;
     CLKFBOUT_MULT : integer := 42;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 2;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT1_DIVIDE : integer := 2;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT2_DIVIDE : integer := 2;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT3_DIVIDE : integer := 2;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     DESKEW_DELAY : integer := 0;
     DESKEW_DELAY_EN : string := "FALSE";
     DESKEW_DELAY_PATH : string := "FALSE";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKIN_INVERTED : bit := '0';
     IS_PSEN_INVERTED : bit := '0';
     IS_PSINCDEC_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER : real := 0.010;
     SEL_LOCKED_IN : bit := '1';
     SEL_REG_DELAY : std_logic_vector(1 downto 0) := "00";
     USE_REG_VALID : bit := '1'
  );
  port (
     CLKOUT0 : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     LOCKED_DESKEW : out std_ulogic;
     LOCKED_FB : out std_ulogic;
     PSDONE : out std_ulogic;
     CLKFB_DESKEW : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKIN_DESKEW : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DPLL : component is "PRIMITIVE";

----- component DSP48E1 -----
component DSP48E1
  generic (
     ACASCREG : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG : integer := 1;
     AREG : integer := 1;
     AUTORESET_PATDET : string := "NO_RESET";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     INMODEREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector (3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_INMODE_INVERTED : std_logic_vector (4 downto 0) := "00000";
     IS_OPMODE_INVERTED : std_logic_vector (6 downto 0) := "0000000";
     MASK : bit_vector := X"3FFFFFFFFFFF";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : bit_vector := X"000000000000";
     PREG : integer := 1;
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_DPORT : boolean := FALSE;
     USE_MULT : string := "MULTIPLY";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE48"
  );
  port (
     ACOUT : out std_logic_vector(29 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     UNDERFLOW : out std_ulogic;
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(24 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(6 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48E1 : component is "PRIMITIVE";

----- component DSP48E2 -----
component DSP48E2
  generic (
     ACASCREG : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG : integer := 1;
     AMULTSEL : string := "A";
     AREG : integer := 1;
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BMULTSEL : string := "B";
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     INMODEREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTALLCARRYIN_INVERTED : bit := '0';
     IS_RSTALUMODE_INVERTED : bit := '0';
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0';
     IS_RSTCTRL_INVERTED : bit := '0';
     IS_RSTC_INVERTED : bit := '0';
     IS_RSTD_INVERTED : bit := '0';
     IS_RSTINMODE_INVERTED : bit := '0';
     IS_RSTM_INVERTED : bit := '0';
     IS_RSTP_INVERTED : bit := '0';
     MASK : std_logic_vector(47 downto 0) := X"3FFFFFFFFFFF";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : std_logic_vector(47 downto 0) := X"000000000000";
     PREADDINSEL : string := "A";
     PREG : integer := 1;
     RND : std_logic_vector(47 downto 0) := X"000000000000";
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_MULT : string := "MULTIPLY";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE48";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_48_96"
  );
  port (
     ACOUT : out std_logic_vector(29 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(26 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48E2 : component is "PRIMITIVE";

----- component DSP48E5 -----
component DSP48E5
  generic (
     ACASCREG : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG : integer := 1;
     AMULTSEL : string := "A";
     AREG : integer := 1;
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BMULTSEL : string := "B";
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     INMODEREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTALLCARRYIN_INVERTED : bit := '0';
     IS_RSTALUMODE_INVERTED : bit := '0';
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0';
     IS_RSTCTRL_INVERTED : bit := '0';
     IS_RSTC_INVERTED : bit := '0';
     IS_RSTD_INVERTED : bit := '0';
     IS_RSTINMODE_INVERTED : bit := '0';
     IS_RSTM_INVERTED : bit := '0';
     IS_RSTP_INVERTED : bit := '0';
     MASK : std_logic_vector(47 downto 0) := X"3FFFFFFFFFFF";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : std_logic_vector(47 downto 0) := X"000000000000";
     PREADDINSEL : string := "A";
     PREG : integer := 1;
     RND : std_logic_vector(47 downto 0) := X"000000000000";
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_MULT : string := "MULTIPLY";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE48";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_48_96"
  );
  port (
     ACOUT : out std_logic_vector(29 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(26 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48E5 : component is "PRIMITIVE";

----- component DSP58 -----
component DSP58
  generic (
     ACASCREG : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG : integer := 1;
     AMULTSEL : string := "A";
     AREG : integer := 1;
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BMULTSEL : string := "B";
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     DSP_MODE : string := "INT24";
     INMODEREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_ASYNC_RST_INVERTED : bit := '0';
     IS_CARRYIN_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_NEGATE_INVERTED : std_logic_vector(2 downto 0) := "000";
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTALLCARRYIN_INVERTED : bit := '0';
     IS_RSTALUMODE_INVERTED : bit := '0';
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0';
     IS_RSTCTRL_INVERTED : bit := '0';
     IS_RSTC_INVERTED : bit := '0';
     IS_RSTD_INVERTED : bit := '0';
     IS_RSTINMODE_INVERTED : bit := '0';
     IS_RSTM_INVERTED : bit := '0';
     IS_RSTP_INVERTED : bit := '0';
     MASK : std_logic_vector(57 downto 0) := "00" & X"FFFFFFFFFFFFFF";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     PREADDINSEL : string := "A";
     PREG : integer := 1;
     RESET_MODE : string := "SYNC";
     RND : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_MULT : string := "MULTIPLY";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE58";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_34_58_116"
  );
  port (
     ACOUT : out std_logic_vector(33 downto 0);
     BCOUT : out std_logic_vector(23 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(57 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(57 downto 0);
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     A : in std_logic_vector(33 downto 0);
     ACIN : in std_logic_vector(33 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     ASYNC_RST : in std_ulogic;
     B : in std_logic_vector(23 downto 0);
     BCIN : in std_logic_vector(23 downto 0);
     C : in std_logic_vector(57 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(26 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     MULTSIGNIN : in std_ulogic;
     NEGATE : in std_logic_vector(2 downto 0);
     OPMODE : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(57 downto 0);
     RSTA : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP58 : component is "PRIMITIVE";

----- component DSP58C -----
component DSP58C
  generic (
     ACASCREG : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG : integer := 1;
     AMULTSEL : string := "A";
     AREG : integer := 1;
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BMULTSEL : string := "B";
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     DSP_MODE : string := "INT24";
     INMODEREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_ASYNC_RST_INVERTED : bit := '0';
     IS_CARRYIN_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_NEGATE_INVERTED : std_logic_vector(2 downto 0) := "000";
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTAD_INVERTED : bit := '0';
     IS_RSTALLCARRYIN_INVERTED : bit := '0';
     IS_RSTALUMODE_INVERTED : bit := '0';
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0';
     IS_RSTCTRL_INVERTED : bit := '0';
     IS_RSTC_INVERTED : bit := '0';
     IS_RSTD_INVERTED : bit := '0';
     IS_RSTINMODE_INVERTED : bit := '0';
     IS_RSTM_INVERTED : bit := '0';
     IS_RSTP_INVERTED : bit := '0';
     MASK : std_logic_vector(57 downto 0) := "00" & X"FFFFFFFFFFFFFF";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     PREADDINSEL : string := "A";
     PREG : integer := 1;
     RESET_MODE : string := "SYNC";
     RND : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_MULT : string := "MULTIPLY";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE58";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_34_58_116"
  );
  port (
     ACOUT : out std_logic_vector(33 downto 0);
     AD_DATA_CPLX : out std_logic_vector(9 downto 0);
     A_CPLX : out std_logic_vector(17 downto 0);
     A_TO_D_CPLX : out std_logic_vector(17 downto 0);
     B2B1_CPLX : out std_logic_vector(17 downto 0);
     BCOUT : out std_logic_vector(23 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     CONJ_CPLX_OUT : out std_ulogic;
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(57 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(57 downto 0);
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     A : in std_logic_vector(33 downto 0);
     ACIN : in std_logic_vector(33 downto 0);
     AD_CPLX : in std_logic_vector(9 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     ASYNC_RST : in std_ulogic;
     B : in std_logic_vector(23 downto 0);
     BCIN : in std_logic_vector(23 downto 0);
     C : in std_logic_vector(57 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     CONJ_CPLX_MULT_IN : in std_ulogic;
     CONJ_CPLX_PREADD_IN : in std_ulogic;
     D : in std_logic_vector(26 downto 0);
     D_FROM_A_CPLX : in std_logic_vector(17 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     MULTSIGNIN : in std_ulogic;
     NEGATE : in std_logic_vector(2 downto 0);
     OPMODE : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(57 downto 0);
     RSTA : in std_ulogic;
     RSTAD : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic;
     U_CPLX : in std_logic_vector(36 downto 0);
     V_CPLX : in std_logic_vector(36 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP58C : component is "PRIMITIVE";

----- component DSPCPLX -----
component DSPCPLX
  generic (
     ACASCREG_IM : integer := 1;
     ACASCREG_RE : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG_IM : integer := 1;
     ALUMODEREG_RE : integer := 1;
     AREG_IM : integer := 2;
     AREG_RE : integer := 2;
     AUTORESET_PATDET_IM : string := "NO_RESET";
     AUTORESET_PATDET_RE : string := "NO_RESET";
     AUTORESET_PRIORITY_IM : string := "RESET";
     AUTORESET_PRIORITY_RE : string := "RESET";
     A_INPUT_IM : string := "DIRECT";
     A_INPUT_RE : string := "DIRECT";
     BCASCREG_IM : integer := 1;
     BCASCREG_RE : integer := 1;
     BREG_IM : integer := 2;
     BREG_RE : integer := 2;
     B_INPUT_IM : string := "DIRECT";
     B_INPUT_RE : string := "DIRECT";
     CARRYINREG_IM : integer := 1;
     CARRYINREG_RE : integer := 1;
     CARRYINSELREG_IM : integer := 1;
     CARRYINSELREG_RE : integer := 1;
     CONJUGATEREG_A : integer := 1;
     CONJUGATEREG_B : integer := 1;
     CREG_IM : integer := 1;
     CREG_RE : integer := 1;
     IS_ALUMODE_IM_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_ALUMODE_RE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_ASYNC_RST_INVERTED : bit := '0';
     IS_CARRYIN_IM_INVERTED : bit := '0';
     IS_CARRYIN_RE_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_CONJUGATE_A_INVERTED : bit := '0';
     IS_CONJUGATE_B_INVERTED : bit := '0';
     IS_OPMODE_IM_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_OPMODE_RE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTAD_INVERTED : bit := '0';
     IS_RSTALLCARRYIN_IM_INVERTED : bit := '0';
     IS_RSTALLCARRYIN_RE_INVERTED : bit := '0';
     IS_RSTALUMODE_IM_INVERTED : bit := '0';
     IS_RSTALUMODE_RE_INVERTED : bit := '0';
     IS_RSTA_IM_INVERTED : bit := '0';
     IS_RSTA_RE_INVERTED : bit := '0';
     IS_RSTB_IM_INVERTED : bit := '0';
     IS_RSTB_RE_INVERTED : bit := '0';
     IS_RSTCONJUGATE_A_INVERTED : bit := '0';
     IS_RSTCONJUGATE_B_INVERTED : bit := '0';
     IS_RSTCTRL_IM_INVERTED : bit := '0';
     IS_RSTCTRL_RE_INVERTED : bit := '0';
     IS_RSTC_IM_INVERTED : bit := '0';
     IS_RSTC_RE_INVERTED : bit := '0';
     IS_RSTM_IM_INVERTED : bit := '0';
     IS_RSTM_RE_INVERTED : bit := '0';
     IS_RSTP_IM_INVERTED : bit := '0';
     IS_RSTP_RE_INVERTED : bit := '0';
     MASK_IM : std_logic_vector(57 downto 0) := "00" & X"FFFFFFFFFFFFFF";
     MASK_RE : std_logic_vector(57 downto 0) := "00" & X"FFFFFFFFFFFFFF";
     MREG_IM : integer := 1;
     MREG_RE : integer := 1;
     OPMODEREG_IM : integer := 1;
     OPMODEREG_RE : integer := 1;
     PATTERN_IM : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     PATTERN_RE : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     PREG_IM : integer := 1;
     PREG_RE : integer := 1;
     RESET_MODE : string := "SYNC";
     RND_IM : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     RND_RE : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     SEL_MASK_IM : string := "MASK";
     SEL_MASK_RE : string := "MASK";
     SEL_PATTERN_IM : string := "PATTERN";
     SEL_PATTERN_RE : string := "PATTERN";
     USE_PATTERN_DETECT_IM : string := "NO_PATDET";
     USE_PATTERN_DETECT_RE : string := "NO_PATDET"
  );
  port (
     ACOUT_IM : out std_logic_vector(17 downto 0);
     ACOUT_RE : out std_logic_vector(17 downto 0);
     BCOUT_IM : out std_logic_vector(17 downto 0);
     BCOUT_RE : out std_logic_vector(17 downto 0);
     CARRYCASCOUT_IM : out std_ulogic;
     CARRYCASCOUT_RE : out std_ulogic;
     CARRYOUT_IM : out std_ulogic;
     CARRYOUT_RE : out std_ulogic;
     MULTSIGNOUT_IM : out std_ulogic;
     MULTSIGNOUT_RE : out std_ulogic;
     OVERFLOW_IM : out std_ulogic;
     OVERFLOW_RE : out std_ulogic;
     PATTERNBDETECT_IM : out std_ulogic;
     PATTERNBDETECT_RE : out std_ulogic;
     PATTERNDETECT_IM : out std_ulogic;
     PATTERNDETECT_RE : out std_ulogic;
     PCOUT_IM : out std_logic_vector(57 downto 0);
     PCOUT_RE : out std_logic_vector(57 downto 0);
     P_IM : out std_logic_vector(57 downto 0);
     P_RE : out std_logic_vector(57 downto 0);
     UNDERFLOW_IM : out std_ulogic;
     UNDERFLOW_RE : out std_ulogic;
     ACIN_IM : in std_logic_vector(17 downto 0);
     ACIN_RE : in std_logic_vector(17 downto 0);
     ALUMODE_IM : in std_logic_vector(3 downto 0);
     ALUMODE_RE : in std_logic_vector(3 downto 0);
     ASYNC_RST : in std_ulogic;
     A_IM : in std_logic_vector(17 downto 0);
     A_RE : in std_logic_vector(17 downto 0);
     BCIN_IM : in std_logic_vector(17 downto 0);
     BCIN_RE : in std_logic_vector(17 downto 0);
     B_IM : in std_logic_vector(17 downto 0);
     B_RE : in std_logic_vector(17 downto 0);
     CARRYCASCIN_IM : in std_ulogic;
     CARRYCASCIN_RE : in std_ulogic;
     CARRYINSEL_IM : in std_logic_vector(2 downto 0);
     CARRYINSEL_RE : in std_logic_vector(2 downto 0);
     CARRYIN_IM : in std_ulogic;
     CARRYIN_RE : in std_ulogic;
     CEA1_IM : in std_ulogic;
     CEA1_RE : in std_ulogic;
     CEA2_IM : in std_ulogic;
     CEA2_RE : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE_IM : in std_ulogic;
     CEALUMODE_RE : in std_ulogic;
     CEB1_IM : in std_ulogic;
     CEB1_RE : in std_ulogic;
     CEB2_IM : in std_ulogic;
     CEB2_RE : in std_ulogic;
     CECARRYIN_IM : in std_ulogic;
     CECARRYIN_RE : in std_ulogic;
     CECONJUGATE_A : in std_ulogic;
     CECONJUGATE_B : in std_ulogic;
     CECTRL_IM : in std_ulogic;
     CECTRL_RE : in std_ulogic;
     CEC_IM : in std_ulogic;
     CEC_RE : in std_ulogic;
     CEM_IM : in std_ulogic;
     CEM_RE : in std_ulogic;
     CEP_IM : in std_ulogic;
     CEP_RE : in std_ulogic;
     CLK : in std_ulogic;
     CONJUGATE_A : in std_ulogic;
     CONJUGATE_B : in std_ulogic;
     C_IM : in std_logic_vector(57 downto 0);
     C_RE : in std_logic_vector(57 downto 0);
     MULTSIGNIN_IM : in std_ulogic;
     MULTSIGNIN_RE : in std_ulogic;
     OPMODE_IM : in std_logic_vector(8 downto 0);
     OPMODE_RE : in std_logic_vector(8 downto 0);
     PCIN_IM : in std_logic_vector(57 downto 0);
     PCIN_RE : in std_logic_vector(57 downto 0);
     RSTAD : in std_ulogic;
     RSTALLCARRYIN_IM : in std_ulogic;
     RSTALLCARRYIN_RE : in std_ulogic;
     RSTALUMODE_IM : in std_ulogic;
     RSTALUMODE_RE : in std_ulogic;
     RSTA_IM : in std_ulogic;
     RSTA_RE : in std_ulogic;
     RSTB_IM : in std_ulogic;
     RSTB_RE : in std_ulogic;
     RSTCONJUGATE_A : in std_ulogic;
     RSTCONJUGATE_B : in std_ulogic;
     RSTCTRL_IM : in std_ulogic;
     RSTCTRL_RE : in std_ulogic;
     RSTC_IM : in std_ulogic;
     RSTC_RE : in std_ulogic;
     RSTM_IM : in std_ulogic;
     RSTM_RE : in std_ulogic;
     RSTP_IM : in std_ulogic;
     RSTP_RE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSPCPLX : component is "PRIMITIVE";

----- component DSPFP32 -----
component DSPFP32
  generic (
     ACASCREG : integer := 1;
     AREG : integer := 1;
     A_FPTYPE : string := "B32";
     A_INPUT : string := "DIRECT";
     BCASCSEL : string := "B";
     B_D_FPTYPE : string := "B32";
     B_INPUT : string := "DIRECT";
     FPA_PREG : integer := 1;
     FPBREG : integer := 1;
     FPCREG : integer := 3;
     FPDREG : integer := 1;
     FPMPIPEREG : integer := 1;
     FPM_PREG : integer := 1;
     FPOPMREG : integer := 3;
     INMODEREG : integer := 1;
     IS_ASYNC_RST_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_FPINMODE_INVERTED : bit := '0';
     IS_FPOPMODE_INVERTED : std_logic_vector(6 downto 0) := "0000000";
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0';
     IS_RSTC_INVERTED : bit := '0';
     IS_RSTD_INVERTED : bit := '0';
     IS_RSTFPA_INVERTED : bit := '0';
     IS_RSTFPINMODE_INVERTED : bit := '0';
     IS_RSTFPMPIPE_INVERTED : bit := '0';
     IS_RSTFPM_INVERTED : bit := '0';
     IS_RSTFPOPMODE_INVERTED : bit := '0';
     PCOUTSEL : string := "FPA";
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     ACOUT_EXP : out std_logic_vector(7 downto 0);
     ACOUT_MAN : out std_logic_vector(22 downto 0);
     ACOUT_SIGN : out std_ulogic;
     BCOUT_EXP : out std_logic_vector(7 downto 0);
     BCOUT_MAN : out std_logic_vector(22 downto 0);
     BCOUT_SIGN : out std_ulogic;
     FPA_INVALID : out std_ulogic;
     FPA_OUT : out std_logic_vector(31 downto 0);
     FPA_OVERFLOW : out std_ulogic;
     FPA_UNDERFLOW : out std_ulogic;
     FPM_INVALID : out std_ulogic;
     FPM_OUT : out std_logic_vector(31 downto 0);
     FPM_OVERFLOW : out std_ulogic;
     FPM_UNDERFLOW : out std_ulogic;
     PCOUT : out std_logic_vector(31 downto 0);
     ACIN_EXP : in std_logic_vector(7 downto 0);
     ACIN_MAN : in std_logic_vector(22 downto 0);
     ACIN_SIGN : in std_ulogic;
     ASYNC_RST : in std_ulogic;
     A_EXP : in std_logic_vector(7 downto 0);
     A_MAN : in std_logic_vector(22 downto 0);
     A_SIGN : in std_ulogic;
     BCIN_EXP : in std_logic_vector(7 downto 0);
     BCIN_MAN : in std_logic_vector(22 downto 0);
     BCIN_SIGN : in std_ulogic;
     B_EXP : in std_logic_vector(7 downto 0);
     B_MAN : in std_logic_vector(22 downto 0);
     B_SIGN : in std_ulogic;
     C : in std_logic_vector(31 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEB : in std_ulogic;
     CEC : in std_ulogic;
     CED : in std_ulogic;
     CEFPA : in std_ulogic;
     CEFPINMODE : in std_ulogic;
     CEFPM : in std_ulogic;
     CEFPMPIPE : in std_ulogic;
     CEFPOPMODE : in std_ulogic;
     CLK : in std_ulogic;
     D_EXP : in std_logic_vector(7 downto 0);
     D_MAN : in std_logic_vector(22 downto 0);
     D_SIGN : in std_ulogic;
     FPINMODE : in std_ulogic;
     FPOPMODE : in std_logic_vector(6 downto 0);
     PCIN : in std_logic_vector(31 downto 0);
     RSTA : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTD : in std_ulogic;
     RSTFPA : in std_ulogic;
     RSTFPINMODE : in std_ulogic;
     RSTFPM : in std_ulogic;
     RSTFPMPIPE : in std_ulogic;
     RSTFPOPMODE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSPFP32 : component is "PRIMITIVE";

----- component DSP_ALU -----
component DSP_ALU
  generic (
     ALUMODEREG : integer := 1;
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTALLCARRYIN_INVERTED : bit := '0';
     IS_RSTALUMODE_INVERTED : bit := '0';
     IS_RSTCTRL_INVERTED : bit := '0';
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     RND : std_logic_vector(47 downto 0) := X"000000000000";
     USE_SIMD : string := "ONE48";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_48_96"
  );
  port (
     ALUMODE10 : out std_ulogic;
     ALU_OUT : out std_logic_vector(47 downto 0);
     COUT : out std_logic_vector(3 downto 0);
     MULTSIGN_ALU : out std_ulogic;
     XOR_MX : out std_logic_vector(7 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     AMULT26 : in std_ulogic;
     A_ALU : in std_logic_vector(29 downto 0);
     BMULT17 : in std_ulogic;
     B_ALU : in std_logic_vector(17 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CCOUT : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CEM : in std_ulogic;
     CLK : in std_ulogic;
     C_DATA : in std_logic_vector(47 downto 0);
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     P_FDBK : in std_logic_vector(47 downto 0);
     P_FDBK_47 : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTCTRL : in std_ulogic;
     U_DATA : in std_logic_vector(44 downto 0);
     V_DATA : in std_logic_vector(44 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_ALU : component is "PRIMITIVE";

----- component DSP_ALUADD -----
component DSP_ALUADD
  generic (
     LEGACY : string := "DSP58";
     USE_SIMD : string := "ONE58";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_34_58_116"
  );
  port (
     ALUMODE10 : out std_ulogic;
     ALU_OUT : out std_logic_vector(57 downto 0);
     COUT : out std_logic_vector(3 downto 0);
     MULTSIGN_ALU : out std_ulogic;
     XOR_MX : out std_logic_vector(7 downto 0);
     ALUMODE_DATA : in std_logic_vector(3 downto 0);
     CIN : in std_ulogic;
     W : in std_logic_vector(57 downto 0);
     X : in std_logic_vector(57 downto 0);
     Y : in std_logic_vector(57 downto 0);
     Z : in std_logic_vector(57 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_ALUADD : component is "PRIMITIVE";

----- component DSP_ALUMUX -----
component DSP_ALUMUX
  generic (
     DSP_MODE : string := "INT24";
     LEGACY : string := "DSP58";
     RND : std_logic_vector(57 downto 0) := "00" & X"00000000000000"
  );
  port (
     CIN : out std_ulogic;
     W : out std_logic_vector(57 downto 0);
     X : out std_logic_vector(57 downto 0);
     Y : out std_logic_vector(57 downto 0);
     Z : out std_logic_vector(57 downto 0);
     A_ALU : in std_logic_vector(33 downto 0);
     B_ALU : in std_logic_vector(23 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYCASCOUT_FB : in std_ulogic;
     CARRYINSEL_DATA : in std_logic_vector(2 downto 0);
     CARRYIN_DATA : in std_ulogic;
     C_DATA : in std_logic_vector(57 downto 0);
     MULTCARRYIN_DATA : in std_ulogic;
     MULTSIGNIN : in std_ulogic;
     OPMODE_DATA : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(57 downto 0);
     P_FDBK : in std_logic_vector(57 downto 0);
     P_FDBK_MSB : in std_ulogic;
     U_DATA : in std_logic_vector(50 downto 0);
     V_DATA : in std_logic_vector(50 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_ALUMUX : component is "PRIMITIVE";

----- component DSP_ALUREG -----
component DSP_ALUREG
  generic (
     ALUMODEREG : integer := 1;
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     DSP_MODE : string := "INT24";
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : bit := '0';
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTALLCARRYIN_INVERTED : bit := '0';
     IS_RSTALUMODE_INVERTED : bit := '0';
     IS_RSTCTRL_INVERTED : bit := '0';
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     RESET_MODE : string := "SYNC"
  );
  port (
     ALUMODE_DATA : out std_logic_vector(3 downto 0);
     CARRYINSEL_DATA : out std_logic_vector(2 downto 0);
     CARRYIN_DATA : out std_ulogic;
     MULTCARRYIN_DATA : out std_ulogic;
     OPMODE_DATA : out std_logic_vector(8 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     AMULTMSB : in std_ulogic;
     ASYNC_RST : in std_ulogic;
     BMULTMSB : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEALUMODE : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CEM : in std_ulogic;
     CLK : in std_ulogic;
     OPMODE : in std_logic_vector(8 downto 0);
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTCTRL : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_ALUREG : component is "PRIMITIVE";

----- component DSP_A_B_DATA -----
component DSP_A_B_DATA
  generic (
     ACASCREG : integer := 1;
     AREG : integer := 1;
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     IS_CLK_INVERTED : bit := '0';
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0'
  );
  port (
     A1_DATA : out std_logic_vector(26 downto 0);
     A2_DATA : out std_logic_vector(26 downto 0);
     ACOUT : out std_logic_vector(29 downto 0);
     A_ALU : out std_logic_vector(29 downto 0);
     B1_DATA : out std_logic_vector(17 downto 0);
     B2_DATA : out std_logic_vector(17 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     B_ALU : out std_logic_vector(17 downto 0);
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CLK : in std_ulogic;
     RSTA : in std_ulogic;
     RSTB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_A_B_DATA : component is "PRIMITIVE";

----- component DSP_A_B_DATA58 -----
component DSP_A_B_DATA58
  generic (
     ACASCREG : integer := 1;
     AMULTSEL : string := "A";
     AREG : integer := 1;
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BMULTSEL : string := "B";
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     DSP_MODE : string := "INT24";
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0';
     RESET_MODE : string := "SYNC"
  );
  port (
     A1_DATA : out std_logic_vector(26 downto 0);
     A2_DATA : out std_logic_vector(26 downto 0);
     ACOUT : out std_logic_vector(33 downto 0);
     A_ALU : out std_logic_vector(33 downto 0);
     A_CPLX : out std_logic_vector(17 downto 0);
     A_TO_D_CPLX : out std_logic_vector(17 downto 0);
     B1_DATA : out std_logic_vector(23 downto 0);
     B2_DATA : out std_logic_vector(23 downto 0);
     BCOUT : out std_logic_vector(23 downto 0);
     B_ALU : out std_logic_vector(23 downto 0);
     A : in std_logic_vector(33 downto 0);
     ACIN : in std_logic_vector(33 downto 0);
     ASYNC_RST : in std_ulogic;
     B : in std_logic_vector(23 downto 0);
     BCIN : in std_logic_vector(23 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CLK : in std_ulogic;
     RSTA : in std_ulogic;
     RSTB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_A_B_DATA58 : component is "PRIMITIVE";

----- component DSP_CAS_DELAY -----
component DSP_CAS_DELAY
  generic (
     DELAY : string := "TAP0"
  );
  port (
     ACOUT_DELAY : out std_logic_vector(33 downto 0);
     BCOUT_DELAY : out std_logic_vector(23 downto 0);
     CARRYCASCOUT_DELAY : out std_ulogic;
     MULTSIGNOUT_DELAY : out std_ulogic;
     PCOUT_DELAY : out std_logic_vector(57 downto 0);
     ACOUT : in std_logic_vector(33 downto 0);
     BCOUT : in std_logic_vector(23 downto 0);
     CARRYCASCOUT : in std_ulogic;
     MULTSIGNOUT : in std_ulogic;
     PCOUT : in std_logic_vector(57 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_CAS_DELAY : component is "PRIMITIVE";

----- component DSP_CPLX_STAGE0 -----
component DSP_CPLX_STAGE0
  port (
     AD_CPLX_DSPL : out std_logic_vector(9 downto 0);
     AD_CPLX_DSPR : out std_logic_vector(9 downto 0);
     CONJ_DSP_L_MULT_OUT : out std_ulogic;
     CONJ_DSP_L_PREADD_OUT : out std_ulogic;
     CONJ_DSP_R_MULT_OUT : out std_ulogic;
     CONJ_DSP_R_PREADD_OUT : out std_ulogic;
     B2B1_CPLX_L : in std_logic_vector(17 downto 0);
     B2B1_CPLX_R : in std_logic_vector(17 downto 0);
     CONJ_DSP_L_IN : in std_ulogic;
     CONJ_DSP_R_IN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_CPLX_STAGE0 : component is "PRIMITIVE";

----- component DSP_CPLX_STAGE1 -----
component DSP_CPLX_STAGE1
  port (
     U_CPLX : out std_logic_vector(36 downto 0);
     V_CPLX : out std_logic_vector(36 downto 0);
     AD_DATA_CPLX_DSPL : in std_logic_vector(9 downto 0);
     AD_DATA_CPLX_DSPR : in std_logic_vector(9 downto 0);
     A_CPLX_L : in std_logic_vector(17 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_CPLX_STAGE1 : component is "PRIMITIVE";

----- component DSP_C_DATA -----
component DSP_C_DATA
  generic (
     CREG : integer := 1;
     IS_CLK_INVERTED : bit := '0';
     IS_RSTC_INVERTED : bit := '0'
  );
  port (
     C_DATA : out std_logic_vector(47 downto 0);
     C : in std_logic_vector(47 downto 0);
     CEC : in std_ulogic;
     CLK : in std_ulogic;
     RSTC : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_C_DATA : component is "PRIMITIVE";

----- component DSP_C_DATA58 -----
component DSP_C_DATA58
  generic (
     CREG : integer := 1;
     DSP_MODE : string := "INT24";
     IS_RSTC_INVERTED : bit := '0';
     RESET_MODE : string := "SYNC"
  );
  port (
     C_DATA : out std_logic_vector(57 downto 0);
     ASYNC_RST : in std_ulogic;
     C : in std_logic_vector(57 downto 0);
     CEC : in std_ulogic;
     CLK : in std_ulogic;
     RSTC : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_C_DATA58 : component is "PRIMITIVE";

----- component DSP_FPA_CREG -----
component DSP_FPA_CREG
  generic (
     FPCREG : integer := 3;
     IS_RSTC_INVERTED : bit := '0';
     LEGACY : string := "DSP58";
     RESET_MODE : string := "SYNC"
  );
  port (
     C3_FP_DATA : out std_logic_vector(31 downto 0);
     ASYNC_RST : in std_ulogic;
     C : in std_logic_vector(31 downto 0);
     CEC : in std_ulogic;
     CLK : in std_ulogic;
     RSTC : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_FPA_CREG : component is "PRIMITIVE";

----- component DSP_FPA_OPM_REG -----
component DSP_FPA_OPM_REG
  generic (
     FPMPIPEREG : integer := 1;
     FPOPMREG : integer := 3;
     IS_FPOPMODE_INVERTED : std_logic_vector(6 downto 0) := "0000000";
     IS_RSTFPOPMODE_INVERTED : bit := '0';
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     FPOPMODE_DATA : out std_logic_vector(6 downto 0);
     ASYNC_RST : in std_ulogic;
     CEFPOPMODE : in std_ulogic;
     CLK : in std_ulogic;
     FPOPMODE : in std_logic_vector(6 downto 0);
     RSTFPOPMODE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_FPA_OPM_REG : component is "PRIMITIVE";

----- component DSP_FPM_PIPEREG -----
component DSP_FPM_PIPEREG
  generic (
     A_FPTYPE : string := "B32";
     B_D_FPTYPE : string := "B32";
     FPMPIPEREG : integer := 1;
     IS_RSTFPMPIPE_INVERTED : bit := '0';
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     FPM_EXPINT_DATA : out std_logic_vector(13 downto 0);
     U_DATA : out std_logic_vector(47 downto 0);
     V_DATA : out std_logic_vector(47 downto 0);
     ASYNC_RST : in std_ulogic;
     CEFPMPIPE : in std_ulogic;
     CLK : in std_ulogic;
     FPM_EXPINT : in std_logic_vector(13 downto 0);
     RSTFPMPIPE : in std_ulogic;
     U : in std_logic_vector(47 downto 0);
     V : in std_logic_vector(47 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_FPM_PIPEREG : component is "PRIMITIVE";

----- component DSP_FPM_STAGE0 -----
component DSP_FPM_STAGE0
  generic (
     A_FPTYPE : string := "B32";
     B_D_FPTYPE : string := "B32";
     LEGACY : string := "DSP58";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     FPM_EXPINT : out std_logic_vector(13 downto 0);
     U : out std_logic_vector(47 downto 0);
     V : out std_logic_vector(47 downto 0);
     A_EXP_DATA : in std_logic_vector(7 downto 0);
     A_MAN_DATA : in std_logic_vector(23 downto 0);
     A_SIGN_DATA : in std_ulogic;
     B_EXP_DATA : in std_logic_vector(7 downto 0);
     B_MAN_DATA : in std_logic_vector(23 downto 0);
     B_SIGN_DATA : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_FPM_STAGE0 : component is "PRIMITIVE";

----- component DSP_FPM_STAGE1 -----
component DSP_FPM_STAGE1
  generic (
     LEGACY : string := "DSP58"
  );
  port (
     FPM_INT : out std_logic_vector(31 downto 0);
     FPM_INVALID_INT : out std_ulogic;
     FPM_OVERFLOW_INT : out std_ulogic;
     FPM_UNDERFLOW_INT : out std_ulogic;
     FPM_EXPINT_DATA : in std_logic_vector(13 downto 0);
     U_DATA : in std_logic_vector(47 downto 0);
     V_DATA : in std_logic_vector(47 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_FPM_STAGE1 : component is "PRIMITIVE";

----- component DSP_FP_ADDER -----
component DSP_FP_ADDER
  port (
     FPA_INT : out std_logic_vector(31 downto 0);
     FPA_INVALID_INT : out std_ulogic;
     FPA_OVERFLOW_INT : out std_ulogic;
     FPA_UNDERFLOW_INT : out std_ulogic;
     C3_FP_DATA : in std_logic_vector(31 downto 0);
     D_FP_DATA : in std_logic_vector(31 downto 0);
     FPA_FDBK : in std_logic_vector(31 downto 0);
     FPM_DATA : in std_logic_vector(31 downto 0);
     FPOPMODE_DATA : in std_logic_vector(6 downto 0);
     PCIN : in std_logic_vector(31 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_FP_ADDER : component is "PRIMITIVE";

----- component DSP_FP_CAS_DELAY -----
component DSP_FP_CAS_DELAY
  generic (
     DELAY : string := "TAP0"
  );
  port (
     ACOUT_DELAY_EXP : out std_logic_vector(7 downto 0);
     ACOUT_DELAY_MAN : out std_logic_vector(22 downto 0);
     ACOUT_DELAY_SIGN : out std_ulogic;
     BCOUT_DELAY_EXP : out std_logic_vector(7 downto 0);
     BCOUT_DELAY_MAN : out std_logic_vector(22 downto 0);
     BCOUT_DELAY_SIGN : out std_ulogic;
     PCOUT_DELAY : out std_logic_vector(31 downto 0);
     ACOUT_EXP : in std_logic_vector(7 downto 0);
     ACOUT_MAN : in std_logic_vector(22 downto 0);
     ACOUT_SIGN : in std_ulogic;
     BCOUT_EXP : in std_logic_vector(7 downto 0);
     BCOUT_MAN : in std_logic_vector(22 downto 0);
     BCOUT_SIGN : in std_ulogic;
     PCOUT : in std_logic_vector(31 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_FP_CAS_DELAY : component is "PRIMITIVE";

----- component DSP_FP_INMUX -----
component DSP_FP_INMUX
  generic (
     AREG : integer := 1;
     FPA_PREG : integer := 1;
     FPBREG : integer := 1;
     FPDREG : integer := 1;
     INMODEREG : integer := 1;
     IS_FPINMODE_INVERTED : bit := '0';
     IS_RSTFPINMODE_INVERTED : bit := '0';
     LEGACY : string := "DSP58";
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     A_EXP_DATA : out std_logic_vector(7 downto 0);
     A_MAN_DATA : out std_logic_vector(23 downto 0);
     A_SIGN_DATA : out std_ulogic;
     B_EXP_DATA : out std_logic_vector(7 downto 0);
     B_MAN_DATA : out std_logic_vector(23 downto 0);
     B_SIGN_DATA : out std_ulogic;
     A2_DATA : in std_logic_vector(31 downto 0);
     ASYNC_RST : in std_ulogic;
     B_DATA : in std_logic_vector(31 downto 0);
     CEFPINMODE : in std_ulogic;
     CLK : in std_ulogic;
     D_DATA : in std_logic_vector(31 downto 0);
     FPINMODE : in std_ulogic;
     RSTFPINMODE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_FP_INMUX : component is "PRIMITIVE";

----- component DSP_FP_INREG -----
component DSP_FP_INREG
  generic (
     ACASCREG : integer := 1;
     AREG : integer := 1;
     A_FPTYPE : string := "B32";
     A_INPUT : string := "DIRECT";
     BCASCSEL : string := "B";
     B_D_FPTYPE : string := "B32";
     B_INPUT : string := "DIRECT";
     FPBREG : integer := 1;
     FPDREG : integer := 1;
     IS_RSTA_INVERTED : bit := '0';
     IS_RSTB_INVERTED : bit := '0';
     RESET_MODE : string := "SYNC"
  );
  port (
     A2_DATA : out std_logic_vector(31 downto 0);
     ACOUT_EXP : out std_logic_vector(7 downto 0);
     ACOUT_MAN : out std_logic_vector(22 downto 0);
     ACOUT_SIGN : out std_ulogic;
     BCOUT_EXP : out std_logic_vector(7 downto 0);
     BCOUT_MAN : out std_logic_vector(22 downto 0);
     BCOUT_SIGN : out std_ulogic;
     B_DATA : out std_logic_vector(31 downto 0);
     D_DATA : out std_logic_vector(31 downto 0);
     D_FP_DATA : out std_logic_vector(31 downto 0);
     ACIN_EXP : in std_logic_vector(7 downto 0);
     ACIN_MAN : in std_logic_vector(22 downto 0);
     ACIN_SIGN : in std_ulogic;
     ASYNC_RST : in std_ulogic;
     A_EXP : in std_logic_vector(7 downto 0);
     A_MAN : in std_logic_vector(22 downto 0);
     A_SIGN : in std_ulogic;
     BCIN_EXP : in std_logic_vector(7 downto 0);
     BCIN_MAN : in std_logic_vector(22 downto 0);
     BCIN_SIGN : in std_ulogic;
     B_EXP : in std_logic_vector(7 downto 0);
     B_MAN : in std_logic_vector(22 downto 0);
     B_SIGN : in std_ulogic;
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEB : in std_ulogic;
     CED : in std_ulogic;
     CLK : in std_ulogic;
     D_EXP : in std_logic_vector(7 downto 0);
     D_MAN : in std_logic_vector(22 downto 0);
     D_SIGN : in std_ulogic;
     RSTA : in std_ulogic;
     RSTB : in std_ulogic;
     RSTD : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_FP_INREG : component is "PRIMITIVE";

----- component DSP_FP_OUTPUT -----
component DSP_FP_OUTPUT
  generic (
     FPA_PREG : integer := 1;
     FPM_PREG : integer := 1;
     IS_RSTFPA_INVERTED : bit := '0';
     IS_RSTFPM_INVERTED : bit := '0';
     PCOUTSEL : string := "FPA";
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     FPA_FDBK : out std_logic_vector(31 downto 0);
     FPA_INVALID : out std_ulogic;
     FPA_OUT : out std_logic_vector(31 downto 0);
     FPA_OVERFLOW : out std_ulogic;
     FPA_UNDERFLOW : out std_ulogic;
     FPM_DATA : out std_logic_vector(31 downto 0);
     FPM_INVALID : out std_ulogic;
     FPM_OUT : out std_logic_vector(31 downto 0);
     FPM_OVERFLOW : out std_ulogic;
     FPM_UNDERFLOW : out std_ulogic;
     PCOUT : out std_logic_vector(31 downto 0);
     ASYNC_RST : in std_ulogic;
     CEFPA : in std_ulogic;
     CEFPM : in std_ulogic;
     CLK : in std_ulogic;
     FPA_INT : in std_logic_vector(31 downto 0);
     FPA_INVALID_INT : in std_ulogic;
     FPA_OVERFLOW_INT : in std_ulogic;
     FPA_UNDERFLOW_INT : in std_ulogic;
     FPM_INT : in std_logic_vector(31 downto 0);
     FPM_INVALID_INT : in std_ulogic;
     FPM_OVERFLOW_INT : in std_ulogic;
     FPM_UNDERFLOW_INT : in std_ulogic;
     RSTFPA : in std_ulogic;
     RSTFPM : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_FP_OUTPUT : component is "PRIMITIVE";

----- component DSP_FP_SRCMX_OPTINV -----
component DSP_FP_SRCMX_OPTINV
  generic (
     IS_ASYNC_RST_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_RSTD_INVERTED : bit := '0'
  );
  port (
     ASYNC_RST : out std_ulogic;
     CLK : out std_ulogic;
     RSTD : out std_ulogic;
     ASYNC_RST_NAT : in std_ulogic;
     CLK_NAT : in std_ulogic;
     RSTD_NAT : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_FP_SRCMX_OPTINV : component is "PRIMITIVE";

----- component DSP_MULTIPLIER -----
component DSP_MULTIPLIER
  generic (
     AMULTSEL : string := "A";
     BMULTSEL : string := "B";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     AMULT26 : out std_ulogic;
     BMULT17 : out std_ulogic;
     U : out std_logic_vector(44 downto 0);
     V : out std_logic_vector(44 downto 0);
     A2A1 : in std_logic_vector(26 downto 0);
     AD_DATA : in std_logic_vector(26 downto 0);
     B2B1 : in std_logic_vector(17 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_MULTIPLIER : component is "PRIMITIVE";

----- component DSP_MULTIPLIER58 -----
component DSP_MULTIPLIER58
  generic (
     AMULTSEL : string := "A";
     BMULTSEL : string := "B";
     DSP_MODE : string := "INT24";
     LEGACY : string := "DSP58";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     AMULTMSB : out std_ulogic;
     BMULTMSB : out std_ulogic;
     U : out std_logic_vector(50 downto 0);
     U0U2_INT8 : out std_logic_vector(18 downto 0);
     U1_INT8 : out std_logic_vector(16 downto 0);
     V : out std_logic_vector(50 downto 0);
     V0V2_INT8 : out std_logic_vector(18 downto 0);
     V1_INT8 : out std_logic_vector(16 downto 0);
     A2A1 : in std_logic_vector(26 downto 0);
     AD_DATA : in std_logic_vector(26 downto 0);
     B2B1 : in std_logic_vector(23 downto 0);
     NEGATE_DATA : in std_logic_vector(2 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_MULTIPLIER58 : component is "PRIMITIVE";

----- component DSP_M_DATA -----
component DSP_M_DATA
  generic (
     IS_CLK_INVERTED : bit := '0';
     IS_RSTM_INVERTED : bit := '0';
     MREG : integer := 1
  );
  port (
     U_DATA : out std_logic_vector(44 downto 0);
     V_DATA : out std_logic_vector(44 downto 0);
     CEM : in std_ulogic;
     CLK : in std_ulogic;
     RSTM : in std_ulogic;
     U : in std_logic_vector(44 downto 0);
     V : in std_logic_vector(44 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_M_DATA : component is "PRIMITIVE";

----- component DSP_M_DATA58 -----
component DSP_M_DATA58
  generic (
     DSP_MODE : string := "INT24";
     IS_RSTM_INVERTED : bit := '0';
     MREG : integer := 1;
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     U_DATA : out std_logic_vector(50 downto 0);
     V_DATA : out std_logic_vector(50 downto 0);
     ASYNC_RST : in std_ulogic;
     CEM : in std_ulogic;
     CLK : in std_ulogic;
     RSTM : in std_ulogic;
     U : in std_logic_vector(50 downto 0);
     U0U2_INT8 : in std_logic_vector(18 downto 0);
     U1_INT8 : in std_logic_vector(16 downto 0);
     U_CPLX : in std_logic_vector(36 downto 0);
     V : in std_logic_vector(50 downto 0);
     V0V2_INT8 : in std_logic_vector(18 downto 0);
     V1_INT8 : in std_logic_vector(16 downto 0);
     V_CPLX : in std_logic_vector(36 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_M_DATA58 : component is "PRIMITIVE";

----- component DSP_OUTPUT -----
component DSP_OUTPUT
  generic (
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     IS_CLK_INVERTED : bit := '0';
     IS_RSTP_INVERTED : bit := '0';
     MASK : std_logic_vector(47 downto 0) := X"3FFFFFFFFFFF";
     PATTERN : std_logic_vector(47 downto 0) := X"000000000000";
     PREG : integer := 1;
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_PATTERN_DETECT : string := "NO_PATDET"
  );
  port (
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     CCOUT_FB : out std_ulogic;
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERN_B_DETECT : out std_ulogic;
     PATTERN_DETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     P_FDBK : out std_logic_vector(47 downto 0);
     P_FDBK_47 : out std_ulogic;
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     ALUMODE10 : in std_ulogic;
     ALU_OUT : in std_logic_vector(47 downto 0);
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     COUT : in std_logic_vector(3 downto 0);
     C_DATA : in std_logic_vector(47 downto 0);
     MULTSIGN_ALU : in std_ulogic;
     RSTP : in std_ulogic;
     XOR_MX : in std_logic_vector(7 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_OUTPUT : component is "PRIMITIVE";

----- component DSP_OUTPUT58 -----
component DSP_OUTPUT58
  generic (
     ADREG : integer := 1;
     AMULTSEL : string := "A";
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     BMULTSEL : string := "B";
     DSP_MODE : string := "INT24";
     IS_RSTP_INVERTED : bit := '0';
     LEGACY : string := "DSP58";
     PREG : integer := 1;
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     CARRYCASCOUT : out std_ulogic;
     CARRYCASCOUT_FB : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(57 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(57 downto 0);
     P_FDBK : out std_logic_vector(57 downto 0);
     P_FDBK_MSB : out std_ulogic;
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     ALUMODE10 : in std_ulogic;
     ALU_OUT : in std_logic_vector(57 downto 0);
     ASYNC_RST : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     COUT : in std_logic_vector(3 downto 0);
     MULTSIGN_ALU : in std_ulogic;
     PATT_B_DET : in std_logic_vector(4 downto 0);
     PATT_DET : in std_logic_vector(4 downto 0);
     RSTP : in std_ulogic;
     XOR_MX : in std_logic_vector(7 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_OUTPUT58 : component is "PRIMITIVE";

----- component DSP_PATDET -----
component DSP_PATDET
  generic (
     MASK : std_logic_vector(57 downto 0) := "00" & X"FFFFFFFFFFFFFF";
     PATTERN : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_PATTERN_DETECT : string := "NO_PATDET"
  );
  port (
     PATT_B_DET : out std_logic_vector(4 downto 0);
     PATT_DET : out std_logic_vector(4 downto 0);
     ALU_OUT : in std_logic_vector(57 downto 0);
     C_DATA : in std_logic_vector(57 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_PATDET : component is "PRIMITIVE";

----- component DSP_PREADD -----
component DSP_PREADD
  port (
     AD : out std_logic_vector(26 downto 0);
     ADDSUB : in std_ulogic;
     D_DATA : in std_logic_vector(26 downto 0);
     INMODE2 : in std_ulogic;
     PREADD_AB : in std_logic_vector(26 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_PREADD : component is "PRIMITIVE";

----- component DSP_PREADD58 -----
component DSP_PREADD58
  generic (
     DSP_MODE : string := "INT24"
  );
  port (
     AD : out std_logic_vector(26 downto 0);
     ADDSUB : in std_ulogic;
     D_DATA : in std_logic_vector(26 downto 0);
     INMODE_2 : in std_ulogic;
     PREADD_AB : in std_logic_vector(26 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_PREADD58 : component is "PRIMITIVE";

----- component DSP_PREADD_DATA -----
component DSP_PREADD_DATA
  generic (
     ADREG : integer := 1;
     AMULTSEL : string := "A";
     BMULTSEL : string := "B";
     DREG : integer := 1;
     INMODEREG : integer := 1;
     IS_CLK_INVERTED : bit := '0';
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_RSTD_INVERTED : bit := '0';
     IS_RSTINMODE_INVERTED : bit := '0';
     PREADDINSEL : string := "A";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     A2A1 : out std_logic_vector(26 downto 0);
     ADDSUB : out std_ulogic;
     AD_DATA : out std_logic_vector(26 downto 0);
     B2B1 : out std_logic_vector(17 downto 0);
     D_DATA : out std_logic_vector(26 downto 0);
     INMODE_2 : out std_ulogic;
     PREADD_AB : out std_logic_vector(26 downto 0);
     A1_DATA : in std_logic_vector(26 downto 0);
     A2_DATA : in std_logic_vector(26 downto 0);
     AD : in std_logic_vector(26 downto 0);
     B1_DATA : in std_logic_vector(17 downto 0);
     B2_DATA : in std_logic_vector(17 downto 0);
     CEAD : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_logic_vector(26 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_PREADD_DATA : component is "PRIMITIVE";

----- component DSP_PREADD_DATA58 -----
component DSP_PREADD_DATA58
  generic (
     ADREG : integer := 1;
     AMULTSEL : string := "A";
     AREG : integer := 1;
     BMULTSEL : string := "B";
     BREG : integer := 1;
     DREG : integer := 1;
     DSP_MODE : string := "INT24";
     INMODEREG : integer := 1;
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_NEGATE_INVERTED : std_logic_vector(2 downto 0) := "000";
     IS_RSTINMODE_INVERTED : bit := '0';
     LEGACY : string := "DSP58";
     MREG : integer := 1;
     PREADDINSEL : string := "A";
     RESET_MODE : string := "SYNC";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     A2A1 : out std_logic_vector(26 downto 0);
     ADDSUB : out std_ulogic;
     AD_DATA : out std_logic_vector(26 downto 0);
     AD_DATA_CPLX : out std_logic_vector(9 downto 0);
     B2B1 : out std_logic_vector(23 downto 0);
     B2B1_CPLX : out std_logic_vector(17 downto 0);
     CONJ_CPLX_OUT : out std_ulogic;
     D_DATA : out std_logic_vector(26 downto 0);
     INMODE_2 : out std_ulogic;
     NEGATE_DATA : out std_logic_vector(2 downto 0);
     PREADD_AB : out std_logic_vector(26 downto 0);
     A1_DATA : in std_logic_vector(26 downto 0);
     A2_DATA : in std_logic_vector(26 downto 0);
     AD : in std_logic_vector(26 downto 0);
     AD_CPLX : in std_logic_vector(9 downto 0);
     ASYNC_RST : in std_ulogic;
     B1_DATA : in std_logic_vector(23 downto 0);
     B2_DATA : in std_logic_vector(23 downto 0);
     CEAD_IN : in std_ulogic;
     CED_IN : in std_ulogic;
     CEINMODE : in std_ulogic;
     CLK : in std_ulogic;
     CONJ_CPLX_MULT_IN : in std_ulogic;
     CONJ_CPLX_PREADD_IN : in std_ulogic;
     DIN : in std_logic_vector(26 downto 0);
     D_FROM_A_CPLX : in std_logic_vector(17 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     NEGATE : in std_logic_vector(2 downto 0);
     RSTAD : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_PREADD_DATA58 : component is "PRIMITIVE";

----- component DSP_SRCMX_OPTINV -----
component DSP_SRCMX_OPTINV
  generic (
     DSP_MODE : string := "INT24";
     IS_ASYNC_RST_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_RSTAD_INVERTED : bit := '0';
     IS_RSTD_INVERTED : bit := '0'
  );
  port (
     ASYNC_RST : out std_ulogic;
     CLK : out std_ulogic;
     RSTAD : out std_ulogic;
     RSTD : out std_ulogic;
     ASYNC_RST_IN : in std_ulogic;
     CLK_IN : in std_ulogic;
     RSTAD_IN : in std_ulogic;
     RSTD_IN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_SRCMX_OPTINV : component is "PRIMITIVE";

----- component EFUSE_USR -----
component EFUSE_USR
  generic (
     SIM_EFUSE_VALUE : bit_vector := X"00000000"
  );
  port (
     EFUSEUSR : out std_logic_vector(31 downto 0)
  );
end component;
attribute BOX_TYPE of
  EFUSE_USR : component is "PRIMITIVE";

----- component FDCE -----
component FDCE
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic := TO_X01(INIT);
     C : in std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDCE : component is "PRIMITIVE";

----- component FDPE -----
component FDPE
  generic (
     INIT : bit := '1';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic := TO_X01(INIT);
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDPE : component is "PRIMITIVE";

----- component FDRE -----
component FDRE
  generic (
     INIT : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_R_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic := TO_X01(INIT);
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDRE : component is "PRIMITIVE";

----- component FDSE -----
component FDSE
  generic (
     INIT : bit := '1';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_S_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic := TO_X01(INIT);
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDSE : component is "PRIMITIVE";

----- component FE -----
component FE
  generic (
     MODE : string := "TURBO_DECODE";
     PHYSICAL_UTILIZATION : real := 100.00;
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     STANDARD : string := "LTE";
     THROUGHPUT_UTILIZATION : real := 100.00
  );
  port (
     DEBUG_DOUT : out std_logic_vector(399 downto 0);
     DEBUG_PHASE : out std_ulogic;
     INTERRUPT : out std_ulogic;
     M_AXIS_DOUT_TDATA : out std_logic_vector(511 downto 0);
     M_AXIS_DOUT_TLAST : out std_ulogic;
     M_AXIS_DOUT_TVALID : out std_ulogic;
     M_AXIS_STATUS_TDATA : out std_logic_vector(31 downto 0);
     M_AXIS_STATUS_TVALID : out std_ulogic;
     SPARE_OUT : out std_logic_vector(15 downto 0);
     S_AXIS_CTRL_TREADY : out std_ulogic;
     S_AXIS_DIN_TREADY : out std_ulogic;
     S_AXIS_DIN_WORDS_TREADY : out std_ulogic;
     S_AXIS_DOUT_WORDS_TREADY : out std_ulogic;
     S_AXI_ARREADY : out std_ulogic;
     S_AXI_AWREADY : out std_ulogic;
     S_AXI_BVALID : out std_ulogic;
     S_AXI_RDATA : out std_logic_vector(31 downto 0);
     S_AXI_RVALID : out std_ulogic;
     S_AXI_WREADY : out std_ulogic;
     CORE_CLK : in std_ulogic;
     DEBUG_CLK_EN : in std_ulogic;
     DEBUG_EN : in std_ulogic;
     DEBUG_SEL_IN : in std_logic_vector(3 downto 0);
     M_AXIS_DOUT_ACLK : in std_ulogic;
     M_AXIS_DOUT_TREADY : in std_ulogic;
     M_AXIS_STATUS_ACLK : in std_ulogic;
     M_AXIS_STATUS_TREADY : in std_ulogic;
     RESET_N : in std_ulogic;
     SPARE_IN : in std_logic_vector(15 downto 0);
     S_AXIS_CTRL_ACLK : in std_ulogic;
     S_AXIS_CTRL_TDATA : in std_logic_vector(31 downto 0);
     S_AXIS_CTRL_TVALID : in std_ulogic;
     S_AXIS_DIN_ACLK : in std_ulogic;
     S_AXIS_DIN_TDATA : in std_logic_vector(511 downto 0);
     S_AXIS_DIN_TLAST : in std_ulogic;
     S_AXIS_DIN_TVALID : in std_ulogic;
     S_AXIS_DIN_WORDS_ACLK : in std_ulogic;
     S_AXIS_DIN_WORDS_TDATA : in std_logic_vector(31 downto 0);
     S_AXIS_DIN_WORDS_TLAST : in std_ulogic;
     S_AXIS_DIN_WORDS_TVALID : in std_ulogic;
     S_AXIS_DOUT_WORDS_ACLK : in std_ulogic;
     S_AXIS_DOUT_WORDS_TDATA : in std_logic_vector(31 downto 0);
     S_AXIS_DOUT_WORDS_TLAST : in std_ulogic;
     S_AXIS_DOUT_WORDS_TVALID : in std_ulogic;
     S_AXI_ACLK : in std_ulogic;
     S_AXI_ARADDR : in std_logic_vector(17 downto 0);
     S_AXI_ARVALID : in std_ulogic;
     S_AXI_AWADDR : in std_logic_vector(17 downto 0);
     S_AXI_AWVALID : in std_ulogic;
     S_AXI_BREADY : in std_ulogic;
     S_AXI_RREADY : in std_ulogic;
     S_AXI_WDATA : in std_logic_vector(31 downto 0);
     S_AXI_WVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FE : component is "PRIMITIVE";

----- component FIFO18E1 -----
component FIFO18E1
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"0080";
     ALMOST_FULL_OFFSET : bit_vector := X"0080";
     DATA_WIDTH : integer := 4;
     DO_REG : integer := 1;
     EN_SYN : boolean := FALSE;
     FIFO_MODE : string := "FIFO18";
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     INIT : bit_vector := X"000000000";
     IS_RDCLK_INVERTED : bit := '0';
     IS_RDEN_INVERTED : bit := '0';
     IS_RSTREG_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     IS_WRCLK_INVERTED : bit := '0';
     IS_WREN_INVERTED : bit := '0';
     SIM_DEVICE : string := "7SERIES";
     SRVAL : bit_vector := X"000000000"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DO : out std_logic_vector (31 downto 0);
     DOP : out std_logic_vector (3 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (11 downto 0);
     RDERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (11 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (31 downto 0);
     DIP : in std_logic_vector (3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO18E1 : component is "PRIMITIVE";

----- component FIFO18E2 -----
component FIFO18E2
  generic (
     CASCADE_ORDER : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     FIRST_WORD_FALL_THROUGH : string := "FALSE";
     INIT : std_logic_vector (35 downto 0) := X"000000000";
     IS_RDCLK_INVERTED : bit := '0';
     IS_RDEN_INVERTED : bit := '0';
     IS_RSTREG_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     IS_WRCLK_INVERTED : bit := '0';
     IS_WREN_INVERTED : bit := '0';
     PROG_EMPTY_THRESH : integer := 256;
     PROG_FULL_THRESH : integer := 256;
     RDCOUNT_TYPE : string := "RAW_PNTR";
     READ_WIDTH : integer := 4;
     REGISTER_MODE : string := "UNREGISTERED";
     RSTREG_PRIORITY : string := "RSTREG";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL : std_logic_vector (35 downto 0) := X"000000000";
     WRCOUNT_TYPE : string := "RAW_PNTR";
     WRITE_WIDTH : integer := 4
  );
  port (
     CASDOUT : out std_logic_vector(31 downto 0);
     CASDOUTP : out std_logic_vector(3 downto 0);
     CASNXTEMPTY : out std_ulogic;
     CASPRVRDEN : out std_ulogic;
     DOUT : out std_logic_vector(31 downto 0);
     DOUTP : out std_logic_vector(3 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     PROGEMPTY : out std_ulogic;
     PROGFULL : out std_ulogic;
     RDCOUNT : out std_logic_vector(12 downto 0);
     RDERR : out std_ulogic;
     RDRSTBUSY : out std_ulogic;
     WRCOUNT : out std_logic_vector(12 downto 0);
     WRERR : out std_ulogic;
     WRRSTBUSY : out std_ulogic;
     CASDIN : in std_logic_vector(31 downto 0);
     CASDINP : in std_logic_vector(3 downto 0);
     CASDOMUX : in std_ulogic;
     CASDOMUXEN : in std_ulogic;
     CASNXTRDEN : in std_ulogic;
     CASOREGIMUX : in std_ulogic;
     CASOREGIMUXEN : in std_ulogic;
     CASPRVEMPTY : in std_ulogic;
     DIN : in std_logic_vector(31 downto 0);
     DINP : in std_logic_vector(3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     SLEEP : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO18E2 : component is "PRIMITIVE";

----- component FIFO36E1 -----
component FIFO36E1
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"0080";
     ALMOST_FULL_OFFSET : bit_vector := X"0080";
     DATA_WIDTH : integer := 4;
     DO_REG : integer := 1;
     EN_ECC_READ : boolean := FALSE;
     EN_ECC_WRITE : boolean := FALSE;
     EN_SYN : boolean := FALSE;
     FIFO_MODE : string := "FIFO36";
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     INIT : bit_vector := X"000000000000000000";
     IS_RDCLK_INVERTED : bit := '0';
     IS_RDEN_INVERTED : bit := '0';
     IS_RSTREG_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     IS_WRCLK_INVERTED : bit := '0';
     IS_WREN_INVERTED : bit := '0';
     SIM_DEVICE : string := "7SERIES";
     SRVAL : bit_vector := X"000000000000000000"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DBITERR : out std_ulogic;
     DO : out std_logic_vector (63 downto 0);
     DOP : out std_logic_vector (7 downto 0);
     ECCPARITY : out std_logic_vector (7 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (12 downto 0);
     RDERR : out std_ulogic;
     SBITERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (12 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (63 downto 0);
     DIP : in std_logic_vector (7 downto 0);
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO36E1 : component is "PRIMITIVE";

----- component FIFO36E2 -----
component FIFO36E2
  generic (
     CASCADE_ORDER : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     EN_ECC_PIPE : string := "FALSE";
     EN_ECC_READ : string := "FALSE";
     EN_ECC_WRITE : string := "FALSE";
     FIRST_WORD_FALL_THROUGH : string := "FALSE";
     INIT : std_logic_vector (71 downto 0) := X"000000000000000000";
     IS_RDCLK_INVERTED : bit := '0';
     IS_RDEN_INVERTED : bit := '0';
     IS_RSTREG_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     IS_WRCLK_INVERTED : bit := '0';
     IS_WREN_INVERTED : bit := '0';
     PROG_EMPTY_THRESH : integer := 256;
     PROG_FULL_THRESH : integer := 256;
     RDCOUNT_TYPE : string := "RAW_PNTR";
     READ_WIDTH : integer := 4;
     REGISTER_MODE : string := "UNREGISTERED";
     RSTREG_PRIORITY : string := "RSTREG";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL : std_logic_vector (71 downto 0) := X"000000000000000000";
     WRCOUNT_TYPE : string := "RAW_PNTR";
     WRITE_WIDTH : integer := 4
  );
  port (
     CASDOUT : out std_logic_vector(63 downto 0);
     CASDOUTP : out std_logic_vector(7 downto 0);
     CASNXTEMPTY : out std_ulogic;
     CASPRVRDEN : out std_ulogic;
     DBITERR : out std_ulogic;
     DOUT : out std_logic_vector(63 downto 0);
     DOUTP : out std_logic_vector(7 downto 0);
     ECCPARITY : out std_logic_vector(7 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     PROGEMPTY : out std_ulogic;
     PROGFULL : out std_ulogic;
     RDCOUNT : out std_logic_vector(13 downto 0);
     RDERR : out std_ulogic;
     RDRSTBUSY : out std_ulogic;
     SBITERR : out std_ulogic;
     WRCOUNT : out std_logic_vector(13 downto 0);
     WRERR : out std_ulogic;
     WRRSTBUSY : out std_ulogic;
     CASDIN : in std_logic_vector(63 downto 0);
     CASDINP : in std_logic_vector(7 downto 0);
     CASDOMUX : in std_ulogic;
     CASDOMUXEN : in std_ulogic;
     CASNXTRDEN : in std_ulogic;
     CASOREGIMUX : in std_ulogic;
     CASOREGIMUXEN : in std_ulogic;
     CASPRVEMPTY : in std_ulogic;
     DIN : in std_logic_vector(63 downto 0);
     DINP : in std_logic_vector(7 downto 0);
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     SLEEP : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO36E2 : component is "PRIMITIVE";

----- component FRAME_ECCE2 -----
component FRAME_ECCE2
  generic (
     FARSRC : string:= "EFAR";
     FRAME_RBT_IN_FILENAME : string := "NONE"
  );
  port (
     CRCERROR : out std_ulogic;
     ECCERROR : out std_ulogic;
     ECCERRORSINGLE : out std_ulogic;
     FAR : out std_logic_vector(25 downto 0);
     SYNBIT : out std_logic_vector(4 downto 0);
     SYNDROME : out std_logic_vector(12 downto 0);
     SYNDROMEVALID : out std_ulogic;
     SYNWORD : out std_logic_vector(6 downto 0)
  );
end component;
attribute BOX_TYPE of
  FRAME_ECCE2 : component is "PRIMITIVE";

----- component FRAME_ECCE3 -----
component FRAME_ECCE3
  port (
     CRCERROR : out std_ulogic := 'L';
     ECCERRORNOTSINGLE : out std_ulogic := 'L';
     ECCERRORSINGLE : out std_ulogic := 'L';
     ENDOFFRAME : out std_ulogic := 'L';
     ENDOFSCAN : out std_ulogic := 'L';
     FAR : out std_logic_vector(25 downto 0) := (others => 'L');
     FARSEL : in std_logic_vector(1 downto 0);
     ICAPBOTCLK : in std_ulogic;
     ICAPTOPCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FRAME_ECCE3 : component is "PRIMITIVE";

----- component FRAME_ECCE4 -----
component FRAME_ECCE4
  port (
     CRCERROR : out std_ulogic;
     ECCERRORNOTSINGLE : out std_ulogic;
     ECCERRORSINGLE : out std_ulogic;
     ENDOFFRAME : out std_ulogic;
     ENDOFSCAN : out std_ulogic;
     FAR : out std_logic_vector(26 downto 0);
     FARSEL : in std_logic_vector(1 downto 0);
     ICAPBOTCLK : in std_ulogic;
     ICAPTOPCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FRAME_ECCE4 : component is "PRIMITIVE";

----- component GLBL_VHD -----
component GLBL_VHD
  generic (
     ROC_WIDTH : integer := 100000;
     TOC_WIDTH : integer := 0
  );
end component;
attribute BOX_TYPE of
  GLBL_VHD : component is "PRIMITIVE";

----- component GND -----
component GND
  port (
     G : out std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  GND : component is "PRIMITIVE";

----- component GTHE2_CHANNEL -----
component GTHE2_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : bit_vector := X"00C10";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : bit_vector := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : bit_vector := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : bit_vector := "0101111100";
     A_RXOSCALRESET : bit := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CFOK_CFG : bit_vector := X"24800040E80";
     CFOK_CFG2 : bit_vector := "100000";
     CFOK_CFG3 : bit_vector := "100000";
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_3 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_4 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_2 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_3 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_4 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 1;
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_1 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_2 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_3 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_4 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 1;
     CPLL_CFG : bit_vector := X"00BC07DC";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 5;
     CPLL_INIT_CFG : bit_vector := X"00001E";
     CPLL_LOCK_CFG : bit_vector := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DMONITOR_CFG : bit_vector := X"000A00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : bit_vector := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "TRUE";
     ES_HORZ_OFFSET : bit_vector := X"000";
     ES_PMA_CFG : bit_vector := "0000000000";
     ES_PRESCALE : bit_vector := "00000";
     ES_QUALIFIER : bit_vector := X"00000000000000000000";
     ES_QUAL_MASK : bit_vector := X"00000000000000000000";
     ES_SDATA_MASK : bit_vector := X"00000000000000000000";
     ES_VERT_OFFSET : bit_vector := "000000000";
     FTS_DESKEW_SEQ_ENABLE : bit_vector := "1111";
     FTS_LANE_DESKEW_CFG : bit_vector := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : bit_vector := "000";
     IS_CLKRSVD0_INVERTED : bit := '0';
     IS_CLKRSVD1_INVERTED : bit := '0';
     IS_CPLLLOCKDETCLK_INVERTED : bit := '0';
     IS_DMONITORCLK_INVERTED : bit := '0';
     IS_DRPCLK_INVERTED : bit := '0';
     IS_GTGREFCLK_INVERTED : bit := '0';
     IS_RXUSRCLK2_INVERTED : bit := '0';
     IS_RXUSRCLK_INVERTED : bit := '0';
     IS_SIGVALIDCLK_INVERTED : bit := '0';
     IS_TXPHDLYTSTCLK_INVERTED : bit := '0';
     IS_TXUSRCLK2_INVERTED : bit := '0';
     IS_TXUSRCLK_INVERTED : bit := '0';
     LOOPBACK_CFG : bit := '0';
     OUTREFCLK_SEL_INV : bit_vector := "11";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD_ATTR : bit_vector := X"000000000000";
     PD_TRANS_TIME_FROM_P2 : bit_vector := X"03C";
     PD_TRANS_TIME_NONE_P2 : bit_vector := X"19";
     PD_TRANS_TIME_TO_P2 : bit_vector := X"64";
     PMA_RSV : bit_vector := "00000000000000000000000010000000";
     PMA_RSV2 : bit_vector := "00011100000000000000000000001010";
     PMA_RSV3 : bit_vector := "00";
     PMA_RSV4 : bit_vector := "000000000001000";
     PMA_RSV5 : bit_vector := "0000";
     RESET_POWERSAVE_DISABLE : bit := '0';
     RXBUFRESET_TIME : bit_vector := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : bit_vector := "1000";
     RXBUF_EIDLE_LO_CNT : bit_vector := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 61;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : bit_vector := "00001";
     RXCDRPHRESET_TIME : bit_vector := "00001";
     RXCDR_CFG : bit_vector := X"0002007FE2000C208001A";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG : bit_vector := "001001";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXDFELPMRESET_TIME : bit_vector := "0001111";
     RXDLY_CFG : bit_vector := X"001F";
     RXDLY_LCFG : bit_vector := X"030";
     RXDLY_TAP_CFG : bit_vector := X"0000";
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : bit_vector := "00001";
     RXLPM_HF_CFG : bit_vector := "00001000000000";
     RXLPM_LF_CFG : bit_vector := "001001000000000000";
     RXOOB_CFG : bit_vector := "0000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : bit_vector := "00011";
     RXOSCALRESET_TIMEOUT : bit_vector := "00000";
     RXOUT_DIV : integer := 2;
     RXPCSRESET_TIME : bit_vector := "00001";
     RXPHDLY_CFG : bit_vector := X"084020";
     RXPH_CFG : bit_vector := X"C00002";
     RXPH_MONITOR_SEL : bit_vector := "00000";
     RXPI_CFG0 : bit_vector := "00";
     RXPI_CFG1 : bit_vector := "00";
     RXPI_CFG2 : bit_vector := "00";
     RXPI_CFG3 : bit_vector := "00";
     RXPI_CFG4 : bit := '0';
     RXPI_CFG5 : bit := '0';
     RXPI_CFG6 : bit_vector := "100";
     RXPMARESET_TIME : bit_vector := "00011";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_BIAS_CFG : bit_vector := "000011000000000000010000";
     RX_BUFFER_CFG : bit_vector := "000000";
     RX_CLK25_DIV : integer := 7;
     RX_CLKMUX_PD : bit := '1';
     RX_CM_SEL : bit_vector := "11";
     RX_CM_TRIM : bit_vector := "0100";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : bit_vector := "000000";
     RX_DEBUG_CFG : bit_vector := "00000000000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DFELPM_CFG0 : bit_vector := "0110";
     RX_DFELPM_CFG1 : bit := '0';
     RX_DFELPM_KLKH_AGC_STUP_EN : bit := '1';
     RX_DFE_AGC_CFG0 : bit_vector := "00";
     RX_DFE_AGC_CFG1 : bit_vector := "010";
     RX_DFE_AGC_CFG2 : bit_vector := "0000";
     RX_DFE_AGC_OVRDEN : bit := '1';
     RX_DFE_GAIN_CFG : bit_vector := X"0020C0";
     RX_DFE_H2_CFG : bit_vector := "000000000000";
     RX_DFE_H3_CFG : bit_vector := "000001000000";
     RX_DFE_H4_CFG : bit_vector := "00011100000";
     RX_DFE_H5_CFG : bit_vector := "00011100000";
     RX_DFE_H6_CFG : bit_vector := "00000100000";
     RX_DFE_H7_CFG : bit_vector := "00000100000";
     RX_DFE_KL_CFG : bit_vector := "000000000000000000000001100010000";
     RX_DFE_KL_LPM_KH_CFG0 : bit_vector := "01";
     RX_DFE_KL_LPM_KH_CFG1 : bit_vector := "010";
     RX_DFE_KL_LPM_KH_CFG2 : bit_vector := "0010";
     RX_DFE_KL_LPM_KH_OVRDEN : bit := '1';
     RX_DFE_KL_LPM_KL_CFG0 : bit_vector := "10";
     RX_DFE_KL_LPM_KL_CFG1 : bit_vector := "010";
     RX_DFE_KL_LPM_KL_CFG2 : bit_vector := "0010";
     RX_DFE_KL_LPM_KL_OVRDEN : bit := '1';
     RX_DFE_LPM_CFG : bit_vector := X"0080";
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DFE_ST_CFG : bit_vector := X"00E100000C003F";
     RX_DFE_UT_CFG : bit_vector := "00011100000000000";
     RX_DFE_VP_CFG : bit_vector := "00011101010100011";
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_INT_DATAWIDTH : integer := 0;
     RX_OS_CFG : bit_vector := "0000010000000";
     RX_SIG_VALID_DLY : integer := 10;
     RX_XCLK_SEL : string := "RXREC";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : bit_vector := "1111";
     SATA_BURST_VAL : bit_vector := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : bit_vector := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_CPLLREFCLK_SEL : bit_vector := "001";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "X";
     SIM_VERSION : string := "1.1";
     TERM_RCAL_CFG : bit_vector := "100001000010000";
     TERM_RCAL_OVRD : bit_vector := "000";
     TRANS_TIME_RATE : bit_vector := X"0E";
     TST_RSV : bit_vector := X"00000000";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : bit_vector := X"001F";
     TXDLY_LCFG : bit_vector := X"030";
     TXDLY_TAP_CFG : bit_vector := X"0000";
     TXGEARBOX_EN : string := "FALSE";
     TXOOB_CFG : bit := '0';
     TXOUT_DIV : integer := 2;
     TXPCSRESET_TIME : bit_vector := "00001";
     TXPHDLY_CFG : bit_vector := X"084020";
     TXPH_CFG : bit_vector := X"0780";
     TXPH_MONITOR_SEL : bit_vector := "00000";
     TXPI_CFG0 : bit_vector := "00";
     TXPI_CFG1 : bit_vector := "00";
     TXPI_CFG2 : bit_vector := "00";
     TXPI_CFG3 : bit := '0';
     TXPI_CFG4 : bit := '0';
     TXPI_CFG5 : bit_vector := "100";
     TXPI_GREY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : bit_vector := "00000000";
     TXPI_SYNFREQ_PPM : bit_vector := "000";
     TXPMARESET_TIME : bit_vector := "00001";
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 7;
     TX_CLKMUX_PD : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DEEMPH0 : bit_vector := "000000";
     TX_DEEMPH1 : bit_vector := "000000";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : bit_vector := "110";
     TX_EIDLE_DEASSERT_DELAY : bit_vector := "100";
     TX_INT_DATAWIDTH : integer := 0;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : bit_vector := "1001110";
     TX_MARGIN_FULL_1 : bit_vector := "1001001";
     TX_MARGIN_FULL_2 : bit_vector := "1000101";
     TX_MARGIN_FULL_3 : bit_vector := "1000010";
     TX_MARGIN_FULL_4 : bit_vector := "1000000";
     TX_MARGIN_LOW_0 : bit_vector := "1000110";
     TX_MARGIN_LOW_1 : bit_vector := "1000100";
     TX_MARGIN_LOW_2 : bit_vector := "1000010";
     TX_MARGIN_LOW_3 : bit_vector := "1000000";
     TX_MARGIN_LOW_4 : bit_vector := "1000000";
     TX_QPI_STATUS_EN : bit := '0';
     TX_RXDETECT_CFG : bit_vector := X"1832";
     TX_RXDETECT_PRECHARGE_TIME : bit_vector := X"00000";
     TX_RXDETECT_REF : bit_vector := "100";
     TX_XCLK_SEL : string := "TXUSR";
     UCODEER_CLR : bit := '0';
     USE_PCS_CLK_PHASE_SEL : bit := '0'
  );
  port (
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(14 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTHTXN : out std_ulogic;
     GTHTXP : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     RSOSINTDONE : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHARISCOMMA : out std_logic_vector(7 downto 0);
     RXCHARISK : out std_logic_vector(7 downto 0);
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXDATA : out std_logic_vector(63 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDFESLIDETAPSTARTED : out std_ulogic;
     RXDFESLIDETAPSTROBEDONE : out std_ulogic;
     RXDFESLIDETAPSTROBESTARTED : out std_ulogic;
     RXDFESTADAPTDONE : out std_ulogic;
     RXDISPERR : out std_logic_vector(7 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXNOTINTABLE : out std_logic_vector(7 downto 0);
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHMONITOR : out std_logic_vector(4 downto 0);
     RXPHSLIPMONITOR : out std_logic_vector(4 downto 0);
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXQPISENN : out std_ulogic;
     RXQPISENP : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXGEARBOXREADY : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXQPISENN : out std_ulogic;
     TXQPISENP : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTHRXN : in std_ulogic;
     GTHRXP : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     QPLLCLK : in std_ulogic;
     QPLLREFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXADAPTSELTEST : in std_logic_vector(13 downto 0);
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDDIEN : in std_ulogic;
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFEAGCTRL : in std_logic_vector(4 downto 0);
     RXDFECM1EN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFESLIDETAP : in std_logic_vector(4 downto 0);
     RXDFESLIDETAPADAPTEN : in std_ulogic;
     RXDFESLIDETAPHOLD : in std_ulogic;
     RXDFESLIDETAPID : in std_logic_vector(5 downto 0);
     RXDFESLIDETAPINITOVRDEN : in std_ulogic;
     RXDFESLIDETAPONLYADAPTEN : in std_ulogic;
     RXDFESLIDETAPOVRDEN : in std_ulogic;
     RXDFESLIDETAPSTROBE : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTID0 : in std_logic_vector(3 downto 0);
     RXOSINTNTRLEN : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(2 downto 0);
     RXQPIEN : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SETERRSTATUS : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCHARDISPMODE : in std_logic_vector(7 downto 0);
     TXCHARDISPVAL : in std_logic_vector(7 downto 0);
     TXCHARISK : in std_logic_vector(7 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXDATA : in std_logic_vector(63 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(2 downto 0);
     TXINHIBIT : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(2 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXQPIBIASEN : in std_ulogic;
     TXQPISTRONGPDOWN : in std_ulogic;
     TXQPIWEAKPUP : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSTARTSEQ : in std_ulogic;
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE2_CHANNEL : component is "PRIMITIVE";

----- component GTHE2_COMMON -----
component GTHE2_COMMON
  generic (
     BIAS_CFG : bit_vector := X"0000040000001000";
     COMMON_CFG : bit_vector := X"0000001C";
     IS_DRPCLK_INVERTED : bit := '0';
     IS_GTGREFCLK_INVERTED : bit := '0';
     IS_QPLLLOCKDETCLK_INVERTED : bit := '0';
     QPLL_CFG : bit_vector := X"0480181";
     QPLL_CLKOUT_CFG : bit_vector := "0000";
     QPLL_COARSE_FREQ_OVRD : bit_vector := "010000";
     QPLL_COARSE_FREQ_OVRD_EN : bit := '0';
     QPLL_CP : bit_vector := "0000011111";
     QPLL_CP_MONITOR_EN : bit := '0';
     QPLL_DMONITOR_SEL : bit := '0';
     QPLL_FBDIV : bit_vector := "0000000000";
     QPLL_FBDIV_MONITOR_EN : bit := '0';
     QPLL_FBDIV_RATIO : bit := '0';
     QPLL_INIT_CFG : bit_vector := X"000006";
     QPLL_LOCK_CFG : bit_vector := X"01E8";
     QPLL_LPF : bit_vector := "1111";
     QPLL_REFCLK_DIV : integer := 2;
     QPLL_RP_COMP : bit := '0';
     QPLL_VTRL_RESET : bit_vector := "00";
     RCAL_CFG : bit_vector := "00";
     RSVD_ATTR0 : bit_vector := X"0000";
     RSVD_ATTR1 : bit_vector := X"0000";
     SIM_QPLLREFCLK_SEL : bit_vector := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "1.1"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT : out std_logic_vector(15 downto 0);
     QPLLDMONITOR : out std_logic_vector(7 downto 0);
     QPLLFBCLKLOST : out std_ulogic;
     QPLLLOCK : out std_ulogic;
     QPLLOUTCLK : out std_ulogic;
     QPLLOUTREFCLK : out std_ulogic;
     QPLLREFCLKLOST : out std_ulogic;
     REFCLKOUTMONITOR : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(7 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     PMARSVD : in std_logic_vector(7 downto 0);
     QPLLLOCKDETCLK : in std_ulogic;
     QPLLLOCKEN : in std_ulogic;
     QPLLOUTRESET : in std_ulogic;
     QPLLPD : in std_ulogic;
     QPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     QPLLRESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(15 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE2_COMMON : component is "PRIMITIVE";

----- component GTHE3_CHANNEL -----
component GTHE3_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : std_logic_vector(15 downto 0) := X"F800";
     ADAPT_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : std_logic_vector(9 downto 0) := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : std_logic_vector(9 downto 0) := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : std_logic_vector(9 downto 0) := "0101111100";
     A_RXOSCALRESET : bit := '0';
     A_RXPROGDIVRESET : bit := '0';
     A_TXPROGDIVRESET : bit := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CDR_SWAP_MODE_EN : bit := '0';
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : std_logic_vector(9 downto 0) := "0101111100";
     CHAN_BOND_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 2;
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : std_logic_vector(9 downto 0) := "0100011100";
     CLK_COR_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 2;
     CPLL_CFG0 : std_logic_vector(15 downto 0) := X"20F8";
     CPLL_CFG1 : std_logic_vector(15 downto 0) := X"A494";
     CPLL_CFG2 : std_logic_vector(15 downto 0) := X"F001";
     CPLL_CFG3 : std_logic_vector(5 downto 0) := "00" & X"0";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 4;
     CPLL_INIT_CFG0 : std_logic_vector(15 downto 0) := X"001E";
     CPLL_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     CPLL_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     DDI_CTRL : std_logic_vector(1 downto 0) := "00";
     DDI_REALIGN_WAIT : integer := 15;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DFE_D_X_REL_POS : bit := '0';
     DFE_VCM_COMP_EN : bit := '0';
     DMONITOR_CFG0 : std_logic_vector(9 downto 0) := "00" & X"00";
     DMONITOR_CFG1 : std_logic_vector(7 downto 0) := X"00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : std_logic_vector(5 downto 0) := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : std_logic_vector(11 downto 0) := X"000";
     ES_PMA_CFG : std_logic_vector(9 downto 0) := "0000000000";
     ES_PRESCALE : std_logic_vector(4 downto 0) := "00000";
     ES_QUALIFIER0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     EVODD_PHI_CFG : std_logic_vector(10 downto 0) := "00000000000";
     EYE_SCAN_SWAP_EN : bit := '0';
     FTS_DESKEW_SEQ_ENABLE : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_CFG : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : std_logic_vector(4 downto 0) := "00000";
     GM_BIAS_SELECT : bit := '0';
     LOCAL_MASTER : bit := '0';
     OOBDIVCTL : std_logic_vector(1 downto 0) := "00";
     OOB_PWRUP : bit := '0';
     PCI3_AUTO_REALIGN : string := "FRST_SMPL";
     PCI3_PIPE_RX_ELECIDLE : bit := '1';
     PCI3_RX_ASYNC_EBUF_BYPASS : std_logic_vector(1 downto 0) := "00";
     PCI3_RX_ELECIDLE_EI2_ENABLE : bit := '0';
     PCI3_RX_ELECIDLE_H2L_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_H2L_DISABLE : std_logic_vector(2 downto 0) := "000";
     PCI3_RX_ELECIDLE_HI_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_LP4_DISABLE : bit := '0';
     PCI3_RX_FIFO_DISABLE : bit := '0';
     PCIE_BUFG_DIV_CTRL : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD0 : std_logic_vector(15 downto 0) := "0000000000000000";
     PCS_RSVD1 : std_logic_vector(2 downto 0) := "000";
     PD_TRANS_TIME_FROM_P2 : std_logic_vector(11 downto 0) := X"03C";
     PD_TRANS_TIME_NONE_P2 : std_logic_vector(7 downto 0) := X"19";
     PD_TRANS_TIME_TO_P2 : std_logic_vector(7 downto 0) := X"64";
     PLL_SEL_MODE_GEN12 : std_logic_vector(1 downto 0) := "00";
     PLL_SEL_MODE_GEN3 : std_logic_vector(1 downto 0) := "00";
     PMA_RSV1 : std_logic_vector(15 downto 0) := X"0000";
     PROCESS_PAR : std_logic_vector(2 downto 0) := "010";
     RATE_SW_USE_DRP : bit := '0';
     RESET_POWERSAVE_DISABLE : bit := '0';
     RXBUFRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : std_logic_vector(3 downto 0) := "1000";
     RXBUF_EIDLE_LO_CNT : std_logic_vector(3 downto 0) := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 0;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDRPHRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDR_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG0_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG1 : std_logic_vector(15 downto 0) := X"0080";
     RXCDR_CFG1_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG2 : std_logic_vector(15 downto 0) := X"07E6";
     RXCDR_CFG2_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG3_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG4_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG5 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG5_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG0 : std_logic_vector(15 downto 0) := X"5080";
     RXCDR_LOCK_CFG1 : std_logic_vector(15 downto 0) := X"07E0";
     RXCDR_LOCK_CFG2 : std_logic_vector(15 downto 0) := X"7C42";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXCFOK_CFG0 : std_logic_vector(15 downto 0) := X"4000";
     RXCFOK_CFG1 : std_logic_vector(15 downto 0) := X"0060";
     RXCFOK_CFG2 : std_logic_vector(15 downto 0) := X"000E";
     RXDFELPMRESET_TIME : std_logic_vector(6 downto 0) := "0001111";
     RXDFELPM_KL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPM_KL_CFG1 : std_logic_vector(15 downto 0) := X"0032";
     RXDFELPM_KL_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_CFG0 : std_logic_vector(15 downto 0) := X"0A00";
     RXDFE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG1 : std_logic_vector(15 downto 0) := X"7840";
     RXDFE_GC_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H3_CFG0 : std_logic_vector(15 downto 0) := X"4000";
     RXDFE_H3_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H4_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H4_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_H5_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H5_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_H6_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H6_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H7_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H7_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H8_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H8_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H9_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H9_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HA_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_HA_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HB_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_HB_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG0 : std_logic_vector(15 downto 0) := X"8000";
     RXDFE_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_UT_CFG0 : std_logic_vector(15 downto 0) := X"8000";
     RXDFE_UT_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_VP_CFG0 : std_logic_vector(15 downto 0) := X"AA00";
     RXDFE_VP_CFG1 : std_logic_vector(15 downto 0) := X"0033";
     RXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     RXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     RXELECIDLE_CFG : string := "Sigcfg_4";
     RXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXLPM_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_GC_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXLPM_OS_CFG0 : std_logic_vector(15 downto 0) := X"8000";
     RXLPM_OS_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXOOB_CFG : std_logic_vector(8 downto 0) := "000000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : std_logic_vector(4 downto 0) := "00011";
     RXOUT_DIV : integer := 4;
     RXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPHBEACON_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXPHDLY_CFG : std_logic_vector(15 downto 0) := X"2020";
     RXPHSAMP_CFG : std_logic_vector(15 downto 0) := X"2100";
     RXPHSLIP_CFG : std_logic_vector(15 downto 0) := X"6622";
     RXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     RXPI_CFG0 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG1 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG2 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG3 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG4 : bit := '0';
     RXPI_CFG5 : bit := '1';
     RXPI_CFG6 : std_logic_vector(2 downto 0) := "000";
     RXPI_LPM : bit := '0';
     RXPI_VREFSEL : bit := '0';
     RXPMACLK_SEL : string := "DATA";
     RXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXPRBS_LINKACQ_CNT : integer := 15;
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_AFE_CM_EN : bit := '0';
     RX_BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0AD4";
     RX_BUFFER_CFG : std_logic_vector(5 downto 0) := "000000";
     RX_CAPFF_SARC_ENB : bit := '0';
     RX_CLK25_DIV : integer := 8;
     RX_CLKMUX_EN : bit := '1';
     RX_CLK_SLIP_OVRD : std_logic_vector(4 downto 0) := "00000";
     RX_CM_BUF_CFG : std_logic_vector(3 downto 0) := "1010";
     RX_CM_BUF_PD : bit := '0';
     RX_CM_SEL : std_logic_vector(1 downto 0) := "11";
     RX_CM_TRIM : std_logic_vector(3 downto 0) := "0100";
     RX_CTLE3_LPF : std_logic_vector(7 downto 0) := "00000000";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : std_logic_vector(5 downto 0) := "000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DFELPM_CFG0 : std_logic_vector(3 downto 0) := "0110";
     RX_DFELPM_CFG1 : bit := '0';
     RX_DFELPM_KLKH_AGC_STUP_EN : bit := '1';
     RX_DFE_AGC_CFG0 : std_logic_vector(1 downto 0) := "00";
     RX_DFE_AGC_CFG1 : std_logic_vector(2 downto 0) := "100";
     RX_DFE_KL_LPM_KH_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KH_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_KL_LPM_KL_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KL_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RX_EN_HI_LR : bit := '0';
     RX_EYESCAN_VS_CODE : std_logic_vector(6 downto 0) := "0000000";
     RX_EYESCAN_VS_NEG_DIR : bit := '0';
     RX_EYESCAN_VS_RANGE : std_logic_vector(1 downto 0) := "00";
     RX_EYESCAN_VS_UT_SIGN : bit := '0';
     RX_FABINT_USRCLK_FLOP : bit := '0';
     RX_INT_DATAWIDTH : integer := 1;
     RX_PMA_POWER_SAVE : bit := '0';
     RX_PROGDIV_CFG : real := 0.0;
     RX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     RX_SIG_VALID_DLY : integer := 11;
     RX_SUM_DFETAPREP_EN : bit := '0';
     RX_SUM_IREF_TUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_RES_CTRL : std_logic_vector(1 downto 0) := "00";
     RX_SUM_VCMTUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_VCM_OVWR : bit := '0';
     RX_SUM_VREF_TUNE : std_logic_vector(2 downto 0) := "000";
     RX_TUNE_AFE_OS : std_logic_vector(1 downto 0) := "00";
     RX_WIDEMODE_CDR : bit := '0';
     RX_XCLK_SEL : string := "RXDES";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : std_logic_vector(3 downto 0) := "1111";
     SATA_BURST_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_MODE : string := "FAST";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : bit := '0';
     SIM_VERSION : integer := 2;
     TAPDLY_SET_TX : std_logic_vector(1 downto 0) := "00";
     TEMPERATUR_PAR : std_logic_vector(3 downto 0) := "0010";
     TERM_RCAL_CFG : std_logic_vector(14 downto 0) := "100001000010000";
     TERM_RCAL_OVRD : std_logic_vector(2 downto 0) := "000";
     TRANS_TIME_RATE : std_logic_vector(7 downto 0) := X"0E";
     TST_RSV0 : std_logic_vector(7 downto 0) := X"00";
     TST_RSV1 : std_logic_vector(7 downto 0) := X"00";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     TXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     TXDRVBIAS_N : std_logic_vector(3 downto 0) := "1010";
     TXDRVBIAS_P : std_logic_vector(3 downto 0) := "1100";
     TXFIFO_ADDR_CFG : string := "LOW";
     TXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 4;
     TXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXPHDLY_CFG0 : std_logic_vector(15 downto 0) := X"2020";
     TXPHDLY_CFG1 : std_logic_vector(15 downto 0) := X"0001";
     TXPH_CFG : std_logic_vector(15 downto 0) := X"0980";
     TXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     TXPI_CFG0 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG1 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG2 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG3 : bit := '0';
     TXPI_CFG4 : bit := '1';
     TXPI_CFG5 : std_logic_vector(2 downto 0) := "000";
     TXPI_GRAY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_LPM : bit := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : std_logic_vector(7 downto 0) := "00000000";
     TXPI_SYNFREQ_PPM : std_logic_vector(2 downto 0) := "000";
     TXPI_VREFSEL : bit := '0';
     TXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 8;
     TX_CLKMUX_EN : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DCD_CFG : std_logic_vector(5 downto 0) := "000010";
     TX_DCD_EN : bit := '0';
     TX_DEEMPH0 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH1 : std_logic_vector(5 downto 0) := "000000";
     TX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : std_logic_vector(2 downto 0) := "110";
     TX_EIDLE_DEASSERT_DELAY : std_logic_vector(2 downto 0) := "100";
     TX_EML_PHI_TUNE : bit := '0';
     TX_FABINT_USRCLK_FLOP : bit := '0';
     TX_IDLE_DATA_ZERO : bit := '0';
     TX_INT_DATAWIDTH : integer := 1;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : std_logic_vector(6 downto 0) := "1001110";
     TX_MARGIN_FULL_1 : std_logic_vector(6 downto 0) := "1001001";
     TX_MARGIN_FULL_2 : std_logic_vector(6 downto 0) := "1000101";
     TX_MARGIN_FULL_3 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_FULL_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_0 : std_logic_vector(6 downto 0) := "1000110";
     TX_MARGIN_LOW_1 : std_logic_vector(6 downto 0) := "1000100";
     TX_MARGIN_LOW_2 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_LOW_3 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     TX_PMADATA_OPT : bit := '0';
     TX_PMA_POWER_SAVE : bit := '0';
     TX_PROGCLK_SEL : string := "POSTPI";
     TX_PROGDIV_CFG : real := 0.0;
     TX_QPI_STATUS_EN : bit := '0';
     TX_RXDETECT_CFG : std_logic_vector(13 downto 0) := "00" & X"032";
     TX_RXDETECT_REF : std_logic_vector(2 downto 0) := "100";
     TX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     TX_SARC_LPBK_ENB : bit := '0';
     TX_XCLK_SEL : string := "TXOUT";
     USE_PCS_CLK_PHASE_SEL : bit := '0';
     WB_MODE : std_logic_vector(1 downto 0) := "00"
  );
  port (
     BUFGTCE : out std_logic_vector(2 downto 0);
     BUFGTCEMASK : out std_logic_vector(2 downto 0);
     BUFGTDIV : out std_logic_vector(8 downto 0);
     BUFGTRESET : out std_logic_vector(2 downto 0);
     BUFGTRSTMASK : out std_logic_vector(2 downto 0);
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(16 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTHTXN : out std_ulogic;
     GTHTXP : out std_ulogic;
     GTPOWERGOOD : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     PCIERATEGEN3 : out std_ulogic;
     PCIERATEIDLE : out std_ulogic;
     PCIERATEQPLLPD : out std_logic_vector(1 downto 0);
     PCIERATEQPLLRESET : out std_logic_vector(1 downto 0);
     PCIESYNCTXSYNCDONE : out std_ulogic;
     PCIEUSERGEN3RDY : out std_ulogic;
     PCIEUSERPHYSTATUSRST : out std_ulogic;
     PCIEUSERRATESTART : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(11 downto 0);
     PHYSTATUS : out std_ulogic;
     PINRSRVDAS : out std_logic_vector(7 downto 0);
     RESETEXCEPTION : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCDRPHDONE : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXCTRL0 : out std_logic_vector(15 downto 0);
     RXCTRL1 : out std_logic_vector(15 downto 0);
     RXCTRL2 : out std_logic_vector(7 downto 0);
     RXCTRL3 : out std_logic_vector(7 downto 0);
     RXDATA : out std_logic_vector(127 downto 0);
     RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHALIGNERR : out std_ulogic;
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXPRBSLOCKED : out std_ulogic;
     RXPRGDIVRESETDONE : out std_ulogic;
     RXQPISENN : out std_ulogic;
     RXQPISENP : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRECCLKOUT : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSLIDERDY : out std_ulogic;
     RXSLIPDONE : out std_ulogic;
     RXSLIPOUTCLKRDY : out std_ulogic;
     RXSLIPPMARDY : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXPRGDIVRESETDONE : out std_ulogic;
     TXQPISENN : out std_ulogic;
     TXQPISENP : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EVODDPHICALDONE : in std_ulogic;
     EVODDPHICALSTART : in std_ulogic;
     EVODDPHIDRDEN : in std_ulogic;
     EVODDPHIDWREN : in std_ulogic;
     EVODDPHIXRDEN : in std_ulogic;
     EVODDPHIXWREN : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTHRXN : in std_ulogic;
     GTHRXP : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     LPBKRXTXSEREN : in std_ulogic;
     LPBKTXRXSEREN : in std_ulogic;
     PCIEEQRXEQADAPTDONE : in std_ulogic;
     PCIERSTIDLE : in std_ulogic;
     PCIERSTTXSYNCSTART : in std_ulogic;
     PCIEUSERRATEDONE : in std_ulogic;
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     QPLL0CLK : in std_ulogic;
     QPLL0REFCLK : in std_ulogic;
     QPLL1CLK : in std_ulogic;
     QPLL1REFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RSTCLKENTX : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDFEAGCCTRL : in std_logic_vector(1 downto 0);
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP10HOLD : in std_ulogic;
     RXDFETAP10OVRDEN : in std_ulogic;
     RXDFETAP11HOLD : in std_ulogic;
     RXDFETAP11OVRDEN : in std_ulogic;
     RXDFETAP12HOLD : in std_ulogic;
     RXDFETAP12OVRDEN : in std_ulogic;
     RXDFETAP13HOLD : in std_ulogic;
     RXDFETAP13OVRDEN : in std_ulogic;
     RXDFETAP14HOLD : in std_ulogic;
     RXDFETAP14OVRDEN : in std_ulogic;
     RXDFETAP15HOLD : in std_ulogic;
     RXDFETAP15OVRDEN : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFETAP8HOLD : in std_ulogic;
     RXDFETAP8OVRDEN : in std_ulogic;
     RXDFETAP9HOLD : in std_ulogic;
     RXDFETAP9OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLATCLK : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMGCHOLD : in std_ulogic;
     RXLPMGCOVRDEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXLPMOSHOLD : in std_ulogic;
     RXLPMOSOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPLLCLKSEL : in std_logic_vector(1 downto 0);
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(3 downto 0);
     RXPROGDIVRESET : in std_ulogic;
     RXQPIEN : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSLIPOUTCLK : in std_ulogic;
     RXSLIPPMA : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXCTRL0 : in std_logic_vector(15 downto 0);
     TXCTRL1 : in std_logic_vector(15 downto 0);
     TXCTRL2 : in std_logic_vector(7 downto 0);
     TXDATA : in std_logic_vector(127 downto 0);
     TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(5 downto 0);
     TXINHIBIT : in std_ulogic;
     TXLATCLK : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPLLCLKSEL : in std_logic_vector(1 downto 0);
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(3 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXPROGDIVRESET : in std_ulogic;
     TXQPIBIASEN : in std_ulogic;
     TXQPISTRONGPDOWN : in std_ulogic;
     TXQPIWEAKPUP : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE3_CHANNEL : component is "PRIMITIVE";

----- component GTHE3_COMMON -----
component GTHE3_COMMON
  generic (
     BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG3 : std_logic_vector(15 downto 0) := X"0040";
     BIAS_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG_RSVD : std_logic_vector(9 downto 0) := "0000000000";
     COMMON_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     POR_CFG : std_logic_vector(15 downto 0) := X"0004";
     QPLL0_CFG0 : std_logic_vector(15 downto 0) := X"3018";
     QPLL0_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL0_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG2_G3 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL0_CFG4 : std_logic_vector(15 downto 0) := X"0009";
     QPLL0_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_FBDIV : integer := 66;
     QPLL0_FBDIV_G3 : integer := 80;
     QPLL0_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL0_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL0_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"01E8";
     QPLL0_LPF : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_REFCLK_DIV : integer := 2;
     QPLL0_SDM_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL0_SDM_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL0_SDM_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1_CFG0 : std_logic_vector(15 downto 0) := X"3018";
     QPLL1_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG2_G3 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL1_CFG4 : std_logic_vector(15 downto 0) := X"0009";
     QPLL1_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_FBDIV : integer := 66;
     QPLL1_FBDIV_G3 : integer := 80;
     QPLL1_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL1_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL1_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LPF : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_REFCLK_DIV : integer := 2;
     QPLL1_SDM_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1_SDM_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1_SDM_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     RSVD_ATTR0 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR1 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR3 : std_logic_vector(15 downto 0) := X"0000";
     RXRECCLKOUT0_SEL : std_logic_vector(1 downto 0) := "00";
     RXRECCLKOUT1_SEL : std_logic_vector(1 downto 0) := "00";
     SARC_EN : bit := '1';
     SARC_SEL : bit := '0';
     SDM0DATA1_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0DATA1_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM0INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM0_DATA_PIN_SEL : bit := '0';
     SDM0_WIDTH_PIN_SEL : bit := '0';
     SDM1DATA1_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1DATA1_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1_DATA_PIN_SEL : bit := '0';
     SDM1_WIDTH_PIN_SEL : bit := '0';
     SIM_MODE : string := "FAST";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : integer := 2
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT0 : out std_logic_vector(7 downto 0);
     PMARSVDOUT1 : out std_logic_vector(7 downto 0);
     QPLL0FBCLKLOST : out std_ulogic;
     QPLL0LOCK : out std_ulogic;
     QPLL0OUTCLK : out std_ulogic;
     QPLL0OUTREFCLK : out std_ulogic;
     QPLL0REFCLKLOST : out std_ulogic;
     QPLL1FBCLKLOST : out std_ulogic;
     QPLL1LOCK : out std_ulogic;
     QPLL1OUTCLK : out std_ulogic;
     QPLL1OUTREFCLK : out std_ulogic;
     QPLL1REFCLKLOST : out std_ulogic;
     QPLLDMONITOR0 : out std_logic_vector(7 downto 0);
     QPLLDMONITOR1 : out std_logic_vector(7 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     RXRECCLK0_SEL : out std_logic_vector(1 downto 0);
     RXRECCLK1_SEL : out std_logic_vector(1 downto 0);
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTNORTHREFCLK00 : in std_ulogic;
     GTNORTHREFCLK01 : in std_ulogic;
     GTNORTHREFCLK10 : in std_ulogic;
     GTNORTHREFCLK11 : in std_ulogic;
     GTREFCLK00 : in std_ulogic;
     GTREFCLK01 : in std_ulogic;
     GTREFCLK10 : in std_ulogic;
     GTREFCLK11 : in std_ulogic;
     GTSOUTHREFCLK00 : in std_ulogic;
     GTSOUTHREFCLK01 : in std_ulogic;
     GTSOUTHREFCLK10 : in std_ulogic;
     GTSOUTHREFCLK11 : in std_ulogic;
     PMARSVD0 : in std_logic_vector(7 downto 0);
     PMARSVD1 : in std_logic_vector(7 downto 0);
     QPLL0CLKRSVD0 : in std_ulogic;
     QPLL0CLKRSVD1 : in std_ulogic;
     QPLL0LOCKDETCLK : in std_ulogic;
     QPLL0LOCKEN : in std_ulogic;
     QPLL0PD : in std_ulogic;
     QPLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL0RESET : in std_ulogic;
     QPLL1CLKRSVD0 : in std_ulogic;
     QPLL1CLKRSVD1 : in std_ulogic;
     QPLL1LOCKDETCLK : in std_ulogic;
     QPLL1LOCKEN : in std_ulogic;
     QPLL1PD : in std_ulogic;
     QPLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL1RESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(7 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     QPLLRSVD3 : in std_logic_vector(4 downto 0);
     QPLLRSVD4 : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE3_COMMON : component is "PRIMITIVE";

----- component GTHE4_CHANNEL -----
component GTHE4_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : std_logic_vector(15 downto 0) := X"9200";
     ADAPT_CFG1 : std_logic_vector(15 downto 0) := X"801C";
     ADAPT_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : std_logic_vector(9 downto 0) := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : std_logic_vector(9 downto 0) := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : std_logic_vector(9 downto 0) := "0101111100";
     A_RXOSCALRESET : bit := '0';
     A_RXPROGDIVRESET : bit := '0';
     A_RXTERMINATION : bit := '1';
     A_TXDIFFCTRL : std_logic_vector(4 downto 0) := "01100";
     A_TXPROGDIVRESET : bit := '0';
     CAPBYPASS_FORCE : bit := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CDR_SWAP_MODE_EN : bit := '0';
     CFOK_PWRSVE_EN : bit := '1';
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : std_logic_vector(9 downto 0) := "0101111100";
     CHAN_BOND_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 2;
     CH_HSPMUX : std_logic_vector(15 downto 0) := X"2424";
     CKCAL1_CFG_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL_RSVD0 : std_logic_vector(15 downto 0) := X"4000";
     CKCAL_RSVD1 : std_logic_vector(15 downto 0) := X"0000";
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : std_logic_vector(9 downto 0) := "0100011100";
     CLK_COR_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 2;
     CPLL_CFG0 : std_logic_vector(15 downto 0) := X"01FA";
     CPLL_CFG1 : std_logic_vector(15 downto 0) := X"24A9";
     CPLL_CFG2 : std_logic_vector(15 downto 0) := X"6807";
     CPLL_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 4;
     CPLL_INIT_CFG0 : std_logic_vector(15 downto 0) := X"001E";
     CPLL_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     CTLE3_OCAP_EXT_CTRL : std_logic_vector(2 downto 0) := "000";
     CTLE3_OCAP_EXT_EN : bit := '0';
     DDI_CTRL : std_logic_vector(1 downto 0) := "00";
     DDI_REALIGN_WAIT : integer := 15;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DELAY_ELEC : bit := '0';
     DMONITOR_CFG0 : std_logic_vector(9 downto 0) := "00" & X"00";
     DMONITOR_CFG1 : std_logic_vector(7 downto 0) := X"00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : std_logic_vector(5 downto 0) := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : std_logic_vector(11 downto 0) := X"800";
     ES_PRESCALE : std_logic_vector(4 downto 0) := "00000";
     ES_QUALIFIER0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER9 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     EYE_SCAN_SWAP_EN : bit := '0';
     FTS_DESKEW_SEQ_ENABLE : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_CFG : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : std_logic_vector(4 downto 0) := "00000";
     ISCAN_CK_PH_SEL2 : bit := '0';
     LOCAL_MASTER : bit := '0';
     LPBK_BIAS_CTRL : std_logic_vector(2 downto 0) := "000";
     LPBK_EN_RCAL_B : bit := '0';
     LPBK_EXT_RCAL : std_logic_vector(3 downto 0) := "0000";
     LPBK_IND_CTRL0 : std_logic_vector(2 downto 0) := "000";
     LPBK_IND_CTRL1 : std_logic_vector(2 downto 0) := "000";
     LPBK_IND_CTRL2 : std_logic_vector(2 downto 0) := "000";
     LPBK_RG_CTRL : std_logic_vector(3 downto 0) := "0000";
     OOBDIVCTL : std_logic_vector(1 downto 0) := "00";
     OOB_PWRUP : bit := '0';
     PCI3_AUTO_REALIGN : string := "FRST_SMPL";
     PCI3_PIPE_RX_ELECIDLE : bit := '1';
     PCI3_RX_ASYNC_EBUF_BYPASS : std_logic_vector(1 downto 0) := "00";
     PCI3_RX_ELECIDLE_EI2_ENABLE : bit := '0';
     PCI3_RX_ELECIDLE_H2L_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_H2L_DISABLE : std_logic_vector(2 downto 0) := "000";
     PCI3_RX_ELECIDLE_HI_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_LP4_DISABLE : bit := '0';
     PCI3_RX_FIFO_DISABLE : bit := '0';
     PCIE3_CLK_COR_EMPTY_THRSH : std_logic_vector(4 downto 0) := "00000";
     PCIE3_CLK_COR_FULL_THRSH : std_logic_vector(5 downto 0) := "010000";
     PCIE3_CLK_COR_MAX_LAT : std_logic_vector(4 downto 0) := "01000";
     PCIE3_CLK_COR_MIN_LAT : std_logic_vector(4 downto 0) := "00100";
     PCIE3_CLK_COR_THRSH_TIMER : std_logic_vector(5 downto 0) := "001000";
     PCIE_BUFG_DIV_CTRL : std_logic_vector(15 downto 0) := X"0000";
     PCIE_PLL_SEL_MODE_GEN12 : std_logic_vector(1 downto 0) := "00";
     PCIE_PLL_SEL_MODE_GEN3 : std_logic_vector(1 downto 0) := "00";
     PCIE_PLL_SEL_MODE_GEN4 : std_logic_vector(1 downto 0) := "00";
     PCIE_RXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD0 : std_logic_vector(15 downto 0) := "0000000000000000";
     PD_TRANS_TIME_FROM_P2 : std_logic_vector(11 downto 0) := X"03C";
     PD_TRANS_TIME_NONE_P2 : std_logic_vector(7 downto 0) := X"19";
     PD_TRANS_TIME_TO_P2 : std_logic_vector(7 downto 0) := X"64";
     PREIQ_FREQ_BST : integer := 0;
     PROCESS_PAR : std_logic_vector(2 downto 0) := "010";
     RATE_SW_USE_DRP : bit := '0';
     RCLK_SIPO_DLY_ENB : bit := '0';
     RCLK_SIPO_INV_EN : bit := '0';
     RESET_POWERSAVE_DISABLE : bit := '0';
     RTX_BUF_CML_CTRL : std_logic_vector(2 downto 0) := "010";
     RTX_BUF_TERM_CTRL : std_logic_vector(1 downto 0) := "00";
     RXBUFRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : std_logic_vector(3 downto 0) := "1000";
     RXBUF_EIDLE_LO_CNT : std_logic_vector(3 downto 0) := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 0;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDRPHRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDR_CFG0 : std_logic_vector(15 downto 0) := X"0003";
     RXCDR_CFG0_GEN3 : std_logic_vector(15 downto 0) := X"0003";
     RXCDR_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG1_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG2 : std_logic_vector(15 downto 0) := X"0164";
     RXCDR_CFG2_GEN2 : std_logic_vector(9 downto 0) := "01" & X"64";
     RXCDR_CFG2_GEN3 : std_logic_vector(15 downto 0) := X"0034";
     RXCDR_CFG2_GEN4 : std_logic_vector(15 downto 0) := X"0034";
     RXCDR_CFG3 : std_logic_vector(15 downto 0) := X"0024";
     RXCDR_CFG3_GEN2 : std_logic_vector(5 downto 0) := "10" & X"4";
     RXCDR_CFG3_GEN3 : std_logic_vector(15 downto 0) := X"0024";
     RXCDR_CFG3_GEN4 : std_logic_vector(15 downto 0) := X"0024";
     RXCDR_CFG4 : std_logic_vector(15 downto 0) := X"5CF6";
     RXCDR_CFG4_GEN3 : std_logic_vector(15 downto 0) := X"5CF6";
     RXCDR_CFG5 : std_logic_vector(15 downto 0) := X"B46B";
     RXCDR_CFG5_GEN3 : std_logic_vector(15 downto 0) := X"146B";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG0 : std_logic_vector(15 downto 0) := X"0040";
     RXCDR_LOCK_CFG1 : std_logic_vector(15 downto 0) := X"8000";
     RXCDR_LOCK_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXCFOK_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCFOK_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXCFOK_CFG2 : std_logic_vector(15 downto 0) := X"002D";
     RXCKCAL1_IQ_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL1_I_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL1_Q_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_DX_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_D_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_S_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_X_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPMRESET_TIME : std_logic_vector(6 downto 0) := "0001111";
     RXDFELPM_KL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPM_KL_CFG1 : std_logic_vector(15 downto 0) := X"0022";
     RXDFELPM_KL_CFG2 : std_logic_vector(15 downto 0) := X"0100";
     RXDFE_CFG0 : std_logic_vector(15 downto 0) := X"4000";
     RXDFE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H3_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H3_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H4_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H4_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_H5_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H5_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H6_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H6_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H7_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H7_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H8_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H8_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H9_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H9_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HA_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HA_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HB_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HB_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HD_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HE_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HF_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_KH_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_KH_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_KH_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_PWR_SAVING : bit := '0';
     RXDFE_UT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_UT_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_UT_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_VP_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_VP_CFG1 : std_logic_vector(15 downto 0) := X"0022";
     RXDLY_CFG : std_logic_vector(15 downto 0) := X"0010";
     RXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     RXELECIDLE_CFG : string := "SIGCFG_4";
     RXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXLPM_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_GC_CFG : std_logic_vector(15 downto 0) := X"1000";
     RXLPM_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXLPM_OS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXOOB_CFG : std_logic_vector(8 downto 0) := "000110000";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : std_logic_vector(4 downto 0) := "00011";
     RXOUT_DIV : integer := 4;
     RXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPHBEACON_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXPHDLY_CFG : std_logic_vector(15 downto 0) := X"2020";
     RXPHSAMP_CFG : std_logic_vector(15 downto 0) := X"2100";
     RXPHSLIP_CFG : std_logic_vector(15 downto 0) := X"9933";
     RXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     RXPI_AUTO_BW_SEL_BYPASS : bit := '0';
     RXPI_CFG0 : std_logic_vector(15 downto 0) := X"0002";
     RXPI_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     RXPI_LPM : bit := '0';
     RXPI_SEL_LC : std_logic_vector(1 downto 0) := "00";
     RXPI_STARTCODE : std_logic_vector(1 downto 0) := "00";
     RXPI_VREFSEL : bit := '0';
     RXPMACLK_SEL : string := "DATA";
     RXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXPRBS_LINKACQ_CNT : integer := 15;
     RXREFCLKDIV2_SEL : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_AFE_CM_EN : bit := '0';
     RX_BIAS_CFG0 : std_logic_vector(15 downto 0) := X"12B0";
     RX_BUFFER_CFG : std_logic_vector(5 downto 0) := "000000";
     RX_CAPFF_SARC_ENB : bit := '0';
     RX_CLK25_DIV : integer := 8;
     RX_CLKMUX_EN : bit := '1';
     RX_CLK_SLIP_OVRD : std_logic_vector(4 downto 0) := "00000";
     RX_CM_BUF_CFG : std_logic_vector(3 downto 0) := "1010";
     RX_CM_BUF_PD : bit := '0';
     RX_CM_SEL : integer := 3;
     RX_CM_TRIM : integer := 12;
     RX_CTLE3_LPF : std_logic_vector(7 downto 0) := "00000000";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : std_logic_vector(5 downto 0) := "000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DEGEN_CTRL : std_logic_vector(2 downto 0) := "011";
     RX_DFELPM_CFG0 : integer := 0;
     RX_DFELPM_CFG1 : bit := '1';
     RX_DFELPM_KLKH_AGC_STUP_EN : bit := '1';
     RX_DFE_AGC_CFG0 : std_logic_vector(1 downto 0) := "00";
     RX_DFE_AGC_CFG1 : integer := 4;
     RX_DFE_KL_LPM_KH_CFG0 : integer := 1;
     RX_DFE_KL_LPM_KH_CFG1 : integer := 4;
     RX_DFE_KL_LPM_KL_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KL_CFG1 : integer := 4;
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_DIV2_MODE_B : bit := '0';
     RX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RX_EN_CTLE_RCAL_B : bit := '0';
     RX_EN_HI_LR : bit := '1';
     RX_EXT_RL_CTRL : std_logic_vector(8 downto 0) := "000000000";
     RX_EYESCAN_VS_CODE : std_logic_vector(6 downto 0) := "0000000";
     RX_EYESCAN_VS_NEG_DIR : bit := '0';
     RX_EYESCAN_VS_RANGE : std_logic_vector(1 downto 0) := "00";
     RX_EYESCAN_VS_UT_SIGN : bit := '0';
     RX_FABINT_USRCLK_FLOP : bit := '0';
     RX_INT_DATAWIDTH : integer := 1;
     RX_PMA_POWER_SAVE : bit := '0';
     RX_PMA_RSV0 : std_logic_vector(15 downto 0) := X"0000";
     RX_PROGDIV_CFG : real := 0.0;
     RX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     RX_RESLOAD_CTRL : std_logic_vector(3 downto 0) := "0000";
     RX_RESLOAD_OVRD : bit := '0';
     RX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     RX_SIG_VALID_DLY : integer := 11;
     RX_SUM_DFETAPREP_EN : bit := '0';
     RX_SUM_IREF_TUNE : std_logic_vector(3 downto 0) := "1001";
     RX_SUM_RESLOAD_CTRL : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_VCMTUNE : std_logic_vector(3 downto 0) := "1010";
     RX_SUM_VCM_OVWR : bit := '0';
     RX_SUM_VREF_TUNE : std_logic_vector(2 downto 0) := "100";
     RX_TUNE_AFE_OS : std_logic_vector(1 downto 0) := "00";
     RX_VREG_CTRL : std_logic_vector(2 downto 0) := "101";
     RX_VREG_PDB : bit := '1';
     RX_WIDEMODE_CDR : std_logic_vector(1 downto 0) := "01";
     RX_WIDEMODE_CDR_GEN3 : std_logic_vector(1 downto 0) := "01";
     RX_WIDEMODE_CDR_GEN4 : std_logic_vector(1 downto 0) := "01";
     RX_XCLK_SEL : string := "RXDES";
     RX_XMODE_SEL : bit := '0';
     SAMPLE_CLK_PHASE : bit := '0';
     SAS_12G_MODE : bit := '0';
     SATA_BURST_SEQ_LEN : std_logic_vector(3 downto 0) := "1111";
     SATA_BURST_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : std_logic_vector(2 downto 0) := "100";
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SIM_MODE : string := "FAST";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "Z";
     SRSTMODE : bit := '0';
     TAPDLY_SET_TX : std_logic_vector(1 downto 0) := "00";
     TEMPERATURE_PAR : std_logic_vector(3 downto 0) := "0010";
     TERM_RCAL_CFG : std_logic_vector(14 downto 0) := "100001000010000";
     TERM_RCAL_OVRD : std_logic_vector(2 downto 0) := "000";
     TRANS_TIME_RATE : std_logic_vector(7 downto 0) := X"0E";
     TST_RSV0 : std_logic_vector(7 downto 0) := X"00";
     TST_RSV1 : std_logic_vector(7 downto 0) := X"00";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : std_logic_vector(15 downto 0) := X"0010";
     TXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     TXDRVBIAS_N : std_logic_vector(3 downto 0) := "1010";
     TXFIFO_ADDR_CFG : string := "LOW";
     TXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 4;
     TXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXPHDLY_CFG0 : std_logic_vector(15 downto 0) := X"6020";
     TXPHDLY_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     TXPH_CFG : std_logic_vector(15 downto 0) := X"0123";
     TXPH_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     TXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     TXPI_CFG : std_logic_vector(15 downto 0) := X"0000";
     TXPI_CFG0 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG1 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG2 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG3 : bit := '0';
     TXPI_CFG4 : bit := '1';
     TXPI_CFG5 : std_logic_vector(2 downto 0) := "000";
     TXPI_GRAY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_LPM : bit := '0';
     TXPI_PPM : bit := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : std_logic_vector(7 downto 0) := "00000000";
     TXPI_SYNFREQ_PPM : std_logic_vector(2 downto 0) := "000";
     TXPI_VREFSEL : bit := '0';
     TXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXREFCLKDIV2_SEL : bit := '0';
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 8;
     TX_CLKMUX_EN : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DCC_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     TX_DEEMPH0 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH1 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH2 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH3 : std_logic_vector(5 downto 0) := "000000";
     TX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_DRVMUX_CTRL : integer := 2;
     TX_EIDLE_ASSERT_DELAY : std_logic_vector(2 downto 0) := "110";
     TX_EIDLE_DEASSERT_DELAY : std_logic_vector(2 downto 0) := "100";
     TX_FABINT_USRCLK_FLOP : bit := '0';
     TX_FIFO_BYP_EN : bit := '0';
     TX_IDLE_DATA_ZERO : bit := '0';
     TX_INT_DATAWIDTH : integer := 1;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : std_logic_vector(6 downto 0) := "1001110";
     TX_MARGIN_FULL_1 : std_logic_vector(6 downto 0) := "1001001";
     TX_MARGIN_FULL_2 : std_logic_vector(6 downto 0) := "1000101";
     TX_MARGIN_FULL_3 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_FULL_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_0 : std_logic_vector(6 downto 0) := "1000110";
     TX_MARGIN_LOW_1 : std_logic_vector(6 downto 0) := "1000100";
     TX_MARGIN_LOW_2 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_LOW_3 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_PHICAL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     TX_PHICAL_CFG1 : std_logic_vector(15 downto 0) := X"003F";
     TX_PHICAL_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     TX_PI_BIASSET : integer := 0;
     TX_PI_IBIAS_MID : std_logic_vector(1 downto 0) := "00";
     TX_PMADATA_OPT : bit := '0';
     TX_PMA_POWER_SAVE : bit := '0';
     TX_PMA_RSV0 : std_logic_vector(15 downto 0) := X"0008";
     TX_PREDRV_CTRL : integer := 2;
     TX_PROGCLK_SEL : string := "POSTPI";
     TX_PROGDIV_CFG : real := 0.0;
     TX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     TX_QPI_STATUS_EN : bit := '0';
     TX_RXDETECT_CFG : std_logic_vector(13 downto 0) := "00" & X"032";
     TX_RXDETECT_REF : integer := 3;
     TX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     TX_SARC_LPBK_ENB : bit := '0';
     TX_SW_MEAS : std_logic_vector(1 downto 0) := "00";
     TX_VREG_CTRL : std_logic_vector(2 downto 0) := "000";
     TX_VREG_PDB : bit := '0';
     TX_VREG_VREFSEL : std_logic_vector(1 downto 0) := "00";
     TX_XCLK_SEL : string := "TXOUT";
     USB_BOTH_BURST_IDLE : bit := '0';
     USB_BURSTMAX_U3WAKE : std_logic_vector(6 downto 0) := "1111111";
     USB_BURSTMIN_U3WAKE : std_logic_vector(6 downto 0) := "1100011";
     USB_CLK_COR_EQ_EN : bit := '0';
     USB_EXT_CNTL : bit := '1';
     USB_IDLEMAX_POLLING : std_logic_vector(9 downto 0) := "1010111011";
     USB_IDLEMIN_POLLING : std_logic_vector(9 downto 0) := "0100101011";
     USB_LFPSPING_BURST : std_logic_vector(8 downto 0) := "000000101";
     USB_LFPSPOLLING_BURST : std_logic_vector(8 downto 0) := "000110001";
     USB_LFPSPOLLING_IDLE_MS : std_logic_vector(8 downto 0) := "000000100";
     USB_LFPSU1EXIT_BURST : std_logic_vector(8 downto 0) := "000011101";
     USB_LFPSU2LPEXIT_BURST_MS : std_logic_vector(8 downto 0) := "001100011";
     USB_LFPSU3WAKE_BURST_MS : std_logic_vector(8 downto 0) := "111110011";
     USB_LFPS_TPERIOD : std_logic_vector(3 downto 0) := "0011";
     USB_LFPS_TPERIOD_ACCURATE : bit := '1';
     USB_MODE : bit := '0';
     USB_PCIE_ERR_REP_DIS : bit := '0';
     USB_PING_SATA_MAX_INIT : integer := 21;
     USB_PING_SATA_MIN_INIT : integer := 12;
     USB_POLL_SATA_MAX_BURST : integer := 8;
     USB_POLL_SATA_MIN_BURST : integer := 4;
     USB_RAW_ELEC : bit := '0';
     USB_RXIDLE_P0_CTRL : bit := '1';
     USB_TXIDLE_TUNE_ENABLE : bit := '1';
     USB_U1_SATA_MAX_WAKE : integer := 7;
     USB_U1_SATA_MIN_WAKE : integer := 4;
     USB_U2_SAS_MAX_COM : integer := 64;
     USB_U2_SAS_MIN_COM : integer := 36;
     USE_PCS_CLK_PHASE_SEL : bit := '0';
     Y_ALL_MODE : bit := '0'
  );
  port (
     BUFGTCE : out std_ulogic;
     BUFGTCEMASK : out std_logic_vector(2 downto 0);
     BUFGTDIV : out std_logic_vector(8 downto 0);
     BUFGTRESET : out std_ulogic;
     BUFGTRSTMASK : out std_logic_vector(2 downto 0);
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(15 downto 0);
     DMONITOROUTCLK : out std_ulogic;
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTHTXN : out std_ulogic;
     GTHTXP : out std_ulogic;
     GTPOWERGOOD : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     PCIERATEGEN3 : out std_ulogic;
     PCIERATEIDLE : out std_ulogic;
     PCIERATEQPLLPD : out std_logic_vector(1 downto 0);
     PCIERATEQPLLRESET : out std_logic_vector(1 downto 0);
     PCIESYNCTXSYNCDONE : out std_ulogic;
     PCIEUSERGEN3RDY : out std_ulogic;
     PCIEUSERPHYSTATUSRST : out std_ulogic;
     PCIEUSERRATESTART : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     PINRSRVDAS : out std_logic_vector(15 downto 0);
     POWERPRESENT : out std_ulogic;
     RESETEXCEPTION : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCDRPHDONE : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCKCALDONE : out std_ulogic;
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXCTRL0 : out std_logic_vector(15 downto 0);
     RXCTRL1 : out std_logic_vector(15 downto 0);
     RXCTRL2 : out std_logic_vector(7 downto 0);
     RXCTRL3 : out std_logic_vector(7 downto 0);
     RXDATA : out std_logic_vector(127 downto 0);
     RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXLFPSTRESETDET : out std_ulogic;
     RXLFPSU2LPEXITDET : out std_ulogic;
     RXLFPSU3WAKEDET : out std_ulogic;
     RXMONITOROUT : out std_logic_vector(7 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHALIGNERR : out std_ulogic;
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXPRBSLOCKED : out std_ulogic;
     RXPRGDIVRESETDONE : out std_ulogic;
     RXQPISENN : out std_ulogic;
     RXQPISENP : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRECCLKOUT : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSLIDERDY : out std_ulogic;
     RXSLIPDONE : out std_ulogic;
     RXSLIPOUTCLKRDY : out std_ulogic;
     RXSLIPPMARDY : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDCCDONE : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXPRGDIVRESETDONE : out std_ulogic;
     TXQPISENN : out std_ulogic;
     TXQPISENP : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CDRSTEPDIR : in std_ulogic;
     CDRSTEPSQ : in std_ulogic;
     CDRSTEPSX : in std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLFREQLOCK : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPRST : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     FREQOS : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTHRXN : in std_ulogic;
     GTHRXP : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTRXRESETSEL : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     GTTXRESETSEL : in std_ulogic;
     INCPCTRL : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCIEEQRXEQADAPTDONE : in std_ulogic;
     PCIERSTIDLE : in std_ulogic;
     PCIERSTTXSYNCSTART : in std_ulogic;
     PCIEUSERRATEDONE : in std_ulogic;
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     QPLL0CLK : in std_ulogic;
     QPLL0FREQLOCK : in std_ulogic;
     QPLL0REFCLK : in std_ulogic;
     QPLL1CLK : in std_ulogic;
     QPLL1FREQLOCK : in std_ulogic;
     QPLL1REFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXAFECFOKEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCKCALRESET : in std_ulogic;
     RXCKCALSTART : in std_logic_vector(6 downto 0);
     RXCOMMADETEN : in std_ulogic;
     RXDFEAGCCTRL : in std_logic_vector(1 downto 0);
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFECFOKFCNUM : in std_logic_vector(3 downto 0);
     RXDFECFOKFEN : in std_ulogic;
     RXDFECFOKFPULSE : in std_ulogic;
     RXDFECFOKHOLD : in std_ulogic;
     RXDFECFOKOVREN : in std_ulogic;
     RXDFEKHHOLD : in std_ulogic;
     RXDFEKHOVRDEN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP10HOLD : in std_ulogic;
     RXDFETAP10OVRDEN : in std_ulogic;
     RXDFETAP11HOLD : in std_ulogic;
     RXDFETAP11OVRDEN : in std_ulogic;
     RXDFETAP12HOLD : in std_ulogic;
     RXDFETAP12OVRDEN : in std_ulogic;
     RXDFETAP13HOLD : in std_ulogic;
     RXDFETAP13OVRDEN : in std_ulogic;
     RXDFETAP14HOLD : in std_ulogic;
     RXDFETAP14OVRDEN : in std_ulogic;
     RXDFETAP15HOLD : in std_ulogic;
     RXDFETAP15OVRDEN : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFETAP8HOLD : in std_ulogic;
     RXDFETAP8OVRDEN : in std_ulogic;
     RXDFETAP9HOLD : in std_ulogic;
     RXDFETAP9OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXEQTRAINING : in std_ulogic;
     RXGEARBOXSLIP : in std_ulogic;
     RXLATCLK : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMGCHOLD : in std_ulogic;
     RXLPMGCOVRDEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXLPMOSHOLD : in std_ulogic;
     RXLPMOSOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPLLCLKSEL : in std_logic_vector(1 downto 0);
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(3 downto 0);
     RXPROGDIVRESET : in std_ulogic;
     RXQPIEN : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSLIPOUTCLK : in std_ulogic;
     RXSLIPPMA : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXTERMINATION : in std_ulogic;
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXCTRL0 : in std_logic_vector(15 downto 0);
     TXCTRL1 : in std_logic_vector(15 downto 0);
     TXCTRL2 : in std_logic_vector(7 downto 0);
     TXDATA : in std_logic_vector(127 downto 0);
     TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     TXDCCFORCESTART : in std_ulogic;
     TXDCCRESET : in std_ulogic;
     TXDEEMPH : in std_logic_vector(1 downto 0);
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(4 downto 0);
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(5 downto 0);
     TXINHIBIT : in std_ulogic;
     TXLATCLK : in std_ulogic;
     TXLFPSTRESET : in std_ulogic;
     TXLFPSU2LPEXIT : in std_ulogic;
     TXLFPSU3WAKE : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXMUXDCDEXHOLD : in std_ulogic;
     TXMUXDCDORWREN : in std_ulogic;
     TXONESZEROS : in std_ulogic;
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPLLCLKSEL : in std_logic_vector(1 downto 0);
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(3 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPROGDIVRESET : in std_ulogic;
     TXQPIBIASEN : in std_ulogic;
     TXQPIWEAKPUP : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE4_CHANNEL : component is "PRIMITIVE";

----- component GTHE4_COMMON -----
component GTHE4_COMMON
  generic (
     AEN_QPLL0_FBDIV : bit := '1';
     AEN_QPLL1_FBDIV : bit := '1';
     AEN_SDM0TOGGLE : bit := '0';
     AEN_SDM1TOGGLE : bit := '0';
     A_SDM0TOGGLE : bit := '0';
     A_SDM1DATA_HIGH : std_logic_vector(8 downto 0) := "000000000";
     A_SDM1DATA_LOW : std_logic_vector(15 downto 0) := "0000000000000000";
     A_SDM1TOGGLE : bit := '0';
     BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG_RSVD : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     POR_CFG : std_logic_vector(15 downto 0) := X"0000";
     PPF0_CFG : std_logic_vector(15 downto 0) := X"0F00";
     PPF1_CFG : std_logic_vector(15 downto 0) := X"0F00";
     QPLL0CLKOUT_RATE : string := "FULL";
     QPLL0_CFG0 : std_logic_vector(15 downto 0) := X"391C";
     QPLL0_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL0_CFG2 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL0_CFG2_G3 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL0_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL0_CFG4 : std_logic_vector(15 downto 0) := X"0002";
     QPLL0_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_FBDIV : integer := 66;
     QPLL0_FBDIV_G3 : integer := 80;
     QPLL0_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL0_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL0_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL0_LPF : std_logic_vector(9 downto 0) := "1011111111";
     QPLL0_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_PCI_EN : bit := '0';
     QPLL0_RATE_SW_USE_DRP : bit := '0';
     QPLL0_REFCLK_DIV : integer := 1;
     QPLL0_SDM_CFG0 : std_logic_vector(15 downto 0) := X"0040";
     QPLL0_SDM_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_SDM_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1CLKOUT_RATE : string := "FULL";
     QPLL1_CFG0 : std_logic_vector(15 downto 0) := X"691C";
     QPLL1_CFG1 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG2 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL1_CFG2_G3 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL1_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL1_CFG4 : std_logic_vector(15 downto 0) := X"0002";
     QPLL1_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_FBDIV : integer := 66;
     QPLL1_FBDIV_G3 : integer := 80;
     QPLL1_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL1_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL1_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LPF : std_logic_vector(9 downto 0) := "1011111111";
     QPLL1_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_PCI_EN : bit := '0';
     QPLL1_RATE_SW_USE_DRP : bit := '0';
     QPLL1_REFCLK_DIV : integer := 1;
     QPLL1_SDM_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_SDM_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_SDM_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR0 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR1 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR3 : std_logic_vector(15 downto 0) := X"0000";
     RXRECCLKOUT0_SEL : std_logic_vector(1 downto 0) := "00";
     RXRECCLKOUT1_SEL : std_logic_vector(1 downto 0) := "00";
     SARC_ENB : bit := '0';
     SARC_SEL : bit := '0';
     SDM0INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SIM_MODE : string := "FAST";
     SIM_RESET_SPEEDUP : string := "TRUE"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT0 : out std_logic_vector(7 downto 0);
     PMARSVDOUT1 : out std_logic_vector(7 downto 0);
     QPLL0FBCLKLOST : out std_ulogic;
     QPLL0LOCK : out std_ulogic;
     QPLL0OUTCLK : out std_ulogic;
     QPLL0OUTREFCLK : out std_ulogic;
     QPLL0REFCLKLOST : out std_ulogic;
     QPLL1FBCLKLOST : out std_ulogic;
     QPLL1LOCK : out std_ulogic;
     QPLL1OUTCLK : out std_ulogic;
     QPLL1OUTREFCLK : out std_ulogic;
     QPLL1REFCLKLOST : out std_ulogic;
     QPLLDMONITOR0 : out std_logic_vector(7 downto 0);
     QPLLDMONITOR1 : out std_logic_vector(7 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     RXRECCLK0SEL : out std_logic_vector(1 downto 0);
     RXRECCLK1SEL : out std_logic_vector(1 downto 0);
     SDM0FINALOUT : out std_logic_vector(3 downto 0);
     SDM0TESTDATA : out std_logic_vector(14 downto 0);
     SDM1FINALOUT : out std_logic_vector(3 downto 0);
     SDM1TESTDATA : out std_logic_vector(14 downto 0);
     TCONGPO : out std_logic_vector(9 downto 0);
     TCONRSVDOUT0 : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(15 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTNORTHREFCLK00 : in std_ulogic;
     GTNORTHREFCLK01 : in std_ulogic;
     GTNORTHREFCLK10 : in std_ulogic;
     GTNORTHREFCLK11 : in std_ulogic;
     GTREFCLK00 : in std_ulogic;
     GTREFCLK01 : in std_ulogic;
     GTREFCLK10 : in std_ulogic;
     GTREFCLK11 : in std_ulogic;
     GTSOUTHREFCLK00 : in std_ulogic;
     GTSOUTHREFCLK01 : in std_ulogic;
     GTSOUTHREFCLK10 : in std_ulogic;
     GTSOUTHREFCLK11 : in std_ulogic;
     PCIERATEQPLL0 : in std_logic_vector(2 downto 0);
     PCIERATEQPLL1 : in std_logic_vector(2 downto 0);
     PMARSVD0 : in std_logic_vector(7 downto 0);
     PMARSVD1 : in std_logic_vector(7 downto 0);
     QPLL0CLKRSVD0 : in std_ulogic;
     QPLL0CLKRSVD1 : in std_ulogic;
     QPLL0FBDIV : in std_logic_vector(7 downto 0);
     QPLL0LOCKDETCLK : in std_ulogic;
     QPLL0LOCKEN : in std_ulogic;
     QPLL0PD : in std_ulogic;
     QPLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL0RESET : in std_ulogic;
     QPLL1CLKRSVD0 : in std_ulogic;
     QPLL1CLKRSVD1 : in std_ulogic;
     QPLL1FBDIV : in std_logic_vector(7 downto 0);
     QPLL1LOCKDETCLK : in std_ulogic;
     QPLL1LOCKEN : in std_ulogic;
     QPLL1PD : in std_ulogic;
     QPLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL1RESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(7 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     QPLLRSVD3 : in std_logic_vector(4 downto 0);
     QPLLRSVD4 : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic;
     SDM0DATA : in std_logic_vector(24 downto 0);
     SDM0RESET : in std_ulogic;
     SDM0TOGGLE : in std_ulogic;
     SDM0WIDTH : in std_logic_vector(1 downto 0);
     SDM1DATA : in std_logic_vector(24 downto 0);
     SDM1RESET : in std_ulogic;
     SDM1TOGGLE : in std_ulogic;
     SDM1WIDTH : in std_logic_vector(1 downto 0);
     TCONGPI : in std_logic_vector(9 downto 0);
     TCONPOWERUP : in std_ulogic;
     TCONRESET : in std_logic_vector(1 downto 0);
     TCONRSVDIN1 : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  GTHE4_COMMON : component is "PRIMITIVE";

----- component GTM_DUAL -----
component GTM_DUAL
  generic (
     A_CFG : std_logic_vector(15 downto 0) := "0000100001000000";
     A_SDM_DATA_CFG0 : std_logic_vector(15 downto 0) := "0000000011010000";
     A_SDM_DATA_CFG1 : std_logic_vector(15 downto 0) := "0000000011010000";
     BIAS_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     BIAS_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     BIAS_CFG2 : std_logic_vector(15 downto 0) := "0001000000000000";
     BIAS_CFG3 : std_logic_vector(15 downto 0) := "0000000000000001";
     BIAS_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     BIAS_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     BIAS_CFG6 : std_logic_vector(15 downto 0) := "0000000010000000";
     BIAS_CFG7 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_A_CH_CFG0 : std_logic_vector(15 downto 0) := "0000000000000011";
     CH0_A_CH_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_A_CH_CFG2 : std_logic_vector(15 downto 0) := "0111101111110000";
     CH0_A_CH_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_A_CH_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_A_CH_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_A_CH_CFG6 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RST_LP_CFG0 : std_logic_vector(15 downto 0) := "0001000000010000";
     CH0_RST_LP_CFG1 : std_logic_vector(15 downto 0) := "0011001000010000";
     CH0_RST_LP_CFG2 : std_logic_vector(15 downto 0) := "0110010100000100";
     CH0_RST_LP_CFG3 : std_logic_vector(15 downto 0) := "0011001000010000";
     CH0_RST_LP_CFG4 : std_logic_vector(15 downto 0) := "0000000001000100";
     CH0_RST_LP_ID_CFG0 : std_logic_vector(15 downto 0) := "0011000001110000";
     CH0_RST_LP_ID_CFG1 : std_logic_vector(15 downto 0) := "0001000000010000";
     CH0_RST_TIME_CFG0 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH0_RST_TIME_CFG1 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH0_RST_TIME_CFG2 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH0_RST_TIME_CFG3 : std_logic_vector(15 downto 0) := "0000010000100000";
     CH0_RST_TIME_CFG4 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH0_RST_TIME_CFG5 : std_logic_vector(15 downto 0) := "0000000000000001";
     CH0_RST_TIME_CFG6 : std_logic_vector(15 downto 0) := "0000000000100001";
     CH0_RX_ADC_CFG0 : std_logic_vector(15 downto 0) := "0011010010001111";
     CH0_RX_ADC_CFG1 : std_logic_vector(15 downto 0) := "0011111001010101";
     CH0_RX_ANA_CFG0 : std_logic_vector(15 downto 0) := "1000000000011101";
     CH0_RX_ANA_CFG1 : std_logic_vector(15 downto 0) := "1110100010000000";
     CH0_RX_ANA_CFG2 : std_logic_vector(15 downto 0) := "0000000010001010";
     CH0_RX_APT_CFG0A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG0B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG10A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG10B : std_logic_vector(15 downto 0) := "0000000001010000";
     CH0_RX_APT_CFG11A : std_logic_vector(15 downto 0) := "0000000001000000";
     CH0_RX_APT_CFG11B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG12A : std_logic_vector(15 downto 0) := "0000000001010000";
     CH0_RX_APT_CFG12B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG13A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG13B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG14A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG14B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG15A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG15B : std_logic_vector(15 downto 0) := "0000100000000000";
     CH0_RX_APT_CFG16A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG16B : std_logic_vector(15 downto 0) := "0010000000000000";
     CH0_RX_APT_CFG17A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG17B : std_logic_vector(15 downto 0) := "0001000001000000";
     CH0_RX_APT_CFG18A : std_logic_vector(15 downto 0) := "0000100000100000";
     CH0_RX_APT_CFG18B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG19A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG19B : std_logic_vector(15 downto 0) := "0000100000000000";
     CH0_RX_APT_CFG1A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG1B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG20A : std_logic_vector(15 downto 0) := "1110000000100000";
     CH0_RX_APT_CFG20B : std_logic_vector(15 downto 0) := "0000000001000000";
     CH0_RX_APT_CFG21A : std_logic_vector(15 downto 0) := "0001000000000100";
     CH0_RX_APT_CFG21B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG22A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG22B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG23A : std_logic_vector(15 downto 0) := "0000100000000000";
     CH0_RX_APT_CFG23B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG24A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG24B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG25A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG25B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG26A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG26B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG27A : std_logic_vector(15 downto 0) := "0100000000000000";
     CH0_RX_APT_CFG27B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG28A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_APT_CFG28B : std_logic_vector(15 downto 0) := "1000000000000000";
     CH0_RX_APT_CFG2A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG2B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG3A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG3B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG4A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG4B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG5A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG5B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG6A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG6B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG7A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG7B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG8A : std_logic_vector(15 downto 0) := "0000100000000000";
     CH0_RX_APT_CFG8B : std_logic_vector(15 downto 0) := "0000100000000000";
     CH0_RX_APT_CFG9A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CFG9B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH0_RX_APT_CTRL_CFG2 : std_logic_vector(15 downto 0) := "0000000000000100";
     CH0_RX_APT_CTRL_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_CAL_CFG0A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_CAL_CFG0B : std_logic_vector(15 downto 0) := "0011001100110000";
     CH0_RX_CAL_CFG1A : std_logic_vector(15 downto 0) := "1110111011100001";
     CH0_RX_CAL_CFG1B : std_logic_vector(15 downto 0) := "1111111100000100";
     CH0_RX_CAL_CFG2A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_CAL_CFG2B : std_logic_vector(15 downto 0) := "0011000000000000";
     CH0_RX_CDR_CFG0A : std_logic_vector(15 downto 0) := "0000000000000011";
     CH0_RX_CDR_CFG0B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_CDR_CFG1A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_CDR_CFG1B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_CDR_CFG2A : std_logic_vector(15 downto 0) := "1001000101100100";
     CH0_RX_CDR_CFG2B : std_logic_vector(15 downto 0) := "0000000100100100";
     CH0_RX_CDR_CFG3A : std_logic_vector(15 downto 0) := "0101110011110110";
     CH0_RX_CDR_CFG3B : std_logic_vector(15 downto 0) := "0000000000001011";
     CH0_RX_CDR_CFG4A : std_logic_vector(15 downto 0) := "0000000000000110";
     CH0_RX_CDR_CFG4B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_CLKGN_CFG0 : std_logic_vector(15 downto 0) := "1100000000000000";
     CH0_RX_CLKGN_CFG1 : std_logic_vector(15 downto 0) := "0000000110000000";
     CH0_RX_CTLE_CFG0 : std_logic_vector(15 downto 0) := "0011010010001000";
     CH0_RX_CTLE_CFG1 : std_logic_vector(15 downto 0) := "0010000000100010";
     CH0_RX_CTLE_CFG2 : std_logic_vector(15 downto 0) := "0000101000000000";
     CH0_RX_CTLE_CFG3 : std_logic_vector(15 downto 0) := "1111001001000000";
     CH0_RX_DSP_CFG : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_MON_CFG : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_RX_PAD_CFG0 : std_logic_vector(15 downto 0) := "0001111000000000";
     CH0_RX_PAD_CFG1 : std_logic_vector(15 downto 0) := "0001100000001010";
     CH0_RX_PCS_CFG0 : std_logic_vector(15 downto 0) := "0000000100000000";
     CH0_RX_PCS_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_ANA_CFG0 : std_logic_vector(15 downto 0) := "0000001010101111";
     CH0_TX_ANA_CFG1 : std_logic_vector(15 downto 0) := "0000000100000000";
     CH0_TX_ANA_CFG2 : std_logic_vector(15 downto 0) := "1000000000010100";
     CH0_TX_ANA_CFG3 : std_logic_vector(15 downto 0) := "0000101000100010";
     CH0_TX_ANA_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_CAL_CFG0 : std_logic_vector(15 downto 0) := "0000000000100000";
     CH0_TX_CAL_CFG1 : std_logic_vector(15 downto 0) := "0000000001000000";
     CH0_TX_DRV_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_DRV_CFG1 : std_logic_vector(15 downto 0) := "0000000000100111";
     CH0_TX_DRV_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_DRV_CFG3 : std_logic_vector(15 downto 0) := "0110110000000000";
     CH0_TX_DRV_CFG4 : std_logic_vector(15 downto 0) := "0000000011000101";
     CH0_TX_DRV_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_LPBK_CFG0 : std_logic_vector(15 downto 0) := "0000000000000011";
     CH0_TX_LPBK_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG0 : std_logic_vector(15 downto 0) := "0000000101100000";
     CH0_TX_PCS_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG10 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG11 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG12 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG13 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG14 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG15 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG16 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG17 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG6 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG7 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG8 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH0_TX_PCS_CFG9 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_A_CH_CFG0 : std_logic_vector(15 downto 0) := "0000000000000011";
     CH1_A_CH_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_A_CH_CFG2 : std_logic_vector(15 downto 0) := "0111101111110000";
     CH1_A_CH_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_A_CH_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_A_CH_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_A_CH_CFG6 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RST_LP_CFG0 : std_logic_vector(15 downto 0) := "0001000000010000";
     CH1_RST_LP_CFG1 : std_logic_vector(15 downto 0) := "0011001000010000";
     CH1_RST_LP_CFG2 : std_logic_vector(15 downto 0) := "0110010100000100";
     CH1_RST_LP_CFG3 : std_logic_vector(15 downto 0) := "0011001000010000";
     CH1_RST_LP_CFG4 : std_logic_vector(15 downto 0) := "0000000001000100";
     CH1_RST_LP_ID_CFG0 : std_logic_vector(15 downto 0) := "0011000001110000";
     CH1_RST_LP_ID_CFG1 : std_logic_vector(15 downto 0) := "0001000000010000";
     CH1_RST_TIME_CFG0 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH1_RST_TIME_CFG1 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH1_RST_TIME_CFG2 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH1_RST_TIME_CFG3 : std_logic_vector(15 downto 0) := "0000010000100000";
     CH1_RST_TIME_CFG4 : std_logic_vector(15 downto 0) := "0000010000100001";
     CH1_RST_TIME_CFG5 : std_logic_vector(15 downto 0) := "0000000000000001";
     CH1_RST_TIME_CFG6 : std_logic_vector(15 downto 0) := "0000000000100001";
     CH1_RX_ADC_CFG0 : std_logic_vector(15 downto 0) := "0011010010001111";
     CH1_RX_ADC_CFG1 : std_logic_vector(15 downto 0) := "0011111001010101";
     CH1_RX_ANA_CFG0 : std_logic_vector(15 downto 0) := "1000000000011101";
     CH1_RX_ANA_CFG1 : std_logic_vector(15 downto 0) := "1110100010000000";
     CH1_RX_ANA_CFG2 : std_logic_vector(15 downto 0) := "0000000010001010";
     CH1_RX_APT_CFG0A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG0B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG10A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG10B : std_logic_vector(15 downto 0) := "0000000001010000";
     CH1_RX_APT_CFG11A : std_logic_vector(15 downto 0) := "0000000001000000";
     CH1_RX_APT_CFG11B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG12A : std_logic_vector(15 downto 0) := "0000000001010000";
     CH1_RX_APT_CFG12B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG13A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG13B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG14A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG14B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG15A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG15B : std_logic_vector(15 downto 0) := "0000100000000000";
     CH1_RX_APT_CFG16A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG16B : std_logic_vector(15 downto 0) := "0010000000000000";
     CH1_RX_APT_CFG17A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG17B : std_logic_vector(15 downto 0) := "0001000001000000";
     CH1_RX_APT_CFG18A : std_logic_vector(15 downto 0) := "0000100000100000";
     CH1_RX_APT_CFG18B : std_logic_vector(15 downto 0) := "0000100010000000";
     CH1_RX_APT_CFG19A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG19B : std_logic_vector(15 downto 0) := "0000100000000000";
     CH1_RX_APT_CFG1A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG1B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG20A : std_logic_vector(15 downto 0) := "1110000000100000";
     CH1_RX_APT_CFG20B : std_logic_vector(15 downto 0) := "0000000001000000";
     CH1_RX_APT_CFG21A : std_logic_vector(15 downto 0) := "0001000000000100";
     CH1_RX_APT_CFG21B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG22A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG22B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG23A : std_logic_vector(15 downto 0) := "0000100000000000";
     CH1_RX_APT_CFG23B : std_logic_vector(15 downto 0) := "0000100000000000";
     CH1_RX_APT_CFG24A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG24B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG25A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG25B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG26A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG26B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG27A : std_logic_vector(15 downto 0) := "0100000000000000";
     CH1_RX_APT_CFG27B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG28A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_APT_CFG28B : std_logic_vector(15 downto 0) := "1000000000000000";
     CH1_RX_APT_CFG2A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG2B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG3A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG3B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG4A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG4B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG5A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG5B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG6A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG6B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG7A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG7B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG8A : std_logic_vector(15 downto 0) := "0000100000000000";
     CH1_RX_APT_CFG8B : std_logic_vector(15 downto 0) := "0000100000000000";
     CH1_RX_APT_CFG9A : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CFG9B : std_logic_vector(15 downto 0) := "0000000001110000";
     CH1_RX_APT_CTRL_CFG2 : std_logic_vector(15 downto 0) := "0000000000000100";
     CH1_RX_APT_CTRL_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_CAL_CFG0A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_CAL_CFG0B : std_logic_vector(15 downto 0) := "0011001100110000";
     CH1_RX_CAL_CFG1A : std_logic_vector(15 downto 0) := "1110111011100001";
     CH1_RX_CAL_CFG1B : std_logic_vector(15 downto 0) := "1111111100000100";
     CH1_RX_CAL_CFG2A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_CAL_CFG2B : std_logic_vector(15 downto 0) := "0011000000000000";
     CH1_RX_CDR_CFG0A : std_logic_vector(15 downto 0) := "0000000000000011";
     CH1_RX_CDR_CFG0B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_CDR_CFG1A : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_CDR_CFG1B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_CDR_CFG2A : std_logic_vector(15 downto 0) := "1001000101100100";
     CH1_RX_CDR_CFG2B : std_logic_vector(15 downto 0) := "0000000100100100";
     CH1_RX_CDR_CFG3A : std_logic_vector(15 downto 0) := "0101110011110110";
     CH1_RX_CDR_CFG3B : std_logic_vector(15 downto 0) := "0000000000001011";
     CH1_RX_CDR_CFG4A : std_logic_vector(15 downto 0) := "0000000000000110";
     CH1_RX_CDR_CFG4B : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_CLKGN_CFG0 : std_logic_vector(15 downto 0) := "1100000000000000";
     CH1_RX_CLKGN_CFG1 : std_logic_vector(15 downto 0) := "0000000110000000";
     CH1_RX_CTLE_CFG0 : std_logic_vector(15 downto 0) := "0011010010001000";
     CH1_RX_CTLE_CFG1 : std_logic_vector(15 downto 0) := "0010000000100010";
     CH1_RX_CTLE_CFG2 : std_logic_vector(15 downto 0) := "0000101000000000";
     CH1_RX_CTLE_CFG3 : std_logic_vector(15 downto 0) := "1111001001000000";
     CH1_RX_DSP_CFG : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_MON_CFG : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_RX_PAD_CFG0 : std_logic_vector(15 downto 0) := "0001111000000000";
     CH1_RX_PAD_CFG1 : std_logic_vector(15 downto 0) := "0001100000001010";
     CH1_RX_PCS_CFG0 : std_logic_vector(15 downto 0) := "0000000100000000";
     CH1_RX_PCS_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_ANA_CFG0 : std_logic_vector(15 downto 0) := "0000001010101111";
     CH1_TX_ANA_CFG1 : std_logic_vector(15 downto 0) := "0000000100000000";
     CH1_TX_ANA_CFG2 : std_logic_vector(15 downto 0) := "1000000000010100";
     CH1_TX_ANA_CFG3 : std_logic_vector(15 downto 0) := "0000101000100010";
     CH1_TX_ANA_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_CAL_CFG0 : std_logic_vector(15 downto 0) := "0000000000100000";
     CH1_TX_CAL_CFG1 : std_logic_vector(15 downto 0) := "0000000001000000";
     CH1_TX_DRV_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_DRV_CFG1 : std_logic_vector(15 downto 0) := "0000000000100111";
     CH1_TX_DRV_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_DRV_CFG3 : std_logic_vector(15 downto 0) := "0110110000000000";
     CH1_TX_DRV_CFG4 : std_logic_vector(15 downto 0) := "0000000011000101";
     CH1_TX_DRV_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_LPBK_CFG0 : std_logic_vector(15 downto 0) := "0000000000000011";
     CH1_TX_LPBK_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG0 : std_logic_vector(15 downto 0) := "0000000101100000";
     CH1_TX_PCS_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG10 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG11 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG12 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG13 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG14 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG15 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG16 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG17 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG6 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG7 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG8 : std_logic_vector(15 downto 0) := "0000000000000000";
     CH1_TX_PCS_CFG9 : std_logic_vector(15 downto 0) := "0000000000000000";
     DATARATE : real := 10.000;
     DRPEN_CFG : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG10 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG11 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG12 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG13 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG14 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG15 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG16 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG17 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG18 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG19 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG20 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG21 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG22 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG23 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG24 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG25 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG26 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG27 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG4 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG5 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG6 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG7 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG8 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_CFG9 : std_logic_vector(15 downto 0) := "0000000000000000";
     FEC_MODE : string := "BYPASS";
     INS_LOSS_NYQ : real := 20.000;
     INTERFACE_WIDTH : integer := 64;
     MODULATION_MODE : string := "NRZ";
     PLL_CFG0 : std_logic_vector(15 downto 0) := "0001100111110000";
     PLL_CFG1 : std_logic_vector(15 downto 0) := "0000111101110000";
     PLL_CFG2 : std_logic_vector(15 downto 0) := "1000000111101000";
     PLL_CFG3 : std_logic_vector(15 downto 0) := "0100000000000000";
     PLL_CFG4 : std_logic_vector(15 downto 0) := "0111111111101010";
     PLL_CFG5 : std_logic_vector(15 downto 0) := "0100101100111000";
     PLL_CFG6 : std_logic_vector(15 downto 0) := "0000000000100101";
     PLL_CRS_CTRL_CFG0 : std_logic_vector(15 downto 0) := "0000101100100000";
     PLL_CRS_CTRL_CFG1 : std_logic_vector(15 downto 0) := "1100010111010100";
     PLL_IPS_PIN_EN : bit := '1';
     PLL_IPS_REFCLK_SEL : integer := 0;
     RCALSAP_TESTEN : bit := '0';
     RCAL_APROBE : bit := '0';
     RST_CFG : std_logic_vector(15 downto 0) := "0000000000000010";
     RST_PLL_CFG0 : std_logic_vector(15 downto 0) := "0111011000010100";
     SAP_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM_CFG0 : std_logic_vector(15 downto 0) := "0001100001000000";
     SDM_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM_SEED_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM_SEED_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     SIM_DEVICE : string := "ULTRASCALE_PLUS_ES1";
     SIM_RESET_SPEEDUP : string := "TRUE";
     TX_AMPLITUDE_SWING : integer := 250
  );
  port (
     CH0_AXISTDATA : out std_logic_vector(27 downto 0);
     CH0_AXISTLAST : out std_ulogic;
     CH0_AXISTVALID : out std_ulogic;
     CH0_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH0_DMONITOROUTCLK : out std_ulogic;
     CH0_GTMTXN : out std_ulogic;
     CH0_GTMTXP : out std_ulogic;
     CH0_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH0_PMARSVDOUT : out std_logic_vector(15 downto 0);
     CH0_RESETEXCEPTION : out std_ulogic;
     CH0_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH0_RXDATA : out std_logic_vector(255 downto 0);
     CH0_RXDATAFLAGS : out std_logic_vector(3 downto 0);
     CH0_RXDATAISAM : out std_ulogic;
     CH0_RXDATASTART : out std_ulogic;
     CH0_RXOUTCLK : out std_ulogic;
     CH0_RXPMARESETDONE : out std_ulogic;
     CH0_RXPRBSERR : out std_ulogic;
     CH0_RXPRBSLOCKED : out std_ulogic;
     CH0_RXPRGDIVRESETDONE : out std_ulogic;
     CH0_RXPROGDIVCLK : out std_ulogic;
     CH0_RXRESETDONE : out std_ulogic;
     CH0_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH0_TXOUTCLK : out std_ulogic;
     CH0_TXPMARESETDONE : out std_ulogic;
     CH0_TXPRGDIVRESETDONE : out std_ulogic;
     CH0_TXPROGDIVCLK : out std_ulogic;
     CH0_TXRESETDONE : out std_ulogic;
     CH1_AXISTDATA : out std_logic_vector(27 downto 0);
     CH1_AXISTLAST : out std_ulogic;
     CH1_AXISTVALID : out std_ulogic;
     CH1_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH1_DMONITOROUTCLK : out std_ulogic;
     CH1_GTMTXN : out std_ulogic;
     CH1_GTMTXP : out std_ulogic;
     CH1_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH1_PMARSVDOUT : out std_logic_vector(15 downto 0);
     CH1_RESETEXCEPTION : out std_ulogic;
     CH1_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH1_RXDATA : out std_logic_vector(255 downto 0);
     CH1_RXDATAFLAGS : out std_logic_vector(3 downto 0);
     CH1_RXDATAISAM : out std_ulogic;
     CH1_RXDATASTART : out std_ulogic;
     CH1_RXOUTCLK : out std_ulogic;
     CH1_RXPMARESETDONE : out std_ulogic;
     CH1_RXPRBSERR : out std_ulogic;
     CH1_RXPRBSLOCKED : out std_ulogic;
     CH1_RXPRGDIVRESETDONE : out std_ulogic;
     CH1_RXPROGDIVCLK : out std_ulogic;
     CH1_RXRESETDONE : out std_ulogic;
     CH1_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH1_TXOUTCLK : out std_ulogic;
     CH1_TXPMARESETDONE : out std_ulogic;
     CH1_TXPRGDIVRESETDONE : out std_ulogic;
     CH1_TXPROGDIVCLK : out std_ulogic;
     CH1_TXRESETDONE : out std_ulogic;
     CLKTESTSIG2PAD : out std_ulogic;
     DMONITOROUTPLLCLK : out std_ulogic;
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     FECRX0ALIGNED : out std_ulogic;
     FECRX0CORRCWINC : out std_ulogic;
     FECRX0CWINC : out std_ulogic;
     FECRX0UNCORRCWINC : out std_ulogic;
     FECRX1ALIGNED : out std_ulogic;
     FECRX1CORRCWINC : out std_ulogic;
     FECRX1CWINC : out std_ulogic;
     FECRX1UNCORRCWINC : out std_ulogic;
     FECRXLN0BITERR0TO1INC : out std_logic_vector(7 downto 0);
     FECRXLN0BITERR1TO0INC : out std_logic_vector(7 downto 0);
     FECRXLN0DLY : out std_logic_vector(14 downto 0);
     FECRXLN0ERRCNTINC : out std_logic_vector(3 downto 0);
     FECRXLN0MAPPING : out std_logic_vector(1 downto 0);
     FECRXLN1BITERR0TO1INC : out std_logic_vector(7 downto 0);
     FECRXLN1BITERR1TO0INC : out std_logic_vector(7 downto 0);
     FECRXLN1DLY : out std_logic_vector(14 downto 0);
     FECRXLN1ERRCNTINC : out std_logic_vector(3 downto 0);
     FECRXLN1MAPPING : out std_logic_vector(1 downto 0);
     FECRXLN2BITERR0TO1INC : out std_logic_vector(7 downto 0);
     FECRXLN2BITERR1TO0INC : out std_logic_vector(7 downto 0);
     FECRXLN2DLY : out std_logic_vector(14 downto 0);
     FECRXLN2ERRCNTINC : out std_logic_vector(3 downto 0);
     FECRXLN2MAPPING : out std_logic_vector(1 downto 0);
     FECRXLN3BITERR0TO1INC : out std_logic_vector(7 downto 0);
     FECRXLN3BITERR1TO0INC : out std_logic_vector(7 downto 0);
     FECRXLN3DLY : out std_logic_vector(14 downto 0);
     FECRXLN3ERRCNTINC : out std_logic_vector(3 downto 0);
     FECRXLN3MAPPING : out std_logic_vector(1 downto 0);
     FECTRXLN0LOCK : out std_ulogic;
     FECTRXLN1LOCK : out std_ulogic;
     FECTRXLN2LOCK : out std_ulogic;
     FECTRXLN3LOCK : out std_ulogic;
     GTPOWERGOOD : out std_ulogic;
     PLLFBCLKLOST : out std_ulogic;
     PLLLOCK : out std_ulogic;
     PLLREFCLKLOST : out std_ulogic;
     PLLREFCLKMONITOR : out std_ulogic;
     PLLRESETDONE : out std_ulogic;
     PLLRSVDOUT : out std_logic_vector(15 downto 0);
     RCALCMP : out std_ulogic;
     RCALOUT : out std_logic_vector(4 downto 0);
     RXRECCLK0 : out std_ulogic;
     RXRECCLK1 : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     CH0_AXISEN : in std_ulogic;
     CH0_AXISRST : in std_ulogic;
     CH0_AXISTRDY : in std_ulogic;
     CH0_CFGRESET : in std_ulogic;
     CH0_DMONFIFORESET : in std_ulogic;
     CH0_DMONITORCLK : in std_ulogic;
     CH0_GTMRXN : in std_ulogic;
     CH0_GTMRXP : in std_ulogic;
     CH0_GTRXRESET : in std_ulogic;
     CH0_GTTXRESET : in std_ulogic;
     CH0_LOOPBACK : in std_logic_vector(2 downto 0);
     CH0_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH0_PMARSVDIN : in std_logic_vector(15 downto 0);
     CH0_RESETOVRD : in std_ulogic;
     CH0_RXADAPTRESET : in std_ulogic;
     CH0_RXADCCALRESET : in std_ulogic;
     CH0_RXADCCLKGENRESET : in std_ulogic;
     CH0_RXBUFRESET : in std_ulogic;
     CH0_RXCDRFREQOS : in std_ulogic;
     CH0_RXCDRFRRESET : in std_ulogic;
     CH0_RXCDRHOLD : in std_ulogic;
     CH0_RXCDRINCPCTRL : in std_ulogic;
     CH0_RXCDROVRDEN : in std_ulogic;
     CH0_RXCDRPHRESET : in std_ulogic;
     CH0_RXDFERESET : in std_ulogic;
     CH0_RXDSPRESET : in std_ulogic;
     CH0_RXEQTRAINING : in std_ulogic;
     CH0_RXEYESCANRESET : in std_ulogic;
     CH0_RXFECRESET : in std_ulogic;
     CH0_RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     CH0_RXPCSRESET : in std_ulogic;
     CH0_RXPCSRESETMASK : in std_logic_vector(3 downto 0);
     CH0_RXPMARESET : in std_ulogic;
     CH0_RXPMARESETMASK : in std_logic_vector(7 downto 0);
     CH0_RXPOLARITY : in std_ulogic;
     CH0_RXPRBSCNTSTOP : in std_ulogic;
     CH0_RXPRBSCSCNTRST : in std_ulogic;
     CH0_RXPRBSPTN : in std_logic_vector(3 downto 0);
     CH0_RXPROGDIVRESET : in std_ulogic;
     CH0_RXQPRBSEN : in std_ulogic;
     CH0_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH0_RXSPCSEQADV : in std_ulogic;
     CH0_RXUSRCLK : in std_ulogic;
     CH0_RXUSRCLK2 : in std_ulogic;
     CH0_RXUSRRDY : in std_ulogic;
     CH0_RXUSRSTART : in std_ulogic;
     CH0_RXUSRSTOP : in std_ulogic;
     CH0_TXCKALRESET : in std_ulogic;
     CH0_TXCTLFIRDAT : in std_logic_vector(5 downto 0);
     CH0_TXDATA : in std_logic_vector(255 downto 0);
     CH0_TXDATASTART : in std_ulogic;
     CH0_TXDRVAMP : in std_logic_vector(4 downto 0);
     CH0_TXEMPMAIN : in std_logic_vector(5 downto 0);
     CH0_TXEMPPOST : in std_logic_vector(4 downto 0);
     CH0_TXEMPPRE : in std_logic_vector(4 downto 0);
     CH0_TXEMPPRE2 : in std_logic_vector(3 downto 0);
     CH0_TXFECRESET : in std_ulogic;
     CH0_TXINHIBIT : in std_ulogic;
     CH0_TXMUXDCDEXHOLD : in std_ulogic;
     CH0_TXMUXDCDORWREN : in std_ulogic;
     CH0_TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     CH0_TXPCSRESET : in std_ulogic;
     CH0_TXPCSRESETMASK : in std_logic_vector(1 downto 0);
     CH0_TXPMARESET : in std_ulogic;
     CH0_TXPMARESETMASK : in std_logic_vector(1 downto 0);
     CH0_TXPOLARITY : in std_ulogic;
     CH0_TXPRBSINERR : in std_ulogic;
     CH0_TXPRBSPTN : in std_logic_vector(3 downto 0);
     CH0_TXPROGDIVRESET : in std_ulogic;
     CH0_TXQPRBSEN : in std_ulogic;
     CH0_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH0_TXSPCSEQADV : in std_ulogic;
     CH0_TXUSRCLK : in std_ulogic;
     CH0_TXUSRCLK2 : in std_ulogic;
     CH0_TXUSRRDY : in std_ulogic;
     CH1_AXISEN : in std_ulogic;
     CH1_AXISRST : in std_ulogic;
     CH1_AXISTRDY : in std_ulogic;
     CH1_CFGRESET : in std_ulogic;
     CH1_DMONFIFORESET : in std_ulogic;
     CH1_DMONITORCLK : in std_ulogic;
     CH1_GTMRXN : in std_ulogic;
     CH1_GTMRXP : in std_ulogic;
     CH1_GTRXRESET : in std_ulogic;
     CH1_GTTXRESET : in std_ulogic;
     CH1_LOOPBACK : in std_logic_vector(2 downto 0);
     CH1_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH1_PMARSVDIN : in std_logic_vector(15 downto 0);
     CH1_RESETOVRD : in std_ulogic;
     CH1_RXADAPTRESET : in std_ulogic;
     CH1_RXADCCALRESET : in std_ulogic;
     CH1_RXADCCLKGENRESET : in std_ulogic;
     CH1_RXBUFRESET : in std_ulogic;
     CH1_RXCDRFREQOS : in std_ulogic;
     CH1_RXCDRFRRESET : in std_ulogic;
     CH1_RXCDRHOLD : in std_ulogic;
     CH1_RXCDRINCPCTRL : in std_ulogic;
     CH1_RXCDROVRDEN : in std_ulogic;
     CH1_RXCDRPHRESET : in std_ulogic;
     CH1_RXDFERESET : in std_ulogic;
     CH1_RXDSPRESET : in std_ulogic;
     CH1_RXEQTRAINING : in std_ulogic;
     CH1_RXEYESCANRESET : in std_ulogic;
     CH1_RXFECRESET : in std_ulogic;
     CH1_RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     CH1_RXPCSRESET : in std_ulogic;
     CH1_RXPCSRESETMASK : in std_logic_vector(3 downto 0);
     CH1_RXPMARESET : in std_ulogic;
     CH1_RXPMARESETMASK : in std_logic_vector(7 downto 0);
     CH1_RXPOLARITY : in std_ulogic;
     CH1_RXPRBSCNTSTOP : in std_ulogic;
     CH1_RXPRBSCSCNTRST : in std_ulogic;
     CH1_RXPRBSPTN : in std_logic_vector(3 downto 0);
     CH1_RXPROGDIVRESET : in std_ulogic;
     CH1_RXQPRBSEN : in std_ulogic;
     CH1_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH1_RXSPCSEQADV : in std_ulogic;
     CH1_RXUSRCLK : in std_ulogic;
     CH1_RXUSRCLK2 : in std_ulogic;
     CH1_RXUSRRDY : in std_ulogic;
     CH1_RXUSRSTART : in std_ulogic;
     CH1_RXUSRSTOP : in std_ulogic;
     CH1_TXCKALRESET : in std_ulogic;
     CH1_TXCTLFIRDAT : in std_logic_vector(5 downto 0);
     CH1_TXDATA : in std_logic_vector(255 downto 0);
     CH1_TXDATASTART : in std_ulogic;
     CH1_TXDRVAMP : in std_logic_vector(4 downto 0);
     CH1_TXEMPMAIN : in std_logic_vector(5 downto 0);
     CH1_TXEMPPOST : in std_logic_vector(4 downto 0);
     CH1_TXEMPPRE : in std_logic_vector(4 downto 0);
     CH1_TXEMPPRE2 : in std_logic_vector(3 downto 0);
     CH1_TXFECRESET : in std_ulogic;
     CH1_TXINHIBIT : in std_ulogic;
     CH1_TXMUXDCDEXHOLD : in std_ulogic;
     CH1_TXMUXDCDORWREN : in std_ulogic;
     CH1_TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     CH1_TXPCSRESET : in std_ulogic;
     CH1_TXPCSRESETMASK : in std_logic_vector(1 downto 0);
     CH1_TXPMARESET : in std_ulogic;
     CH1_TXPMARESETMASK : in std_logic_vector(1 downto 0);
     CH1_TXPOLARITY : in std_ulogic;
     CH1_TXPRBSINERR : in std_ulogic;
     CH1_TXPRBSPTN : in std_logic_vector(3 downto 0);
     CH1_TXPROGDIVRESET : in std_ulogic;
     CH1_TXQPRBSEN : in std_ulogic;
     CH1_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH1_TXSPCSEQADV : in std_ulogic;
     CH1_TXUSRCLK : in std_ulogic;
     CH1_TXUSRCLK2 : in std_ulogic;
     CH1_TXUSRRDY : in std_ulogic;
     DRPADDR : in std_logic_vector(10 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPRST : in std_ulogic;
     DRPWE : in std_ulogic;
     FECCTRLRX0BITSLIPFS : in std_ulogic;
     FECCTRLRX1BITSLIPFS : in std_ulogic;
     GTGREFCLK2PLL : in std_ulogic;
     GTNORTHREFCLK : in std_ulogic;
     GTREFCLK : in std_ulogic;
     GTSOUTHREFCLK : in std_ulogic;
     PLLFBDIV : in std_logic_vector(7 downto 0);
     PLLMONCLK : in std_ulogic;
     PLLPD : in std_ulogic;
     PLLREFCLKSEL : in std_logic_vector(2 downto 0);
     PLLRESET : in std_ulogic;
     PLLRESETBYPASSMODE : in std_ulogic;
     PLLRESETMASK : in std_logic_vector(1 downto 0);
     PLLRSVDIN : in std_logic_vector(15 downto 0);
     RCALENB : in std_ulogic;
     SDMDATA : in std_logic_vector(25 downto 0);
     SDMTOGGLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTM_DUAL : component is "PRIMITIVE";

----- component GTPE2_CHANNEL -----
component GTPE2_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : bit_vector := "00000000000000000000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : bit_vector := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : bit_vector := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : bit_vector := "0101111100";
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CFOK_CFG : bit_vector := "1001001000000000000000001000000111010000000";
     CFOK_CFG2 : bit_vector := "0100000";
     CFOK_CFG3 : bit_vector := "0100000";
     CFOK_CFG4 : bit := '0';
     CFOK_CFG5 : bit_vector := "00";
     CFOK_CFG6 : bit_vector := "0000";
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_3 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_4 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_2 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_3 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_4 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 1;
     CLK_COMMON_SWING : bit := '0';
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_1 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_2 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_3 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_4 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 1;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DMONITOR_CFG : bit_vector := X"000A00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : bit_vector := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : bit_vector := X"010";
     ES_PMA_CFG : bit_vector := "0000000000";
     ES_PRESCALE : bit_vector := "00000";
     ES_QUALIFIER : bit_vector := X"00000000000000000000";
     ES_QUAL_MASK : bit_vector := X"00000000000000000000";
     ES_SDATA_MASK : bit_vector := X"00000000000000000000";
     ES_VERT_OFFSET : bit_vector := "000000000";
     FTS_DESKEW_SEQ_ENABLE : bit_vector := "1111";
     FTS_LANE_DESKEW_CFG : bit_vector := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : bit_vector := "000";
     IS_CLKRSVD0_INVERTED : bit := '0';
     IS_CLKRSVD1_INVERTED : bit := '0';
     IS_DMONITORCLK_INVERTED : bit := '0';
     IS_DRPCLK_INVERTED : bit := '0';
     IS_RXUSRCLK2_INVERTED : bit := '0';
     IS_RXUSRCLK_INVERTED : bit := '0';
     IS_SIGVALIDCLK_INVERTED : bit := '0';
     IS_TXPHDLYTSTCLK_INVERTED : bit := '0';
     IS_TXUSRCLK2_INVERTED : bit := '0';
     IS_TXUSRCLK_INVERTED : bit := '0';
     LOOPBACK_CFG : bit := '0';
     OUTREFCLK_SEL_INV : bit_vector := "11";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD_ATTR : bit_vector := X"000000000000";
     PD_TRANS_TIME_FROM_P2 : bit_vector := X"03C";
     PD_TRANS_TIME_NONE_P2 : bit_vector := X"19";
     PD_TRANS_TIME_TO_P2 : bit_vector := X"64";
     PMA_LOOPBACK_CFG : bit := '0';
     PMA_RSV : bit_vector := X"00000333";
     PMA_RSV2 : bit_vector := X"00002050";
     PMA_RSV3 : bit_vector := "00";
     PMA_RSV4 : bit_vector := "0000";
     PMA_RSV5 : bit := '0';
     PMA_RSV6 : bit := '0';
     PMA_RSV7 : bit := '0';
     RXBUFRESET_TIME : bit_vector := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : bit_vector := "1000";
     RXBUF_EIDLE_LO_CNT : bit_vector := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 61;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : bit_vector := "00001";
     RXCDRPHRESET_TIME : bit_vector := "00001";
     RXCDR_CFG : bit_vector := X"0000107FE406001041010";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG : bit_vector := "001001";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXDLY_CFG : bit_vector := X"0010";
     RXDLY_LCFG : bit_vector := X"020";
     RXDLY_TAP_CFG : bit_vector := X"0000";
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : bit_vector := "00001";
     RXLPMRESET_TIME : bit_vector := "0001111";
     RXLPM_BIAS_STARTUP_DISABLE : bit := '0';
     RXLPM_CFG : bit_vector := "0110";
     RXLPM_CFG1 : bit := '0';
     RXLPM_CM_CFG : bit := '0';
     RXLPM_GC_CFG : bit_vector := "111100010";
     RXLPM_GC_CFG2 : bit_vector := "001";
     RXLPM_HF_CFG : bit_vector := "00001111110000";
     RXLPM_HF_CFG2 : bit_vector := "01010";
     RXLPM_HF_CFG3 : bit_vector := "0000";
     RXLPM_HOLD_DURING_EIDLE : bit := '0';
     RXLPM_INCM_CFG : bit := '0';
     RXLPM_IPCM_CFG : bit := '0';
     RXLPM_LF_CFG : bit_vector := "000000001111110000";
     RXLPM_LF_CFG2 : bit_vector := "01010";
     RXLPM_OSINT_CFG : bit_vector := "100";
     RXOOB_CFG : bit_vector := "0000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : bit_vector := "00011";
     RXOSCALRESET_TIMEOUT : bit_vector := "00000";
     RXOUT_DIV : integer := 2;
     RXPCSRESET_TIME : bit_vector := "00001";
     RXPHDLY_CFG : bit_vector := X"084000";
     RXPH_CFG : bit_vector := X"C00002";
     RXPH_MONITOR_SEL : bit_vector := "00000";
     RXPI_CFG0 : bit_vector := "000";
     RXPI_CFG1 : bit := '0';
     RXPI_CFG2 : bit := '0';
     RXPMARESET_TIME : bit_vector := "00011";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_BIAS_CFG : bit_vector := "0000111100110011";
     RX_BUFFER_CFG : bit_vector := "000000";
     RX_CLK25_DIV : integer := 7;
     RX_CLKMUX_EN : bit := '1';
     RX_CM_SEL : bit_vector := "11";
     RX_CM_TRIM : bit_vector := "0100";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : bit_vector := "000000";
     RX_DEBUG_CFG : bit_vector := "00000000000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_OS_CFG : bit_vector := "0001111110000";
     RX_SIG_VALID_DLY : integer := 10;
     RX_XCLK_SEL : string := "RXREC";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : bit_vector := "1111";
     SATA_BURST_VAL : bit_vector := "100";
     SATA_EIDLE_VAL : bit_vector := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SATA_PLL_CFG : string := "VCO_3000MHZ";
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "X";
     SIM_VERSION : string := "1.0";
     TERM_RCAL_CFG : bit_vector := "100001000010000";
     TERM_RCAL_OVRD : bit_vector := "000";
     TRANS_TIME_RATE : bit_vector := X"0E";
     TST_RSV : bit_vector := X"00000000";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : bit_vector := X"0010";
     TXDLY_LCFG : bit_vector := X"020";
     TXDLY_TAP_CFG : bit_vector := X"0000";
     TXGEARBOX_EN : string := "FALSE";
     TXOOB_CFG : bit := '0';
     TXOUT_DIV : integer := 2;
     TXPCSRESET_TIME : bit_vector := "00001";
     TXPHDLY_CFG : bit_vector := X"084000";
     TXPH_CFG : bit_vector := X"0400";
     TXPH_MONITOR_SEL : bit_vector := "00000";
     TXPI_CFG0 : bit_vector := "00";
     TXPI_CFG1 : bit_vector := "00";
     TXPI_CFG2 : bit_vector := "00";
     TXPI_CFG3 : bit := '0';
     TXPI_CFG4 : bit := '0';
     TXPI_CFG5 : bit_vector := "000";
     TXPI_GREY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : bit_vector := "00000000";
     TXPI_SYNFREQ_PPM : bit_vector := "000";
     TXPMARESET_TIME : bit_vector := "00001";
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 7;
     TX_CLKMUX_EN : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DEEMPH0 : bit_vector := "000000";
     TX_DEEMPH1 : bit_vector := "000000";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : bit_vector := "110";
     TX_EIDLE_DEASSERT_DELAY : bit_vector := "100";
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : bit_vector := "1001110";
     TX_MARGIN_FULL_1 : bit_vector := "1001001";
     TX_MARGIN_FULL_2 : bit_vector := "1000101";
     TX_MARGIN_FULL_3 : bit_vector := "1000010";
     TX_MARGIN_FULL_4 : bit_vector := "1000000";
     TX_MARGIN_LOW_0 : bit_vector := "1000110";
     TX_MARGIN_LOW_1 : bit_vector := "1000100";
     TX_MARGIN_LOW_2 : bit_vector := "1000010";
     TX_MARGIN_LOW_3 : bit_vector := "1000000";
     TX_MARGIN_LOW_4 : bit_vector := "1000000";
     TX_PREDRIVER_MODE : bit := '0';
     TX_RXDETECT_CFG : bit_vector := X"1832";
     TX_RXDETECT_REF : bit_vector := "100";
     TX_XCLK_SEL : string := "TXUSR";
     UCODEER_CLR : bit := '0';
     USE_PCS_CLK_PHASE_SEL : bit := '0'
  );
  port (
     DMONITOROUT : out std_logic_vector(14 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTPTXN : out std_ulogic;
     GTPTXP : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     PMARSVDOUT0 : out std_ulogic;
     PMARSVDOUT1 : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHARISCOMMA : out std_logic_vector(3 downto 0);
     RXCHARISK : out std_logic_vector(3 downto 0);
     RXCHBONDO : out std_logic_vector(3 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXDATA : out std_logic_vector(31 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDISPERR : out std_logic_vector(3 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(2 downto 0);
     RXHEADERVALID : out std_ulogic;
     RXNOTINTABLE : out std_logic_vector(3 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHMONITOR : out std_logic_vector(4 downto 0);
     RXPHSLIPMONITOR : out std_logic_vector(4 downto 0);
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXGEARBOXREADY : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTPRXN : in std_ulogic;
     GTPRXP : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTTXRESET : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PLL0CLK : in std_ulogic;
     PLL0REFCLK : in std_ulogic;
     PLL1CLK : in std_ulogic;
     PLL1REFCLK : in std_ulogic;
     PMARSVDIN0 : in std_ulogic;
     PMARSVDIN1 : in std_ulogic;
     PMARSVDIN2 : in std_ulogic;
     PMARSVDIN3 : in std_ulogic;
     PMARSVDIN4 : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXADAPTSELTEST : in std_logic_vector(13 downto 0);
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(3 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDDIEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFOVRDEN : in std_ulogic;
     RXLPMOSINTNTRLEN : in std_ulogic;
     RXLPMRESET : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTID0 : in std_logic_vector(3 downto 0);
     RXOSINTNTRLEN : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTPD : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(2 downto 0);
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SETERRSTATUS : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(3 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCHARDISPMODE : in std_logic_vector(3 downto 0);
     TXCHARDISPVAL : in std_logic_vector(3 downto 0);
     TXCHARISK : in std_logic_vector(3 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXDATA : in std_logic_vector(31 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(2 downto 0);
     TXINHIBIT : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(2 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSTARTSEQ : in std_ulogic;
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTPE2_CHANNEL : component is "PRIMITIVE";

----- component GTPE2_COMMON -----
component GTPE2_COMMON
  generic (
     BIAS_CFG : bit_vector := X"0000000000000000";
     COMMON_CFG : bit_vector := X"00000000";
     IS_DRPCLK_INVERTED : bit := '0';
     IS_GTGREFCLK0_INVERTED : bit := '0';
     IS_GTGREFCLK1_INVERTED : bit := '0';
     IS_PLL0LOCKDETCLK_INVERTED : bit := '0';
     IS_PLL1LOCKDETCLK_INVERTED : bit := '0';
     PLL0_CFG : bit_vector := X"01F03DC";
     PLL0_DMON_CFG : bit := '0';
     PLL0_FBDIV : integer := 4;
     PLL0_FBDIV_45 : integer := 5;
     PLL0_INIT_CFG : bit_vector := X"00001E";
     PLL0_LOCK_CFG : bit_vector := X"1E8";
     PLL0_REFCLK_DIV : integer := 1;
     PLL1_CFG : bit_vector := X"01F03DC";
     PLL1_DMON_CFG : bit := '0';
     PLL1_FBDIV : integer := 4;
     PLL1_FBDIV_45 : integer := 5;
     PLL1_INIT_CFG : bit_vector := X"00001E";
     PLL1_LOCK_CFG : bit_vector := X"1E8";
     PLL1_REFCLK_DIV : integer := 1;
     PLL_CLKOUT_CFG : bit_vector := "00000000";
     RSVD_ATTR0 : bit_vector := X"0000";
     RSVD_ATTR1 : bit_vector := X"0000";
     SIM_PLL0REFCLK_SEL : bit_vector := "001";
     SIM_PLL1REFCLK_SEL : bit_vector := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "1.0"
  );
  port (
     DMONITOROUT : out std_logic_vector(7 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PLL0FBCLKLOST : out std_ulogic;
     PLL0LOCK : out std_ulogic;
     PLL0OUTCLK : out std_ulogic;
     PLL0OUTREFCLK : out std_ulogic;
     PLL0REFCLKLOST : out std_ulogic;
     PLL1FBCLKLOST : out std_ulogic;
     PLL1LOCK : out std_ulogic;
     PLL1OUTCLK : out std_ulogic;
     PLL1OUTREFCLK : out std_ulogic;
     PLL1REFCLKLOST : out std_ulogic;
     PMARSVDOUT : out std_logic_vector(15 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(7 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTEASTREFCLK0 : in std_ulogic;
     GTEASTREFCLK1 : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTWESTREFCLK0 : in std_ulogic;
     GTWESTREFCLK1 : in std_ulogic;
     PLL0LOCKDETCLK : in std_ulogic;
     PLL0LOCKEN : in std_ulogic;
     PLL0PD : in std_ulogic;
     PLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     PLL0RESET : in std_ulogic;
     PLL1LOCKDETCLK : in std_ulogic;
     PLL1LOCKEN : in std_ulogic;
     PLL1PD : in std_ulogic;
     PLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     PLL1RESET : in std_ulogic;
     PLLRSVD1 : in std_logic_vector(15 downto 0);
     PLLRSVD2 : in std_logic_vector(4 downto 0);
     PMARSVD : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTPE2_COMMON : component is "PRIMITIVE";

----- component GTXE2_CHANNEL -----
component GTXE2_CHANNEL
  generic (
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : bit_vector := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : bit_vector := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : bit_vector := "0101111100";
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_3 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_4 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_2 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_3 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_4 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 1;
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_1 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_2 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_3 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_4 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 1;
     CPLL_CFG : bit_vector := X"B007D8";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 5;
     CPLL_INIT_CFG : bit_vector := X"00001E";
     CPLL_LOCK_CFG : bit_vector := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DMONITOR_CFG : bit_vector := X"000A00";
     ES_CONTROL : bit_vector := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : bit_vector := X"000";
     ES_PMA_CFG : bit_vector := "0000000000";
     ES_PRESCALE : bit_vector := "00000";
     ES_QUALIFIER : bit_vector := X"00000000000000000000";
     ES_QUAL_MASK : bit_vector := X"00000000000000000000";
     ES_SDATA_MASK : bit_vector := X"00000000000000000000";
     ES_VERT_OFFSET : bit_vector := "000000000";
     FTS_DESKEW_SEQ_ENABLE : bit_vector := "1111";
     FTS_LANE_DESKEW_CFG : bit_vector := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : bit_vector := "000";
     IS_CPLLLOCKDETCLK_INVERTED : bit := '0';
     IS_DRPCLK_INVERTED : bit := '0';
     IS_GTGREFCLK_INVERTED : bit := '0';
     IS_RXUSRCLK2_INVERTED : bit := '0';
     IS_RXUSRCLK_INVERTED : bit := '0';
     IS_TXPHDLYTSTCLK_INVERTED : bit := '0';
     IS_TXUSRCLK2_INVERTED : bit := '0';
     IS_TXUSRCLK_INVERTED : bit := '0';
     OUTREFCLK_SEL_INV : bit_vector := "11";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD_ATTR : bit_vector := X"000000000000";
     PD_TRANS_TIME_FROM_P2 : bit_vector := X"03C";
     PD_TRANS_TIME_NONE_P2 : bit_vector := X"19";
     PD_TRANS_TIME_TO_P2 : bit_vector := X"64";
     PMA_RSV : bit_vector := X"00000000";
     PMA_RSV2 : bit_vector := X"2050";
     PMA_RSV3 : bit_vector := "00";
     PMA_RSV4 : bit_vector := X"00000000";
     RXBUFRESET_TIME : bit_vector := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : bit_vector := "1000";
     RXBUF_EIDLE_LO_CNT : bit_vector := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 61;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : bit_vector := "00001";
     RXCDRPHRESET_TIME : bit_vector := "00001";
     RXCDR_CFG : bit_vector := X"0B000023FF20400020";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG : bit_vector := "010101";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXDFELPMRESET_TIME : bit_vector := "0001111";
     RXDLY_CFG : bit_vector := X"001F";
     RXDLY_LCFG : bit_vector := X"030";
     RXDLY_TAP_CFG : bit_vector := X"0000";
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : bit_vector := "00001";
     RXLPM_HF_CFG : bit_vector := "00000011110000";
     RXLPM_LF_CFG : bit_vector := "00000011110000";
     RXOOB_CFG : bit_vector := "0000110";
     RXOUT_DIV : integer := 2;
     RXPCSRESET_TIME : bit_vector := "00001";
     RXPHDLY_CFG : bit_vector := X"084020";
     RXPH_CFG : bit_vector := X"000000";
     RXPH_MONITOR_SEL : bit_vector := "00000";
     RXPMARESET_TIME : bit_vector := "00011";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RX_BIAS_CFG : bit_vector := "000000000000";
     RX_BUFFER_CFG : bit_vector := "000000";
     RX_CLK25_DIV : integer := 7;
     RX_CLKMUX_PD : bit := '1';
     RX_CM_SEL : bit_vector := "11";
     RX_CM_TRIM : bit_vector := "100";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : bit_vector := "000000";
     RX_DEBUG_CFG : bit_vector := "000000000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DFE_GAIN_CFG : bit_vector := X"180E0F";
     RX_DFE_H2_CFG : bit_vector := "000111100000";
     RX_DFE_H3_CFG : bit_vector := "000111100000";
     RX_DFE_H4_CFG : bit_vector := "00011110000";
     RX_DFE_H5_CFG : bit_vector := "00011110000";
     RX_DFE_KL_CFG : bit_vector := "0001111110000";
     RX_DFE_KL_CFG2 : bit_vector := X"3008E56A";
     RX_DFE_LPM_CFG : bit_vector := X"0904";
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DFE_UT_CFG : bit_vector := "00111111000000000";
     RX_DFE_VP_CFG : bit_vector := "00011111100000000";
     RX_DFE_XYD_CFG : bit_vector := "0000000010000";
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_INT_DATAWIDTH : integer := 0;
     RX_OS_CFG : bit_vector := "0001111110000";
     RX_SIG_VALID_DLY : integer := 10;
     RX_XCLK_SEL : string := "RXREC";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : bit_vector := "1111";
     SATA_BURST_VAL : bit_vector := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : bit_vector := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_CPLLREFCLK_SEL : bit_vector := "001";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "X";
     SIM_VERSION : string := "4.0";
     TERM_RCAL_CFG : bit_vector := "10000";
     TERM_RCAL_OVRD : bit := '0';
     TRANS_TIME_RATE : bit_vector := X"0E";
     TST_RSV : bit_vector := X"00000000";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : bit_vector := X"001F";
     TXDLY_LCFG : bit_vector := X"030";
     TXDLY_TAP_CFG : bit_vector := X"0000";
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 2;
     TXPCSRESET_TIME : bit_vector := "00001";
     TXPHDLY_CFG : bit_vector := X"084020";
     TXPH_CFG : bit_vector := X"0780";
     TXPH_MONITOR_SEL : bit_vector := "00000";
     TXPMARESET_TIME : bit_vector := "00001";
     TX_CLK25_DIV : integer := 7;
     TX_CLKMUX_PD : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DEEMPH0 : bit_vector := "00000";
     TX_DEEMPH1 : bit_vector := "00000";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : bit_vector := "110";
     TX_EIDLE_DEASSERT_DELAY : bit_vector := "100";
     TX_INT_DATAWIDTH : integer := 0;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : bit_vector := "1001110";
     TX_MARGIN_FULL_1 : bit_vector := "1001001";
     TX_MARGIN_FULL_2 : bit_vector := "1000101";
     TX_MARGIN_FULL_3 : bit_vector := "1000010";
     TX_MARGIN_FULL_4 : bit_vector := "1000000";
     TX_MARGIN_LOW_0 : bit_vector := "1000110";
     TX_MARGIN_LOW_1 : bit_vector := "1000100";
     TX_MARGIN_LOW_2 : bit_vector := "1000010";
     TX_MARGIN_LOW_3 : bit_vector := "1000000";
     TX_MARGIN_LOW_4 : bit_vector := "1000000";
     TX_PREDRIVER_MODE : bit := '0';
     TX_QPI_STATUS_EN : bit := '0';
     TX_RXDETECT_CFG : bit_vector := X"1832";
     TX_RXDETECT_REF : bit_vector := "100";
     TX_XCLK_SEL : string := "TXUSR";
     UCODEER_CLR : bit := '0'
  );
  port (
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(7 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     GTXTXN : out std_ulogic;
     GTXTXP : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHARISCOMMA : out std_logic_vector(7 downto 0);
     RXCHARISK : out std_logic_vector(7 downto 0);
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXDATA : out std_logic_vector(63 downto 0);
     RXDATAVALID : out std_ulogic;
     RXDISPERR : out std_logic_vector(7 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(2 downto 0);
     RXHEADERVALID : out std_ulogic;
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXNOTINTABLE : out std_logic_vector(7 downto 0);
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHMONITOR : out std_logic_vector(4 downto 0);
     RXPHSLIPMONITOR : out std_logic_vector(4 downto 0);
     RXPRBSERR : out std_ulogic;
     RXQPISENN : out std_ulogic;
     RXQPISENP : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSTARTOFSEQ : out std_ulogic;
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXVALID : out std_ulogic;
     TSTOUT : out std_logic_vector(9 downto 0);
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXGEARBOXREADY : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXQPISENN : out std_ulogic;
     TXQPISENP : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD : in std_logic_vector(3 downto 0);
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     GTXRXN : in std_ulogic;
     GTXRXP : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     PMARSVDIN2 : in std_logic_vector(4 downto 0);
     QPLLCLK : in std_ulogic;
     QPLLREFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDDIEN : in std_ulogic;
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFECM1EN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDFEXYDHOLD : in std_ulogic;
     RXDFEXYDOVRDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(2 downto 0);
     RXQPIEN : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXSLIDE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SETERRSTATUS : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCHARDISPMODE : in std_logic_vector(7 downto 0);
     TXCHARDISPVAL : in std_logic_vector(7 downto 0);
     TXCHARISK : in std_logic_vector(7 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXDATA : in std_logic_vector(63 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(2 downto 0);
     TXINHIBIT : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPISOPD : in std_ulogic;
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(2 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXQPIBIASEN : in std_ulogic;
     TXQPISTRONGPDOWN : in std_ulogic;
     TXQPIWEAKPUP : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSTARTSEQ : in std_ulogic;
     TXSWING : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTXE2_CHANNEL : component is "PRIMITIVE";

----- component GTXE2_COMMON -----
component GTXE2_COMMON
  generic (
     BIAS_CFG : bit_vector := X"0000040000001000";
     COMMON_CFG : bit_vector := X"00000000";
     IS_DRPCLK_INVERTED : bit := '0';
     IS_GTGREFCLK_INVERTED : bit := '0';
     IS_QPLLLOCKDETCLK_INVERTED : bit := '0';
     QPLL_CFG : bit_vector := X"0680181";
     QPLL_CLKOUT_CFG : bit_vector := "0000";
     QPLL_COARSE_FREQ_OVRD : bit_vector := "010000";
     QPLL_COARSE_FREQ_OVRD_EN : bit := '0';
     QPLL_CP : bit_vector := "0000011111";
     QPLL_CP_MONITOR_EN : bit := '0';
     QPLL_DMONITOR_SEL : bit := '0';
     QPLL_FBDIV : bit_vector := "0000000000";
     QPLL_FBDIV_MONITOR_EN : bit := '0';
     QPLL_FBDIV_RATIO : bit := '0';
     QPLL_INIT_CFG : bit_vector := X"000006";
     QPLL_LOCK_CFG : bit_vector := X"21E8";
     QPLL_LPF : bit_vector := "1111";
     QPLL_REFCLK_DIV : integer := 2;
     SIM_QPLLREFCLK_SEL : bit_vector := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "4.0"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     QPLLDMONITOR : out std_logic_vector(7 downto 0);
     QPLLFBCLKLOST : out std_ulogic;
     QPLLLOCK : out std_ulogic;
     QPLLOUTCLK : out std_ulogic;
     QPLLOUTREFCLK : out std_ulogic;
     QPLLREFCLKLOST : out std_ulogic;
     REFCLKOUTMONITOR : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     DRPADDR : in std_logic_vector(7 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     PMARSVD : in std_logic_vector(7 downto 0);
     QPLLLOCKDETCLK : in std_ulogic;
     QPLLLOCKEN : in std_ulogic;
     QPLLOUTRESET : in std_ulogic;
     QPLLPD : in std_ulogic;
     QPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     QPLLRESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(15 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTXE2_COMMON : component is "PRIMITIVE";

----- component GTYE3_CHANNEL -----
component GTYE3_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : std_logic_vector(15 downto 0) := X"9200";
     ADAPT_CFG1 : std_logic_vector(15 downto 0) := X"801C";
     ADAPT_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : std_logic_vector(9 downto 0) := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : std_logic_vector(9 downto 0) := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : std_logic_vector(9 downto 0) := "0101111100";
     AUTO_BW_SEL_BYPASS : bit := '0';
     A_RXOSCALRESET : bit := '0';
     A_RXPROGDIVRESET : bit := '0';
     A_TXDIFFCTRL : std_logic_vector(4 downto 0) := "01100";
     A_TXPROGDIVRESET : bit := '0';
     CAPBYPASS_FORCE : bit := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CDR_SWAP_MODE_EN : bit := '0';
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : std_logic_vector(9 downto 0) := "0101111100";
     CHAN_BOND_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 2;
     CH_HSPMUX : std_logic_vector(15 downto 0) := X"0000";
     CKCAL1_CFG_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL_RSVD0 : std_logic_vector(15 downto 0) := X"4000";
     CKCAL_RSVD1 : std_logic_vector(15 downto 0) := X"0000";
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : std_logic_vector(9 downto 0) := "0100011100";
     CLK_COR_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 2;
     CPLL_CFG0 : std_logic_vector(15 downto 0) := X"20FA";
     CPLL_CFG1 : std_logic_vector(15 downto 0) := X"24AA";
     CPLL_CFG2 : std_logic_vector(15 downto 0) := X"F007";
     CPLL_CFG3 : std_logic_vector(5 downto 0) := "00" & X"0";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 4;
     CPLL_INIT_CFG0 : std_logic_vector(15 downto 0) := X"001E";
     CPLL_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     CPLL_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     CTLE3_OCAP_EXT_CTRL : std_logic_vector(2 downto 0) := "000";
     CTLE3_OCAP_EXT_EN : bit := '0';
     DDI_CTRL : std_logic_vector(1 downto 0) := "00";
     DDI_REALIGN_WAIT : integer := 15;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DFE_D_X_REL_POS : bit := '0';
     DFE_VCM_COMP_EN : bit := '0';
     DMONITOR_CFG0 : std_logic_vector(9 downto 0) := "00" & X"00";
     DMONITOR_CFG1 : std_logic_vector(7 downto 0) := X"00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : std_logic_vector(5 downto 0) := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : std_logic_vector(11 downto 0) := X"000";
     ES_PMA_CFG : std_logic_vector(9 downto 0) := "0000000000";
     ES_PRESCALE : std_logic_vector(4 downto 0) := "00000";
     ES_QUALIFIER0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER9 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     EVODD_PHI_CFG : std_logic_vector(10 downto 0) := "00000000000";
     EYE_SCAN_SWAP_EN : bit := '0';
     FTS_DESKEW_SEQ_ENABLE : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_CFG : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : std_logic_vector(4 downto 0) := "00000";
     GM_BIAS_SELECT : bit := '0';
     ISCAN_CK_PH_SEL2 : bit := '0';
     LOCAL_MASTER : bit := '0';
     LOOP0_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP10_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP11_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP12_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP13_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP1_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP2_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP3_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP4_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP5_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP6_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP7_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP8_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP9_CFG : std_logic_vector(15 downto 0) := X"0000";
     LPBK_BIAS_CTRL : std_logic_vector(2 downto 0) := "000";
     LPBK_EN_RCAL_B : bit := '0';
     LPBK_EXT_RCAL : std_logic_vector(3 downto 0) := "0000";
     LPBK_RG_CTRL : std_logic_vector(3 downto 0) := "0000";
     OOBDIVCTL : std_logic_vector(1 downto 0) := "00";
     OOB_PWRUP : bit := '0';
     PCI3_AUTO_REALIGN : string := "FRST_SMPL";
     PCI3_PIPE_RX_ELECIDLE : bit := '1';
     PCI3_RX_ASYNC_EBUF_BYPASS : std_logic_vector(1 downto 0) := "00";
     PCI3_RX_ELECIDLE_EI2_ENABLE : bit := '0';
     PCI3_RX_ELECIDLE_H2L_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_H2L_DISABLE : std_logic_vector(2 downto 0) := "000";
     PCI3_RX_ELECIDLE_HI_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_LP4_DISABLE : bit := '0';
     PCI3_RX_FIFO_DISABLE : bit := '0';
     PCIE_BUFG_DIV_CTRL : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD0 : std_logic_vector(15 downto 0) := "0000000000000000";
     PCS_RSVD1 : std_logic_vector(2 downto 0) := "000";
     PD_TRANS_TIME_FROM_P2 : std_logic_vector(11 downto 0) := X"03C";
     PD_TRANS_TIME_NONE_P2 : std_logic_vector(7 downto 0) := X"19";
     PD_TRANS_TIME_TO_P2 : std_logic_vector(7 downto 0) := X"64";
     PLL_SEL_MODE_GEN12 : std_logic_vector(1 downto 0) := "00";
     PLL_SEL_MODE_GEN3 : std_logic_vector(1 downto 0) := "00";
     PMA_RSV0 : std_logic_vector(15 downto 0) := X"00E0";
     PMA_RSV1 : std_logic_vector(15 downto 0) := X"000A";
     PREIQ_FREQ_BST : integer := 0;
     PROCESS_PAR : std_logic_vector(2 downto 0) := "010";
     RATE_SW_USE_DRP : bit := '0';
     RESET_POWERSAVE_DISABLE : bit := '0';
     RXBUFRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : std_logic_vector(3 downto 0) := "1000";
     RXBUF_EIDLE_LO_CNT : std_logic_vector(3 downto 0) := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 0;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDRPHRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDR_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG0_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG1 : std_logic_vector(15 downto 0) := X"0300";
     RXCDR_CFG1_GEN3 : std_logic_vector(15 downto 0) := X"0300";
     RXCDR_CFG2 : std_logic_vector(15 downto 0) := X"0060";
     RXCDR_CFG2_GEN3 : std_logic_vector(15 downto 0) := X"0060";
     RXCDR_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG3_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG4 : std_logic_vector(15 downto 0) := X"0002";
     RXCDR_CFG4_GEN3 : std_logic_vector(15 downto 0) := X"0002";
     RXCDR_CFG5 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG5_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG0 : std_logic_vector(15 downto 0) := X"0001";
     RXCDR_LOCK_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXCFOKDONE_SRC : std_logic_vector(1 downto 0) := "00";
     RXCFOK_CFG0 : std_logic_vector(15 downto 0) := X"3E00";
     RXCFOK_CFG1 : std_logic_vector(15 downto 0) := X"0042";
     RXCFOK_CFG2 : std_logic_vector(15 downto 0) := X"002D";
     RXDFELPMRESET_TIME : std_logic_vector(6 downto 0) := "0001111";
     RXDFELPM_KL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPM_KL_CFG1 : std_logic_vector(15 downto 0) := X"0022";
     RXDFELPM_KL_CFG2 : std_logic_vector(15 downto 0) := X"0100";
     RXDFE_CFG0 : std_logic_vector(15 downto 0) := X"4C00";
     RXDFE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG0 : std_logic_vector(15 downto 0) := X"1E00";
     RXDFE_GC_CFG1 : std_logic_vector(15 downto 0) := X"1900";
     RXDFE_GC_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H3_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H3_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H4_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H4_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_H5_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H5_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H6_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H6_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H7_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H7_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H8_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H8_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H9_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H9_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HA_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HA_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HB_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HB_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HD_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HE_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HF_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_OS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG1 : std_logic_vector(15 downto 0) := X"0200";
     RXDFE_PWR_SAVING : bit := '0';
     RXDFE_UT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_UT_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_VP_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_VP_CFG1 : std_logic_vector(15 downto 0) := X"0022";
     RXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     RXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     RXELECIDLE_CFG : string := "SIGCFG_4";
     RXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXLPM_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_GC_CFG : std_logic_vector(15 downto 0) := X"0200";
     RXLPM_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXLPM_OS_CFG0 : std_logic_vector(15 downto 0) := X"0400";
     RXLPM_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXOOB_CFG : std_logic_vector(8 downto 0) := "000000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : std_logic_vector(4 downto 0) := "00011";
     RXOUT_DIV : integer := 4;
     RXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPHBEACON_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXPHDLY_CFG : std_logic_vector(15 downto 0) := X"2020";
     RXPHSAMP_CFG : std_logic_vector(15 downto 0) := X"2100";
     RXPHSLIP_CFG : std_logic_vector(15 downto 0) := X"9933";
     RXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     RXPI_AUTO_BW_SEL_BYPASS : bit := '0';
     RXPI_CFG : std_logic_vector(15 downto 0) := X"0100";
     RXPI_LPM : bit := '0';
     RXPI_RSV0 : std_logic_vector(15 downto 0) := X"0000";
     RXPI_SEL_LC : std_logic_vector(1 downto 0) := "00";
     RXPI_STARTCODE : std_logic_vector(1 downto 0) := "00";
     RXPI_VREFSEL : bit := '0';
     RXPMACLK_SEL : string := "DATA";
     RXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXPRBS_LINKACQ_CNT : integer := 15;
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_AFE_CM_EN : bit := '0';
     RX_BIAS_CFG0 : std_logic_vector(15 downto 0) := X"1534";
     RX_BUFFER_CFG : std_logic_vector(5 downto 0) := "000000";
     RX_CAPFF_SARC_ENB : bit := '0';
     RX_CLK25_DIV : integer := 8;
     RX_CLKMUX_EN : bit := '1';
     RX_CLK_SLIP_OVRD : std_logic_vector(4 downto 0) := "00000";
     RX_CM_BUF_CFG : std_logic_vector(3 downto 0) := "1010";
     RX_CM_BUF_PD : bit := '0';
     RX_CM_SEL : integer := 3;
     RX_CM_TRIM : integer := 10;
     RX_CTLE1_KHKL : bit := '0';
     RX_CTLE2_KHKL : bit := '0';
     RX_CTLE3_AGC : bit := '0';
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : std_logic_vector(5 downto 0) := "000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DEGEN_CTRL : std_logic_vector(2 downto 0) := "011";
     RX_DFELPM_CFG0 : integer := 0;
     RX_DFELPM_CFG1 : bit := '1';
     RX_DFELPM_KLKH_AGC_STUP_EN : bit := '1';
     RX_DFE_AGC_CFG0 : std_logic_vector(1 downto 0) := "00";
     RX_DFE_AGC_CFG1 : integer := 2;
     RX_DFE_KL_LPM_KH_CFG0 : integer := 1;
     RX_DFE_KL_LPM_KH_CFG1 : integer := 2;
     RX_DFE_KL_LPM_KL_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KL_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_DIV2_MODE_B : bit := '0';
     RX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RX_EN_CTLE_RCAL_B : bit := '0';
     RX_EN_HI_LR : bit := '0';
     RX_EXT_RL_CTRL : std_logic_vector(8 downto 0) := "000000000";
     RX_EYESCAN_VS_CODE : std_logic_vector(6 downto 0) := "0000000";
     RX_EYESCAN_VS_NEG_DIR : bit := '0';
     RX_EYESCAN_VS_RANGE : std_logic_vector(1 downto 0) := "00";
     RX_EYESCAN_VS_UT_SIGN : bit := '0';
     RX_FABINT_USRCLK_FLOP : bit := '0';
     RX_INT_DATAWIDTH : integer := 1;
     RX_PMA_POWER_SAVE : bit := '0';
     RX_PROGDIV_CFG : real := 0.0;
     RX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     RX_RESLOAD_CTRL : std_logic_vector(3 downto 0) := "0000";
     RX_RESLOAD_OVRD : bit := '0';
     RX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     RX_SIG_VALID_DLY : integer := 11;
     RX_SUM_DFETAPREP_EN : bit := '0';
     RX_SUM_IREF_TUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_VCMTUNE : std_logic_vector(3 downto 0) := "1000";
     RX_SUM_VCM_OVWR : bit := '0';
     RX_SUM_VREF_TUNE : std_logic_vector(2 downto 0) := "100";
     RX_TUNE_AFE_OS : std_logic_vector(1 downto 0) := "00";
     RX_VREG_CTRL : std_logic_vector(2 downto 0) := "101";
     RX_VREG_PDB : bit := '1';
     RX_WIDEMODE_CDR : std_logic_vector(1 downto 0) := "01";
     RX_XCLK_SEL : string := "RXDES";
     RX_XMODE_SEL : bit := '0';
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : std_logic_vector(3 downto 0) := "1111";
     SATA_BURST_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_MODE : string := "FAST";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : bit := '0';
     SIM_VERSION : integer := 2;
     TAPDLY_SET_TX : std_logic_vector(1 downto 0) := "00";
     TEMPERATURE_PAR : std_logic_vector(3 downto 0) := "0010";
     TERM_RCAL_CFG : std_logic_vector(14 downto 0) := "100001000010000";
     TERM_RCAL_OVRD : std_logic_vector(2 downto 0) := "000";
     TRANS_TIME_RATE : std_logic_vector(7 downto 0) := X"0E";
     TST_RSV0 : std_logic_vector(7 downto 0) := X"00";
     TST_RSV1 : std_logic_vector(7 downto 0) := X"00";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     TXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     TXFIFO_ADDR_CFG : string := "LOW";
     TXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 4;
     TXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXPHDLY_CFG0 : std_logic_vector(15 downto 0) := X"2020";
     TXPHDLY_CFG1 : std_logic_vector(15 downto 0) := X"0001";
     TXPH_CFG : std_logic_vector(15 downto 0) := X"0123";
     TXPH_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     TXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     TXPI_CFG0 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG1 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG2 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG3 : bit := '0';
     TXPI_CFG4 : bit := '1';
     TXPI_CFG5 : std_logic_vector(2 downto 0) := "000";
     TXPI_GRAY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_LPM : bit := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : std_logic_vector(7 downto 0) := "00000000";
     TXPI_RSV0 : std_logic_vector(15 downto 0) := X"0000";
     TXPI_SYNFREQ_PPM : std_logic_vector(2 downto 0) := "000";
     TXPI_VREFSEL : bit := '0';
     TXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 8;
     TX_CLKMUX_EN : bit := '1';
     TX_CLKREG_PDB : bit := '0';
     TX_CLKREG_SET : std_logic_vector(2 downto 0) := "000";
     TX_DATA_WIDTH : integer := 20;
     TX_DCD_CFG : std_logic_vector(5 downto 0) := "000010";
     TX_DCD_EN : bit := '0';
     TX_DEEMPH0 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH1 : std_logic_vector(5 downto 0) := "000000";
     TX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_DRVMUX_CTRL : integer := 2;
     TX_EIDLE_ASSERT_DELAY : std_logic_vector(2 downto 0) := "110";
     TX_EIDLE_DEASSERT_DELAY : std_logic_vector(2 downto 0) := "100";
     TX_EML_PHI_TUNE : bit := '0';
     TX_FABINT_USRCLK_FLOP : bit := '0';
     TX_FIFO_BYP_EN : bit := '0';
     TX_IDLE_DATA_ZERO : bit := '0';
     TX_INT_DATAWIDTH : integer := 1;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : std_logic_vector(6 downto 0) := "1001110";
     TX_MARGIN_FULL_1 : std_logic_vector(6 downto 0) := "1001001";
     TX_MARGIN_FULL_2 : std_logic_vector(6 downto 0) := "1000101";
     TX_MARGIN_FULL_3 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_FULL_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_0 : std_logic_vector(6 downto 0) := "1000110";
     TX_MARGIN_LOW_1 : std_logic_vector(6 downto 0) := "1000100";
     TX_MARGIN_LOW_2 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_LOW_3 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     TX_PHICAL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     TX_PHICAL_CFG1 : std_logic_vector(15 downto 0) := X"7E00";
     TX_PHICAL_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     TX_PI_BIASSET : integer := 0;
     TX_PI_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     TX_PI_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     TX_PI_DIV2_MODE_B : bit := '0';
     TX_PI_SEL_QPLL0 : bit := '0';
     TX_PI_SEL_QPLL1 : bit := '0';
     TX_PMADATA_OPT : bit := '0';
     TX_PMA_POWER_SAVE : bit := '0';
     TX_PREDRV_CTRL : integer := 2;
     TX_PROGCLK_SEL : string := "POSTPI";
     TX_PROGDIV_CFG : real := 0.0;
     TX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     TX_RXDETECT_CFG : std_logic_vector(13 downto 0) := "00" & X"032";
     TX_RXDETECT_REF : integer := 3;
     TX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     TX_SARC_LPBK_ENB : bit := '0';
     TX_XCLK_SEL : string := "TXOUT";
     USE_PCS_CLK_PHASE_SEL : bit := '0'
  );
  port (
     BUFGTCE : out std_logic_vector(2 downto 0);
     BUFGTCEMASK : out std_logic_vector(2 downto 0);
     BUFGTDIV : out std_logic_vector(8 downto 0);
     BUFGTRESET : out std_logic_vector(2 downto 0);
     BUFGTRSTMASK : out std_logic_vector(2 downto 0);
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(16 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTPOWERGOOD : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     GTYTXN : out std_ulogic;
     GTYTXP : out std_ulogic;
     PCIERATEGEN3 : out std_ulogic;
     PCIERATEIDLE : out std_ulogic;
     PCIERATEQPLLPD : out std_logic_vector(1 downto 0);
     PCIERATEQPLLRESET : out std_logic_vector(1 downto 0);
     PCIESYNCTXSYNCDONE : out std_ulogic;
     PCIEUSERGEN3RDY : out std_ulogic;
     PCIEUSERPHYSTATUSRST : out std_ulogic;
     PCIEUSERRATESTART : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     PINRSRVDAS : out std_logic_vector(7 downto 0);
     RESETEXCEPTION : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCDRPHDONE : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCKCALDONE : out std_ulogic;
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXCTRL0 : out std_logic_vector(15 downto 0);
     RXCTRL1 : out std_logic_vector(15 downto 0);
     RXCTRL2 : out std_logic_vector(7 downto 0);
     RXCTRL3 : out std_logic_vector(7 downto 0);
     RXDATA : out std_logic_vector(127 downto 0);
     RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHALIGNERR : out std_ulogic;
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXPRBSLOCKED : out std_ulogic;
     RXPRGDIVRESETDONE : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRECCLKOUT : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSLIDERDY : out std_ulogic;
     RXSLIPDONE : out std_ulogic;
     RXSLIPOUTCLKRDY : out std_ulogic;
     RXSLIPPMARDY : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDCCDONE : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXPRGDIVRESETDONE : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CDRSTEPDIR : in std_ulogic;
     CDRSTEPSQ : in std_ulogic;
     CDRSTEPSX : in std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     ELPCALDVORWREN : in std_ulogic;
     ELPCALPAORWREN : in std_ulogic;
     EVODDPHICALDONE : in std_ulogic;
     EVODDPHICALSTART : in std_ulogic;
     EVODDPHIDRDEN : in std_ulogic;
     EVODDPHIDWREN : in std_ulogic;
     EVODDPHIXRDEN : in std_ulogic;
     EVODDPHIXWREN : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     GTYRXN : in std_ulogic;
     GTYRXP : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     LOOPRSVD : in std_logic_vector(15 downto 0);
     LPBKRXTXSEREN : in std_ulogic;
     LPBKTXRXSEREN : in std_ulogic;
     PCIEEQRXEQADAPTDONE : in std_ulogic;
     PCIERSTIDLE : in std_ulogic;
     PCIERSTTXSYNCSTART : in std_ulogic;
     PCIEUSERRATEDONE : in std_ulogic;
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     QPLL0CLK : in std_ulogic;
     QPLL0REFCLK : in std_ulogic;
     QPLL1CLK : in std_ulogic;
     QPLL1REFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RSTCLKENTX : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCKCALRESET : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDCCFORCESTART : in std_ulogic;
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP10HOLD : in std_ulogic;
     RXDFETAP10OVRDEN : in std_ulogic;
     RXDFETAP11HOLD : in std_ulogic;
     RXDFETAP11OVRDEN : in std_ulogic;
     RXDFETAP12HOLD : in std_ulogic;
     RXDFETAP12OVRDEN : in std_ulogic;
     RXDFETAP13HOLD : in std_ulogic;
     RXDFETAP13OVRDEN : in std_ulogic;
     RXDFETAP14HOLD : in std_ulogic;
     RXDFETAP14OVRDEN : in std_ulogic;
     RXDFETAP15HOLD : in std_ulogic;
     RXDFETAP15OVRDEN : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFETAP8HOLD : in std_ulogic;
     RXDFETAP8OVRDEN : in std_ulogic;
     RXDFETAP9HOLD : in std_ulogic;
     RXDFETAP9OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLATCLK : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMGCHOLD : in std_ulogic;
     RXLPMGCOVRDEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXLPMOSHOLD : in std_ulogic;
     RXLPMOSOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPLLCLKSEL : in std_logic_vector(1 downto 0);
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(3 downto 0);
     RXPROGDIVRESET : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSLIPOUTCLK : in std_ulogic;
     RXSLIPPMA : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXCTRL0 : in std_logic_vector(15 downto 0);
     TXCTRL1 : in std_logic_vector(15 downto 0);
     TXCTRL2 : in std_logic_vector(7 downto 0);
     TXDATA : in std_logic_vector(127 downto 0);
     TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     TXDCCFORCESTART : in std_ulogic;
     TXDCCRESET : in std_ulogic;
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(4 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXELFORCESTART : in std_ulogic;
     TXHEADER : in std_logic_vector(5 downto 0);
     TXINHIBIT : in std_ulogic;
     TXLATCLK : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPLLCLKSEL : in std_logic_vector(1 downto 0);
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(3 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPROGDIVRESET : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTYE3_CHANNEL : component is "PRIMITIVE";

----- component GTYE3_COMMON -----
component GTYE3_COMMON
  generic (
     A_SDM1DATA1_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     A_SDM1DATA1_1 : std_logic_vector(8 downto 0) := "000000000";
     BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG_RSVD : std_logic_vector(9 downto 0) := "0000000000";
     COMMON_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     POR_CFG : std_logic_vector(15 downto 0) := X"0004";
     PPF0_CFG : std_logic_vector(15 downto 0) := X"0FFF";
     PPF1_CFG : std_logic_vector(15 downto 0) := X"0FFF";
     QPLL0CLKOUT_RATE : string := "FULL";
     QPLL0_CFG0 : std_logic_vector(15 downto 0) := X"301C";
     QPLL0_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL0_CFG2 : std_logic_vector(15 downto 0) := X"0780";
     QPLL0_CFG2_G3 : std_logic_vector(15 downto 0) := X"0780";
     QPLL0_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL0_CFG4 : std_logic_vector(15 downto 0) := X"0021";
     QPLL0_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_FBDIV : integer := 66;
     QPLL0_FBDIV_G3 : integer := 80;
     QPLL0_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL0_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL0_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL0_LPF : std_logic_vector(9 downto 0) := "1011111111";
     QPLL0_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_REFCLK_DIV : integer := 2;
     QPLL0_SDM_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_SDM_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_SDM_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1CLKOUT_RATE : string := "FULL";
     QPLL1_CFG0 : std_logic_vector(15 downto 0) := X"301C";
     QPLL1_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG2 : std_logic_vector(15 downto 0) := X"0780";
     QPLL1_CFG2_G3 : std_logic_vector(15 downto 0) := X"0780";
     QPLL1_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL1_CFG4 : std_logic_vector(15 downto 0) := X"0021";
     QPLL1_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_FBDIV : integer := 66;
     QPLL1_FBDIV_G3 : integer := 80;
     QPLL1_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL1_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL1_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LPF : std_logic_vector(9 downto 0) := "1011111111";
     QPLL1_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_REFCLK_DIV : integer := 2;
     QPLL1_SDM_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_SDM_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_SDM_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR0 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR1 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR3 : std_logic_vector(15 downto 0) := X"0000";
     RXRECCLKOUT0_SEL : std_logic_vector(1 downto 0) := "00";
     RXRECCLKOUT1_SEL : std_logic_vector(1 downto 0) := "00";
     SARC_EN : bit := '1';
     SARC_SEL : bit := '0';
     SDM0INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SIM_MODE : string := "FAST";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : integer := 2
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT0 : out std_logic_vector(7 downto 0);
     PMARSVDOUT1 : out std_logic_vector(7 downto 0);
     QPLL0FBCLKLOST : out std_ulogic;
     QPLL0LOCK : out std_ulogic;
     QPLL0OUTCLK : out std_ulogic;
     QPLL0OUTREFCLK : out std_ulogic;
     QPLL0REFCLKLOST : out std_ulogic;
     QPLL1FBCLKLOST : out std_ulogic;
     QPLL1LOCK : out std_ulogic;
     QPLL1OUTCLK : out std_ulogic;
     QPLL1OUTREFCLK : out std_ulogic;
     QPLL1REFCLKLOST : out std_ulogic;
     QPLLDMONITOR0 : out std_logic_vector(7 downto 0);
     QPLLDMONITOR1 : out std_logic_vector(7 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     RXRECCLK0_SEL : out std_logic_vector(1 downto 0);
     RXRECCLK1_SEL : out std_logic_vector(1 downto 0);
     SDM0FINALOUT : out std_logic_vector(3 downto 0);
     SDM0TESTDATA : out std_logic_vector(14 downto 0);
     SDM1FINALOUT : out std_logic_vector(3 downto 0);
     SDM1TESTDATA : out std_logic_vector(14 downto 0);
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTNORTHREFCLK00 : in std_ulogic;
     GTNORTHREFCLK01 : in std_ulogic;
     GTNORTHREFCLK10 : in std_ulogic;
     GTNORTHREFCLK11 : in std_ulogic;
     GTREFCLK00 : in std_ulogic;
     GTREFCLK01 : in std_ulogic;
     GTREFCLK10 : in std_ulogic;
     GTREFCLK11 : in std_ulogic;
     GTSOUTHREFCLK00 : in std_ulogic;
     GTSOUTHREFCLK01 : in std_ulogic;
     GTSOUTHREFCLK10 : in std_ulogic;
     GTSOUTHREFCLK11 : in std_ulogic;
     PMARSVD0 : in std_logic_vector(7 downto 0);
     PMARSVD1 : in std_logic_vector(7 downto 0);
     QPLL0CLKRSVD0 : in std_ulogic;
     QPLL0LOCKDETCLK : in std_ulogic;
     QPLL0LOCKEN : in std_ulogic;
     QPLL0PD : in std_ulogic;
     QPLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL0RESET : in std_ulogic;
     QPLL1CLKRSVD0 : in std_ulogic;
     QPLL1LOCKDETCLK : in std_ulogic;
     QPLL1LOCKEN : in std_ulogic;
     QPLL1PD : in std_ulogic;
     QPLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL1RESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(7 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     QPLLRSVD3 : in std_logic_vector(4 downto 0);
     QPLLRSVD4 : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic;
     SDM0DATA : in std_logic_vector(24 downto 0);
     SDM0RESET : in std_ulogic;
     SDM0WIDTH : in std_logic_vector(1 downto 0);
     SDM1DATA : in std_logic_vector(24 downto 0);
     SDM1RESET : in std_ulogic;
     SDM1WIDTH : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  GTYE3_COMMON : component is "PRIMITIVE";

----- component GTYE4_CHANNEL -----
component GTYE4_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : std_logic_vector(15 downto 0) := X"9200";
     ADAPT_CFG1 : std_logic_vector(15 downto 0) := X"801C";
     ADAPT_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : std_logic_vector(9 downto 0) := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : std_logic_vector(9 downto 0) := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : std_logic_vector(9 downto 0) := "0101111100";
     A_RXOSCALRESET : bit := '0';
     A_RXPROGDIVRESET : bit := '0';
     A_RXTERMINATION : bit := '1';
     A_TXDIFFCTRL : std_logic_vector(4 downto 0) := "01100";
     A_TXPROGDIVRESET : bit := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CDR_SWAP_MODE_EN : bit := '0';
     CFOK_PWRSVE_EN : bit := '1';
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : std_logic_vector(9 downto 0) := "0101111100";
     CHAN_BOND_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 2;
     CH_HSPMUX : std_logic_vector(15 downto 0) := X"2424";
     CKCAL1_CFG_0 : std_logic_vector(15 downto 0) := "1100000011000000";
     CKCAL1_CFG_1 : std_logic_vector(15 downto 0) := "0101000011000000";
     CKCAL1_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_0 : std_logic_vector(15 downto 0) := "1100000011000000";
     CKCAL2_CFG_1 : std_logic_vector(15 downto 0) := "1000000011000000";
     CKCAL2_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : std_logic_vector(9 downto 0) := "0100011100";
     CLK_COR_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 2;
     CPLL_CFG0 : std_logic_vector(15 downto 0) := X"01FA";
     CPLL_CFG1 : std_logic_vector(15 downto 0) := X"24A9";
     CPLL_CFG2 : std_logic_vector(15 downto 0) := X"6807";
     CPLL_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 4;
     CPLL_INIT_CFG0 : std_logic_vector(15 downto 0) := X"001E";
     CPLL_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     CTLE3_OCAP_EXT_CTRL : std_logic_vector(2 downto 0) := "000";
     CTLE3_OCAP_EXT_EN : bit := '0';
     DDI_CTRL : std_logic_vector(1 downto 0) := "00";
     DDI_REALIGN_WAIT : integer := 15;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DELAY_ELEC : bit := '0';
     DMONITOR_CFG0 : std_logic_vector(9 downto 0) := "00" & X"00";
     DMONITOR_CFG1 : std_logic_vector(7 downto 0) := X"00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : std_logic_vector(5 downto 0) := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : std_logic_vector(11 downto 0) := X"800";
     ES_PRESCALE : std_logic_vector(4 downto 0) := "00000";
     ES_QUALIFIER0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER9 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     EYESCAN_VP_RANGE : integer := 0;
     EYE_SCAN_SWAP_EN : bit := '0';
     FTS_DESKEW_SEQ_ENABLE : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_CFG : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : std_logic_vector(4 downto 0) := "00000";
     ISCAN_CK_PH_SEL2 : bit := '0';
     LOCAL_MASTER : bit := '0';
     LPBK_BIAS_CTRL : integer := 4;
     LPBK_EN_RCAL_B : bit := '0';
     LPBK_EXT_RCAL : std_logic_vector(3 downto 0) := "0000";
     LPBK_IND_CTRL0 : integer := 5;
     LPBK_IND_CTRL1 : integer := 5;
     LPBK_IND_CTRL2 : integer := 5;
     LPBK_RG_CTRL : integer := 2;
     OOBDIVCTL : std_logic_vector(1 downto 0) := "00";
     OOB_PWRUP : bit := '0';
     PCI3_AUTO_REALIGN : string := "FRST_SMPL";
     PCI3_PIPE_RX_ELECIDLE : bit := '1';
     PCI3_RX_ASYNC_EBUF_BYPASS : std_logic_vector(1 downto 0) := "00";
     PCI3_RX_ELECIDLE_EI2_ENABLE : bit := '0';
     PCI3_RX_ELECIDLE_H2L_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_H2L_DISABLE : std_logic_vector(2 downto 0) := "000";
     PCI3_RX_ELECIDLE_HI_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_LP4_DISABLE : bit := '0';
     PCI3_RX_FIFO_DISABLE : bit := '0';
     PCIE3_CLK_COR_EMPTY_THRSH : std_logic_vector(4 downto 0) := "00000";
     PCIE3_CLK_COR_FULL_THRSH : std_logic_vector(5 downto 0) := "010000";
     PCIE3_CLK_COR_MAX_LAT : std_logic_vector(4 downto 0) := "01000";
     PCIE3_CLK_COR_MIN_LAT : std_logic_vector(4 downto 0) := "00100";
     PCIE3_CLK_COR_THRSH_TIMER : std_logic_vector(5 downto 0) := "001000";
     PCIE_64B_DYN_CLKSW_DIS : string := "FALSE";
     PCIE_BUFG_DIV_CTRL : std_logic_vector(15 downto 0) := X"0000";
     PCIE_GEN4_64BIT_INT_EN : string := "FALSE";
     PCIE_PLL_SEL_MODE_GEN12 : std_logic_vector(1 downto 0) := "00";
     PCIE_PLL_SEL_MODE_GEN3 : std_logic_vector(1 downto 0) := "00";
     PCIE_PLL_SEL_MODE_GEN4 : std_logic_vector(1 downto 0) := "00";
     PCIE_RXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD0 : std_logic_vector(15 downto 0) := X"0000";
     PD_TRANS_TIME_FROM_P2 : std_logic_vector(11 downto 0) := X"03C";
     PD_TRANS_TIME_NONE_P2 : std_logic_vector(7 downto 0) := X"19";
     PD_TRANS_TIME_TO_P2 : std_logic_vector(7 downto 0) := X"64";
     PREIQ_FREQ_BST : integer := 0;
     RATE_SW_USE_DRP : bit := '0';
     RCLK_SIPO_DLY_ENB : bit := '0';
     RCLK_SIPO_INV_EN : bit := '0';
     RTX_BUF_CML_CTRL : std_logic_vector(2 downto 0) := "010";
     RTX_BUF_TERM_CTRL : std_logic_vector(1 downto 0) := "00";
     RXBUFRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : std_logic_vector(3 downto 0) := "1000";
     RXBUF_EIDLE_LO_CNT : std_logic_vector(3 downto 0) := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 0;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : std_logic_vector(4 downto 0) := "10000";
     RXCDRPHRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDR_CFG0 : std_logic_vector(15 downto 0) := X"0003";
     RXCDR_CFG0_GEN3 : std_logic_vector(15 downto 0) := X"0003";
     RXCDR_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG1_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG2 : std_logic_vector(15 downto 0) := X"0164";
     RXCDR_CFG2_GEN2 : std_logic_vector(9 downto 0) := "01" & X"64";
     RXCDR_CFG2_GEN3 : std_logic_vector(15 downto 0) := X"0034";
     RXCDR_CFG2_GEN4 : std_logic_vector(15 downto 0) := X"0034";
     RXCDR_CFG3 : std_logic_vector(15 downto 0) := X"0024";
     RXCDR_CFG3_GEN2 : std_logic_vector(5 downto 0) := "10" & X"4";
     RXCDR_CFG3_GEN3 : std_logic_vector(15 downto 0) := X"0024";
     RXCDR_CFG3_GEN4 : std_logic_vector(15 downto 0) := X"0024";
     RXCDR_CFG4 : std_logic_vector(15 downto 0) := X"5CF6";
     RXCDR_CFG4_GEN3 : std_logic_vector(15 downto 0) := X"5CF6";
     RXCDR_CFG5 : std_logic_vector(15 downto 0) := X"B46B";
     RXCDR_CFG5_GEN3 : std_logic_vector(15 downto 0) := X"146B";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG0 : std_logic_vector(15 downto 0) := X"0040";
     RXCDR_LOCK_CFG1 : std_logic_vector(15 downto 0) := X"8000";
     RXCDR_LOCK_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXCFOK_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCFOK_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXCFOK_CFG2 : std_logic_vector(15 downto 0) := X"002D";
     RXCKCAL1_IQ_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL1_I_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL1_Q_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_DX_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_D_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_S_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXCKCAL2_X_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPMRESET_TIME : std_logic_vector(6 downto 0) := "0001111";
     RXDFELPM_KL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPM_KL_CFG1 : std_logic_vector(15 downto 0) := X"0022";
     RXDFELPM_KL_CFG2 : std_logic_vector(15 downto 0) := X"0100";
     RXDFE_CFG0 : std_logic_vector(15 downto 0) := X"4000";
     RXDFE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H3_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H3_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H4_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H4_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_H5_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H5_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H6_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H6_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H7_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H7_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H8_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H8_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_H9_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H9_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HA_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HA_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HB_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HB_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HD_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HE_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_HF_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_KH_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_KH_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_KH_CFG3 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_OS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_UT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_UT_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXDFE_UT_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_VP_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_VP_CFG1 : std_logic_vector(15 downto 0) := X"0022";
     RXDLY_CFG : std_logic_vector(15 downto 0) := X"0010";
     RXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     RXELECIDLE_CFG : string := "SIGCFG_4";
     RXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXLPM_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_GC_CFG : std_logic_vector(15 downto 0) := X"1000";
     RXLPM_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXLPM_OS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXOOB_CFG : std_logic_vector(8 downto 0) := "000110000";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : std_logic_vector(4 downto 0) := "00011";
     RXOUT_DIV : integer := 4;
     RXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPHBEACON_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXPHDLY_CFG : std_logic_vector(15 downto 0) := X"2020";
     RXPHSAMP_CFG : std_logic_vector(15 downto 0) := X"2100";
     RXPHSLIP_CFG : std_logic_vector(15 downto 0) := X"9933";
     RXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     RXPI_CFG0 : std_logic_vector(15 downto 0) := X"0102";
     RXPI_CFG1 : std_logic_vector(15 downto 0) := "0000000001010100";
     RXPMACLK_SEL : string := "DATA";
     RXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXPRBS_LINKACQ_CNT : integer := 15;
     RXREFCLKDIV2_SEL : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_AFE_CM_EN : bit := '0';
     RX_BIAS_CFG0 : std_logic_vector(15 downto 0) := X"12B0";
     RX_BUFFER_CFG : std_logic_vector(5 downto 0) := "000000";
     RX_CAPFF_SARC_ENB : bit := '0';
     RX_CLK25_DIV : integer := 8;
     RX_CLKMUX_EN : bit := '1';
     RX_CLK_SLIP_OVRD : std_logic_vector(4 downto 0) := "00000";
     RX_CM_BUF_CFG : std_logic_vector(3 downto 0) := "1010";
     RX_CM_BUF_PD : bit := '0';
     RX_CM_SEL : integer := 2;
     RX_CM_TRIM : integer := 12;
     RX_CTLE_PWR_SAVING : bit := '0';
     RX_CTLE_RES_CTRL : std_logic_vector(3 downto 0) := "0000";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : std_logic_vector(5 downto 0) := "000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DEGEN_CTRL : std_logic_vector(2 downto 0) := "100";
     RX_DFELPM_CFG0 : integer := 10;
     RX_DFELPM_CFG1 : bit := '1';
     RX_DFELPM_KLKH_AGC_STUP_EN : bit := '1';
     RX_DFE_AGC_CFG1 : integer := 4;
     RX_DFE_KL_LPM_KH_CFG0 : integer := 1;
     RX_DFE_KL_LPM_KH_CFG1 : integer := 2;
     RX_DFE_KL_LPM_KL_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KL_CFG1 : integer := 4;
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RX_EN_CTLE_RCAL_B : bit := '0';
     RX_EN_SUM_RCAL_B : integer := 0;
     RX_EYESCAN_VS_CODE : std_logic_vector(6 downto 0) := "0000000";
     RX_EYESCAN_VS_NEG_DIR : bit := '0';
     RX_EYESCAN_VS_RANGE : std_logic_vector(1 downto 0) := "10";
     RX_EYESCAN_VS_UT_SIGN : bit := '0';
     RX_FABINT_USRCLK_FLOP : bit := '0';
     RX_I2V_FILTER_EN : bit := '1';
     RX_INT_DATAWIDTH : integer := 1;
     RX_PMA_POWER_SAVE : bit := '0';
     RX_PMA_RSV0 : std_logic_vector(15 downto 0) := X"002F";
     RX_PROGDIV_CFG : real := 0.0;
     RX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     RX_RESLOAD_CTRL : std_logic_vector(3 downto 0) := "0000";
     RX_RESLOAD_OVRD : bit := '0';
     RX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     RX_SIG_VALID_DLY : integer := 11;
     RX_SUM_DEGEN_AVTT_OVERITE : integer := 0;
     RX_SUM_DFETAPREP_EN : bit := '0';
     RX_SUM_IREF_TUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_PWR_SAVING : integer := 0;
     RX_SUM_RES_CTRL : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_VCMTUNE : std_logic_vector(3 downto 0) := "0011";
     RX_SUM_VCM_BIAS_TUNE_EN : bit := '1';
     RX_SUM_VCM_OVWR : bit := '0';
     RX_SUM_VREF_TUNE : std_logic_vector(2 downto 0) := "100";
     RX_TUNE_AFE_OS : std_logic_vector(1 downto 0) := "00";
     RX_VREG_CTRL : std_logic_vector(2 downto 0) := "010";
     RX_VREG_PDB : bit := '1';
     RX_WIDEMODE_CDR : std_logic_vector(1 downto 0) := "01";
     RX_WIDEMODE_CDR_GEN3 : std_logic_vector(1 downto 0) := "01";
     RX_WIDEMODE_CDR_GEN4 : std_logic_vector(1 downto 0) := "01";
     RX_XCLK_SEL : string := "RXDES";
     RX_XMODE_SEL : bit := '0';
     SAMPLE_CLK_PHASE : bit := '0';
     SAS_12G_MODE : bit := '0';
     SATA_BURST_SEQ_LEN : std_logic_vector(3 downto 0) := "1111";
     SATA_BURST_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : std_logic_vector(2 downto 0) := "100";
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SIM_MODE : string := "FAST";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "Z";
     SRSTMODE : bit := '0';
     TAPDLY_SET_TX : std_logic_vector(1 downto 0) := "00";
     TERM_RCAL_CFG : std_logic_vector(14 downto 0) := "100001000010000";
     TERM_RCAL_OVRD : std_logic_vector(2 downto 0) := "000";
     TRANS_TIME_RATE : std_logic_vector(7 downto 0) := X"0E";
     TST_RSV0 : std_logic_vector(7 downto 0) := X"00";
     TST_RSV1 : std_logic_vector(7 downto 0) := X"00";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : std_logic_vector(15 downto 0) := X"0010";
     TXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     TXDRV_FREQBAND : integer := 0;
     TXFE_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     TXFE_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     TXFE_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     TXFE_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     TXFIFO_ADDR_CFG : string := "LOW";
     TXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 4;
     TXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXPHDLY_CFG0 : std_logic_vector(15 downto 0) := X"6020";
     TXPHDLY_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     TXPH_CFG : std_logic_vector(15 downto 0) := X"0123";
     TXPH_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     TXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     TXPI_CFG0 : std_logic_vector(15 downto 0) := "0000000100000000";
     TXPI_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     TXPI_GRAY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_PPM : bit := '0';
     TXPI_PPM_CFG : std_logic_vector(7 downto 0) := "00000000";
     TXPI_SYNFREQ_PPM : std_logic_vector(2 downto 0) := "000";
     TXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXREFCLKDIV2_SEL : bit := '0';
     TXSWBST_BST : integer := 1;
     TXSWBST_EN : integer := 0;
     TXSWBST_MAG : integer := 6;
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 8;
     TX_CLKMUX_EN : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DCC_LOOP_RST_CFG : std_logic_vector(15 downto 0) := X"0000";
     TX_DEEMPH0 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH1 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH2 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH3 : std_logic_vector(5 downto 0) := "000000";
     TX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : std_logic_vector(2 downto 0) := "110";
     TX_EIDLE_DEASSERT_DELAY : std_logic_vector(2 downto 0) := "100";
     TX_FABINT_USRCLK_FLOP : bit := '0';
     TX_FIFO_BYP_EN : bit := '0';
     TX_IDLE_DATA_ZERO : bit := '0';
     TX_INT_DATAWIDTH : integer := 1;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : std_logic_vector(6 downto 0) := "1001110";
     TX_MARGIN_FULL_1 : std_logic_vector(6 downto 0) := "1001001";
     TX_MARGIN_FULL_2 : std_logic_vector(6 downto 0) := "1000101";
     TX_MARGIN_FULL_3 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_FULL_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_0 : std_logic_vector(6 downto 0) := "1000110";
     TX_MARGIN_LOW_1 : std_logic_vector(6 downto 0) := "1000100";
     TX_MARGIN_LOW_2 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_LOW_3 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_PHICAL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     TX_PHICAL_CFG1 : std_logic_vector(15 downto 0) := X"003F";
     TX_PI_BIASSET : integer := 0;
     TX_PMADATA_OPT : bit := '0';
     TX_PMA_POWER_SAVE : bit := '0';
     TX_PMA_RSV0 : std_logic_vector(15 downto 0) := X"0000";
     TX_PMA_RSV1 : std_logic_vector(15 downto 0) := X"0000";
     TX_PROGCLK_SEL : string := "POSTPI";
     TX_PROGDIV_CFG : real := 0.0;
     TX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     TX_RXDETECT_CFG : std_logic_vector(13 downto 0) := "00" & X"032";
     TX_RXDETECT_REF : integer := 3;
     TX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     TX_SW_MEAS : std_logic_vector(1 downto 0) := "00";
     TX_VREG_CTRL : std_logic_vector(2 downto 0) := "000";
     TX_VREG_PDB : bit := '0';
     TX_VREG_VREFSEL : std_logic_vector(1 downto 0) := "00";
     TX_XCLK_SEL : string := "TXOUT";
     USB_BOTH_BURST_IDLE : bit := '0';
     USB_BURSTMAX_U3WAKE : std_logic_vector(6 downto 0) := "1111111";
     USB_BURSTMIN_U3WAKE : std_logic_vector(6 downto 0) := "1100011";
     USB_CLK_COR_EQ_EN : bit := '0';
     USB_EXT_CNTL : bit := '1';
     USB_IDLEMAX_POLLING : std_logic_vector(9 downto 0) := "1010111011";
     USB_IDLEMIN_POLLING : std_logic_vector(9 downto 0) := "0100101011";
     USB_LFPSPING_BURST : std_logic_vector(8 downto 0) := "000000101";
     USB_LFPSPOLLING_BURST : std_logic_vector(8 downto 0) := "000110001";
     USB_LFPSPOLLING_IDLE_MS : std_logic_vector(8 downto 0) := "000000100";
     USB_LFPSU1EXIT_BURST : std_logic_vector(8 downto 0) := "000011101";
     USB_LFPSU2LPEXIT_BURST_MS : std_logic_vector(8 downto 0) := "001100011";
     USB_LFPSU3WAKE_BURST_MS : std_logic_vector(8 downto 0) := "111110011";
     USB_LFPS_TPERIOD : std_logic_vector(3 downto 0) := "0011";
     USB_LFPS_TPERIOD_ACCURATE : bit := '1';
     USB_MODE : bit := '0';
     USB_PCIE_ERR_REP_DIS : bit := '0';
     USB_PING_SATA_MAX_INIT : integer := 21;
     USB_PING_SATA_MIN_INIT : integer := 12;
     USB_POLL_SATA_MAX_BURST : integer := 8;
     USB_POLL_SATA_MIN_BURST : integer := 4;
     USB_RAW_ELEC : bit := '0';
     USB_RXIDLE_P0_CTRL : bit := '1';
     USB_TXIDLE_TUNE_ENABLE : bit := '1';
     USB_U1_SATA_MAX_WAKE : integer := 7;
     USB_U1_SATA_MIN_WAKE : integer := 4;
     USB_U2_SAS_MAX_COM : integer := 64;
     USB_U2_SAS_MIN_COM : integer := 36;
     USE_PCS_CLK_PHASE_SEL : bit := '0';
     Y_ALL_MODE : bit := '0'
  );
  port (
     BUFGTCE : out std_ulogic;
     BUFGTCEMASK : out std_logic_vector(2 downto 0);
     BUFGTDIV : out std_logic_vector(8 downto 0);
     BUFGTRESET : out std_ulogic;
     BUFGTRSTMASK : out std_logic_vector(2 downto 0);
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(15 downto 0);
     DMONITOROUTCLK : out std_ulogic;
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTPOWERGOOD : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     GTYTXN : out std_ulogic;
     GTYTXP : out std_ulogic;
     PCIERATEGEN3 : out std_ulogic;
     PCIERATEIDLE : out std_ulogic;
     PCIERATEQPLLPD : out std_logic_vector(1 downto 0);
     PCIERATEQPLLRESET : out std_logic_vector(1 downto 0);
     PCIESYNCTXSYNCDONE : out std_ulogic;
     PCIEUSERGEN3RDY : out std_ulogic;
     PCIEUSERPHYSTATUSRST : out std_ulogic;
     PCIEUSERRATESTART : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     PINRSRVDAS : out std_logic_vector(15 downto 0);
     POWERPRESENT : out std_ulogic;
     RESETEXCEPTION : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCDRPHDONE : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCKCALDONE : out std_ulogic;
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXCTRL0 : out std_logic_vector(15 downto 0);
     RXCTRL1 : out std_logic_vector(15 downto 0);
     RXCTRL2 : out std_logic_vector(7 downto 0);
     RXCTRL3 : out std_logic_vector(7 downto 0);
     RXDATA : out std_logic_vector(127 downto 0);
     RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXLFPSTRESETDET : out std_ulogic;
     RXLFPSU2LPEXITDET : out std_ulogic;
     RXLFPSU3WAKEDET : out std_ulogic;
     RXMONITOROUT : out std_logic_vector(7 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHALIGNERR : out std_ulogic;
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXPRBSLOCKED : out std_ulogic;
     RXPRGDIVRESETDONE : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRECCLKOUT : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSLIDERDY : out std_ulogic;
     RXSLIPDONE : out std_ulogic;
     RXSLIPOUTCLKRDY : out std_ulogic;
     RXSLIPPMARDY : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDCCDONE : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXPRGDIVRESETDONE : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CDRSTEPDIR : in std_ulogic;
     CDRSTEPSQ : in std_ulogic;
     CDRSTEPSX : in std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLFREQLOCK : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPRST : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     FREQOS : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTRXRESETSEL : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     GTTXRESETSEL : in std_ulogic;
     GTYRXN : in std_ulogic;
     GTYRXP : in std_ulogic;
     INCPCTRL : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCIEEQRXEQADAPTDONE : in std_ulogic;
     PCIERSTIDLE : in std_ulogic;
     PCIERSTTXSYNCSTART : in std_ulogic;
     PCIEUSERRATEDONE : in std_ulogic;
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     QPLL0CLK : in std_ulogic;
     QPLL0FREQLOCK : in std_ulogic;
     QPLL0REFCLK : in std_ulogic;
     QPLL1CLK : in std_ulogic;
     QPLL1FREQLOCK : in std_ulogic;
     QPLL1REFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXAFECFOKEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCKCALRESET : in std_ulogic;
     RXCKCALSTART : in std_logic_vector(6 downto 0);
     RXCOMMADETEN : in std_ulogic;
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFECFOKFCNUM : in std_logic_vector(3 downto 0);
     RXDFECFOKFEN : in std_ulogic;
     RXDFECFOKFPULSE : in std_ulogic;
     RXDFECFOKHOLD : in std_ulogic;
     RXDFECFOKOVREN : in std_ulogic;
     RXDFEKHHOLD : in std_ulogic;
     RXDFEKHOVRDEN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP10HOLD : in std_ulogic;
     RXDFETAP10OVRDEN : in std_ulogic;
     RXDFETAP11HOLD : in std_ulogic;
     RXDFETAP11OVRDEN : in std_ulogic;
     RXDFETAP12HOLD : in std_ulogic;
     RXDFETAP12OVRDEN : in std_ulogic;
     RXDFETAP13HOLD : in std_ulogic;
     RXDFETAP13OVRDEN : in std_ulogic;
     RXDFETAP14HOLD : in std_ulogic;
     RXDFETAP14OVRDEN : in std_ulogic;
     RXDFETAP15HOLD : in std_ulogic;
     RXDFETAP15OVRDEN : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFETAP8HOLD : in std_ulogic;
     RXDFETAP8OVRDEN : in std_ulogic;
     RXDFETAP9HOLD : in std_ulogic;
     RXDFETAP9OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXEQTRAINING : in std_ulogic;
     RXGEARBOXSLIP : in std_ulogic;
     RXLATCLK : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMGCHOLD : in std_ulogic;
     RXLPMGCOVRDEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXLPMOSHOLD : in std_ulogic;
     RXLPMOSOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPLLCLKSEL : in std_logic_vector(1 downto 0);
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(3 downto 0);
     RXPROGDIVRESET : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSLIPOUTCLK : in std_ulogic;
     RXSLIPPMA : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXTERMINATION : in std_ulogic;
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXCTRL0 : in std_logic_vector(15 downto 0);
     TXCTRL1 : in std_logic_vector(15 downto 0);
     TXCTRL2 : in std_logic_vector(7 downto 0);
     TXDATA : in std_logic_vector(127 downto 0);
     TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     TXDCCFORCESTART : in std_ulogic;
     TXDCCRESET : in std_ulogic;
     TXDEEMPH : in std_logic_vector(1 downto 0);
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(4 downto 0);
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(5 downto 0);
     TXINHIBIT : in std_ulogic;
     TXLATCLK : in std_ulogic;
     TXLFPSTRESET : in std_ulogic;
     TXLFPSU2LPEXIT : in std_ulogic;
     TXLFPSU3WAKE : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXMUXDCDEXHOLD : in std_ulogic;
     TXMUXDCDORWREN : in std_ulogic;
     TXONESZEROS : in std_ulogic;
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPLLCLKSEL : in std_logic_vector(1 downto 0);
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(3 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPROGDIVRESET : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTYE4_CHANNEL : component is "PRIMITIVE";

----- component GTYE4_COMMON -----
component GTYE4_COMMON
  generic (
     AEN_QPLL0_FBDIV : bit := '1';
     AEN_QPLL1_FBDIV : bit := '1';
     AEN_SDM0TOGGLE : bit := '0';
     AEN_SDM1TOGGLE : bit := '0';
     A_SDM0TOGGLE : bit := '0';
     A_SDM1DATA_HIGH : std_logic_vector(8 downto 0) := "000000000";
     A_SDM1DATA_LOW : std_logic_vector(15 downto 0) := "0000000000000000";
     A_SDM1TOGGLE : bit := '0';
     BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG_RSVD : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     POR_CFG : std_logic_vector(15 downto 0) := X"0000";
     PPF0_CFG : std_logic_vector(15 downto 0) := X"0F00";
     PPF1_CFG : std_logic_vector(15 downto 0) := X"0F00";
     QPLL0CLKOUT_RATE : string := "FULL";
     QPLL0_CFG0 : std_logic_vector(15 downto 0) := X"391C";
     QPLL0_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL0_CFG2 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL0_CFG2_G3 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL0_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL0_CFG4 : std_logic_vector(15 downto 0) := X"0002";
     QPLL0_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_FBDIV : integer := 66;
     QPLL0_FBDIV_G3 : integer := 80;
     QPLL0_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL0_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL0_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL0_LPF : std_logic_vector(9 downto 0) := "1011111111";
     QPLL0_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_PCI_EN : bit := '0';
     QPLL0_RATE_SW_USE_DRP : bit := '0';
     QPLL0_REFCLK_DIV : integer := 1;
     QPLL0_SDM_CFG0 : std_logic_vector(15 downto 0) := X"0040";
     QPLL0_SDM_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_SDM_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1CLKOUT_RATE : string := "FULL";
     QPLL1_CFG0 : std_logic_vector(15 downto 0) := X"691C";
     QPLL1_CFG1 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG2 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL1_CFG2_G3 : std_logic_vector(15 downto 0) := X"0F80";
     QPLL1_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL1_CFG4 : std_logic_vector(15 downto 0) := X"0002";
     QPLL1_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_FBDIV : integer := 66;
     QPLL1_FBDIV_G3 : integer := 80;
     QPLL1_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL1_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     QPLL1_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LPF : std_logic_vector(9 downto 0) := "1011111111";
     QPLL1_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_PCI_EN : bit := '0';
     QPLL1_RATE_SW_USE_DRP : bit := '0';
     QPLL1_REFCLK_DIV : integer := 1;
     QPLL1_SDM_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_SDM_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_SDM_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR0 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR1 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR3 : std_logic_vector(15 downto 0) := X"0000";
     RXRECCLKOUT0_SEL : std_logic_vector(1 downto 0) := "00";
     RXRECCLKOUT1_SEL : std_logic_vector(1 downto 0) := "00";
     SARC_ENB : bit := '0';
     SARC_SEL : bit := '0';
     SDM0INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SIM_MODE : string := "FAST";
     SIM_RESET_SPEEDUP : string := "TRUE";
     UB_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     UB_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     UB_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     UB_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     UB_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     UB_CFG5 : std_logic_vector(15 downto 0) := X"0400";
     UB_CFG6 : std_logic_vector(15 downto 0) := X"0000"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT0 : out std_logic_vector(7 downto 0);
     PMARSVDOUT1 : out std_logic_vector(7 downto 0);
     QPLL0FBCLKLOST : out std_ulogic;
     QPLL0LOCK : out std_ulogic;
     QPLL0OUTCLK : out std_ulogic;
     QPLL0OUTREFCLK : out std_ulogic;
     QPLL0REFCLKLOST : out std_ulogic;
     QPLL1FBCLKLOST : out std_ulogic;
     QPLL1LOCK : out std_ulogic;
     QPLL1OUTCLK : out std_ulogic;
     QPLL1OUTREFCLK : out std_ulogic;
     QPLL1REFCLKLOST : out std_ulogic;
     QPLLDMONITOR0 : out std_logic_vector(7 downto 0);
     QPLLDMONITOR1 : out std_logic_vector(7 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     RXRECCLK0SEL : out std_logic_vector(1 downto 0);
     RXRECCLK1SEL : out std_logic_vector(1 downto 0);
     SDM0FINALOUT : out std_logic_vector(3 downto 0);
     SDM0TESTDATA : out std_logic_vector(14 downto 0);
     SDM1FINALOUT : out std_logic_vector(3 downto 0);
     SDM1TESTDATA : out std_logic_vector(14 downto 0);
     UBDADDR : out std_logic_vector(15 downto 0);
     UBDEN : out std_ulogic;
     UBDI : out std_logic_vector(15 downto 0);
     UBDWE : out std_ulogic;
     UBMDMTDO : out std_ulogic;
     UBRSVDOUT : out std_ulogic;
     UBTXUART : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(15 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTNORTHREFCLK00 : in std_ulogic;
     GTNORTHREFCLK01 : in std_ulogic;
     GTNORTHREFCLK10 : in std_ulogic;
     GTNORTHREFCLK11 : in std_ulogic;
     GTREFCLK00 : in std_ulogic;
     GTREFCLK01 : in std_ulogic;
     GTREFCLK10 : in std_ulogic;
     GTREFCLK11 : in std_ulogic;
     GTSOUTHREFCLK00 : in std_ulogic;
     GTSOUTHREFCLK01 : in std_ulogic;
     GTSOUTHREFCLK10 : in std_ulogic;
     GTSOUTHREFCLK11 : in std_ulogic;
     PCIERATEQPLL0 : in std_logic_vector(2 downto 0);
     PCIERATEQPLL1 : in std_logic_vector(2 downto 0);
     PMARSVD0 : in std_logic_vector(7 downto 0);
     PMARSVD1 : in std_logic_vector(7 downto 0);
     QPLL0CLKRSVD0 : in std_ulogic;
     QPLL0CLKRSVD1 : in std_ulogic;
     QPLL0FBDIV : in std_logic_vector(7 downto 0);
     QPLL0LOCKDETCLK : in std_ulogic;
     QPLL0LOCKEN : in std_ulogic;
     QPLL0PD : in std_ulogic;
     QPLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL0RESET : in std_ulogic;
     QPLL1CLKRSVD0 : in std_ulogic;
     QPLL1CLKRSVD1 : in std_ulogic;
     QPLL1FBDIV : in std_logic_vector(7 downto 0);
     QPLL1LOCKDETCLK : in std_ulogic;
     QPLL1LOCKEN : in std_ulogic;
     QPLL1PD : in std_ulogic;
     QPLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL1RESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(7 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     QPLLRSVD3 : in std_logic_vector(4 downto 0);
     QPLLRSVD4 : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic;
     SDM0DATA : in std_logic_vector(24 downto 0);
     SDM0RESET : in std_ulogic;
     SDM0TOGGLE : in std_ulogic;
     SDM0WIDTH : in std_logic_vector(1 downto 0);
     SDM1DATA : in std_logic_vector(24 downto 0);
     SDM1RESET : in std_ulogic;
     SDM1TOGGLE : in std_ulogic;
     SDM1WIDTH : in std_logic_vector(1 downto 0);
     UBCFGSTREAMEN : in std_ulogic;
     UBDO : in std_logic_vector(15 downto 0);
     UBDRDY : in std_ulogic;
     UBENABLE : in std_ulogic;
     UBGPI : in std_logic_vector(1 downto 0);
     UBINTR : in std_logic_vector(1 downto 0);
     UBIOLMBRST : in std_ulogic;
     UBMBRST : in std_ulogic;
     UBMDMCAPTURE : in std_ulogic;
     UBMDMDBGRST : in std_ulogic;
     UBMDMDBGUPDATE : in std_ulogic;
     UBMDMREGEN : in std_logic_vector(3 downto 0);
     UBMDMSHIFT : in std_ulogic;
     UBMDMSYSRST : in std_ulogic;
     UBMDMTCK : in std_ulogic;
     UBMDMTDI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTYE4_COMMON : component is "PRIMITIVE";

----- component GTYE5_QUAD -----
component GTYE5_QUAD
  generic (
     A_CFG0 : std_logic_vector(31 downto 0) := X"0000007C";
     A_CFG1 : std_logic_vector(31 downto 0) := X"40404040";
     A_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     A_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     A_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     A_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_APT_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_CAL_CFG : std_logic_vector(31 downto 0) := X"01E76400";
     CH0_ADAPT_DFE_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_GC_CFG0 : std_logic_vector(31 downto 0) := X"00201000";
     CH0_ADAPT_GC_CFG1 : std_logic_vector(31 downto 0) := X"000003E0";
     CH0_ADAPT_GC_CFG2 : std_logic_vector(31 downto 0) := X"00200000";
     CH0_ADAPT_GC_CFG3 : std_logic_vector(31 downto 0) := X"000003E0";
     CH0_ADAPT_GEN_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_GEN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_GEN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_GEN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_H01_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_H23_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_H45_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_H67_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_H89_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_HAB_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_HCD_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_HEF_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH0_ADAPT_KH_CFG0 : std_logic_vector(31 downto 0) := X"00000380";
     CH0_ADAPT_KH_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_KH_CFG2 : std_logic_vector(31 downto 0) := X"00000380";
     CH0_ADAPT_KH_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_KH_CFG4 : std_logic_vector(31 downto 0) := X"00010380";
     CH0_ADAPT_KH_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_KL_CFG0 : std_logic_vector(31 downto 0) := X"000083A0";
     CH0_ADAPT_KL_CFG1 : std_logic_vector(31 downto 0) := X"000083A0";
     CH0_ADAPT_LCK_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_LCK_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_LCK_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_LCK_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_ADAPT_LOP_CFG : std_logic_vector(31 downto 0) := X"E0000000";
     CH0_ADAPT_OS_CFG : std_logic_vector(31 downto 0) := X"800003C0";
     CH0_CHCLK_ILO_CFG : std_logic_vector(31 downto 0) := X"00600033";
     CH0_CHCLK_MISC_CFG : std_logic_vector(31 downto 0) := X"7880581F";
     CH0_CHCLK_RSV_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHCLK_RXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHCLK_RXCAL_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHCLK_RXCAL_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHCLK_RXPI_CFG : std_logic_vector(31 downto 0) := X"0030083C";
     CH0_CHCLK_TXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHCLK_TXPI_CFG0 : std_logic_vector(31 downto 0) := X"0017083F";
     CH0_CHL_RSV_CFG0 : std_logic_vector(31 downto 0) := X"C0000009";
     CH0_CHL_RSV_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHL_RSV_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHL_RSV_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_CHL_RSV_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_DA_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG0 : std_logic_vector(31 downto 0) := X"00000800";
     CH0_EYESCAN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG10 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG11 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG12 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG13 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG14 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG15 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG16 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG6 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG8 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_EYESCAN_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_FABRIC_INTF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_FABRIC_INTF_CFG1 : std_logic_vector(31 downto 0) := X"00000400";
     CH0_FABRIC_INTF_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_FABRIC_INTF_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_FABRIC_INTF_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_FABRIC_INTF_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_INSTANTIATED : bit := '1';
     CH0_MONITOR_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_PIPE_CTRL_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_PIPE_CTRL_CFG1 : std_logic_vector(31 downto 0) := X"00000290";
     CH0_PIPE_CTRL_CFG10 : std_logic_vector(31 downto 0) := X"051FFFEF";
     CH0_PIPE_CTRL_CFG2 : std_logic_vector(31 downto 0) := X"00978000";
     CH0_PIPE_CTRL_CFG3 : std_logic_vector(31 downto 0) := X"00125F2F";
     CH0_PIPE_CTRL_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_PIPE_CTRL_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_PIPE_CTRL_CFG6 : std_logic_vector(31 downto 0) := X"3C000000";
     CH0_PIPE_CTRL_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_PIPE_CTRL_CFG8 : std_logic_vector(31 downto 0) := X"02600000";
     CH0_PIPE_CTRL_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_PIPE_TX_EQ_CFG0 : std_logic_vector(31 downto 0) := X"085164CE";
     CH0_PIPE_TX_EQ_CFG1 : std_logic_vector(31 downto 0) := X"08512340";
     CH0_PIPE_TX_EQ_CFG2 : std_logic_vector(31 downto 0) := X"00002040";
     CH0_PIPE_TX_EQ_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RESET_BYP_HDSHK_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RESET_CFG : std_logic_vector(31 downto 0) := X"08100005";
     CH0_RESET_LOOPER_ID_CFG : std_logic_vector(31 downto 0) := X"00204060";
     CH0_RESET_LOOP_ID_CFG0 : std_logic_vector(31 downto 0) := X"00000210";
     CH0_RESET_LOOP_ID_CFG1 : std_logic_vector(31 downto 0) := X"06543210";
     CH0_RESET_LOOP_ID_CFG2 : std_logic_vector(31 downto 0) := X"00004321";
     CH0_RESET_TIME_CFG0 : std_logic_vector(31 downto 0) := X"02108401";
     CH0_RESET_TIME_CFG1 : std_logic_vector(31 downto 0) := X"02108421";
     CH0_RESET_TIME_CFG2 : std_logic_vector(31 downto 0) := X"02108421";
     CH0_RESET_TIME_CFG3 : std_logic_vector(31 downto 0) := X"4A102421";
     CH0_RX_CDR_CFG0 : std_logic_vector(31 downto 0) := X"00000001";
     CH0_RX_CDR_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_CDR_CFG2 : std_logic_vector(31 downto 0) := X"08009164";
     CH0_RX_CDR_CFG3 : std_logic_vector(31 downto 0) := X"000B5CF6";
     CH0_RX_CDR_CFG4 : std_logic_vector(31 downto 0) := X"00003000";
     CH0_RX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007880";
     CH0_RX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH0_RX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH0_RX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH0_RX_CTLE_CFG0 : std_logic_vector(31 downto 0) := X"01DC0100";
     CH0_RX_CTLE_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_DACI2V_CFG0 : std_logic_vector(31 downto 0) := X"1D838ECA";
     CH0_RX_DFE_CFG0 : std_logic_vector(31 downto 0) := X"300234C8";
     CH0_RX_ELASTIC_BUF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_ELASTIC_BUF_CFG1 : std_logic_vector(31 downto 0) := X"00000470";
     CH0_RX_ELASTIC_BUF_CFG2 : std_logic_vector(31 downto 0) := X"50040000";
     CH0_RX_ELASTIC_BUF_CFG3 : std_logic_vector(31 downto 0) := X"C1E40100";
     CH0_RX_ELASTIC_BUF_CFG4 : std_logic_vector(31 downto 0) := X"000005F1";
     CH0_RX_ELASTIC_BUF_CFG5 : std_logic_vector(31 downto 0) := X"10040000";
     CH0_RX_ELASTIC_BUF_CFG6 : std_logic_vector(31 downto 0) := X"FFF40100";
     CH0_RX_ELASTIC_BUF_CFG7 : std_logic_vector(31 downto 0) := X"0400001C";
     CH0_RX_ELASTIC_BUF_CFG8 : std_logic_vector(31 downto 0) := X"001F0590";
     CH0_RX_ELASTIC_BUF_CFG9 : std_logic_vector(31 downto 0) := X"001F0590";
     CH0_RX_MISC_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_OOB_CFG0 : std_logic_vector(31 downto 0) := X"2454C204";
     CH0_RX_OOB_CFG1 : std_logic_vector(31 downto 0) := X"010241C4";
     CH0_RX_PAD_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_PAD_CFG1 : std_logic_vector(31 downto 0) := X"1044497A";
     CH0_RX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_RX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"1C190F00";
     CH0_RX_PCS_CFG4 : std_logic_vector(31 downto 0) := X"C0500802";
     CH0_RX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080003";
     CH0_RX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00838000";
     CH0_RX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"0001CA00";
     CH0_RX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00038000";
     CH0_RX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"0000020A";
     CH0_RX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00020000";
     CH0_SIM_MODE : string := "FAST";
     CH0_SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     CH0_SIM_RESET_SPEEDUP : string := "TRUE";
     CH0_SIM_TX_EIDLE_DRIVE_LEVEL : string := "Z";
     CH0_TX_10G_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_10G_CFG1 : std_logic_vector(31 downto 0) := X"40000000";
     CH0_TX_10G_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_10G_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_ANA_CFG0 : std_logic_vector(31 downto 0) := X"00000090";
     CH0_TX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007800";
     CH0_TX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH0_TX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH0_TX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH0_TX_DRV_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_DRV_CFG1 : std_logic_vector(31 downto 0) := X"00001800";
     CH0_TX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"2835557C";
     CH0_TX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"1555F2AA";
     CH0_TX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"000AAA83";
     CH0_TX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080000";
     CH0_TX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00C47000";
     CH0_TX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"00000038";
     CH0_TX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"180000E0";
     CH0_TX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_PIPPM_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH0_TX_SER_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_APT_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_CAL_CFG : std_logic_vector(31 downto 0) := X"01E76400";
     CH1_ADAPT_DFE_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_GC_CFG0 : std_logic_vector(31 downto 0) := X"00201000";
     CH1_ADAPT_GC_CFG1 : std_logic_vector(31 downto 0) := X"000003E0";
     CH1_ADAPT_GC_CFG2 : std_logic_vector(31 downto 0) := X"00200000";
     CH1_ADAPT_GC_CFG3 : std_logic_vector(31 downto 0) := X"000003E0";
     CH1_ADAPT_GEN_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_GEN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_GEN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_GEN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_H01_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_H23_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_H45_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_H67_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_H89_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_HAB_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_HCD_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_HEF_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH1_ADAPT_KH_CFG0 : std_logic_vector(31 downto 0) := X"00000380";
     CH1_ADAPT_KH_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_KH_CFG2 : std_logic_vector(31 downto 0) := X"00000380";
     CH1_ADAPT_KH_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_KH_CFG4 : std_logic_vector(31 downto 0) := X"00010380";
     CH1_ADAPT_KH_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_KL_CFG0 : std_logic_vector(31 downto 0) := X"000083A0";
     CH1_ADAPT_KL_CFG1 : std_logic_vector(31 downto 0) := X"000083A0";
     CH1_ADAPT_LCK_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_LCK_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_LCK_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_LCK_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_ADAPT_LOP_CFG : std_logic_vector(31 downto 0) := X"E0000000";
     CH1_ADAPT_OS_CFG : std_logic_vector(31 downto 0) := X"800003C0";
     CH1_CHCLK_ILO_CFG : std_logic_vector(31 downto 0) := X"00600033";
     CH1_CHCLK_MISC_CFG : std_logic_vector(31 downto 0) := X"7880581F";
     CH1_CHCLK_RSV_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHCLK_RXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHCLK_RXCAL_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHCLK_RXCAL_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHCLK_RXPI_CFG : std_logic_vector(31 downto 0) := X"0030083C";
     CH1_CHCLK_TXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHCLK_TXPI_CFG0 : std_logic_vector(31 downto 0) := X"0017083F";
     CH1_CHL_RSV_CFG0 : std_logic_vector(31 downto 0) := X"C0000009";
     CH1_CHL_RSV_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHL_RSV_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHL_RSV_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_CHL_RSV_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_DA_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG0 : std_logic_vector(31 downto 0) := X"00000800";
     CH1_EYESCAN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG10 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG11 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG12 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG13 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG14 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG15 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG16 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG6 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG8 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_EYESCAN_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_FABRIC_INTF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_FABRIC_INTF_CFG1 : std_logic_vector(31 downto 0) := X"00000400";
     CH1_FABRIC_INTF_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_FABRIC_INTF_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_FABRIC_INTF_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_FABRIC_INTF_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_INSTANTIATED : bit := '1';
     CH1_MONITOR_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_PIPE_CTRL_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_PIPE_CTRL_CFG1 : std_logic_vector(31 downto 0) := X"00000290";
     CH1_PIPE_CTRL_CFG10 : std_logic_vector(31 downto 0) := X"051FFFEF";
     CH1_PIPE_CTRL_CFG2 : std_logic_vector(31 downto 0) := X"00978000";
     CH1_PIPE_CTRL_CFG3 : std_logic_vector(31 downto 0) := X"00125F2F";
     CH1_PIPE_CTRL_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_PIPE_CTRL_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_PIPE_CTRL_CFG6 : std_logic_vector(31 downto 0) := X"3C000000";
     CH1_PIPE_CTRL_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_PIPE_CTRL_CFG8 : std_logic_vector(31 downto 0) := X"02600000";
     CH1_PIPE_CTRL_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_PIPE_TX_EQ_CFG0 : std_logic_vector(31 downto 0) := X"085164CE";
     CH1_PIPE_TX_EQ_CFG1 : std_logic_vector(31 downto 0) := X"08512340";
     CH1_PIPE_TX_EQ_CFG2 : std_logic_vector(31 downto 0) := X"00002040";
     CH1_PIPE_TX_EQ_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RESET_BYP_HDSHK_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RESET_CFG : std_logic_vector(31 downto 0) := X"08100005";
     CH1_RESET_LOOPER_ID_CFG : std_logic_vector(31 downto 0) := X"00204060";
     CH1_RESET_LOOP_ID_CFG0 : std_logic_vector(31 downto 0) := X"00000210";
     CH1_RESET_LOOP_ID_CFG1 : std_logic_vector(31 downto 0) := X"06543210";
     CH1_RESET_LOOP_ID_CFG2 : std_logic_vector(31 downto 0) := X"00004321";
     CH1_RESET_TIME_CFG0 : std_logic_vector(31 downto 0) := X"02108401";
     CH1_RESET_TIME_CFG1 : std_logic_vector(31 downto 0) := X"02108421";
     CH1_RESET_TIME_CFG2 : std_logic_vector(31 downto 0) := X"02108421";
     CH1_RESET_TIME_CFG3 : std_logic_vector(31 downto 0) := X"4A102421";
     CH1_RX_CDR_CFG0 : std_logic_vector(31 downto 0) := X"00000001";
     CH1_RX_CDR_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_CDR_CFG2 : std_logic_vector(31 downto 0) := X"08009164";
     CH1_RX_CDR_CFG3 : std_logic_vector(31 downto 0) := X"000B5CF6";
     CH1_RX_CDR_CFG4 : std_logic_vector(31 downto 0) := X"00003000";
     CH1_RX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007880";
     CH1_RX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH1_RX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH1_RX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH1_RX_CTLE_CFG0 : std_logic_vector(31 downto 0) := X"01DC0100";
     CH1_RX_CTLE_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_DACI2V_CFG0 : std_logic_vector(31 downto 0) := X"1D838ECA";
     CH1_RX_DFE_CFG0 : std_logic_vector(31 downto 0) := X"300234C8";
     CH1_RX_ELASTIC_BUF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_ELASTIC_BUF_CFG1 : std_logic_vector(31 downto 0) := X"00000470";
     CH1_RX_ELASTIC_BUF_CFG2 : std_logic_vector(31 downto 0) := X"50040000";
     CH1_RX_ELASTIC_BUF_CFG3 : std_logic_vector(31 downto 0) := X"C1E40100";
     CH1_RX_ELASTIC_BUF_CFG4 : std_logic_vector(31 downto 0) := X"000005F1";
     CH1_RX_ELASTIC_BUF_CFG5 : std_logic_vector(31 downto 0) := X"10040000";
     CH1_RX_ELASTIC_BUF_CFG6 : std_logic_vector(31 downto 0) := X"FFF40100";
     CH1_RX_ELASTIC_BUF_CFG7 : std_logic_vector(31 downto 0) := X"0400001C";
     CH1_RX_ELASTIC_BUF_CFG8 : std_logic_vector(31 downto 0) := X"001F0590";
     CH1_RX_ELASTIC_BUF_CFG9 : std_logic_vector(31 downto 0) := X"001F0590";
     CH1_RX_MISC_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_OOB_CFG0 : std_logic_vector(31 downto 0) := X"2454C204";
     CH1_RX_OOB_CFG1 : std_logic_vector(31 downto 0) := X"010241C4";
     CH1_RX_PAD_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_PAD_CFG1 : std_logic_vector(31 downto 0) := X"1044497A";
     CH1_RX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_RX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"1C190F00";
     CH1_RX_PCS_CFG4 : std_logic_vector(31 downto 0) := X"C0500802";
     CH1_RX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080003";
     CH1_RX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00838000";
     CH1_RX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"0001CA00";
     CH1_RX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00038000";
     CH1_RX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"0000020A";
     CH1_RX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00020000";
     CH1_SIM_MODE : string := "FAST";
     CH1_SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     CH1_SIM_RESET_SPEEDUP : string := "TRUE";
     CH1_SIM_TX_EIDLE_DRIVE_LEVEL : string := "Z";
     CH1_TX_10G_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_10G_CFG1 : std_logic_vector(31 downto 0) := X"40000000";
     CH1_TX_10G_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_10G_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_ANA_CFG0 : std_logic_vector(31 downto 0) := X"00000090";
     CH1_TX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007800";
     CH1_TX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH1_TX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH1_TX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH1_TX_DRV_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_DRV_CFG1 : std_logic_vector(31 downto 0) := X"00001800";
     CH1_TX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"2835557C";
     CH1_TX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"1555F2AA";
     CH1_TX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"000AAA83";
     CH1_TX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080000";
     CH1_TX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00C47000";
     CH1_TX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"00000038";
     CH1_TX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"180000E0";
     CH1_TX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_PIPPM_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH1_TX_SER_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_APT_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_CAL_CFG : std_logic_vector(31 downto 0) := X"01E76400";
     CH2_ADAPT_DFE_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_GC_CFG0 : std_logic_vector(31 downto 0) := X"00201000";
     CH2_ADAPT_GC_CFG1 : std_logic_vector(31 downto 0) := X"000003E0";
     CH2_ADAPT_GC_CFG2 : std_logic_vector(31 downto 0) := X"00200000";
     CH2_ADAPT_GC_CFG3 : std_logic_vector(31 downto 0) := X"000003E0";
     CH2_ADAPT_GEN_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_GEN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_GEN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_GEN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_H01_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_H23_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_H45_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_H67_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_H89_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_HAB_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_HCD_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_HEF_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH2_ADAPT_KH_CFG0 : std_logic_vector(31 downto 0) := X"00000380";
     CH2_ADAPT_KH_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_KH_CFG2 : std_logic_vector(31 downto 0) := X"00000380";
     CH2_ADAPT_KH_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_KH_CFG4 : std_logic_vector(31 downto 0) := X"00010380";
     CH2_ADAPT_KH_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_KL_CFG0 : std_logic_vector(31 downto 0) := X"000083A0";
     CH2_ADAPT_KL_CFG1 : std_logic_vector(31 downto 0) := X"000083A0";
     CH2_ADAPT_LCK_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_LCK_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_LCK_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_LCK_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_ADAPT_LOP_CFG : std_logic_vector(31 downto 0) := X"E0000000";
     CH2_ADAPT_OS_CFG : std_logic_vector(31 downto 0) := X"800003C0";
     CH2_CHCLK_ILO_CFG : std_logic_vector(31 downto 0) := X"00600033";
     CH2_CHCLK_MISC_CFG : std_logic_vector(31 downto 0) := X"7880581F";
     CH2_CHCLK_RSV_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHCLK_RXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHCLK_RXCAL_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHCLK_RXCAL_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHCLK_RXPI_CFG : std_logic_vector(31 downto 0) := X"0030083C";
     CH2_CHCLK_TXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHCLK_TXPI_CFG0 : std_logic_vector(31 downto 0) := X"0017083F";
     CH2_CHL_RSV_CFG0 : std_logic_vector(31 downto 0) := X"C0000009";
     CH2_CHL_RSV_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHL_RSV_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHL_RSV_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_CHL_RSV_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_DA_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG0 : std_logic_vector(31 downto 0) := X"00000800";
     CH2_EYESCAN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG10 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG11 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG12 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG13 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG14 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG15 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG16 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG6 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG8 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_EYESCAN_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_FABRIC_INTF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_FABRIC_INTF_CFG1 : std_logic_vector(31 downto 0) := X"00000400";
     CH2_FABRIC_INTF_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_FABRIC_INTF_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_FABRIC_INTF_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_FABRIC_INTF_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_INSTANTIATED : bit := '1';
     CH2_MONITOR_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_PIPE_CTRL_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_PIPE_CTRL_CFG1 : std_logic_vector(31 downto 0) := X"00000290";
     CH2_PIPE_CTRL_CFG10 : std_logic_vector(31 downto 0) := X"051FFFEF";
     CH2_PIPE_CTRL_CFG2 : std_logic_vector(31 downto 0) := X"00978000";
     CH2_PIPE_CTRL_CFG3 : std_logic_vector(31 downto 0) := X"00125F2F";
     CH2_PIPE_CTRL_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_PIPE_CTRL_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_PIPE_CTRL_CFG6 : std_logic_vector(31 downto 0) := X"3C000000";
     CH2_PIPE_CTRL_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_PIPE_CTRL_CFG8 : std_logic_vector(31 downto 0) := X"02600000";
     CH2_PIPE_CTRL_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_PIPE_TX_EQ_CFG0 : std_logic_vector(31 downto 0) := X"085164CE";
     CH2_PIPE_TX_EQ_CFG1 : std_logic_vector(31 downto 0) := X"08512340";
     CH2_PIPE_TX_EQ_CFG2 : std_logic_vector(31 downto 0) := X"00002040";
     CH2_PIPE_TX_EQ_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RESET_BYP_HDSHK_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RESET_CFG : std_logic_vector(31 downto 0) := X"08100005";
     CH2_RESET_LOOPER_ID_CFG : std_logic_vector(31 downto 0) := X"00204060";
     CH2_RESET_LOOP_ID_CFG0 : std_logic_vector(31 downto 0) := X"00000210";
     CH2_RESET_LOOP_ID_CFG1 : std_logic_vector(31 downto 0) := X"06543210";
     CH2_RESET_LOOP_ID_CFG2 : std_logic_vector(31 downto 0) := X"00004321";
     CH2_RESET_TIME_CFG0 : std_logic_vector(31 downto 0) := X"02108401";
     CH2_RESET_TIME_CFG1 : std_logic_vector(31 downto 0) := X"02108421";
     CH2_RESET_TIME_CFG2 : std_logic_vector(31 downto 0) := X"02108421";
     CH2_RESET_TIME_CFG3 : std_logic_vector(31 downto 0) := X"4A102421";
     CH2_RX_CDR_CFG0 : std_logic_vector(31 downto 0) := X"00000001";
     CH2_RX_CDR_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_CDR_CFG2 : std_logic_vector(31 downto 0) := X"08009164";
     CH2_RX_CDR_CFG3 : std_logic_vector(31 downto 0) := X"000B5CF6";
     CH2_RX_CDR_CFG4 : std_logic_vector(31 downto 0) := X"00003000";
     CH2_RX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007880";
     CH2_RX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH2_RX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH2_RX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH2_RX_CTLE_CFG0 : std_logic_vector(31 downto 0) := X"01DC0100";
     CH2_RX_CTLE_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_DACI2V_CFG0 : std_logic_vector(31 downto 0) := X"1D838ECA";
     CH2_RX_DFE_CFG0 : std_logic_vector(31 downto 0) := X"300234C8";
     CH2_RX_ELASTIC_BUF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_ELASTIC_BUF_CFG1 : std_logic_vector(31 downto 0) := X"00000470";
     CH2_RX_ELASTIC_BUF_CFG2 : std_logic_vector(31 downto 0) := X"50040000";
     CH2_RX_ELASTIC_BUF_CFG3 : std_logic_vector(31 downto 0) := X"C1E40100";
     CH2_RX_ELASTIC_BUF_CFG4 : std_logic_vector(31 downto 0) := X"000005F1";
     CH2_RX_ELASTIC_BUF_CFG5 : std_logic_vector(31 downto 0) := X"10040000";
     CH2_RX_ELASTIC_BUF_CFG6 : std_logic_vector(31 downto 0) := X"FFF40100";
     CH2_RX_ELASTIC_BUF_CFG7 : std_logic_vector(31 downto 0) := X"0400001C";
     CH2_RX_ELASTIC_BUF_CFG8 : std_logic_vector(31 downto 0) := X"001F0590";
     CH2_RX_ELASTIC_BUF_CFG9 : std_logic_vector(31 downto 0) := X"001F0590";
     CH2_RX_MISC_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_OOB_CFG0 : std_logic_vector(31 downto 0) := X"2454C204";
     CH2_RX_OOB_CFG1 : std_logic_vector(31 downto 0) := X"010241C4";
     CH2_RX_PAD_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_PAD_CFG1 : std_logic_vector(31 downto 0) := X"1044497A";
     CH2_RX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_RX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"1C190F00";
     CH2_RX_PCS_CFG4 : std_logic_vector(31 downto 0) := X"C0500802";
     CH2_RX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080003";
     CH2_RX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00838000";
     CH2_RX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"0001CA00";
     CH2_RX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00038000";
     CH2_RX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"0000020A";
     CH2_RX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00020000";
     CH2_SIM_MODE : string := "FAST";
     CH2_SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     CH2_SIM_RESET_SPEEDUP : string := "TRUE";
     CH2_SIM_TX_EIDLE_DRIVE_LEVEL : string := "Z";
     CH2_TX_10G_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_10G_CFG1 : std_logic_vector(31 downto 0) := X"40000000";
     CH2_TX_10G_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_10G_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_ANA_CFG0 : std_logic_vector(31 downto 0) := X"00000090";
     CH2_TX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007800";
     CH2_TX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH2_TX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH2_TX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH2_TX_DRV_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_DRV_CFG1 : std_logic_vector(31 downto 0) := X"00001800";
     CH2_TX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"2835557C";
     CH2_TX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"1555F2AA";
     CH2_TX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"000AAA83";
     CH2_TX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080000";
     CH2_TX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00C47000";
     CH2_TX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"00000038";
     CH2_TX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"180000E0";
     CH2_TX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_PIPPM_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH2_TX_SER_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_APT_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_CAL_CFG : std_logic_vector(31 downto 0) := X"01E76400";
     CH3_ADAPT_DFE_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_GC_CFG0 : std_logic_vector(31 downto 0) := X"00201000";
     CH3_ADAPT_GC_CFG1 : std_logic_vector(31 downto 0) := X"000003E0";
     CH3_ADAPT_GC_CFG2 : std_logic_vector(31 downto 0) := X"00200000";
     CH3_ADAPT_GC_CFG3 : std_logic_vector(31 downto 0) := X"000003E0";
     CH3_ADAPT_GEN_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_GEN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_GEN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_GEN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_H01_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_H23_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_H45_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_H67_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_H89_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_HAB_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_HCD_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_HEF_CFG : std_logic_vector(31 downto 0) := X"03C003C0";
     CH3_ADAPT_KH_CFG0 : std_logic_vector(31 downto 0) := X"00000380";
     CH3_ADAPT_KH_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_KH_CFG2 : std_logic_vector(31 downto 0) := X"00000380";
     CH3_ADAPT_KH_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_KH_CFG4 : std_logic_vector(31 downto 0) := X"00010380";
     CH3_ADAPT_KH_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_KL_CFG0 : std_logic_vector(31 downto 0) := X"000083A0";
     CH3_ADAPT_KL_CFG1 : std_logic_vector(31 downto 0) := X"000083A0";
     CH3_ADAPT_LCK_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_LCK_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_LCK_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_LCK_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_ADAPT_LOP_CFG : std_logic_vector(31 downto 0) := X"E0000000";
     CH3_ADAPT_OS_CFG : std_logic_vector(31 downto 0) := X"800003C0";
     CH3_CHCLK_ILO_CFG : std_logic_vector(31 downto 0) := X"00600033";
     CH3_CHCLK_MISC_CFG : std_logic_vector(31 downto 0) := X"7880581F";
     CH3_CHCLK_RSV_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHCLK_RXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHCLK_RXCAL_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHCLK_RXCAL_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHCLK_RXPI_CFG : std_logic_vector(31 downto 0) := X"0030083C";
     CH3_CHCLK_TXCAL_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHCLK_TXPI_CFG0 : std_logic_vector(31 downto 0) := X"0017083F";
     CH3_CHL_RSV_CFG0 : std_logic_vector(31 downto 0) := X"C0000009";
     CH3_CHL_RSV_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHL_RSV_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHL_RSV_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_CHL_RSV_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_DA_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG0 : std_logic_vector(31 downto 0) := X"00000800";
     CH3_EYESCAN_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG10 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG11 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG12 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG13 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG14 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG15 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG16 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG6 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG8 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_EYESCAN_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_FABRIC_INTF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_FABRIC_INTF_CFG1 : std_logic_vector(31 downto 0) := X"00000400";
     CH3_FABRIC_INTF_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_FABRIC_INTF_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_FABRIC_INTF_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_FABRIC_INTF_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_INSTANTIATED : bit := '1';
     CH3_MONITOR_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_PIPE_CTRL_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_PIPE_CTRL_CFG1 : std_logic_vector(31 downto 0) := X"00000290";
     CH3_PIPE_CTRL_CFG10 : std_logic_vector(31 downto 0) := X"051FFFEF";
     CH3_PIPE_CTRL_CFG2 : std_logic_vector(31 downto 0) := X"00978000";
     CH3_PIPE_CTRL_CFG3 : std_logic_vector(31 downto 0) := X"00125F2F";
     CH3_PIPE_CTRL_CFG4 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_PIPE_CTRL_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_PIPE_CTRL_CFG6 : std_logic_vector(31 downto 0) := X"3C000000";
     CH3_PIPE_CTRL_CFG7 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_PIPE_CTRL_CFG8 : std_logic_vector(31 downto 0) := X"02600000";
     CH3_PIPE_CTRL_CFG9 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_PIPE_TX_EQ_CFG0 : std_logic_vector(31 downto 0) := X"085164CE";
     CH3_PIPE_TX_EQ_CFG1 : std_logic_vector(31 downto 0) := X"08512340";
     CH3_PIPE_TX_EQ_CFG2 : std_logic_vector(31 downto 0) := X"00002040";
     CH3_PIPE_TX_EQ_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RESET_BYP_HDSHK_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RESET_CFG : std_logic_vector(31 downto 0) := X"08100005";
     CH3_RESET_LOOPER_ID_CFG : std_logic_vector(31 downto 0) := X"00204060";
     CH3_RESET_LOOP_ID_CFG0 : std_logic_vector(31 downto 0) := X"00000210";
     CH3_RESET_LOOP_ID_CFG1 : std_logic_vector(31 downto 0) := X"06543210";
     CH3_RESET_LOOP_ID_CFG2 : std_logic_vector(31 downto 0) := X"00004321";
     CH3_RESET_TIME_CFG0 : std_logic_vector(31 downto 0) := X"02108401";
     CH3_RESET_TIME_CFG1 : std_logic_vector(31 downto 0) := X"02108421";
     CH3_RESET_TIME_CFG2 : std_logic_vector(31 downto 0) := X"02108421";
     CH3_RESET_TIME_CFG3 : std_logic_vector(31 downto 0) := X"4A102421";
     CH3_RX_CDR_CFG0 : std_logic_vector(31 downto 0) := X"00000001";
     CH3_RX_CDR_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_CDR_CFG2 : std_logic_vector(31 downto 0) := X"08009164";
     CH3_RX_CDR_CFG3 : std_logic_vector(31 downto 0) := X"000B5CF6";
     CH3_RX_CDR_CFG4 : std_logic_vector(31 downto 0) := X"00003000";
     CH3_RX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007880";
     CH3_RX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH3_RX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH3_RX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH3_RX_CTLE_CFG0 : std_logic_vector(31 downto 0) := X"01DC0100";
     CH3_RX_CTLE_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_DACI2V_CFG0 : std_logic_vector(31 downto 0) := X"1D838ECA";
     CH3_RX_DFE_CFG0 : std_logic_vector(31 downto 0) := X"300234C8";
     CH3_RX_ELASTIC_BUF_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_ELASTIC_BUF_CFG1 : std_logic_vector(31 downto 0) := X"00000470";
     CH3_RX_ELASTIC_BUF_CFG2 : std_logic_vector(31 downto 0) := X"50040000";
     CH3_RX_ELASTIC_BUF_CFG3 : std_logic_vector(31 downto 0) := X"C1E40100";
     CH3_RX_ELASTIC_BUF_CFG4 : std_logic_vector(31 downto 0) := X"000005F1";
     CH3_RX_ELASTIC_BUF_CFG5 : std_logic_vector(31 downto 0) := X"10040000";
     CH3_RX_ELASTIC_BUF_CFG6 : std_logic_vector(31 downto 0) := X"FFF40100";
     CH3_RX_ELASTIC_BUF_CFG7 : std_logic_vector(31 downto 0) := X"0400001C";
     CH3_RX_ELASTIC_BUF_CFG8 : std_logic_vector(31 downto 0) := X"001F0590";
     CH3_RX_ELASTIC_BUF_CFG9 : std_logic_vector(31 downto 0) := X"001F0590";
     CH3_RX_MISC_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_OOB_CFG0 : std_logic_vector(31 downto 0) := X"2454C204";
     CH3_RX_OOB_CFG1 : std_logic_vector(31 downto 0) := X"010241C4";
     CH3_RX_PAD_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_PAD_CFG1 : std_logic_vector(31 downto 0) := X"1044497A";
     CH3_RX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_RX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"1C190F00";
     CH3_RX_PCS_CFG4 : std_logic_vector(31 downto 0) := X"C0500802";
     CH3_RX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080003";
     CH3_RX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00838000";
     CH3_RX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"0001CA00";
     CH3_RX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00038000";
     CH3_RX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"0000020A";
     CH3_RX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00020000";
     CH3_SIM_MODE : string := "FAST";
     CH3_SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     CH3_SIM_RESET_SPEEDUP : string := "TRUE";
     CH3_SIM_TX_EIDLE_DRIVE_LEVEL : string := "Z";
     CH3_TX_10G_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_10G_CFG1 : std_logic_vector(31 downto 0) := X"40000000";
     CH3_TX_10G_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_10G_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_ANA_CFG0 : std_logic_vector(31 downto 0) := X"00000090";
     CH3_TX_CRC_CFG0 : std_logic_vector(31 downto 0) := X"00007800";
     CH3_TX_CRC_CFG1 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH3_TX_CRC_CFG2 : std_logic_vector(31 downto 0) := X"1E1E1E1E";
     CH3_TX_CRC_CFG3 : std_logic_vector(31 downto 0) := X"FFFFFFFF";
     CH3_TX_DRV_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_DRV_CFG1 : std_logic_vector(31 downto 0) := X"00001800";
     CH3_TX_PCS_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_PCS_CFG1 : std_logic_vector(31 downto 0) := X"2835557C";
     CH3_TX_PCS_CFG2 : std_logic_vector(31 downto 0) := X"1555F2AA";
     CH3_TX_PCS_CFG3 : std_logic_vector(31 downto 0) := X"000AAA83";
     CH3_TX_PHALIGN_CFG0 : std_logic_vector(31 downto 0) := X"00080000";
     CH3_TX_PHALIGN_CFG1 : std_logic_vector(31 downto 0) := X"00C47000";
     CH3_TX_PHALIGN_CFG2 : std_logic_vector(31 downto 0) := X"00000038";
     CH3_TX_PHALIGN_CFG3 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_PHALIGN_CFG4 : std_logic_vector(31 downto 0) := X"180000E0";
     CH3_TX_PHALIGN_CFG5 : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_PIPPM_CFG : std_logic_vector(31 downto 0) := X"00000000";
     CH3_TX_SER_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     CTRL_RSV_CFG0 : std_logic_vector(31 downto 0) := X"00000018";
     CTRL_RSV_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     HS0_LCPLL_IPS_PIN_EN : bit := '0';
     HS0_LCPLL_IPS_REFCLK_SEL : integer := 0;
     HS0_LCPLL_REFCLK_MAP0 : std_logic_vector(2 downto 0) := "000";
     HS0_LCPLL_REFCLK_MAP1 : std_logic_vector(2 downto 0) := "001";
     HS0_LCPLL_REFCLK_MAP2 : std_logic_vector(2 downto 0) := "010";
     HS0_LCPLL_REFCLK_MAP3 : std_logic_vector(2 downto 0) := "011";
     HS0_LCPLL_REFCLK_MAP4 : std_logic_vector(2 downto 0) := "100";
     HS0_LCPLL_REFCLK_MAP5 : std_logic_vector(2 downto 0) := "101";
     HS0_LCPLL_REFCLK_MAP6 : std_logic_vector(2 downto 0) := "110";
     HS0_LCPLL_REFCLK_MAP7 : std_logic_vector(2 downto 0) := "111";
     HS0_RPLL_IPS_PIN_EN : bit := '0';
     HS0_RPLL_IPS_REFCLK_SEL : integer := 0;
     HS0_RPLL_REFCLK_MAP0 : std_logic_vector(2 downto 0) := "000";
     HS0_RPLL_REFCLK_MAP1 : std_logic_vector(2 downto 0) := "001";
     HS0_RPLL_REFCLK_MAP2 : std_logic_vector(2 downto 0) := "010";
     HS0_RPLL_REFCLK_MAP3 : std_logic_vector(2 downto 0) := "011";
     HS0_RPLL_REFCLK_MAP4 : std_logic_vector(2 downto 0) := "100";
     HS0_RPLL_REFCLK_MAP5 : std_logic_vector(2 downto 0) := "101";
     HS0_RPLL_REFCLK_MAP6 : std_logic_vector(2 downto 0) := "110";
     HS0_RPLL_REFCLK_MAP7 : std_logic_vector(2 downto 0) := "111";
     HS1_LCPLL_IPS_PIN_EN : bit := '0';
     HS1_LCPLL_IPS_REFCLK_SEL : integer := 0;
     HS1_LCPLL_REFCLK_MAP0 : std_logic_vector(2 downto 0) := "000";
     HS1_LCPLL_REFCLK_MAP1 : std_logic_vector(2 downto 0) := "001";
     HS1_LCPLL_REFCLK_MAP2 : std_logic_vector(2 downto 0) := "010";
     HS1_LCPLL_REFCLK_MAP3 : std_logic_vector(2 downto 0) := "011";
     HS1_LCPLL_REFCLK_MAP4 : std_logic_vector(2 downto 0) := "100";
     HS1_LCPLL_REFCLK_MAP5 : std_logic_vector(2 downto 0) := "101";
     HS1_LCPLL_REFCLK_MAP6 : std_logic_vector(2 downto 0) := "110";
     HS1_LCPLL_REFCLK_MAP7 : std_logic_vector(2 downto 0) := "111";
     HS1_RPLL_IPS_PIN_EN : bit := '0';
     HS1_RPLL_IPS_REFCLK_SEL : integer := 0;
     HS1_RPLL_REFCLK_MAP0 : std_logic_vector(2 downto 0) := "000";
     HS1_RPLL_REFCLK_MAP1 : std_logic_vector(2 downto 0) := "001";
     HS1_RPLL_REFCLK_MAP2 : std_logic_vector(2 downto 0) := "010";
     HS1_RPLL_REFCLK_MAP3 : std_logic_vector(2 downto 0) := "011";
     HS1_RPLL_REFCLK_MAP4 : std_logic_vector(2 downto 0) := "100";
     HS1_RPLL_REFCLK_MAP5 : std_logic_vector(2 downto 0) := "101";
     HS1_RPLL_REFCLK_MAP6 : std_logic_vector(2 downto 0) := "110";
     HS1_RPLL_REFCLK_MAP7 : std_logic_vector(2 downto 0) := "111";
     HSCLK0_HSDIST_CFG : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK0_INSTANTIATED : bit := '1';
     HSCLK0_LCPLL_CFG0 : std_logic_vector(31 downto 0) := X"91000D00";
     HSCLK0_LCPLL_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK0_LCPLL_CFG2 : std_logic_vector(31 downto 0) := X"AA010208";
     HSCLK0_LCPLL_LGC_CFG0 : std_logic_vector(31 downto 0) := X"05D40B10";
     HSCLK0_LCPLL_LGC_CFG1 : std_logic_vector(31 downto 0) := X"00121840";
     HSCLK0_LCPLL_LGC_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK0_RPLL_CFG0 : std_logic_vector(31 downto 0) := X"00000010";
     HSCLK0_RPLL_CFG1 : std_logic_vector(31 downto 0) := X"00223F28";
     HSCLK0_RPLL_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK0_RPLL_LGC_CFG0 : std_logic_vector(31 downto 0) := X"05D40B10";
     HSCLK0_RPLL_LGC_CFG1 : std_logic_vector(31 downto 0) := X"94121840";
     HSCLK0_RPLL_LGC_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK1_HSDIST_CFG : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK1_INSTANTIATED : bit := '1';
     HSCLK1_LCPLL_CFG0 : std_logic_vector(31 downto 0) := X"91000D00";
     HSCLK1_LCPLL_CFG1 : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK1_LCPLL_CFG2 : std_logic_vector(31 downto 0) := X"AA010208";
     HSCLK1_LCPLL_LGC_CFG0 : std_logic_vector(31 downto 0) := X"05D40B10";
     HSCLK1_LCPLL_LGC_CFG1 : std_logic_vector(31 downto 0) := X"00121840";
     HSCLK1_LCPLL_LGC_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK1_RPLL_CFG0 : std_logic_vector(31 downto 0) := X"00000010";
     HSCLK1_RPLL_CFG1 : std_logic_vector(31 downto 0) := X"00223F28";
     HSCLK1_RPLL_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     HSCLK1_RPLL_LGC_CFG0 : std_logic_vector(31 downto 0) := X"05D40B10";
     HSCLK1_RPLL_LGC_CFG1 : std_logic_vector(31 downto 0) := X"94121840";
     HSCLK1_RPLL_LGC_CFG2 : std_logic_vector(31 downto 0) := X"00000000";
     MEMORY_INIT_FILE : string := "NONE";
     MST_RESET_CFG : std_logic_vector(31 downto 0) := X"00000000";
     PIN_CFG0 : std_logic_vector(31 downto 0) := X"00000000";
     POR_CFG : std_logic_vector(31 downto 0) := X"00000000";
     QUAD_INSTANTIATED : bit := '1';
     QUAD_SIM_MODE : string := "FAST";
     QUAD_SIM_RESET_SPEEDUP : string := "TRUE";
     RXRSTDONE_DIST_SEL : std_logic_vector(31 downto 0) := X"00000000";
     SIM_DEVICE : string := "EVEREST";
     TERMPROG_CFG : std_logic_vector(31 downto 0) := X"00000000";
     TXRSTDONE_DIST_SEL : std_logic_vector(31 downto 0) := X"00000000";
     UB_CFG0 : std_logic_vector(31 downto 0) := X"48A00000"
  );
  port (
     APB3PRDATA : out std_logic_vector(31 downto 0);
     APB3PREADY : out std_ulogic;
     APB3PSLVERR : out std_ulogic;
     CH0_BUFGTCE : out std_ulogic;
     CH0_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH0_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH0_BUFGTRST : out std_ulogic;
     CH0_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH0_CFOKOVRDRDY0 : out std_ulogic;
     CH0_CFOKOVRDRDY1 : out std_ulogic;
     CH0_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH0_DMONITOROUTCLK : out std_ulogic;
     CH0_EYESCANDATAERROR : out std_ulogic;
     CH0_GTYTXN : out std_ulogic;
     CH0_GTYTXP : out std_ulogic;
     CH0_ILORESETDONE : out std_ulogic;
     CH0_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH0_PHYREADY : out std_ulogic;
     CH0_PHYSTATUS : out std_ulogic;
     CH0_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH0_RESETEXCEPTION : out std_ulogic;
     CH0_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH0_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH0_RXBYTEISALIGNED : out std_ulogic;
     CH0_RXBYTEREALIGN : out std_ulogic;
     CH0_RXCDRLOCK : out std_ulogic;
     CH0_RXCDRPHDONE : out std_ulogic;
     CH0_RXCHANBONDSEQ : out std_ulogic;
     CH0_RXCHANISALIGNED : out std_ulogic;
     CH0_RXCHANREALIGN : out std_ulogic;
     CH0_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH0_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH0_RXCOMINITDET : out std_ulogic;
     CH0_RXCOMMADET : out std_ulogic;
     CH0_RXCOMSASDET : out std_ulogic;
     CH0_RXCOMWAKEDET : out std_ulogic;
     CH0_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH0_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH0_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH0_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH0_RXDATA : out std_logic_vector(127 downto 0);
     CH0_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH0_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH0_RXDCCDONE : out std_ulogic;
     CH0_RXDLYALIGNERR : out std_ulogic;
     CH0_RXDLYALIGNPROG : out std_ulogic;
     CH0_RXELECIDLE : out std_ulogic;
     CH0_RXFINEALIGNDONE : out std_ulogic;
     CH0_RXHEADER : out std_logic_vector(5 downto 0);
     CH0_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH0_RXOSINTDONE : out std_ulogic;
     CH0_RXOSINTSTARTED : out std_ulogic;
     CH0_RXOSINTSTROBEDONE : out std_ulogic;
     CH0_RXOSINTSTROBESTARTED : out std_ulogic;
     CH0_RXOUTCLK : out std_ulogic;
     CH0_RXPHALIGNDONE : out std_ulogic;
     CH0_RXPHALIGNERR : out std_ulogic;
     CH0_RXPHDLYRESETDONE : out std_ulogic;
     CH0_RXPHSETINITDONE : out std_ulogic;
     CH0_RXPHSHIFT180DONE : out std_ulogic;
     CH0_RXPMARESETDONE : out std_ulogic;
     CH0_RXPRBSERR : out std_ulogic;
     CH0_RXPRBSLOCKED : out std_ulogic;
     CH0_RXPROGDIVRESETDONE : out std_ulogic;
     CH0_RXRESETDONE : out std_ulogic;
     CH0_RXSLIDERDY : out std_ulogic;
     CH0_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH0_RXSTATUS : out std_logic_vector(2 downto 0);
     CH0_RXSYNCDONE : out std_ulogic;
     CH0_RXVALID : out std_ulogic;
     CH0_TX10GSTAT : out std_ulogic;
     CH0_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH0_TXCOMFINISH : out std_ulogic;
     CH0_TXDCCDONE : out std_ulogic;
     CH0_TXDLYALIGNERR : out std_ulogic;
     CH0_TXDLYALIGNPROG : out std_ulogic;
     CH0_TXOUTCLK : out std_ulogic;
     CH0_TXPHALIGNDONE : out std_ulogic;
     CH0_TXPHALIGNERR : out std_ulogic;
     CH0_TXPHALIGNOUTRSVD : out std_ulogic;
     CH0_TXPHDLYRESETDONE : out std_ulogic;
     CH0_TXPHSETINITDONE : out std_ulogic;
     CH0_TXPHSHIFT180DONE : out std_ulogic;
     CH0_TXPMARESETDONE : out std_ulogic;
     CH0_TXPROGDIVRESETDONE : out std_ulogic;
     CH0_TXRESETDONE : out std_ulogic;
     CH0_TXSYNCDONE : out std_ulogic;
     CH1_BUFGTCE : out std_ulogic;
     CH1_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH1_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH1_BUFGTRST : out std_ulogic;
     CH1_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH1_CFOKOVRDRDY0 : out std_ulogic;
     CH1_CFOKOVRDRDY1 : out std_ulogic;
     CH1_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH1_DMONITOROUTCLK : out std_ulogic;
     CH1_EYESCANDATAERROR : out std_ulogic;
     CH1_GTYTXN : out std_ulogic;
     CH1_GTYTXP : out std_ulogic;
     CH1_ILORESETDONE : out std_ulogic;
     CH1_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH1_PHYREADY : out std_ulogic;
     CH1_PHYSTATUS : out std_ulogic;
     CH1_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH1_RESETEXCEPTION : out std_ulogic;
     CH1_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH1_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH1_RXBYTEISALIGNED : out std_ulogic;
     CH1_RXBYTEREALIGN : out std_ulogic;
     CH1_RXCDRLOCK : out std_ulogic;
     CH1_RXCDRPHDONE : out std_ulogic;
     CH1_RXCHANBONDSEQ : out std_ulogic;
     CH1_RXCHANISALIGNED : out std_ulogic;
     CH1_RXCHANREALIGN : out std_ulogic;
     CH1_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH1_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH1_RXCOMINITDET : out std_ulogic;
     CH1_RXCOMMADET : out std_ulogic;
     CH1_RXCOMSASDET : out std_ulogic;
     CH1_RXCOMWAKEDET : out std_ulogic;
     CH1_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH1_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH1_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH1_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH1_RXDATA : out std_logic_vector(127 downto 0);
     CH1_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH1_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH1_RXDCCDONE : out std_ulogic;
     CH1_RXDLYALIGNERR : out std_ulogic;
     CH1_RXDLYALIGNPROG : out std_ulogic;
     CH1_RXELECIDLE : out std_ulogic;
     CH1_RXFINEALIGNDONE : out std_ulogic;
     CH1_RXHEADER : out std_logic_vector(5 downto 0);
     CH1_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH1_RXOSINTDONE : out std_ulogic;
     CH1_RXOSINTSTARTED : out std_ulogic;
     CH1_RXOSINTSTROBEDONE : out std_ulogic;
     CH1_RXOSINTSTROBESTARTED : out std_ulogic;
     CH1_RXOUTCLK : out std_ulogic;
     CH1_RXPHALIGNDONE : out std_ulogic;
     CH1_RXPHALIGNERR : out std_ulogic;
     CH1_RXPHDLYRESETDONE : out std_ulogic;
     CH1_RXPHSETINITDONE : out std_ulogic;
     CH1_RXPHSHIFT180DONE : out std_ulogic;
     CH1_RXPMARESETDONE : out std_ulogic;
     CH1_RXPRBSERR : out std_ulogic;
     CH1_RXPRBSLOCKED : out std_ulogic;
     CH1_RXPROGDIVRESETDONE : out std_ulogic;
     CH1_RXRESETDONE : out std_ulogic;
     CH1_RXSLIDERDY : out std_ulogic;
     CH1_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH1_RXSTATUS : out std_logic_vector(2 downto 0);
     CH1_RXSYNCDONE : out std_ulogic;
     CH1_RXVALID : out std_ulogic;
     CH1_TX10GSTAT : out std_ulogic;
     CH1_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH1_TXCOMFINISH : out std_ulogic;
     CH1_TXDCCDONE : out std_ulogic;
     CH1_TXDLYALIGNERR : out std_ulogic;
     CH1_TXDLYALIGNPROG : out std_ulogic;
     CH1_TXOUTCLK : out std_ulogic;
     CH1_TXPHALIGNDONE : out std_ulogic;
     CH1_TXPHALIGNERR : out std_ulogic;
     CH1_TXPHALIGNOUTRSVD : out std_ulogic;
     CH1_TXPHDLYRESETDONE : out std_ulogic;
     CH1_TXPHSETINITDONE : out std_ulogic;
     CH1_TXPHSHIFT180DONE : out std_ulogic;
     CH1_TXPMARESETDONE : out std_ulogic;
     CH1_TXPROGDIVRESETDONE : out std_ulogic;
     CH1_TXRESETDONE : out std_ulogic;
     CH1_TXSYNCDONE : out std_ulogic;
     CH2_BUFGTCE : out std_ulogic;
     CH2_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH2_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH2_BUFGTRST : out std_ulogic;
     CH2_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH2_CFOKOVRDRDY0 : out std_ulogic;
     CH2_CFOKOVRDRDY1 : out std_ulogic;
     CH2_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH2_DMONITOROUTCLK : out std_ulogic;
     CH2_EYESCANDATAERROR : out std_ulogic;
     CH2_GTYTXN : out std_ulogic;
     CH2_GTYTXP : out std_ulogic;
     CH2_ILORESETDONE : out std_ulogic;
     CH2_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH2_PHYREADY : out std_ulogic;
     CH2_PHYSTATUS : out std_ulogic;
     CH2_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH2_RESETEXCEPTION : out std_ulogic;
     CH2_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH2_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH2_RXBYTEISALIGNED : out std_ulogic;
     CH2_RXBYTEREALIGN : out std_ulogic;
     CH2_RXCDRLOCK : out std_ulogic;
     CH2_RXCDRPHDONE : out std_ulogic;
     CH2_RXCHANBONDSEQ : out std_ulogic;
     CH2_RXCHANISALIGNED : out std_ulogic;
     CH2_RXCHANREALIGN : out std_ulogic;
     CH2_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH2_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH2_RXCOMINITDET : out std_ulogic;
     CH2_RXCOMMADET : out std_ulogic;
     CH2_RXCOMSASDET : out std_ulogic;
     CH2_RXCOMWAKEDET : out std_ulogic;
     CH2_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH2_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH2_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH2_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH2_RXDATA : out std_logic_vector(127 downto 0);
     CH2_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH2_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH2_RXDCCDONE : out std_ulogic;
     CH2_RXDLYALIGNERR : out std_ulogic;
     CH2_RXDLYALIGNPROG : out std_ulogic;
     CH2_RXELECIDLE : out std_ulogic;
     CH2_RXFINEALIGNDONE : out std_ulogic;
     CH2_RXHEADER : out std_logic_vector(5 downto 0);
     CH2_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH2_RXOSINTDONE : out std_ulogic;
     CH2_RXOSINTSTARTED : out std_ulogic;
     CH2_RXOSINTSTROBEDONE : out std_ulogic;
     CH2_RXOSINTSTROBESTARTED : out std_ulogic;
     CH2_RXOUTCLK : out std_ulogic;
     CH2_RXPHALIGNDONE : out std_ulogic;
     CH2_RXPHALIGNERR : out std_ulogic;
     CH2_RXPHDLYRESETDONE : out std_ulogic;
     CH2_RXPHSETINITDONE : out std_ulogic;
     CH2_RXPHSHIFT180DONE : out std_ulogic;
     CH2_RXPMARESETDONE : out std_ulogic;
     CH2_RXPRBSERR : out std_ulogic;
     CH2_RXPRBSLOCKED : out std_ulogic;
     CH2_RXPROGDIVRESETDONE : out std_ulogic;
     CH2_RXRESETDONE : out std_ulogic;
     CH2_RXSLIDERDY : out std_ulogic;
     CH2_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH2_RXSTATUS : out std_logic_vector(2 downto 0);
     CH2_RXSYNCDONE : out std_ulogic;
     CH2_RXVALID : out std_ulogic;
     CH2_TX10GSTAT : out std_ulogic;
     CH2_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH2_TXCOMFINISH : out std_ulogic;
     CH2_TXDCCDONE : out std_ulogic;
     CH2_TXDLYALIGNERR : out std_ulogic;
     CH2_TXDLYALIGNPROG : out std_ulogic;
     CH2_TXOUTCLK : out std_ulogic;
     CH2_TXPHALIGNDONE : out std_ulogic;
     CH2_TXPHALIGNERR : out std_ulogic;
     CH2_TXPHALIGNOUTRSVD : out std_ulogic;
     CH2_TXPHDLYRESETDONE : out std_ulogic;
     CH2_TXPHSETINITDONE : out std_ulogic;
     CH2_TXPHSHIFT180DONE : out std_ulogic;
     CH2_TXPMARESETDONE : out std_ulogic;
     CH2_TXPROGDIVRESETDONE : out std_ulogic;
     CH2_TXRESETDONE : out std_ulogic;
     CH2_TXSYNCDONE : out std_ulogic;
     CH3_BUFGTCE : out std_ulogic;
     CH3_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH3_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH3_BUFGTRST : out std_ulogic;
     CH3_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH3_CFOKOVRDRDY0 : out std_ulogic;
     CH3_CFOKOVRDRDY1 : out std_ulogic;
     CH3_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH3_DMONITOROUTCLK : out std_ulogic;
     CH3_EYESCANDATAERROR : out std_ulogic;
     CH3_GTYTXN : out std_ulogic;
     CH3_GTYTXP : out std_ulogic;
     CH3_ILORESETDONE : out std_ulogic;
     CH3_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH3_PHYREADY : out std_ulogic;
     CH3_PHYSTATUS : out std_ulogic;
     CH3_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH3_RESETEXCEPTION : out std_ulogic;
     CH3_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH3_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH3_RXBYTEISALIGNED : out std_ulogic;
     CH3_RXBYTEREALIGN : out std_ulogic;
     CH3_RXCDRLOCK : out std_ulogic;
     CH3_RXCDRPHDONE : out std_ulogic;
     CH3_RXCHANBONDSEQ : out std_ulogic;
     CH3_RXCHANISALIGNED : out std_ulogic;
     CH3_RXCHANREALIGN : out std_ulogic;
     CH3_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH3_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH3_RXCOMINITDET : out std_ulogic;
     CH3_RXCOMMADET : out std_ulogic;
     CH3_RXCOMSASDET : out std_ulogic;
     CH3_RXCOMWAKEDET : out std_ulogic;
     CH3_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH3_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH3_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH3_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH3_RXDATA : out std_logic_vector(127 downto 0);
     CH3_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH3_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH3_RXDCCDONE : out std_ulogic;
     CH3_RXDLYALIGNERR : out std_ulogic;
     CH3_RXDLYALIGNPROG : out std_ulogic;
     CH3_RXELECIDLE : out std_ulogic;
     CH3_RXFINEALIGNDONE : out std_ulogic;
     CH3_RXHEADER : out std_logic_vector(5 downto 0);
     CH3_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH3_RXOSINTDONE : out std_ulogic;
     CH3_RXOSINTSTARTED : out std_ulogic;
     CH3_RXOSINTSTROBEDONE : out std_ulogic;
     CH3_RXOSINTSTROBESTARTED : out std_ulogic;
     CH3_RXOUTCLK : out std_ulogic;
     CH3_RXPHALIGNDONE : out std_ulogic;
     CH3_RXPHALIGNERR : out std_ulogic;
     CH3_RXPHDLYRESETDONE : out std_ulogic;
     CH3_RXPHSETINITDONE : out std_ulogic;
     CH3_RXPHSHIFT180DONE : out std_ulogic;
     CH3_RXPMARESETDONE : out std_ulogic;
     CH3_RXPRBSERR : out std_ulogic;
     CH3_RXPRBSLOCKED : out std_ulogic;
     CH3_RXPROGDIVRESETDONE : out std_ulogic;
     CH3_RXRESETDONE : out std_ulogic;
     CH3_RXSLIDERDY : out std_ulogic;
     CH3_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH3_RXSTATUS : out std_logic_vector(2 downto 0);
     CH3_RXSYNCDONE : out std_ulogic;
     CH3_RXVALID : out std_ulogic;
     CH3_TX10GSTAT : out std_ulogic;
     CH3_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH3_TXCOMFINISH : out std_ulogic;
     CH3_TXDCCDONE : out std_ulogic;
     CH3_TXDLYALIGNERR : out std_ulogic;
     CH3_TXDLYALIGNPROG : out std_ulogic;
     CH3_TXOUTCLK : out std_ulogic;
     CH3_TXPHALIGNDONE : out std_ulogic;
     CH3_TXPHALIGNERR : out std_ulogic;
     CH3_TXPHALIGNOUTRSVD : out std_ulogic;
     CH3_TXPHDLYRESETDONE : out std_ulogic;
     CH3_TXPHSETINITDONE : out std_ulogic;
     CH3_TXPHSHIFT180DONE : out std_ulogic;
     CH3_TXPMARESETDONE : out std_ulogic;
     CH3_TXPROGDIVRESETDONE : out std_ulogic;
     CH3_TXRESETDONE : out std_ulogic;
     CH3_TXSYNCDONE : out std_ulogic;
     CORRECTERR : out std_ulogic;
     CTRLRSVDOUT : out std_logic_vector(31 downto 0);
     DEBUGTRACETDATA : out std_logic_vector(15 downto 0);
     DEBUGTRACETVALID : out std_ulogic;
     GPO : out std_logic_vector(15 downto 0);
     GTPOWERGOOD : out std_ulogic;
     HSCLK0_LCPLLFBCLKLOST : out std_ulogic;
     HSCLK0_LCPLLLOCK : out std_ulogic;
     HSCLK0_LCPLLREFCLKLOST : out std_ulogic;
     HSCLK0_LCPLLREFCLKMONITOR : out std_ulogic;
     HSCLK0_LCPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK0_RPLLFBCLKLOST : out std_ulogic;
     HSCLK0_RPLLLOCK : out std_ulogic;
     HSCLK0_RPLLREFCLKLOST : out std_ulogic;
     HSCLK0_RPLLREFCLKMONITOR : out std_ulogic;
     HSCLK0_RPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK0_RXRECCLKOUT0 : out std_ulogic;
     HSCLK0_RXRECCLKOUT1 : out std_ulogic;
     HSCLK1_LCPLLFBCLKLOST : out std_ulogic;
     HSCLK1_LCPLLLOCK : out std_ulogic;
     HSCLK1_LCPLLREFCLKLOST : out std_ulogic;
     HSCLK1_LCPLLREFCLKMONITOR : out std_ulogic;
     HSCLK1_LCPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK1_RPLLFBCLKLOST : out std_ulogic;
     HSCLK1_RPLLLOCK : out std_ulogic;
     HSCLK1_RPLLREFCLKLOST : out std_ulogic;
     HSCLK1_RPLLREFCLKMONITOR : out std_ulogic;
     HSCLK1_RPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK1_RXRECCLKOUT0 : out std_ulogic;
     HSCLK1_RXRECCLKOUT1 : out std_ulogic;
     M0_AXIS_TDATA : out std_logic_vector(31 downto 0);
     M0_AXIS_TLAST : out std_ulogic;
     M0_AXIS_TVALID : out std_ulogic;
     M1_AXIS_TDATA : out std_logic_vector(31 downto 0);
     M1_AXIS_TLAST : out std_ulogic;
     M1_AXIS_TVALID : out std_ulogic;
     M2_AXIS_TDATA : out std_logic_vector(31 downto 0);
     M2_AXIS_TLAST : out std_ulogic;
     M2_AXIS_TVALID : out std_ulogic;
     MSTRXRESETDONE : out std_logic_vector(3 downto 0);
     MSTTXRESETDONE : out std_logic_vector(3 downto 0);
     PIPENORTHOUT : out std_logic_vector(5 downto 0);
     PIPESOUTHOUT : out std_logic_vector(5 downto 0);
     REFCLK0_CLKTESTSIGINT : out std_ulogic;
     REFCLK0_GTREFCLKPDINT : out std_ulogic;
     REFCLK1_CLKTESTSIGINT : out std_ulogic;
     REFCLK1_GTREFCLKPDINT : out std_ulogic;
     RESETDONE_NORTHOUT : out std_logic_vector(1 downto 0);
     RESETDONE_SOUTHOUT : out std_logic_vector(1 downto 0);
     RXMARGINREQACK : out std_ulogic;
     RXMARGINRESCMD : out std_logic_vector(3 downto 0);
     RXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     RXMARGINRESPAYLD : out std_logic_vector(7 downto 0);
     RXMARGINRESREQ : out std_ulogic;
     RXPINORTHOUT : out std_logic_vector(3 downto 0);
     RXPISOUTHOUT : out std_logic_vector(3 downto 0);
     S0_AXIS_TREADY : out std_ulogic;
     S1_AXIS_TREADY : out std_ulogic;
     S2_AXIS_TREADY : out std_ulogic;
     TRIGACKIN0 : out std_ulogic;
     TRIGOUT0 : out std_ulogic;
     TXPINORTHOUT : out std_logic_vector(3 downto 0);
     TXPISOUTHOUT : out std_logic_vector(3 downto 0);
     UBINTERRUPT : out std_ulogic;
     UBTXUART : out std_ulogic;
     UNCORRECTERR : out std_ulogic;
     ALTCLK : in std_ulogic;
     APB3CLK : in std_ulogic;
     APB3PADDR : in std_logic_vector(15 downto 0);
     APB3PENABLE : in std_ulogic;
     APB3PRESETN : in std_ulogic;
     APB3PSEL : in std_ulogic;
     APB3PWDATA : in std_logic_vector(31 downto 0);
     APB3PWRITE : in std_ulogic;
     AXISCLK : in std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     CH0_CDRBMCDRREQ : in std_ulogic;
     CH0_CDRFREQOS : in std_ulogic;
     CH0_CDRINCPCTRL : in std_ulogic;
     CH0_CDRSTEPDIR : in std_ulogic;
     CH0_CDRSTEPSQ : in std_ulogic;
     CH0_CDRSTEPSX : in std_ulogic;
     CH0_CFOKOVRDFINISH : in std_ulogic;
     CH0_CFOKOVRDPULSE : in std_ulogic;
     CH0_CFOKOVRDSTART : in std_ulogic;
     CH0_CLKRSVD0 : in std_ulogic;
     CH0_CLKRSVD1 : in std_ulogic;
     CH0_DMONFIFORESET : in std_ulogic;
     CH0_DMONITORCLK : in std_ulogic;
     CH0_EYESCANRESET : in std_ulogic;
     CH0_EYESCANTRIGGER : in std_ulogic;
     CH0_GTRSVD : in std_logic_vector(15 downto 0);
     CH0_GTRXRESET : in std_ulogic;
     CH0_GTTXRESET : in std_ulogic;
     CH0_GTYRXN : in std_ulogic;
     CH0_GTYRXP : in std_ulogic;
     CH0_HSDPPCSRESET : in std_ulogic;
     CH0_ILORESET : in std_ulogic;
     CH0_ILORESETMASK : in std_ulogic;
     CH0_LOOPBACK : in std_logic_vector(2 downto 0);
     CH0_PCIERSTB : in std_ulogic;
     CH0_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH0_PHYESMADAPTSAVE : in std_ulogic;
     CH0_RXCDRHOLD : in std_ulogic;
     CH0_RXCDROVRDEN : in std_ulogic;
     CH0_RXCDRRESET : in std_ulogic;
     CH0_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH0_RXDAPICODEOVRDEN : in std_ulogic;
     CH0_RXDAPICODERESET : in std_ulogic;
     CH0_RXDLYALIGNREQ : in std_ulogic;
     CH0_RXEQTRAINING : in std_ulogic;
     CH0_RXGEARBOXSLIP : in std_ulogic;
     CH0_RXLATCLK : in std_ulogic;
     CH0_RXLPMEN : in std_ulogic;
     CH0_RXMLDCHAINDONE : in std_ulogic;
     CH0_RXMLDCHAINREQ : in std_ulogic;
     CH0_RXMLFINEALIGNREQ : in std_ulogic;
     CH0_RXOOBRESET : in std_ulogic;
     CH0_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH0_RXPD : in std_logic_vector(1 downto 0);
     CH0_RXPHALIGNREQ : in std_ulogic;
     CH0_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH0_RXPHDLYPD : in std_ulogic;
     CH0_RXPHDLYRESET : in std_ulogic;
     CH0_RXPHSETINITREQ : in std_ulogic;
     CH0_RXPHSHIFT180 : in std_ulogic;
     CH0_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH0_RXPOLARITY : in std_ulogic;
     CH0_RXPRBSCNTRESET : in std_ulogic;
     CH0_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH0_RXPROGDIVRESET : in std_ulogic;
     CH0_RXRATE : in std_logic_vector(7 downto 0);
     CH0_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH0_RXSLIDE : in std_ulogic;
     CH0_RXSYNCALLIN : in std_ulogic;
     CH0_RXTERMINATION : in std_ulogic;
     CH0_RXUSERRDY : in std_ulogic;
     CH0_RXUSRCLK : in std_ulogic;
     CH0_TSTIN : in std_logic_vector(19 downto 0);
     CH0_TXCOMINIT : in std_ulogic;
     CH0_TXCOMSAS : in std_ulogic;
     CH0_TXCOMWAKE : in std_ulogic;
     CH0_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH0_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH0_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH0_TXDAPICODEOVRDEN : in std_ulogic;
     CH0_TXDAPICODERESET : in std_ulogic;
     CH0_TXDATA : in std_logic_vector(127 downto 0);
     CH0_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH0_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH0_TXDETECTRX : in std_ulogic;
     CH0_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH0_TXDLYALIGNREQ : in std_ulogic;
     CH0_TXELECIDLE : in std_ulogic;
     CH0_TXHEADER : in std_logic_vector(5 downto 0);
     CH0_TXINHIBIT : in std_ulogic;
     CH0_TXLATCLK : in std_ulogic;
     CH0_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH0_TXMARGIN : in std_logic_vector(2 downto 0);
     CH0_TXMLDCHAINDONE : in std_ulogic;
     CH0_TXMLDCHAINREQ : in std_ulogic;
     CH0_TXONESZEROS : in std_ulogic;
     CH0_TXPAUSEDELAYALIGN : in std_ulogic;
     CH0_TXPCSRESETMASK : in std_ulogic;
     CH0_TXPD : in std_logic_vector(1 downto 0);
     CH0_TXPHALIGNREQ : in std_ulogic;
     CH0_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH0_TXPHDLYPD : in std_ulogic;
     CH0_TXPHDLYRESET : in std_ulogic;
     CH0_TXPHDLYTSTCLK : in std_ulogic;
     CH0_TXPHSETINITREQ : in std_ulogic;
     CH0_TXPHSHIFT180 : in std_ulogic;
     CH0_TXPICODEOVRDEN : in std_ulogic;
     CH0_TXPICODERESET : in std_ulogic;
     CH0_TXPIPPMEN : in std_ulogic;
     CH0_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH0_TXPISOPD : in std_ulogic;
     CH0_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH0_TXPOLARITY : in std_ulogic;
     CH0_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH0_TXPRBSFORCEERR : in std_ulogic;
     CH0_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH0_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH0_TXPROGDIVRESET : in std_ulogic;
     CH0_TXRATE : in std_logic_vector(7 downto 0);
     CH0_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH0_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH0_TXSWING : in std_ulogic;
     CH0_TXSYNCALLIN : in std_ulogic;
     CH0_TXUSERRDY : in std_ulogic;
     CH0_TXUSRCLK : in std_ulogic;
     CH1_CDRBMCDRREQ : in std_ulogic;
     CH1_CDRFREQOS : in std_ulogic;
     CH1_CDRINCPCTRL : in std_ulogic;
     CH1_CDRSTEPDIR : in std_ulogic;
     CH1_CDRSTEPSQ : in std_ulogic;
     CH1_CDRSTEPSX : in std_ulogic;
     CH1_CFOKOVRDFINISH : in std_ulogic;
     CH1_CFOKOVRDPULSE : in std_ulogic;
     CH1_CFOKOVRDSTART : in std_ulogic;
     CH1_CLKRSVD0 : in std_ulogic;
     CH1_CLKRSVD1 : in std_ulogic;
     CH1_DMONFIFORESET : in std_ulogic;
     CH1_DMONITORCLK : in std_ulogic;
     CH1_EYESCANRESET : in std_ulogic;
     CH1_EYESCANTRIGGER : in std_ulogic;
     CH1_GTRSVD : in std_logic_vector(15 downto 0);
     CH1_GTRXRESET : in std_ulogic;
     CH1_GTTXRESET : in std_ulogic;
     CH1_GTYRXN : in std_ulogic;
     CH1_GTYRXP : in std_ulogic;
     CH1_HSDPPCSRESET : in std_ulogic;
     CH1_ILORESET : in std_ulogic;
     CH1_ILORESETMASK : in std_ulogic;
     CH1_LOOPBACK : in std_logic_vector(2 downto 0);
     CH1_PCIERSTB : in std_ulogic;
     CH1_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH1_PHYESMADAPTSAVE : in std_ulogic;
     CH1_RXCDRHOLD : in std_ulogic;
     CH1_RXCDROVRDEN : in std_ulogic;
     CH1_RXCDRRESET : in std_ulogic;
     CH1_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH1_RXDAPICODEOVRDEN : in std_ulogic;
     CH1_RXDAPICODERESET : in std_ulogic;
     CH1_RXDLYALIGNREQ : in std_ulogic;
     CH1_RXEQTRAINING : in std_ulogic;
     CH1_RXGEARBOXSLIP : in std_ulogic;
     CH1_RXLATCLK : in std_ulogic;
     CH1_RXLPMEN : in std_ulogic;
     CH1_RXMLDCHAINDONE : in std_ulogic;
     CH1_RXMLDCHAINREQ : in std_ulogic;
     CH1_RXMLFINEALIGNREQ : in std_ulogic;
     CH1_RXOOBRESET : in std_ulogic;
     CH1_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH1_RXPD : in std_logic_vector(1 downto 0);
     CH1_RXPHALIGNREQ : in std_ulogic;
     CH1_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH1_RXPHDLYPD : in std_ulogic;
     CH1_RXPHDLYRESET : in std_ulogic;
     CH1_RXPHSETINITREQ : in std_ulogic;
     CH1_RXPHSHIFT180 : in std_ulogic;
     CH1_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH1_RXPOLARITY : in std_ulogic;
     CH1_RXPRBSCNTRESET : in std_ulogic;
     CH1_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH1_RXPROGDIVRESET : in std_ulogic;
     CH1_RXRATE : in std_logic_vector(7 downto 0);
     CH1_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH1_RXSLIDE : in std_ulogic;
     CH1_RXSYNCALLIN : in std_ulogic;
     CH1_RXTERMINATION : in std_ulogic;
     CH1_RXUSERRDY : in std_ulogic;
     CH1_RXUSRCLK : in std_ulogic;
     CH1_TSTIN : in std_logic_vector(19 downto 0);
     CH1_TXCOMINIT : in std_ulogic;
     CH1_TXCOMSAS : in std_ulogic;
     CH1_TXCOMWAKE : in std_ulogic;
     CH1_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH1_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH1_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH1_TXDAPICODEOVRDEN : in std_ulogic;
     CH1_TXDAPICODERESET : in std_ulogic;
     CH1_TXDATA : in std_logic_vector(127 downto 0);
     CH1_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH1_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH1_TXDETECTRX : in std_ulogic;
     CH1_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH1_TXDLYALIGNREQ : in std_ulogic;
     CH1_TXELECIDLE : in std_ulogic;
     CH1_TXHEADER : in std_logic_vector(5 downto 0);
     CH1_TXINHIBIT : in std_ulogic;
     CH1_TXLATCLK : in std_ulogic;
     CH1_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH1_TXMARGIN : in std_logic_vector(2 downto 0);
     CH1_TXMLDCHAINDONE : in std_ulogic;
     CH1_TXMLDCHAINREQ : in std_ulogic;
     CH1_TXONESZEROS : in std_ulogic;
     CH1_TXPAUSEDELAYALIGN : in std_ulogic;
     CH1_TXPCSRESETMASK : in std_ulogic;
     CH1_TXPD : in std_logic_vector(1 downto 0);
     CH1_TXPHALIGNREQ : in std_ulogic;
     CH1_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH1_TXPHDLYPD : in std_ulogic;
     CH1_TXPHDLYRESET : in std_ulogic;
     CH1_TXPHDLYTSTCLK : in std_ulogic;
     CH1_TXPHSETINITREQ : in std_ulogic;
     CH1_TXPHSHIFT180 : in std_ulogic;
     CH1_TXPICODEOVRDEN : in std_ulogic;
     CH1_TXPICODERESET : in std_ulogic;
     CH1_TXPIPPMEN : in std_ulogic;
     CH1_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH1_TXPISOPD : in std_ulogic;
     CH1_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH1_TXPOLARITY : in std_ulogic;
     CH1_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH1_TXPRBSFORCEERR : in std_ulogic;
     CH1_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH1_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH1_TXPROGDIVRESET : in std_ulogic;
     CH1_TXRATE : in std_logic_vector(7 downto 0);
     CH1_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH1_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH1_TXSWING : in std_ulogic;
     CH1_TXSYNCALLIN : in std_ulogic;
     CH1_TXUSERRDY : in std_ulogic;
     CH1_TXUSRCLK : in std_ulogic;
     CH2_CDRBMCDRREQ : in std_ulogic;
     CH2_CDRFREQOS : in std_ulogic;
     CH2_CDRINCPCTRL : in std_ulogic;
     CH2_CDRSTEPDIR : in std_ulogic;
     CH2_CDRSTEPSQ : in std_ulogic;
     CH2_CDRSTEPSX : in std_ulogic;
     CH2_CFOKOVRDFINISH : in std_ulogic;
     CH2_CFOKOVRDPULSE : in std_ulogic;
     CH2_CFOKOVRDSTART : in std_ulogic;
     CH2_CLKRSVD0 : in std_ulogic;
     CH2_CLKRSVD1 : in std_ulogic;
     CH2_DMONFIFORESET : in std_ulogic;
     CH2_DMONITORCLK : in std_ulogic;
     CH2_EYESCANRESET : in std_ulogic;
     CH2_EYESCANTRIGGER : in std_ulogic;
     CH2_GTRSVD : in std_logic_vector(15 downto 0);
     CH2_GTRXRESET : in std_ulogic;
     CH2_GTTXRESET : in std_ulogic;
     CH2_GTYRXN : in std_ulogic;
     CH2_GTYRXP : in std_ulogic;
     CH2_HSDPPCSRESET : in std_ulogic;
     CH2_ILORESET : in std_ulogic;
     CH2_ILORESETMASK : in std_ulogic;
     CH2_LOOPBACK : in std_logic_vector(2 downto 0);
     CH2_PCIERSTB : in std_ulogic;
     CH2_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH2_PHYESMADAPTSAVE : in std_ulogic;
     CH2_RXCDRHOLD : in std_ulogic;
     CH2_RXCDROVRDEN : in std_ulogic;
     CH2_RXCDRRESET : in std_ulogic;
     CH2_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH2_RXDAPICODEOVRDEN : in std_ulogic;
     CH2_RXDAPICODERESET : in std_ulogic;
     CH2_RXDLYALIGNREQ : in std_ulogic;
     CH2_RXEQTRAINING : in std_ulogic;
     CH2_RXGEARBOXSLIP : in std_ulogic;
     CH2_RXLATCLK : in std_ulogic;
     CH2_RXLPMEN : in std_ulogic;
     CH2_RXMLDCHAINDONE : in std_ulogic;
     CH2_RXMLDCHAINREQ : in std_ulogic;
     CH2_RXMLFINEALIGNREQ : in std_ulogic;
     CH2_RXOOBRESET : in std_ulogic;
     CH2_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH2_RXPD : in std_logic_vector(1 downto 0);
     CH2_RXPHALIGNREQ : in std_ulogic;
     CH2_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH2_RXPHDLYPD : in std_ulogic;
     CH2_RXPHDLYRESET : in std_ulogic;
     CH2_RXPHSETINITREQ : in std_ulogic;
     CH2_RXPHSHIFT180 : in std_ulogic;
     CH2_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH2_RXPOLARITY : in std_ulogic;
     CH2_RXPRBSCNTRESET : in std_ulogic;
     CH2_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH2_RXPROGDIVRESET : in std_ulogic;
     CH2_RXRATE : in std_logic_vector(7 downto 0);
     CH2_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH2_RXSLIDE : in std_ulogic;
     CH2_RXSYNCALLIN : in std_ulogic;
     CH2_RXTERMINATION : in std_ulogic;
     CH2_RXUSERRDY : in std_ulogic;
     CH2_RXUSRCLK : in std_ulogic;
     CH2_TSTIN : in std_logic_vector(19 downto 0);
     CH2_TXCOMINIT : in std_ulogic;
     CH2_TXCOMSAS : in std_ulogic;
     CH2_TXCOMWAKE : in std_ulogic;
     CH2_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH2_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH2_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH2_TXDAPICODEOVRDEN : in std_ulogic;
     CH2_TXDAPICODERESET : in std_ulogic;
     CH2_TXDATA : in std_logic_vector(127 downto 0);
     CH2_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH2_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH2_TXDETECTRX : in std_ulogic;
     CH2_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH2_TXDLYALIGNREQ : in std_ulogic;
     CH2_TXELECIDLE : in std_ulogic;
     CH2_TXHEADER : in std_logic_vector(5 downto 0);
     CH2_TXINHIBIT : in std_ulogic;
     CH2_TXLATCLK : in std_ulogic;
     CH2_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH2_TXMARGIN : in std_logic_vector(2 downto 0);
     CH2_TXMLDCHAINDONE : in std_ulogic;
     CH2_TXMLDCHAINREQ : in std_ulogic;
     CH2_TXONESZEROS : in std_ulogic;
     CH2_TXPAUSEDELAYALIGN : in std_ulogic;
     CH2_TXPCSRESETMASK : in std_ulogic;
     CH2_TXPD : in std_logic_vector(1 downto 0);
     CH2_TXPHALIGNREQ : in std_ulogic;
     CH2_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH2_TXPHDLYPD : in std_ulogic;
     CH2_TXPHDLYRESET : in std_ulogic;
     CH2_TXPHDLYTSTCLK : in std_ulogic;
     CH2_TXPHSETINITREQ : in std_ulogic;
     CH2_TXPHSHIFT180 : in std_ulogic;
     CH2_TXPICODEOVRDEN : in std_ulogic;
     CH2_TXPICODERESET : in std_ulogic;
     CH2_TXPIPPMEN : in std_ulogic;
     CH2_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH2_TXPISOPD : in std_ulogic;
     CH2_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH2_TXPOLARITY : in std_ulogic;
     CH2_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH2_TXPRBSFORCEERR : in std_ulogic;
     CH2_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH2_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH2_TXPROGDIVRESET : in std_ulogic;
     CH2_TXRATE : in std_logic_vector(7 downto 0);
     CH2_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH2_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH2_TXSWING : in std_ulogic;
     CH2_TXSYNCALLIN : in std_ulogic;
     CH2_TXUSERRDY : in std_ulogic;
     CH2_TXUSRCLK : in std_ulogic;
     CH3_CDRBMCDRREQ : in std_ulogic;
     CH3_CDRFREQOS : in std_ulogic;
     CH3_CDRINCPCTRL : in std_ulogic;
     CH3_CDRSTEPDIR : in std_ulogic;
     CH3_CDRSTEPSQ : in std_ulogic;
     CH3_CDRSTEPSX : in std_ulogic;
     CH3_CFOKOVRDFINISH : in std_ulogic;
     CH3_CFOKOVRDPULSE : in std_ulogic;
     CH3_CFOKOVRDSTART : in std_ulogic;
     CH3_CLKRSVD0 : in std_ulogic;
     CH3_CLKRSVD1 : in std_ulogic;
     CH3_DMONFIFORESET : in std_ulogic;
     CH3_DMONITORCLK : in std_ulogic;
     CH3_EYESCANRESET : in std_ulogic;
     CH3_EYESCANTRIGGER : in std_ulogic;
     CH3_GTRSVD : in std_logic_vector(15 downto 0);
     CH3_GTRXRESET : in std_ulogic;
     CH3_GTTXRESET : in std_ulogic;
     CH3_GTYRXN : in std_ulogic;
     CH3_GTYRXP : in std_ulogic;
     CH3_HSDPPCSRESET : in std_ulogic;
     CH3_ILORESET : in std_ulogic;
     CH3_ILORESETMASK : in std_ulogic;
     CH3_LOOPBACK : in std_logic_vector(2 downto 0);
     CH3_PCIERSTB : in std_ulogic;
     CH3_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH3_PHYESMADAPTSAVE : in std_ulogic;
     CH3_RXCDRHOLD : in std_ulogic;
     CH3_RXCDROVRDEN : in std_ulogic;
     CH3_RXCDRRESET : in std_ulogic;
     CH3_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH3_RXDAPICODEOVRDEN : in std_ulogic;
     CH3_RXDAPICODERESET : in std_ulogic;
     CH3_RXDLYALIGNREQ : in std_ulogic;
     CH3_RXEQTRAINING : in std_ulogic;
     CH3_RXGEARBOXSLIP : in std_ulogic;
     CH3_RXLATCLK : in std_ulogic;
     CH3_RXLPMEN : in std_ulogic;
     CH3_RXMLDCHAINDONE : in std_ulogic;
     CH3_RXMLDCHAINREQ : in std_ulogic;
     CH3_RXMLFINEALIGNREQ : in std_ulogic;
     CH3_RXOOBRESET : in std_ulogic;
     CH3_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH3_RXPD : in std_logic_vector(1 downto 0);
     CH3_RXPHALIGNREQ : in std_ulogic;
     CH3_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH3_RXPHDLYPD : in std_ulogic;
     CH3_RXPHDLYRESET : in std_ulogic;
     CH3_RXPHSETINITREQ : in std_ulogic;
     CH3_RXPHSHIFT180 : in std_ulogic;
     CH3_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH3_RXPOLARITY : in std_ulogic;
     CH3_RXPRBSCNTRESET : in std_ulogic;
     CH3_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH3_RXPROGDIVRESET : in std_ulogic;
     CH3_RXRATE : in std_logic_vector(7 downto 0);
     CH3_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH3_RXSLIDE : in std_ulogic;
     CH3_RXSYNCALLIN : in std_ulogic;
     CH3_RXTERMINATION : in std_ulogic;
     CH3_RXUSERRDY : in std_ulogic;
     CH3_RXUSRCLK : in std_ulogic;
     CH3_TSTIN : in std_logic_vector(19 downto 0);
     CH3_TXCOMINIT : in std_ulogic;
     CH3_TXCOMSAS : in std_ulogic;
     CH3_TXCOMWAKE : in std_ulogic;
     CH3_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH3_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH3_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH3_TXDAPICODEOVRDEN : in std_ulogic;
     CH3_TXDAPICODERESET : in std_ulogic;
     CH3_TXDATA : in std_logic_vector(127 downto 0);
     CH3_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH3_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH3_TXDETECTRX : in std_ulogic;
     CH3_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH3_TXDLYALIGNREQ : in std_ulogic;
     CH3_TXELECIDLE : in std_ulogic;
     CH3_TXHEADER : in std_logic_vector(5 downto 0);
     CH3_TXINHIBIT : in std_ulogic;
     CH3_TXLATCLK : in std_ulogic;
     CH3_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH3_TXMARGIN : in std_logic_vector(2 downto 0);
     CH3_TXMLDCHAINDONE : in std_ulogic;
     CH3_TXMLDCHAINREQ : in std_ulogic;
     CH3_TXONESZEROS : in std_ulogic;
     CH3_TXPAUSEDELAYALIGN : in std_ulogic;
     CH3_TXPCSRESETMASK : in std_ulogic;
     CH3_TXPD : in std_logic_vector(1 downto 0);
     CH3_TXPHALIGNREQ : in std_ulogic;
     CH3_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH3_TXPHDLYPD : in std_ulogic;
     CH3_TXPHDLYRESET : in std_ulogic;
     CH3_TXPHDLYTSTCLK : in std_ulogic;
     CH3_TXPHSETINITREQ : in std_ulogic;
     CH3_TXPHSHIFT180 : in std_ulogic;
     CH3_TXPICODEOVRDEN : in std_ulogic;
     CH3_TXPICODERESET : in std_ulogic;
     CH3_TXPIPPMEN : in std_ulogic;
     CH3_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH3_TXPISOPD : in std_ulogic;
     CH3_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH3_TXPOLARITY : in std_ulogic;
     CH3_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH3_TXPRBSFORCEERR : in std_ulogic;
     CH3_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH3_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH3_TXPROGDIVRESET : in std_ulogic;
     CH3_TXRATE : in std_logic_vector(7 downto 0);
     CH3_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH3_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH3_TXSWING : in std_ulogic;
     CH3_TXSYNCALLIN : in std_ulogic;
     CH3_TXUSERRDY : in std_ulogic;
     CH3_TXUSRCLK : in std_ulogic;
     CTRLRSVDIN0 : in std_logic_vector(15 downto 0);
     CTRLRSVDIN1 : in std_logic_vector(13 downto 0);
     DEBUGTRACECLK : in std_ulogic;
     DEBUGTRACEREADY : in std_ulogic;
     GPI : in std_logic_vector(15 downto 0);
     HSCLK0_LCPLLCLKRSVD0 : in std_ulogic;
     HSCLK0_LCPLLCLKRSVD1 : in std_ulogic;
     HSCLK0_LCPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK0_LCPLLGTGREFCLK : in std_ulogic;
     HSCLK0_LCPLLGTREFCLK0 : in std_ulogic;
     HSCLK0_LCPLLGTREFCLK1 : in std_ulogic;
     HSCLK0_LCPLLNORTHREFCLK0 : in std_ulogic;
     HSCLK0_LCPLLNORTHREFCLK1 : in std_ulogic;
     HSCLK0_LCPLLPD : in std_ulogic;
     HSCLK0_LCPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK0_LCPLLRESET : in std_ulogic;
     HSCLK0_LCPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK0_LCPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK0_LCPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK0_LCPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK0_LCPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK0_LCPLLSDMTOGGLE : in std_ulogic;
     HSCLK0_LCPLLSOUTHREFCLK0 : in std_ulogic;
     HSCLK0_LCPLLSOUTHREFCLK1 : in std_ulogic;
     HSCLK0_RPLLCLKRSVD0 : in std_ulogic;
     HSCLK0_RPLLCLKRSVD1 : in std_ulogic;
     HSCLK0_RPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK0_RPLLGTGREFCLK : in std_ulogic;
     HSCLK0_RPLLGTREFCLK0 : in std_ulogic;
     HSCLK0_RPLLGTREFCLK1 : in std_ulogic;
     HSCLK0_RPLLNORTHREFCLK0 : in std_ulogic;
     HSCLK0_RPLLNORTHREFCLK1 : in std_ulogic;
     HSCLK0_RPLLPD : in std_ulogic;
     HSCLK0_RPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK0_RPLLRESET : in std_ulogic;
     HSCLK0_RPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK0_RPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK0_RPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK0_RPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK0_RPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK0_RPLLSDMTOGGLE : in std_ulogic;
     HSCLK0_RPLLSOUTHREFCLK0 : in std_ulogic;
     HSCLK0_RPLLSOUTHREFCLK1 : in std_ulogic;
     HSCLK1_LCPLLCLKRSVD0 : in std_ulogic;
     HSCLK1_LCPLLCLKRSVD1 : in std_ulogic;
     HSCLK1_LCPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK1_LCPLLGTGREFCLK : in std_ulogic;
     HSCLK1_LCPLLGTREFCLK0 : in std_ulogic;
     HSCLK1_LCPLLGTREFCLK1 : in std_ulogic;
     HSCLK1_LCPLLNORTHREFCLK0 : in std_ulogic;
     HSCLK1_LCPLLNORTHREFCLK1 : in std_ulogic;
     HSCLK1_LCPLLPD : in std_ulogic;
     HSCLK1_LCPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK1_LCPLLRESET : in std_ulogic;
     HSCLK1_LCPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK1_LCPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK1_LCPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK1_LCPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK1_LCPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK1_LCPLLSDMTOGGLE : in std_ulogic;
     HSCLK1_LCPLLSOUTHREFCLK0 : in std_ulogic;
     HSCLK1_LCPLLSOUTHREFCLK1 : in std_ulogic;
     HSCLK1_RPLLCLKRSVD0 : in std_ulogic;
     HSCLK1_RPLLCLKRSVD1 : in std_ulogic;
     HSCLK1_RPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK1_RPLLGTGREFCLK : in std_ulogic;
     HSCLK1_RPLLGTREFCLK0 : in std_ulogic;
     HSCLK1_RPLLGTREFCLK1 : in std_ulogic;
     HSCLK1_RPLLNORTHREFCLK0 : in std_ulogic;
     HSCLK1_RPLLNORTHREFCLK1 : in std_ulogic;
     HSCLK1_RPLLPD : in std_ulogic;
     HSCLK1_RPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK1_RPLLRESET : in std_ulogic;
     HSCLK1_RPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK1_RPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK1_RPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK1_RPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK1_RPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK1_RPLLSDMTOGGLE : in std_ulogic;
     HSCLK1_RPLLSOUTHREFCLK0 : in std_ulogic;
     HSCLK1_RPLLSOUTHREFCLK1 : in std_ulogic;
     M0_AXIS_TREADY : in std_ulogic;
     M1_AXIS_TREADY : in std_ulogic;
     M2_AXIS_TREADY : in std_ulogic;
     MSTRXRESET : in std_logic_vector(3 downto 0);
     MSTTXRESET : in std_logic_vector(3 downto 0);
     PCIELINKREACHTARGET : in std_ulogic;
     PCIELTSSM : in std_logic_vector(5 downto 0);
     PIPENORTHIN : in std_logic_vector(5 downto 0);
     PIPESOUTHIN : in std_logic_vector(5 downto 0);
     RCALENB : in std_ulogic;
     REFCLK0_CLKTESTSIG : in std_ulogic;
     REFCLK0_GTREFCLKPD : in std_ulogic;
     REFCLK1_CLKTESTSIG : in std_ulogic;
     REFCLK1_GTREFCLKPD : in std_ulogic;
     RESETDONE_NORTHIN : in std_logic_vector(1 downto 0);
     RESETDONE_SOUTHIN : in std_logic_vector(1 downto 0);
     RXMARGINCLK : in std_ulogic;
     RXMARGINREQCMD : in std_logic_vector(3 downto 0);
     RXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     RXMARGINREQPAYLD : in std_logic_vector(7 downto 0);
     RXMARGINREQREQ : in std_ulogic;
     RXMARGINRESACK : in std_ulogic;
     RXPINORTHIN : in std_logic_vector(3 downto 0);
     RXPISOUTHIN : in std_logic_vector(3 downto 0);
     S0_AXIS_TDATA : in std_logic_vector(31 downto 0);
     S0_AXIS_TLAST : in std_ulogic;
     S0_AXIS_TVALID : in std_ulogic;
     S1_AXIS_TDATA : in std_logic_vector(31 downto 0);
     S1_AXIS_TLAST : in std_ulogic;
     S1_AXIS_TVALID : in std_ulogic;
     S2_AXIS_TDATA : in std_logic_vector(31 downto 0);
     S2_AXIS_TLAST : in std_ulogic;
     S2_AXIS_TVALID : in std_ulogic;
     TRIGACKOUT0 : in std_ulogic;
     TRIGIN0 : in std_ulogic;
     TXPINORTHIN : in std_logic_vector(3 downto 0);
     TXPISOUTHIN : in std_logic_vector(3 downto 0);
     UBENABLE : in std_ulogic;
     UBINTR : in std_logic_vector(11 downto 0);
     UBIOLMBRST : in std_ulogic;
     UBMBRST : in std_ulogic;
     UBRXUART : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTYE5_QUAD : component is "PRIMITIVE";

----- component HARD_SYNC -----
component HARD_SYNC
  generic (
     INIT : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     LATENCY : integer := 2
  );
  port (
     DOUT : out std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HARD_SYNC : component is "PRIMITIVE";

----- component HBM_ONE_STACK_INTF -----
component HBM_ONE_STACK_INTF
  generic (
     CLK_SEL_00 : string := "FALSE";
     CLK_SEL_01 : string := "FALSE";
     CLK_SEL_02 : string := "FALSE";
     CLK_SEL_03 : string := "FALSE";
     CLK_SEL_04 : string := "FALSE";
     CLK_SEL_05 : string := "FALSE";
     CLK_SEL_06 : string := "FALSE";
     CLK_SEL_07 : string := "FALSE";
     CLK_SEL_08 : string := "FALSE";
     CLK_SEL_09 : string := "FALSE";
     CLK_SEL_10 : string := "FALSE";
     CLK_SEL_11 : string := "FALSE";
     CLK_SEL_12 : string := "FALSE";
     CLK_SEL_13 : string := "FALSE";
     CLK_SEL_14 : string := "FALSE";
     CLK_SEL_15 : string := "FALSE";
     DATARATE_00 : integer := 1800;
     DATARATE_01 : integer := 1800;
     DATARATE_02 : integer := 1800;
     DATARATE_03 : integer := 1800;
     DATARATE_04 : integer := 1800;
     DATARATE_05 : integer := 1800;
     DATARATE_06 : integer := 1800;
     DATARATE_07 : integer := 1800;
     DA_LOCKOUT : string := "FALSE";
     IS_APB_0_PCLK_INVERTED : bit := '0';
     IS_APB_0_PRESET_N_INVERTED : bit := '0';
     IS_AXI_00_ACLK_INVERTED : bit := '0';
     IS_AXI_00_ARESET_N_INVERTED : bit := '0';
     IS_AXI_01_ACLK_INVERTED : bit := '0';
     IS_AXI_01_ARESET_N_INVERTED : bit := '0';
     IS_AXI_02_ACLK_INVERTED : bit := '0';
     IS_AXI_02_ARESET_N_INVERTED : bit := '0';
     IS_AXI_03_ACLK_INVERTED : bit := '0';
     IS_AXI_03_ARESET_N_INVERTED : bit := '0';
     IS_AXI_04_ACLK_INVERTED : bit := '0';
     IS_AXI_04_ARESET_N_INVERTED : bit := '0';
     IS_AXI_05_ACLK_INVERTED : bit := '0';
     IS_AXI_05_ARESET_N_INVERTED : bit := '0';
     IS_AXI_06_ACLK_INVERTED : bit := '0';
     IS_AXI_06_ARESET_N_INVERTED : bit := '0';
     IS_AXI_07_ACLK_INVERTED : bit := '0';
     IS_AXI_07_ARESET_N_INVERTED : bit := '0';
     IS_AXI_08_ACLK_INVERTED : bit := '0';
     IS_AXI_08_ARESET_N_INVERTED : bit := '0';
     IS_AXI_09_ACLK_INVERTED : bit := '0';
     IS_AXI_09_ARESET_N_INVERTED : bit := '0';
     IS_AXI_10_ACLK_INVERTED : bit := '0';
     IS_AXI_10_ARESET_N_INVERTED : bit := '0';
     IS_AXI_11_ACLK_INVERTED : bit := '0';
     IS_AXI_11_ARESET_N_INVERTED : bit := '0';
     IS_AXI_12_ACLK_INVERTED : bit := '0';
     IS_AXI_12_ARESET_N_INVERTED : bit := '0';
     IS_AXI_13_ACLK_INVERTED : bit := '0';
     IS_AXI_13_ARESET_N_INVERTED : bit := '0';
     IS_AXI_14_ACLK_INVERTED : bit := '0';
     IS_AXI_14_ARESET_N_INVERTED : bit := '0';
     IS_AXI_15_ACLK_INVERTED : bit := '0';
     IS_AXI_15_ARESET_N_INVERTED : bit := '0';
     MC_ENABLE_0 : string := "FALSE";
     MC_ENABLE_1 : string := "FALSE";
     MC_ENABLE_2 : string := "FALSE";
     MC_ENABLE_3 : string := "FALSE";
     MC_ENABLE_4 : string := "FALSE";
     MC_ENABLE_5 : string := "FALSE";
     MC_ENABLE_6 : string := "FALSE";
     MC_ENABLE_7 : string := "FALSE";
     MC_ENABLE_APB : string := "FALSE";
     PAGEHIT_PERCENT_00 : integer := 75;
     PHY_ENABLE_00 : string := "FALSE";
     PHY_ENABLE_01 : string := "FALSE";
     PHY_ENABLE_02 : string := "FALSE";
     PHY_ENABLE_03 : string := "FALSE";
     PHY_ENABLE_04 : string := "FALSE";
     PHY_ENABLE_05 : string := "FALSE";
     PHY_ENABLE_06 : string := "FALSE";
     PHY_ENABLE_07 : string := "FALSE";
     PHY_ENABLE_08 : string := "FALSE";
     PHY_ENABLE_09 : string := "FALSE";
     PHY_ENABLE_10 : string := "FALSE";
     PHY_ENABLE_11 : string := "FALSE";
     PHY_ENABLE_12 : string := "FALSE";
     PHY_ENABLE_13 : string := "FALSE";
     PHY_ENABLE_14 : string := "FALSE";
     PHY_ENABLE_15 : string := "FALSE";
     PHY_ENABLE_APB : string := "FALSE";
     PHY_PCLK_INVERT_01 : string := "FALSE";
     READ_PERCENT_00 : integer := 50;
     READ_PERCENT_01 : integer := 50;
     READ_PERCENT_02 : integer := 50;
     READ_PERCENT_03 : integer := 50;
     READ_PERCENT_04 : integer := 50;
     READ_PERCENT_05 : integer := 50;
     READ_PERCENT_06 : integer := 50;
     READ_PERCENT_07 : integer := 50;
     READ_PERCENT_08 : integer := 50;
     READ_PERCENT_09 : integer := 50;
     READ_PERCENT_10 : integer := 50;
     READ_PERCENT_11 : integer := 50;
     READ_PERCENT_12 : integer := 50;
     READ_PERCENT_13 : integer := 50;
     READ_PERCENT_14 : integer := 50;
     READ_PERCENT_15 : integer := 50;
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     STACK_LOCATION : integer := 0;
     SWITCH_ENABLE : string := "FALSE";
     WRITE_PERCENT_00 : integer := 50;
     WRITE_PERCENT_01 : integer := 50;
     WRITE_PERCENT_02 : integer := 50;
     WRITE_PERCENT_03 : integer := 50;
     WRITE_PERCENT_04 : integer := 50;
     WRITE_PERCENT_05 : integer := 50;
     WRITE_PERCENT_06 : integer := 50;
     WRITE_PERCENT_07 : integer := 50;
     WRITE_PERCENT_08 : integer := 50;
     WRITE_PERCENT_09 : integer := 50;
     WRITE_PERCENT_10 : integer := 50;
     WRITE_PERCENT_11 : integer := 50;
     WRITE_PERCENT_12 : integer := 50;
     WRITE_PERCENT_13 : integer := 50;
     WRITE_PERCENT_14 : integer := 50;
     WRITE_PERCENT_15 : integer := 50
  );
  port (
     APB_0_PRDATA : out std_logic_vector(31 downto 0);
     APB_0_PREADY : out std_ulogic;
     APB_0_PSLVERR : out std_ulogic;
     AXI_00_ARREADY : out std_ulogic;
     AXI_00_AWREADY : out std_ulogic;
     AXI_00_BID : out std_logic_vector(5 downto 0);
     AXI_00_BRESP : out std_logic_vector(1 downto 0);
     AXI_00_BVALID : out std_ulogic;
     AXI_00_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_00_DFI_CLK_BUF : out std_ulogic;
     AXI_00_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_00_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_00_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_00_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_00_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_00_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_00_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_00_DFI_RST_N_BUF : out std_ulogic;
     AXI_00_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_00_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_00_RDATA : out std_logic_vector(255 downto 0);
     AXI_00_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_00_RID : out std_logic_vector(5 downto 0);
     AXI_00_RLAST : out std_ulogic;
     AXI_00_RRESP : out std_logic_vector(1 downto 0);
     AXI_00_RVALID : out std_ulogic;
     AXI_00_WREADY : out std_ulogic;
     AXI_01_ARREADY : out std_ulogic;
     AXI_01_AWREADY : out std_ulogic;
     AXI_01_BID : out std_logic_vector(5 downto 0);
     AXI_01_BRESP : out std_logic_vector(1 downto 0);
     AXI_01_BVALID : out std_ulogic;
     AXI_01_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_01_DFI_CLK_BUF : out std_ulogic;
     AXI_01_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_01_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_01_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_01_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_01_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_01_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_01_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_01_DFI_RST_N_BUF : out std_ulogic;
     AXI_01_RDATA : out std_logic_vector(255 downto 0);
     AXI_01_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_01_RID : out std_logic_vector(5 downto 0);
     AXI_01_RLAST : out std_ulogic;
     AXI_01_RRESP : out std_logic_vector(1 downto 0);
     AXI_01_RVALID : out std_ulogic;
     AXI_01_WREADY : out std_ulogic;
     AXI_02_ARREADY : out std_ulogic;
     AXI_02_AWREADY : out std_ulogic;
     AXI_02_BID : out std_logic_vector(5 downto 0);
     AXI_02_BRESP : out std_logic_vector(1 downto 0);
     AXI_02_BVALID : out std_ulogic;
     AXI_02_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_02_DFI_CLK_BUF : out std_ulogic;
     AXI_02_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_02_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_02_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_02_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_02_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_02_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_02_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_02_DFI_RST_N_BUF : out std_ulogic;
     AXI_02_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_02_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_02_RDATA : out std_logic_vector(255 downto 0);
     AXI_02_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_02_RID : out std_logic_vector(5 downto 0);
     AXI_02_RLAST : out std_ulogic;
     AXI_02_RRESP : out std_logic_vector(1 downto 0);
     AXI_02_RVALID : out std_ulogic;
     AXI_02_WREADY : out std_ulogic;
     AXI_03_ARREADY : out std_ulogic;
     AXI_03_AWREADY : out std_ulogic;
     AXI_03_BID : out std_logic_vector(5 downto 0);
     AXI_03_BRESP : out std_logic_vector(1 downto 0);
     AXI_03_BVALID : out std_ulogic;
     AXI_03_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_03_DFI_CLK_BUF : out std_ulogic;
     AXI_03_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_03_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_03_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_03_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_03_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_03_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_03_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_03_DFI_RST_N_BUF : out std_ulogic;
     AXI_03_RDATA : out std_logic_vector(255 downto 0);
     AXI_03_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_03_RID : out std_logic_vector(5 downto 0);
     AXI_03_RLAST : out std_ulogic;
     AXI_03_RRESP : out std_logic_vector(1 downto 0);
     AXI_03_RVALID : out std_ulogic;
     AXI_03_WREADY : out std_ulogic;
     AXI_04_ARREADY : out std_ulogic;
     AXI_04_AWREADY : out std_ulogic;
     AXI_04_BID : out std_logic_vector(5 downto 0);
     AXI_04_BRESP : out std_logic_vector(1 downto 0);
     AXI_04_BVALID : out std_ulogic;
     AXI_04_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_04_DFI_CLK_BUF : out std_ulogic;
     AXI_04_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_04_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_04_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_04_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_04_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_04_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_04_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_04_DFI_RST_N_BUF : out std_ulogic;
     AXI_04_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_04_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_04_RDATA : out std_logic_vector(255 downto 0);
     AXI_04_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_04_RID : out std_logic_vector(5 downto 0);
     AXI_04_RLAST : out std_ulogic;
     AXI_04_RRESP : out std_logic_vector(1 downto 0);
     AXI_04_RVALID : out std_ulogic;
     AXI_04_WREADY : out std_ulogic;
     AXI_05_ARREADY : out std_ulogic;
     AXI_05_AWREADY : out std_ulogic;
     AXI_05_BID : out std_logic_vector(5 downto 0);
     AXI_05_BRESP : out std_logic_vector(1 downto 0);
     AXI_05_BVALID : out std_ulogic;
     AXI_05_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_05_DFI_CLK_BUF : out std_ulogic;
     AXI_05_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_05_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_05_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_05_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_05_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_05_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_05_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_05_DFI_RST_N_BUF : out std_ulogic;
     AXI_05_RDATA : out std_logic_vector(255 downto 0);
     AXI_05_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_05_RID : out std_logic_vector(5 downto 0);
     AXI_05_RLAST : out std_ulogic;
     AXI_05_RRESP : out std_logic_vector(1 downto 0);
     AXI_05_RVALID : out std_ulogic;
     AXI_05_WREADY : out std_ulogic;
     AXI_06_ARREADY : out std_ulogic;
     AXI_06_AWREADY : out std_ulogic;
     AXI_06_BID : out std_logic_vector(5 downto 0);
     AXI_06_BRESP : out std_logic_vector(1 downto 0);
     AXI_06_BVALID : out std_ulogic;
     AXI_06_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_06_DFI_CLK_BUF : out std_ulogic;
     AXI_06_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_06_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_06_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_06_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_06_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_06_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_06_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_06_DFI_RST_N_BUF : out std_ulogic;
     AXI_06_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_06_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_06_RDATA : out std_logic_vector(255 downto 0);
     AXI_06_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_06_RID : out std_logic_vector(5 downto 0);
     AXI_06_RLAST : out std_ulogic;
     AXI_06_RRESP : out std_logic_vector(1 downto 0);
     AXI_06_RVALID : out std_ulogic;
     AXI_06_WREADY : out std_ulogic;
     AXI_07_ARREADY : out std_ulogic;
     AXI_07_AWREADY : out std_ulogic;
     AXI_07_BID : out std_logic_vector(5 downto 0);
     AXI_07_BRESP : out std_logic_vector(1 downto 0);
     AXI_07_BVALID : out std_ulogic;
     AXI_07_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_07_DFI_CLK_BUF : out std_ulogic;
     AXI_07_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_07_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_07_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_07_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_07_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_07_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_07_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_07_DFI_RST_N_BUF : out std_ulogic;
     AXI_07_RDATA : out std_logic_vector(255 downto 0);
     AXI_07_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_07_RID : out std_logic_vector(5 downto 0);
     AXI_07_RLAST : out std_ulogic;
     AXI_07_RRESP : out std_logic_vector(1 downto 0);
     AXI_07_RVALID : out std_ulogic;
     AXI_07_WREADY : out std_ulogic;
     AXI_08_ARREADY : out std_ulogic;
     AXI_08_AWREADY : out std_ulogic;
     AXI_08_BID : out std_logic_vector(5 downto 0);
     AXI_08_BRESP : out std_logic_vector(1 downto 0);
     AXI_08_BVALID : out std_ulogic;
     AXI_08_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_08_DFI_CLK_BUF : out std_ulogic;
     AXI_08_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_08_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_08_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_08_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_08_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_08_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_08_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_08_DFI_RST_N_BUF : out std_ulogic;
     AXI_08_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_08_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_08_RDATA : out std_logic_vector(255 downto 0);
     AXI_08_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_08_RID : out std_logic_vector(5 downto 0);
     AXI_08_RLAST : out std_ulogic;
     AXI_08_RRESP : out std_logic_vector(1 downto 0);
     AXI_08_RVALID : out std_ulogic;
     AXI_08_WREADY : out std_ulogic;
     AXI_09_ARREADY : out std_ulogic;
     AXI_09_AWREADY : out std_ulogic;
     AXI_09_BID : out std_logic_vector(5 downto 0);
     AXI_09_BRESP : out std_logic_vector(1 downto 0);
     AXI_09_BVALID : out std_ulogic;
     AXI_09_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_09_DFI_CLK_BUF : out std_ulogic;
     AXI_09_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_09_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_09_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_09_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_09_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_09_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_09_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_09_DFI_RST_N_BUF : out std_ulogic;
     AXI_09_RDATA : out std_logic_vector(255 downto 0);
     AXI_09_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_09_RID : out std_logic_vector(5 downto 0);
     AXI_09_RLAST : out std_ulogic;
     AXI_09_RRESP : out std_logic_vector(1 downto 0);
     AXI_09_RVALID : out std_ulogic;
     AXI_09_WREADY : out std_ulogic;
     AXI_10_ARREADY : out std_ulogic;
     AXI_10_AWREADY : out std_ulogic;
     AXI_10_BID : out std_logic_vector(5 downto 0);
     AXI_10_BRESP : out std_logic_vector(1 downto 0);
     AXI_10_BVALID : out std_ulogic;
     AXI_10_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_10_DFI_CLK_BUF : out std_ulogic;
     AXI_10_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_10_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_10_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_10_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_10_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_10_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_10_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_10_DFI_RST_N_BUF : out std_ulogic;
     AXI_10_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_10_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_10_RDATA : out std_logic_vector(255 downto 0);
     AXI_10_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_10_RID : out std_logic_vector(5 downto 0);
     AXI_10_RLAST : out std_ulogic;
     AXI_10_RRESP : out std_logic_vector(1 downto 0);
     AXI_10_RVALID : out std_ulogic;
     AXI_10_WREADY : out std_ulogic;
     AXI_11_ARREADY : out std_ulogic;
     AXI_11_AWREADY : out std_ulogic;
     AXI_11_BID : out std_logic_vector(5 downto 0);
     AXI_11_BRESP : out std_logic_vector(1 downto 0);
     AXI_11_BVALID : out std_ulogic;
     AXI_11_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_11_DFI_CLK_BUF : out std_ulogic;
     AXI_11_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_11_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_11_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_11_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_11_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_11_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_11_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_11_DFI_RST_N_BUF : out std_ulogic;
     AXI_11_RDATA : out std_logic_vector(255 downto 0);
     AXI_11_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_11_RID : out std_logic_vector(5 downto 0);
     AXI_11_RLAST : out std_ulogic;
     AXI_11_RRESP : out std_logic_vector(1 downto 0);
     AXI_11_RVALID : out std_ulogic;
     AXI_11_WREADY : out std_ulogic;
     AXI_12_ARREADY : out std_ulogic;
     AXI_12_AWREADY : out std_ulogic;
     AXI_12_BID : out std_logic_vector(5 downto 0);
     AXI_12_BRESP : out std_logic_vector(1 downto 0);
     AXI_12_BVALID : out std_ulogic;
     AXI_12_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_12_DFI_CLK_BUF : out std_ulogic;
     AXI_12_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_12_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_12_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_12_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_12_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_12_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_12_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_12_DFI_RST_N_BUF : out std_ulogic;
     AXI_12_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_12_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_12_RDATA : out std_logic_vector(255 downto 0);
     AXI_12_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_12_RID : out std_logic_vector(5 downto 0);
     AXI_12_RLAST : out std_ulogic;
     AXI_12_RRESP : out std_logic_vector(1 downto 0);
     AXI_12_RVALID : out std_ulogic;
     AXI_12_WREADY : out std_ulogic;
     AXI_13_ARREADY : out std_ulogic;
     AXI_13_AWREADY : out std_ulogic;
     AXI_13_BID : out std_logic_vector(5 downto 0);
     AXI_13_BRESP : out std_logic_vector(1 downto 0);
     AXI_13_BVALID : out std_ulogic;
     AXI_13_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_13_DFI_CLK_BUF : out std_ulogic;
     AXI_13_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_13_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_13_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_13_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_13_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_13_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_13_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_13_DFI_RST_N_BUF : out std_ulogic;
     AXI_13_RDATA : out std_logic_vector(255 downto 0);
     AXI_13_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_13_RID : out std_logic_vector(5 downto 0);
     AXI_13_RLAST : out std_ulogic;
     AXI_13_RRESP : out std_logic_vector(1 downto 0);
     AXI_13_RVALID : out std_ulogic;
     AXI_13_WREADY : out std_ulogic;
     AXI_14_ARREADY : out std_ulogic;
     AXI_14_AWREADY : out std_ulogic;
     AXI_14_BID : out std_logic_vector(5 downto 0);
     AXI_14_BRESP : out std_logic_vector(1 downto 0);
     AXI_14_BVALID : out std_ulogic;
     AXI_14_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_14_DFI_CLK_BUF : out std_ulogic;
     AXI_14_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_14_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_14_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_14_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_14_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_14_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_14_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_14_DFI_RST_N_BUF : out std_ulogic;
     AXI_14_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_14_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_14_RDATA : out std_logic_vector(255 downto 0);
     AXI_14_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_14_RID : out std_logic_vector(5 downto 0);
     AXI_14_RLAST : out std_ulogic;
     AXI_14_RRESP : out std_logic_vector(1 downto 0);
     AXI_14_RVALID : out std_ulogic;
     AXI_14_WREADY : out std_ulogic;
     AXI_15_ARREADY : out std_ulogic;
     AXI_15_AWREADY : out std_ulogic;
     AXI_15_BID : out std_logic_vector(5 downto 0);
     AXI_15_BRESP : out std_logic_vector(1 downto 0);
     AXI_15_BVALID : out std_ulogic;
     AXI_15_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_15_DFI_CLK_BUF : out std_ulogic;
     AXI_15_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_15_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_15_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_15_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_15_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_15_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_15_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_15_DFI_RST_N_BUF : out std_ulogic;
     AXI_15_RDATA : out std_logic_vector(255 downto 0);
     AXI_15_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_15_RID : out std_logic_vector(5 downto 0);
     AXI_15_RLAST : out std_ulogic;
     AXI_15_RRESP : out std_logic_vector(1 downto 0);
     AXI_15_RVALID : out std_ulogic;
     AXI_15_WREADY : out std_ulogic;
     DRAM_0_STAT_CATTRIP : out std_ulogic;
     DRAM_0_STAT_TEMP : out std_logic_vector(2 downto 0);
     APB_0_PADDR : in std_logic_vector(21 downto 0);
     APB_0_PCLK : in std_ulogic;
     APB_0_PENABLE : in std_ulogic;
     APB_0_PRESET_N : in std_ulogic;
     APB_0_PSEL : in std_ulogic;
     APB_0_PWDATA : in std_logic_vector(31 downto 0);
     APB_0_PWRITE : in std_ulogic;
     AXI_00_ACLK : in std_ulogic;
     AXI_00_ARADDR : in std_logic_vector(36 downto 0);
     AXI_00_ARBURST : in std_logic_vector(1 downto 0);
     AXI_00_ARESET_N : in std_ulogic;
     AXI_00_ARID : in std_logic_vector(5 downto 0);
     AXI_00_ARLEN : in std_logic_vector(3 downto 0);
     AXI_00_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_00_ARVALID : in std_ulogic;
     AXI_00_AWADDR : in std_logic_vector(36 downto 0);
     AXI_00_AWBURST : in std_logic_vector(1 downto 0);
     AXI_00_AWID : in std_logic_vector(5 downto 0);
     AXI_00_AWLEN : in std_logic_vector(3 downto 0);
     AXI_00_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_00_AWVALID : in std_ulogic;
     AXI_00_BREADY : in std_ulogic;
     AXI_00_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_00_RREADY : in std_ulogic;
     AXI_00_WDATA : in std_logic_vector(255 downto 0);
     AXI_00_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_00_WLAST : in std_ulogic;
     AXI_00_WSTRB : in std_logic_vector(31 downto 0);
     AXI_00_WVALID : in std_ulogic;
     AXI_01_ACLK : in std_ulogic;
     AXI_01_ARADDR : in std_logic_vector(36 downto 0);
     AXI_01_ARBURST : in std_logic_vector(1 downto 0);
     AXI_01_ARESET_N : in std_ulogic;
     AXI_01_ARID : in std_logic_vector(5 downto 0);
     AXI_01_ARLEN : in std_logic_vector(3 downto 0);
     AXI_01_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_01_ARVALID : in std_ulogic;
     AXI_01_AWADDR : in std_logic_vector(36 downto 0);
     AXI_01_AWBURST : in std_logic_vector(1 downto 0);
     AXI_01_AWID : in std_logic_vector(5 downto 0);
     AXI_01_AWLEN : in std_logic_vector(3 downto 0);
     AXI_01_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_01_AWVALID : in std_ulogic;
     AXI_01_BREADY : in std_ulogic;
     AXI_01_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_01_RREADY : in std_ulogic;
     AXI_01_WDATA : in std_logic_vector(255 downto 0);
     AXI_01_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_01_WLAST : in std_ulogic;
     AXI_01_WSTRB : in std_logic_vector(31 downto 0);
     AXI_01_WVALID : in std_ulogic;
     AXI_02_ACLK : in std_ulogic;
     AXI_02_ARADDR : in std_logic_vector(36 downto 0);
     AXI_02_ARBURST : in std_logic_vector(1 downto 0);
     AXI_02_ARESET_N : in std_ulogic;
     AXI_02_ARID : in std_logic_vector(5 downto 0);
     AXI_02_ARLEN : in std_logic_vector(3 downto 0);
     AXI_02_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_02_ARVALID : in std_ulogic;
     AXI_02_AWADDR : in std_logic_vector(36 downto 0);
     AXI_02_AWBURST : in std_logic_vector(1 downto 0);
     AXI_02_AWID : in std_logic_vector(5 downto 0);
     AXI_02_AWLEN : in std_logic_vector(3 downto 0);
     AXI_02_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_02_AWVALID : in std_ulogic;
     AXI_02_BREADY : in std_ulogic;
     AXI_02_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_02_RREADY : in std_ulogic;
     AXI_02_WDATA : in std_logic_vector(255 downto 0);
     AXI_02_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_02_WLAST : in std_ulogic;
     AXI_02_WSTRB : in std_logic_vector(31 downto 0);
     AXI_02_WVALID : in std_ulogic;
     AXI_03_ACLK : in std_ulogic;
     AXI_03_ARADDR : in std_logic_vector(36 downto 0);
     AXI_03_ARBURST : in std_logic_vector(1 downto 0);
     AXI_03_ARESET_N : in std_ulogic;
     AXI_03_ARID : in std_logic_vector(5 downto 0);
     AXI_03_ARLEN : in std_logic_vector(3 downto 0);
     AXI_03_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_03_ARVALID : in std_ulogic;
     AXI_03_AWADDR : in std_logic_vector(36 downto 0);
     AXI_03_AWBURST : in std_logic_vector(1 downto 0);
     AXI_03_AWID : in std_logic_vector(5 downto 0);
     AXI_03_AWLEN : in std_logic_vector(3 downto 0);
     AXI_03_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_03_AWVALID : in std_ulogic;
     AXI_03_BREADY : in std_ulogic;
     AXI_03_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_03_RREADY : in std_ulogic;
     AXI_03_WDATA : in std_logic_vector(255 downto 0);
     AXI_03_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_03_WLAST : in std_ulogic;
     AXI_03_WSTRB : in std_logic_vector(31 downto 0);
     AXI_03_WVALID : in std_ulogic;
     AXI_04_ACLK : in std_ulogic;
     AXI_04_ARADDR : in std_logic_vector(36 downto 0);
     AXI_04_ARBURST : in std_logic_vector(1 downto 0);
     AXI_04_ARESET_N : in std_ulogic;
     AXI_04_ARID : in std_logic_vector(5 downto 0);
     AXI_04_ARLEN : in std_logic_vector(3 downto 0);
     AXI_04_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_04_ARVALID : in std_ulogic;
     AXI_04_AWADDR : in std_logic_vector(36 downto 0);
     AXI_04_AWBURST : in std_logic_vector(1 downto 0);
     AXI_04_AWID : in std_logic_vector(5 downto 0);
     AXI_04_AWLEN : in std_logic_vector(3 downto 0);
     AXI_04_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_04_AWVALID : in std_ulogic;
     AXI_04_BREADY : in std_ulogic;
     AXI_04_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_04_RREADY : in std_ulogic;
     AXI_04_WDATA : in std_logic_vector(255 downto 0);
     AXI_04_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_04_WLAST : in std_ulogic;
     AXI_04_WSTRB : in std_logic_vector(31 downto 0);
     AXI_04_WVALID : in std_ulogic;
     AXI_05_ACLK : in std_ulogic;
     AXI_05_ARADDR : in std_logic_vector(36 downto 0);
     AXI_05_ARBURST : in std_logic_vector(1 downto 0);
     AXI_05_ARESET_N : in std_ulogic;
     AXI_05_ARID : in std_logic_vector(5 downto 0);
     AXI_05_ARLEN : in std_logic_vector(3 downto 0);
     AXI_05_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_05_ARVALID : in std_ulogic;
     AXI_05_AWADDR : in std_logic_vector(36 downto 0);
     AXI_05_AWBURST : in std_logic_vector(1 downto 0);
     AXI_05_AWID : in std_logic_vector(5 downto 0);
     AXI_05_AWLEN : in std_logic_vector(3 downto 0);
     AXI_05_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_05_AWVALID : in std_ulogic;
     AXI_05_BREADY : in std_ulogic;
     AXI_05_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_05_RREADY : in std_ulogic;
     AXI_05_WDATA : in std_logic_vector(255 downto 0);
     AXI_05_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_05_WLAST : in std_ulogic;
     AXI_05_WSTRB : in std_logic_vector(31 downto 0);
     AXI_05_WVALID : in std_ulogic;
     AXI_06_ACLK : in std_ulogic;
     AXI_06_ARADDR : in std_logic_vector(36 downto 0);
     AXI_06_ARBURST : in std_logic_vector(1 downto 0);
     AXI_06_ARESET_N : in std_ulogic;
     AXI_06_ARID : in std_logic_vector(5 downto 0);
     AXI_06_ARLEN : in std_logic_vector(3 downto 0);
     AXI_06_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_06_ARVALID : in std_ulogic;
     AXI_06_AWADDR : in std_logic_vector(36 downto 0);
     AXI_06_AWBURST : in std_logic_vector(1 downto 0);
     AXI_06_AWID : in std_logic_vector(5 downto 0);
     AXI_06_AWLEN : in std_logic_vector(3 downto 0);
     AXI_06_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_06_AWVALID : in std_ulogic;
     AXI_06_BREADY : in std_ulogic;
     AXI_06_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_06_RREADY : in std_ulogic;
     AXI_06_WDATA : in std_logic_vector(255 downto 0);
     AXI_06_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_06_WLAST : in std_ulogic;
     AXI_06_WSTRB : in std_logic_vector(31 downto 0);
     AXI_06_WVALID : in std_ulogic;
     AXI_07_ACLK : in std_ulogic;
     AXI_07_ARADDR : in std_logic_vector(36 downto 0);
     AXI_07_ARBURST : in std_logic_vector(1 downto 0);
     AXI_07_ARESET_N : in std_ulogic;
     AXI_07_ARID : in std_logic_vector(5 downto 0);
     AXI_07_ARLEN : in std_logic_vector(3 downto 0);
     AXI_07_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_07_ARVALID : in std_ulogic;
     AXI_07_AWADDR : in std_logic_vector(36 downto 0);
     AXI_07_AWBURST : in std_logic_vector(1 downto 0);
     AXI_07_AWID : in std_logic_vector(5 downto 0);
     AXI_07_AWLEN : in std_logic_vector(3 downto 0);
     AXI_07_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_07_AWVALID : in std_ulogic;
     AXI_07_BREADY : in std_ulogic;
     AXI_07_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_07_RREADY : in std_ulogic;
     AXI_07_WDATA : in std_logic_vector(255 downto 0);
     AXI_07_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_07_WLAST : in std_ulogic;
     AXI_07_WSTRB : in std_logic_vector(31 downto 0);
     AXI_07_WVALID : in std_ulogic;
     AXI_08_ACLK : in std_ulogic;
     AXI_08_ARADDR : in std_logic_vector(36 downto 0);
     AXI_08_ARBURST : in std_logic_vector(1 downto 0);
     AXI_08_ARESET_N : in std_ulogic;
     AXI_08_ARID : in std_logic_vector(5 downto 0);
     AXI_08_ARLEN : in std_logic_vector(3 downto 0);
     AXI_08_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_08_ARVALID : in std_ulogic;
     AXI_08_AWADDR : in std_logic_vector(36 downto 0);
     AXI_08_AWBURST : in std_logic_vector(1 downto 0);
     AXI_08_AWID : in std_logic_vector(5 downto 0);
     AXI_08_AWLEN : in std_logic_vector(3 downto 0);
     AXI_08_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_08_AWVALID : in std_ulogic;
     AXI_08_BREADY : in std_ulogic;
     AXI_08_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_08_RREADY : in std_ulogic;
     AXI_08_WDATA : in std_logic_vector(255 downto 0);
     AXI_08_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_08_WLAST : in std_ulogic;
     AXI_08_WSTRB : in std_logic_vector(31 downto 0);
     AXI_08_WVALID : in std_ulogic;
     AXI_09_ACLK : in std_ulogic;
     AXI_09_ARADDR : in std_logic_vector(36 downto 0);
     AXI_09_ARBURST : in std_logic_vector(1 downto 0);
     AXI_09_ARESET_N : in std_ulogic;
     AXI_09_ARID : in std_logic_vector(5 downto 0);
     AXI_09_ARLEN : in std_logic_vector(3 downto 0);
     AXI_09_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_09_ARVALID : in std_ulogic;
     AXI_09_AWADDR : in std_logic_vector(36 downto 0);
     AXI_09_AWBURST : in std_logic_vector(1 downto 0);
     AXI_09_AWID : in std_logic_vector(5 downto 0);
     AXI_09_AWLEN : in std_logic_vector(3 downto 0);
     AXI_09_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_09_AWVALID : in std_ulogic;
     AXI_09_BREADY : in std_ulogic;
     AXI_09_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_09_RREADY : in std_ulogic;
     AXI_09_WDATA : in std_logic_vector(255 downto 0);
     AXI_09_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_09_WLAST : in std_ulogic;
     AXI_09_WSTRB : in std_logic_vector(31 downto 0);
     AXI_09_WVALID : in std_ulogic;
     AXI_10_ACLK : in std_ulogic;
     AXI_10_ARADDR : in std_logic_vector(36 downto 0);
     AXI_10_ARBURST : in std_logic_vector(1 downto 0);
     AXI_10_ARESET_N : in std_ulogic;
     AXI_10_ARID : in std_logic_vector(5 downto 0);
     AXI_10_ARLEN : in std_logic_vector(3 downto 0);
     AXI_10_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_10_ARVALID : in std_ulogic;
     AXI_10_AWADDR : in std_logic_vector(36 downto 0);
     AXI_10_AWBURST : in std_logic_vector(1 downto 0);
     AXI_10_AWID : in std_logic_vector(5 downto 0);
     AXI_10_AWLEN : in std_logic_vector(3 downto 0);
     AXI_10_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_10_AWVALID : in std_ulogic;
     AXI_10_BREADY : in std_ulogic;
     AXI_10_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_10_RREADY : in std_ulogic;
     AXI_10_WDATA : in std_logic_vector(255 downto 0);
     AXI_10_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_10_WLAST : in std_ulogic;
     AXI_10_WSTRB : in std_logic_vector(31 downto 0);
     AXI_10_WVALID : in std_ulogic;
     AXI_11_ACLK : in std_ulogic;
     AXI_11_ARADDR : in std_logic_vector(36 downto 0);
     AXI_11_ARBURST : in std_logic_vector(1 downto 0);
     AXI_11_ARESET_N : in std_ulogic;
     AXI_11_ARID : in std_logic_vector(5 downto 0);
     AXI_11_ARLEN : in std_logic_vector(3 downto 0);
     AXI_11_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_11_ARVALID : in std_ulogic;
     AXI_11_AWADDR : in std_logic_vector(36 downto 0);
     AXI_11_AWBURST : in std_logic_vector(1 downto 0);
     AXI_11_AWID : in std_logic_vector(5 downto 0);
     AXI_11_AWLEN : in std_logic_vector(3 downto 0);
     AXI_11_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_11_AWVALID : in std_ulogic;
     AXI_11_BREADY : in std_ulogic;
     AXI_11_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_11_RREADY : in std_ulogic;
     AXI_11_WDATA : in std_logic_vector(255 downto 0);
     AXI_11_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_11_WLAST : in std_ulogic;
     AXI_11_WSTRB : in std_logic_vector(31 downto 0);
     AXI_11_WVALID : in std_ulogic;
     AXI_12_ACLK : in std_ulogic;
     AXI_12_ARADDR : in std_logic_vector(36 downto 0);
     AXI_12_ARBURST : in std_logic_vector(1 downto 0);
     AXI_12_ARESET_N : in std_ulogic;
     AXI_12_ARID : in std_logic_vector(5 downto 0);
     AXI_12_ARLEN : in std_logic_vector(3 downto 0);
     AXI_12_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_12_ARVALID : in std_ulogic;
     AXI_12_AWADDR : in std_logic_vector(36 downto 0);
     AXI_12_AWBURST : in std_logic_vector(1 downto 0);
     AXI_12_AWID : in std_logic_vector(5 downto 0);
     AXI_12_AWLEN : in std_logic_vector(3 downto 0);
     AXI_12_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_12_AWVALID : in std_ulogic;
     AXI_12_BREADY : in std_ulogic;
     AXI_12_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_12_RREADY : in std_ulogic;
     AXI_12_WDATA : in std_logic_vector(255 downto 0);
     AXI_12_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_12_WLAST : in std_ulogic;
     AXI_12_WSTRB : in std_logic_vector(31 downto 0);
     AXI_12_WVALID : in std_ulogic;
     AXI_13_ACLK : in std_ulogic;
     AXI_13_ARADDR : in std_logic_vector(36 downto 0);
     AXI_13_ARBURST : in std_logic_vector(1 downto 0);
     AXI_13_ARESET_N : in std_ulogic;
     AXI_13_ARID : in std_logic_vector(5 downto 0);
     AXI_13_ARLEN : in std_logic_vector(3 downto 0);
     AXI_13_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_13_ARVALID : in std_ulogic;
     AXI_13_AWADDR : in std_logic_vector(36 downto 0);
     AXI_13_AWBURST : in std_logic_vector(1 downto 0);
     AXI_13_AWID : in std_logic_vector(5 downto 0);
     AXI_13_AWLEN : in std_logic_vector(3 downto 0);
     AXI_13_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_13_AWVALID : in std_ulogic;
     AXI_13_BREADY : in std_ulogic;
     AXI_13_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_13_RREADY : in std_ulogic;
     AXI_13_WDATA : in std_logic_vector(255 downto 0);
     AXI_13_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_13_WLAST : in std_ulogic;
     AXI_13_WSTRB : in std_logic_vector(31 downto 0);
     AXI_13_WVALID : in std_ulogic;
     AXI_14_ACLK : in std_ulogic;
     AXI_14_ARADDR : in std_logic_vector(36 downto 0);
     AXI_14_ARBURST : in std_logic_vector(1 downto 0);
     AXI_14_ARESET_N : in std_ulogic;
     AXI_14_ARID : in std_logic_vector(5 downto 0);
     AXI_14_ARLEN : in std_logic_vector(3 downto 0);
     AXI_14_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_14_ARVALID : in std_ulogic;
     AXI_14_AWADDR : in std_logic_vector(36 downto 0);
     AXI_14_AWBURST : in std_logic_vector(1 downto 0);
     AXI_14_AWID : in std_logic_vector(5 downto 0);
     AXI_14_AWLEN : in std_logic_vector(3 downto 0);
     AXI_14_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_14_AWVALID : in std_ulogic;
     AXI_14_BREADY : in std_ulogic;
     AXI_14_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_14_RREADY : in std_ulogic;
     AXI_14_WDATA : in std_logic_vector(255 downto 0);
     AXI_14_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_14_WLAST : in std_ulogic;
     AXI_14_WSTRB : in std_logic_vector(31 downto 0);
     AXI_14_WVALID : in std_ulogic;
     AXI_15_ACLK : in std_ulogic;
     AXI_15_ARADDR : in std_logic_vector(36 downto 0);
     AXI_15_ARBURST : in std_logic_vector(1 downto 0);
     AXI_15_ARESET_N : in std_ulogic;
     AXI_15_ARID : in std_logic_vector(5 downto 0);
     AXI_15_ARLEN : in std_logic_vector(3 downto 0);
     AXI_15_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_15_ARVALID : in std_ulogic;
     AXI_15_AWADDR : in std_logic_vector(36 downto 0);
     AXI_15_AWBURST : in std_logic_vector(1 downto 0);
     AXI_15_AWID : in std_logic_vector(5 downto 0);
     AXI_15_AWLEN : in std_logic_vector(3 downto 0);
     AXI_15_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_15_AWVALID : in std_ulogic;
     AXI_15_BREADY : in std_ulogic;
     AXI_15_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_15_RREADY : in std_ulogic;
     AXI_15_WDATA : in std_logic_vector(255 downto 0);
     AXI_15_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_15_WLAST : in std_ulogic;
     AXI_15_WSTRB : in std_logic_vector(31 downto 0);
     AXI_15_WVALID : in std_ulogic;
     BSCAN_DRCK : in std_ulogic;
     BSCAN_TCK : in std_ulogic;
     HBM_REF_CLK : in std_ulogic;
     MBIST_EN_00 : in std_ulogic;
     MBIST_EN_01 : in std_ulogic;
     MBIST_EN_02 : in std_ulogic;
     MBIST_EN_03 : in std_ulogic;
     MBIST_EN_04 : in std_ulogic;
     MBIST_EN_05 : in std_ulogic;
     MBIST_EN_06 : in std_ulogic;
     MBIST_EN_07 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HBM_ONE_STACK_INTF : component is "PRIMITIVE";

----- component HBM_REF_CLK -----
component HBM_REF_CLK
  port (
     REF_CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HBM_REF_CLK : component is "PRIMITIVE";

----- component HBM_SNGLBLI_INTF_APB -----
component HBM_SNGLBLI_INTF_APB
  generic (
     CLK_SEL : string := "FALSE";
     IS_PCLK_INVERTED : bit := '0';
     IS_PRESET_N_INVERTED : bit := '0';
     MC_ENABLE : string := "FALSE";
     PHY_ENABLE : string := "FALSE";
     PHY_PCLK_INVERT : string := "FALSE";
     SWITCH_ENABLE : string := "FALSE"
  );
  port (
     CATTRIP_PIPE : out std_ulogic;
     PRDATA_PIPE : out std_logic_vector(31 downto 0);
     PREADY_PIPE : out std_ulogic;
     PSLVERR_PIPE : out std_ulogic;
     TEMP_PIPE : out std_logic_vector(2 downto 0);
     PADDR : in std_logic_vector(21 downto 0);
     PCLK : in std_ulogic;
     PENABLE : in std_ulogic;
     PRESET_N : in std_ulogic;
     PSEL : in std_ulogic;
     PWDATA : in std_logic_vector(31 downto 0);
     PWRITE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HBM_SNGLBLI_INTF_APB : component is "PRIMITIVE";

----- component HBM_SNGLBLI_INTF_AXI -----
component HBM_SNGLBLI_INTF_AXI
  generic (
     CLK_SEL : string := "FALSE";
     DATARATE : integer := 1800;
     IS_ACLK_INVERTED : bit := '0';
     IS_ARESET_N_INVERTED : bit := '0';
     MC_ENABLE : string := "FALSE";
     PAGEHIT_PERCENT : integer := 75;
     PHY_ENABLE : string := "FALSE";
     READ_PERCENT : integer := 50;
     SWITCH_ENABLE : string := "FALSE";
     WRITE_PERCENT : integer := 50
  );
  port (
     ARREADY_PIPE : out std_ulogic;
     AWREADY_PIPE : out std_ulogic;
     BID_PIPE : out std_logic_vector(5 downto 0);
     BRESP_PIPE : out std_logic_vector(1 downto 0);
     BVALID_PIPE : out std_ulogic;
     DFI_AW_AERR_N_PIPE : out std_logic_vector(1 downto 0);
     DFI_CLK_BUF : out std_ulogic;
     DFI_CTRLUPD_ACK_PIPE : out std_ulogic;
     DFI_DBI_BYTE_DISABLE_PIPE : out std_logic_vector(7 downto 0);
     DFI_DW_RDDATA_DBI_PIPE : out std_logic_vector(20 downto 0);
     DFI_DW_RDDATA_DERR_PIPE : out std_logic_vector(7 downto 0);
     DFI_DW_RDDATA_PAR_VALID_PIPE : out std_logic_vector(1 downto 0);
     DFI_DW_RDDATA_VALID_PIPE : out std_logic_vector(1 downto 0);
     DFI_INIT_COMPLETE_PIPE : out std_ulogic;
     DFI_PHYUPD_REQ_PIPE : out std_ulogic;
     DFI_PHYUPD_TYPE_PIPE : out std_ulogic;
     DFI_PHY_LP_STATE_PIPE : out std_ulogic;
     DFI_RST_N_BUF : out std_ulogic;
     MC_STATUS : out std_logic_vector(5 downto 0);
     PHY_STATUS : out std_logic_vector(7 downto 0);
     RDATA_PARITY_PIPE : out std_logic_vector(31 downto 0);
     RDATA_PIPE : out std_logic_vector(255 downto 0);
     RID_PIPE : out std_logic_vector(5 downto 0);
     RLAST_PIPE : out std_ulogic;
     RRESP_PIPE : out std_logic_vector(1 downto 0);
     RVALID_PIPE : out std_ulogic;
     STATUS : out std_logic_vector(5 downto 0);
     WREADY_PIPE : out std_ulogic;
     ACLK : in std_ulogic;
     ARADDR : in std_logic_vector(36 downto 0);
     ARBURST : in std_logic_vector(1 downto 0);
     ARESET_N : in std_ulogic;
     ARID : in std_logic_vector(5 downto 0);
     ARLEN : in std_logic_vector(3 downto 0);
     ARSIZE : in std_logic_vector(2 downto 0);
     ARVALID : in std_ulogic;
     AWADDR : in std_logic_vector(36 downto 0);
     AWBURST : in std_logic_vector(1 downto 0);
     AWID : in std_logic_vector(5 downto 0);
     AWLEN : in std_logic_vector(3 downto 0);
     AWSIZE : in std_logic_vector(2 downto 0);
     AWVALID : in std_ulogic;
     BREADY : in std_ulogic;
     BSCAN_CK : in std_ulogic;
     DFI_LP_PWR_X_REQ : in std_ulogic;
     MBIST_EN : in std_ulogic;
     RREADY : in std_ulogic;
     WDATA : in std_logic_vector(255 downto 0);
     WDATA_PARITY : in std_logic_vector(31 downto 0);
     WLAST : in std_ulogic;
     WSTRB : in std_logic_vector(31 downto 0);
     WVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HBM_SNGLBLI_INTF_AXI : component is "PRIMITIVE";

----- component HBM_TWO_STACK_INTF -----
component HBM_TWO_STACK_INTF
  generic (
     CLK_SEL_00 : string := "FALSE";
     CLK_SEL_01 : string := "FALSE";
     CLK_SEL_02 : string := "FALSE";
     CLK_SEL_03 : string := "FALSE";
     CLK_SEL_04 : string := "FALSE";
     CLK_SEL_05 : string := "FALSE";
     CLK_SEL_06 : string := "FALSE";
     CLK_SEL_07 : string := "FALSE";
     CLK_SEL_08 : string := "FALSE";
     CLK_SEL_09 : string := "FALSE";
     CLK_SEL_10 : string := "FALSE";
     CLK_SEL_11 : string := "FALSE";
     CLK_SEL_12 : string := "FALSE";
     CLK_SEL_13 : string := "FALSE";
     CLK_SEL_14 : string := "FALSE";
     CLK_SEL_15 : string := "FALSE";
     CLK_SEL_16 : string := "FALSE";
     CLK_SEL_17 : string := "FALSE";
     CLK_SEL_18 : string := "FALSE";
     CLK_SEL_19 : string := "FALSE";
     CLK_SEL_20 : string := "FALSE";
     CLK_SEL_21 : string := "FALSE";
     CLK_SEL_22 : string := "FALSE";
     CLK_SEL_23 : string := "FALSE";
     CLK_SEL_24 : string := "FALSE";
     CLK_SEL_25 : string := "FALSE";
     CLK_SEL_26 : string := "FALSE";
     CLK_SEL_27 : string := "FALSE";
     CLK_SEL_28 : string := "FALSE";
     CLK_SEL_29 : string := "FALSE";
     CLK_SEL_30 : string := "FALSE";
     CLK_SEL_31 : string := "FALSE";
     DATARATE_00 : integer := 1800;
     DATARATE_01 : integer := 1800;
     DATARATE_02 : integer := 1800;
     DATARATE_03 : integer := 1800;
     DATARATE_04 : integer := 1800;
     DATARATE_05 : integer := 1800;
     DATARATE_06 : integer := 1800;
     DATARATE_07 : integer := 1800;
     DATARATE_08 : integer := 1800;
     DATARATE_09 : integer := 1800;
     DATARATE_10 : integer := 1800;
     DATARATE_11 : integer := 1800;
     DATARATE_12 : integer := 1800;
     DATARATE_13 : integer := 1800;
     DATARATE_14 : integer := 1800;
     DATARATE_15 : integer := 1800;
     DA_LOCKOUT_0 : string := "FALSE";
     DA_LOCKOUT_1 : string := "FALSE";
     IS_APB_0_PCLK_INVERTED : bit := '0';
     IS_APB_0_PRESET_N_INVERTED : bit := '0';
     IS_APB_1_PCLK_INVERTED : bit := '0';
     IS_APB_1_PRESET_N_INVERTED : bit := '0';
     IS_AXI_00_ACLK_INVERTED : bit := '0';
     IS_AXI_00_ARESET_N_INVERTED : bit := '0';
     IS_AXI_01_ACLK_INVERTED : bit := '0';
     IS_AXI_01_ARESET_N_INVERTED : bit := '0';
     IS_AXI_02_ACLK_INVERTED : bit := '0';
     IS_AXI_02_ARESET_N_INVERTED : bit := '0';
     IS_AXI_03_ACLK_INVERTED : bit := '0';
     IS_AXI_03_ARESET_N_INVERTED : bit := '0';
     IS_AXI_04_ACLK_INVERTED : bit := '0';
     IS_AXI_04_ARESET_N_INVERTED : bit := '0';
     IS_AXI_05_ACLK_INVERTED : bit := '0';
     IS_AXI_05_ARESET_N_INVERTED : bit := '0';
     IS_AXI_06_ACLK_INVERTED : bit := '0';
     IS_AXI_06_ARESET_N_INVERTED : bit := '0';
     IS_AXI_07_ACLK_INVERTED : bit := '0';
     IS_AXI_07_ARESET_N_INVERTED : bit := '0';
     IS_AXI_08_ACLK_INVERTED : bit := '0';
     IS_AXI_08_ARESET_N_INVERTED : bit := '0';
     IS_AXI_09_ACLK_INVERTED : bit := '0';
     IS_AXI_09_ARESET_N_INVERTED : bit := '0';
     IS_AXI_10_ACLK_INVERTED : bit := '0';
     IS_AXI_10_ARESET_N_INVERTED : bit := '0';
     IS_AXI_11_ACLK_INVERTED : bit := '0';
     IS_AXI_11_ARESET_N_INVERTED : bit := '0';
     IS_AXI_12_ACLK_INVERTED : bit := '0';
     IS_AXI_12_ARESET_N_INVERTED : bit := '0';
     IS_AXI_13_ACLK_INVERTED : bit := '0';
     IS_AXI_13_ARESET_N_INVERTED : bit := '0';
     IS_AXI_14_ACLK_INVERTED : bit := '0';
     IS_AXI_14_ARESET_N_INVERTED : bit := '0';
     IS_AXI_15_ACLK_INVERTED : bit := '0';
     IS_AXI_15_ARESET_N_INVERTED : bit := '0';
     IS_AXI_16_ACLK_INVERTED : bit := '0';
     IS_AXI_16_ARESET_N_INVERTED : bit := '0';
     IS_AXI_17_ACLK_INVERTED : bit := '0';
     IS_AXI_17_ARESET_N_INVERTED : bit := '0';
     IS_AXI_18_ACLK_INVERTED : bit := '0';
     IS_AXI_18_ARESET_N_INVERTED : bit := '0';
     IS_AXI_19_ACLK_INVERTED : bit := '0';
     IS_AXI_19_ARESET_N_INVERTED : bit := '0';
     IS_AXI_20_ACLK_INVERTED : bit := '0';
     IS_AXI_20_ARESET_N_INVERTED : bit := '0';
     IS_AXI_21_ACLK_INVERTED : bit := '0';
     IS_AXI_21_ARESET_N_INVERTED : bit := '0';
     IS_AXI_22_ACLK_INVERTED : bit := '0';
     IS_AXI_22_ARESET_N_INVERTED : bit := '0';
     IS_AXI_23_ACLK_INVERTED : bit := '0';
     IS_AXI_23_ARESET_N_INVERTED : bit := '0';
     IS_AXI_24_ACLK_INVERTED : bit := '0';
     IS_AXI_24_ARESET_N_INVERTED : bit := '0';
     IS_AXI_25_ACLK_INVERTED : bit := '0';
     IS_AXI_25_ARESET_N_INVERTED : bit := '0';
     IS_AXI_26_ACLK_INVERTED : bit := '0';
     IS_AXI_26_ARESET_N_INVERTED : bit := '0';
     IS_AXI_27_ACLK_INVERTED : bit := '0';
     IS_AXI_27_ARESET_N_INVERTED : bit := '0';
     IS_AXI_28_ACLK_INVERTED : bit := '0';
     IS_AXI_28_ARESET_N_INVERTED : bit := '0';
     IS_AXI_29_ACLK_INVERTED : bit := '0';
     IS_AXI_29_ARESET_N_INVERTED : bit := '0';
     IS_AXI_30_ACLK_INVERTED : bit := '0';
     IS_AXI_30_ARESET_N_INVERTED : bit := '0';
     IS_AXI_31_ACLK_INVERTED : bit := '0';
     IS_AXI_31_ARESET_N_INVERTED : bit := '0';
     MC_ENABLE_00 : string := "FALSE";
     MC_ENABLE_01 : string := "FALSE";
     MC_ENABLE_02 : string := "FALSE";
     MC_ENABLE_03 : string := "FALSE";
     MC_ENABLE_04 : string := "FALSE";
     MC_ENABLE_05 : string := "FALSE";
     MC_ENABLE_06 : string := "FALSE";
     MC_ENABLE_07 : string := "FALSE";
     MC_ENABLE_08 : string := "FALSE";
     MC_ENABLE_09 : string := "FALSE";
     MC_ENABLE_10 : string := "FALSE";
     MC_ENABLE_11 : string := "FALSE";
     MC_ENABLE_12 : string := "FALSE";
     MC_ENABLE_13 : string := "FALSE";
     MC_ENABLE_14 : string := "FALSE";
     MC_ENABLE_15 : string := "FALSE";
     MC_ENABLE_APB_00 : string := "FALSE";
     MC_ENABLE_APB_01 : string := "FALSE";
     PAGEHIT_PERCENT_00 : integer := 75;
     PAGEHIT_PERCENT_01 : integer := 75;
     PHY_ENABLE_00 : string := "FALSE";
     PHY_ENABLE_01 : string := "FALSE";
     PHY_ENABLE_02 : string := "FALSE";
     PHY_ENABLE_03 : string := "FALSE";
     PHY_ENABLE_04 : string := "FALSE";
     PHY_ENABLE_05 : string := "FALSE";
     PHY_ENABLE_06 : string := "FALSE";
     PHY_ENABLE_07 : string := "FALSE";
     PHY_ENABLE_08 : string := "FALSE";
     PHY_ENABLE_09 : string := "FALSE";
     PHY_ENABLE_10 : string := "FALSE";
     PHY_ENABLE_11 : string := "FALSE";
     PHY_ENABLE_12 : string := "FALSE";
     PHY_ENABLE_13 : string := "FALSE";
     PHY_ENABLE_14 : string := "FALSE";
     PHY_ENABLE_15 : string := "FALSE";
     PHY_ENABLE_16 : string := "FALSE";
     PHY_ENABLE_17 : string := "FALSE";
     PHY_ENABLE_18 : string := "FALSE";
     PHY_ENABLE_19 : string := "FALSE";
     PHY_ENABLE_20 : string := "FALSE";
     PHY_ENABLE_21 : string := "FALSE";
     PHY_ENABLE_22 : string := "FALSE";
     PHY_ENABLE_23 : string := "FALSE";
     PHY_ENABLE_24 : string := "FALSE";
     PHY_ENABLE_25 : string := "FALSE";
     PHY_ENABLE_26 : string := "FALSE";
     PHY_ENABLE_27 : string := "FALSE";
     PHY_ENABLE_28 : string := "FALSE";
     PHY_ENABLE_29 : string := "FALSE";
     PHY_ENABLE_30 : string := "FALSE";
     PHY_ENABLE_31 : string := "FALSE";
     PHY_ENABLE_APB_00 : string := "FALSE";
     PHY_ENABLE_APB_01 : string := "FALSE";
     PHY_PCLK_INVERT_01 : string := "FALSE";
     PHY_PCLK_INVERT_02 : string := "FALSE";
     READ_PERCENT_00 : integer := 50;
     READ_PERCENT_01 : integer := 50;
     READ_PERCENT_02 : integer := 50;
     READ_PERCENT_03 : integer := 50;
     READ_PERCENT_04 : integer := 50;
     READ_PERCENT_05 : integer := 50;
     READ_PERCENT_06 : integer := 50;
     READ_PERCENT_07 : integer := 50;
     READ_PERCENT_08 : integer := 50;
     READ_PERCENT_09 : integer := 50;
     READ_PERCENT_10 : integer := 50;
     READ_PERCENT_11 : integer := 50;
     READ_PERCENT_12 : integer := 50;
     READ_PERCENT_13 : integer := 50;
     READ_PERCENT_14 : integer := 50;
     READ_PERCENT_15 : integer := 50;
     READ_PERCENT_16 : integer := 50;
     READ_PERCENT_17 : integer := 50;
     READ_PERCENT_18 : integer := 50;
     READ_PERCENT_19 : integer := 50;
     READ_PERCENT_20 : integer := 50;
     READ_PERCENT_21 : integer := 50;
     READ_PERCENT_22 : integer := 50;
     READ_PERCENT_23 : integer := 50;
     READ_PERCENT_24 : integer := 50;
     READ_PERCENT_25 : integer := 50;
     READ_PERCENT_26 : integer := 50;
     READ_PERCENT_27 : integer := 50;
     READ_PERCENT_28 : integer := 50;
     READ_PERCENT_29 : integer := 50;
     READ_PERCENT_30 : integer := 50;
     READ_PERCENT_31 : integer := 50;
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SWITCH_ENABLE_00 : string := "FALSE";
     SWITCH_ENABLE_01 : string := "FALSE";
     WRITE_PERCENT_00 : integer := 50;
     WRITE_PERCENT_01 : integer := 50;
     WRITE_PERCENT_02 : integer := 50;
     WRITE_PERCENT_03 : integer := 50;
     WRITE_PERCENT_04 : integer := 50;
     WRITE_PERCENT_05 : integer := 50;
     WRITE_PERCENT_06 : integer := 50;
     WRITE_PERCENT_07 : integer := 50;
     WRITE_PERCENT_08 : integer := 50;
     WRITE_PERCENT_09 : integer := 50;
     WRITE_PERCENT_10 : integer := 50;
     WRITE_PERCENT_11 : integer := 50;
     WRITE_PERCENT_12 : integer := 50;
     WRITE_PERCENT_13 : integer := 50;
     WRITE_PERCENT_14 : integer := 50;
     WRITE_PERCENT_15 : integer := 50;
     WRITE_PERCENT_16 : integer := 50;
     WRITE_PERCENT_17 : integer := 50;
     WRITE_PERCENT_18 : integer := 50;
     WRITE_PERCENT_19 : integer := 50;
     WRITE_PERCENT_20 : integer := 50;
     WRITE_PERCENT_21 : integer := 50;
     WRITE_PERCENT_22 : integer := 50;
     WRITE_PERCENT_23 : integer := 50;
     WRITE_PERCENT_24 : integer := 50;
     WRITE_PERCENT_25 : integer := 50;
     WRITE_PERCENT_26 : integer := 50;
     WRITE_PERCENT_27 : integer := 50;
     WRITE_PERCENT_28 : integer := 50;
     WRITE_PERCENT_29 : integer := 50;
     WRITE_PERCENT_30 : integer := 50;
     WRITE_PERCENT_31 : integer := 50
  );
  port (
     APB_0_PRDATA : out std_logic_vector(31 downto 0);
     APB_0_PREADY : out std_ulogic;
     APB_0_PSLVERR : out std_ulogic;
     APB_1_PRDATA : out std_logic_vector(31 downto 0);
     APB_1_PREADY : out std_ulogic;
     APB_1_PSLVERR : out std_ulogic;
     AXI_00_ARREADY : out std_ulogic;
     AXI_00_AWREADY : out std_ulogic;
     AXI_00_BID : out std_logic_vector(5 downto 0);
     AXI_00_BRESP : out std_logic_vector(1 downto 0);
     AXI_00_BVALID : out std_ulogic;
     AXI_00_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_00_DFI_CLK_BUF : out std_ulogic;
     AXI_00_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_00_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_00_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_00_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_00_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_00_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_00_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_00_DFI_RST_N_BUF : out std_ulogic;
     AXI_00_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_00_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_00_RDATA : out std_logic_vector(255 downto 0);
     AXI_00_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_00_RID : out std_logic_vector(5 downto 0);
     AXI_00_RLAST : out std_ulogic;
     AXI_00_RRESP : out std_logic_vector(1 downto 0);
     AXI_00_RVALID : out std_ulogic;
     AXI_00_WREADY : out std_ulogic;
     AXI_01_ARREADY : out std_ulogic;
     AXI_01_AWREADY : out std_ulogic;
     AXI_01_BID : out std_logic_vector(5 downto 0);
     AXI_01_BRESP : out std_logic_vector(1 downto 0);
     AXI_01_BVALID : out std_ulogic;
     AXI_01_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_01_DFI_CLK_BUF : out std_ulogic;
     AXI_01_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_01_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_01_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_01_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_01_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_01_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_01_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_01_DFI_RST_N_BUF : out std_ulogic;
     AXI_01_RDATA : out std_logic_vector(255 downto 0);
     AXI_01_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_01_RID : out std_logic_vector(5 downto 0);
     AXI_01_RLAST : out std_ulogic;
     AXI_01_RRESP : out std_logic_vector(1 downto 0);
     AXI_01_RVALID : out std_ulogic;
     AXI_01_WREADY : out std_ulogic;
     AXI_02_ARREADY : out std_ulogic;
     AXI_02_AWREADY : out std_ulogic;
     AXI_02_BID : out std_logic_vector(5 downto 0);
     AXI_02_BRESP : out std_logic_vector(1 downto 0);
     AXI_02_BVALID : out std_ulogic;
     AXI_02_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_02_DFI_CLK_BUF : out std_ulogic;
     AXI_02_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_02_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_02_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_02_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_02_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_02_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_02_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_02_DFI_RST_N_BUF : out std_ulogic;
     AXI_02_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_02_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_02_RDATA : out std_logic_vector(255 downto 0);
     AXI_02_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_02_RID : out std_logic_vector(5 downto 0);
     AXI_02_RLAST : out std_ulogic;
     AXI_02_RRESP : out std_logic_vector(1 downto 0);
     AXI_02_RVALID : out std_ulogic;
     AXI_02_WREADY : out std_ulogic;
     AXI_03_ARREADY : out std_ulogic;
     AXI_03_AWREADY : out std_ulogic;
     AXI_03_BID : out std_logic_vector(5 downto 0);
     AXI_03_BRESP : out std_logic_vector(1 downto 0);
     AXI_03_BVALID : out std_ulogic;
     AXI_03_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_03_DFI_CLK_BUF : out std_ulogic;
     AXI_03_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_03_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_03_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_03_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_03_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_03_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_03_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_03_DFI_RST_N_BUF : out std_ulogic;
     AXI_03_RDATA : out std_logic_vector(255 downto 0);
     AXI_03_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_03_RID : out std_logic_vector(5 downto 0);
     AXI_03_RLAST : out std_ulogic;
     AXI_03_RRESP : out std_logic_vector(1 downto 0);
     AXI_03_RVALID : out std_ulogic;
     AXI_03_WREADY : out std_ulogic;
     AXI_04_ARREADY : out std_ulogic;
     AXI_04_AWREADY : out std_ulogic;
     AXI_04_BID : out std_logic_vector(5 downto 0);
     AXI_04_BRESP : out std_logic_vector(1 downto 0);
     AXI_04_BVALID : out std_ulogic;
     AXI_04_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_04_DFI_CLK_BUF : out std_ulogic;
     AXI_04_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_04_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_04_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_04_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_04_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_04_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_04_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_04_DFI_RST_N_BUF : out std_ulogic;
     AXI_04_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_04_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_04_RDATA : out std_logic_vector(255 downto 0);
     AXI_04_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_04_RID : out std_logic_vector(5 downto 0);
     AXI_04_RLAST : out std_ulogic;
     AXI_04_RRESP : out std_logic_vector(1 downto 0);
     AXI_04_RVALID : out std_ulogic;
     AXI_04_WREADY : out std_ulogic;
     AXI_05_ARREADY : out std_ulogic;
     AXI_05_AWREADY : out std_ulogic;
     AXI_05_BID : out std_logic_vector(5 downto 0);
     AXI_05_BRESP : out std_logic_vector(1 downto 0);
     AXI_05_BVALID : out std_ulogic;
     AXI_05_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_05_DFI_CLK_BUF : out std_ulogic;
     AXI_05_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_05_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_05_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_05_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_05_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_05_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_05_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_05_DFI_RST_N_BUF : out std_ulogic;
     AXI_05_RDATA : out std_logic_vector(255 downto 0);
     AXI_05_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_05_RID : out std_logic_vector(5 downto 0);
     AXI_05_RLAST : out std_ulogic;
     AXI_05_RRESP : out std_logic_vector(1 downto 0);
     AXI_05_RVALID : out std_ulogic;
     AXI_05_WREADY : out std_ulogic;
     AXI_06_ARREADY : out std_ulogic;
     AXI_06_AWREADY : out std_ulogic;
     AXI_06_BID : out std_logic_vector(5 downto 0);
     AXI_06_BRESP : out std_logic_vector(1 downto 0);
     AXI_06_BVALID : out std_ulogic;
     AXI_06_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_06_DFI_CLK_BUF : out std_ulogic;
     AXI_06_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_06_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_06_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_06_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_06_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_06_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_06_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_06_DFI_RST_N_BUF : out std_ulogic;
     AXI_06_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_06_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_06_RDATA : out std_logic_vector(255 downto 0);
     AXI_06_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_06_RID : out std_logic_vector(5 downto 0);
     AXI_06_RLAST : out std_ulogic;
     AXI_06_RRESP : out std_logic_vector(1 downto 0);
     AXI_06_RVALID : out std_ulogic;
     AXI_06_WREADY : out std_ulogic;
     AXI_07_ARREADY : out std_ulogic;
     AXI_07_AWREADY : out std_ulogic;
     AXI_07_BID : out std_logic_vector(5 downto 0);
     AXI_07_BRESP : out std_logic_vector(1 downto 0);
     AXI_07_BVALID : out std_ulogic;
     AXI_07_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_07_DFI_CLK_BUF : out std_ulogic;
     AXI_07_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_07_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_07_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_07_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_07_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_07_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_07_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_07_DFI_RST_N_BUF : out std_ulogic;
     AXI_07_RDATA : out std_logic_vector(255 downto 0);
     AXI_07_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_07_RID : out std_logic_vector(5 downto 0);
     AXI_07_RLAST : out std_ulogic;
     AXI_07_RRESP : out std_logic_vector(1 downto 0);
     AXI_07_RVALID : out std_ulogic;
     AXI_07_WREADY : out std_ulogic;
     AXI_08_ARREADY : out std_ulogic;
     AXI_08_AWREADY : out std_ulogic;
     AXI_08_BID : out std_logic_vector(5 downto 0);
     AXI_08_BRESP : out std_logic_vector(1 downto 0);
     AXI_08_BVALID : out std_ulogic;
     AXI_08_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_08_DFI_CLK_BUF : out std_ulogic;
     AXI_08_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_08_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_08_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_08_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_08_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_08_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_08_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_08_DFI_RST_N_BUF : out std_ulogic;
     AXI_08_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_08_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_08_RDATA : out std_logic_vector(255 downto 0);
     AXI_08_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_08_RID : out std_logic_vector(5 downto 0);
     AXI_08_RLAST : out std_ulogic;
     AXI_08_RRESP : out std_logic_vector(1 downto 0);
     AXI_08_RVALID : out std_ulogic;
     AXI_08_WREADY : out std_ulogic;
     AXI_09_ARREADY : out std_ulogic;
     AXI_09_AWREADY : out std_ulogic;
     AXI_09_BID : out std_logic_vector(5 downto 0);
     AXI_09_BRESP : out std_logic_vector(1 downto 0);
     AXI_09_BVALID : out std_ulogic;
     AXI_09_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_09_DFI_CLK_BUF : out std_ulogic;
     AXI_09_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_09_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_09_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_09_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_09_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_09_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_09_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_09_DFI_RST_N_BUF : out std_ulogic;
     AXI_09_RDATA : out std_logic_vector(255 downto 0);
     AXI_09_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_09_RID : out std_logic_vector(5 downto 0);
     AXI_09_RLAST : out std_ulogic;
     AXI_09_RRESP : out std_logic_vector(1 downto 0);
     AXI_09_RVALID : out std_ulogic;
     AXI_09_WREADY : out std_ulogic;
     AXI_10_ARREADY : out std_ulogic;
     AXI_10_AWREADY : out std_ulogic;
     AXI_10_BID : out std_logic_vector(5 downto 0);
     AXI_10_BRESP : out std_logic_vector(1 downto 0);
     AXI_10_BVALID : out std_ulogic;
     AXI_10_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_10_DFI_CLK_BUF : out std_ulogic;
     AXI_10_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_10_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_10_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_10_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_10_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_10_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_10_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_10_DFI_RST_N_BUF : out std_ulogic;
     AXI_10_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_10_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_10_RDATA : out std_logic_vector(255 downto 0);
     AXI_10_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_10_RID : out std_logic_vector(5 downto 0);
     AXI_10_RLAST : out std_ulogic;
     AXI_10_RRESP : out std_logic_vector(1 downto 0);
     AXI_10_RVALID : out std_ulogic;
     AXI_10_WREADY : out std_ulogic;
     AXI_11_ARREADY : out std_ulogic;
     AXI_11_AWREADY : out std_ulogic;
     AXI_11_BID : out std_logic_vector(5 downto 0);
     AXI_11_BRESP : out std_logic_vector(1 downto 0);
     AXI_11_BVALID : out std_ulogic;
     AXI_11_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_11_DFI_CLK_BUF : out std_ulogic;
     AXI_11_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_11_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_11_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_11_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_11_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_11_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_11_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_11_DFI_RST_N_BUF : out std_ulogic;
     AXI_11_RDATA : out std_logic_vector(255 downto 0);
     AXI_11_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_11_RID : out std_logic_vector(5 downto 0);
     AXI_11_RLAST : out std_ulogic;
     AXI_11_RRESP : out std_logic_vector(1 downto 0);
     AXI_11_RVALID : out std_ulogic;
     AXI_11_WREADY : out std_ulogic;
     AXI_12_ARREADY : out std_ulogic;
     AXI_12_AWREADY : out std_ulogic;
     AXI_12_BID : out std_logic_vector(5 downto 0);
     AXI_12_BRESP : out std_logic_vector(1 downto 0);
     AXI_12_BVALID : out std_ulogic;
     AXI_12_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_12_DFI_CLK_BUF : out std_ulogic;
     AXI_12_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_12_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_12_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_12_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_12_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_12_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_12_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_12_DFI_RST_N_BUF : out std_ulogic;
     AXI_12_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_12_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_12_RDATA : out std_logic_vector(255 downto 0);
     AXI_12_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_12_RID : out std_logic_vector(5 downto 0);
     AXI_12_RLAST : out std_ulogic;
     AXI_12_RRESP : out std_logic_vector(1 downto 0);
     AXI_12_RVALID : out std_ulogic;
     AXI_12_WREADY : out std_ulogic;
     AXI_13_ARREADY : out std_ulogic;
     AXI_13_AWREADY : out std_ulogic;
     AXI_13_BID : out std_logic_vector(5 downto 0);
     AXI_13_BRESP : out std_logic_vector(1 downto 0);
     AXI_13_BVALID : out std_ulogic;
     AXI_13_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_13_DFI_CLK_BUF : out std_ulogic;
     AXI_13_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_13_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_13_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_13_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_13_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_13_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_13_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_13_DFI_RST_N_BUF : out std_ulogic;
     AXI_13_RDATA : out std_logic_vector(255 downto 0);
     AXI_13_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_13_RID : out std_logic_vector(5 downto 0);
     AXI_13_RLAST : out std_ulogic;
     AXI_13_RRESP : out std_logic_vector(1 downto 0);
     AXI_13_RVALID : out std_ulogic;
     AXI_13_WREADY : out std_ulogic;
     AXI_14_ARREADY : out std_ulogic;
     AXI_14_AWREADY : out std_ulogic;
     AXI_14_BID : out std_logic_vector(5 downto 0);
     AXI_14_BRESP : out std_logic_vector(1 downto 0);
     AXI_14_BVALID : out std_ulogic;
     AXI_14_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_14_DFI_CLK_BUF : out std_ulogic;
     AXI_14_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_14_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_14_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_14_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_14_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_14_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_14_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_14_DFI_RST_N_BUF : out std_ulogic;
     AXI_14_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_14_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_14_RDATA : out std_logic_vector(255 downto 0);
     AXI_14_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_14_RID : out std_logic_vector(5 downto 0);
     AXI_14_RLAST : out std_ulogic;
     AXI_14_RRESP : out std_logic_vector(1 downto 0);
     AXI_14_RVALID : out std_ulogic;
     AXI_14_WREADY : out std_ulogic;
     AXI_15_ARREADY : out std_ulogic;
     AXI_15_AWREADY : out std_ulogic;
     AXI_15_BID : out std_logic_vector(5 downto 0);
     AXI_15_BRESP : out std_logic_vector(1 downto 0);
     AXI_15_BVALID : out std_ulogic;
     AXI_15_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_15_DFI_CLK_BUF : out std_ulogic;
     AXI_15_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_15_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_15_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_15_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_15_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_15_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_15_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_15_DFI_RST_N_BUF : out std_ulogic;
     AXI_15_RDATA : out std_logic_vector(255 downto 0);
     AXI_15_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_15_RID : out std_logic_vector(5 downto 0);
     AXI_15_RLAST : out std_ulogic;
     AXI_15_RRESP : out std_logic_vector(1 downto 0);
     AXI_15_RVALID : out std_ulogic;
     AXI_15_WREADY : out std_ulogic;
     AXI_16_ARREADY : out std_ulogic;
     AXI_16_AWREADY : out std_ulogic;
     AXI_16_BID : out std_logic_vector(5 downto 0);
     AXI_16_BRESP : out std_logic_vector(1 downto 0);
     AXI_16_BVALID : out std_ulogic;
     AXI_16_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_16_DFI_CLK_BUF : out std_ulogic;
     AXI_16_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_16_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_16_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_16_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_16_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_16_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_16_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_16_DFI_RST_N_BUF : out std_ulogic;
     AXI_16_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_16_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_16_RDATA : out std_logic_vector(255 downto 0);
     AXI_16_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_16_RID : out std_logic_vector(5 downto 0);
     AXI_16_RLAST : out std_ulogic;
     AXI_16_RRESP : out std_logic_vector(1 downto 0);
     AXI_16_RVALID : out std_ulogic;
     AXI_16_WREADY : out std_ulogic;
     AXI_17_ARREADY : out std_ulogic;
     AXI_17_AWREADY : out std_ulogic;
     AXI_17_BID : out std_logic_vector(5 downto 0);
     AXI_17_BRESP : out std_logic_vector(1 downto 0);
     AXI_17_BVALID : out std_ulogic;
     AXI_17_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_17_DFI_CLK_BUF : out std_ulogic;
     AXI_17_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_17_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_17_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_17_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_17_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_17_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_17_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_17_DFI_RST_N_BUF : out std_ulogic;
     AXI_17_RDATA : out std_logic_vector(255 downto 0);
     AXI_17_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_17_RID : out std_logic_vector(5 downto 0);
     AXI_17_RLAST : out std_ulogic;
     AXI_17_RRESP : out std_logic_vector(1 downto 0);
     AXI_17_RVALID : out std_ulogic;
     AXI_17_WREADY : out std_ulogic;
     AXI_18_ARREADY : out std_ulogic;
     AXI_18_AWREADY : out std_ulogic;
     AXI_18_BID : out std_logic_vector(5 downto 0);
     AXI_18_BRESP : out std_logic_vector(1 downto 0);
     AXI_18_BVALID : out std_ulogic;
     AXI_18_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_18_DFI_CLK_BUF : out std_ulogic;
     AXI_18_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_18_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_18_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_18_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_18_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_18_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_18_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_18_DFI_RST_N_BUF : out std_ulogic;
     AXI_18_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_18_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_18_RDATA : out std_logic_vector(255 downto 0);
     AXI_18_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_18_RID : out std_logic_vector(5 downto 0);
     AXI_18_RLAST : out std_ulogic;
     AXI_18_RRESP : out std_logic_vector(1 downto 0);
     AXI_18_RVALID : out std_ulogic;
     AXI_18_WREADY : out std_ulogic;
     AXI_19_ARREADY : out std_ulogic;
     AXI_19_AWREADY : out std_ulogic;
     AXI_19_BID : out std_logic_vector(5 downto 0);
     AXI_19_BRESP : out std_logic_vector(1 downto 0);
     AXI_19_BVALID : out std_ulogic;
     AXI_19_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_19_DFI_CLK_BUF : out std_ulogic;
     AXI_19_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_19_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_19_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_19_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_19_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_19_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_19_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_19_DFI_RST_N_BUF : out std_ulogic;
     AXI_19_RDATA : out std_logic_vector(255 downto 0);
     AXI_19_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_19_RID : out std_logic_vector(5 downto 0);
     AXI_19_RLAST : out std_ulogic;
     AXI_19_RRESP : out std_logic_vector(1 downto 0);
     AXI_19_RVALID : out std_ulogic;
     AXI_19_WREADY : out std_ulogic;
     AXI_20_ARREADY : out std_ulogic;
     AXI_20_AWREADY : out std_ulogic;
     AXI_20_BID : out std_logic_vector(5 downto 0);
     AXI_20_BRESP : out std_logic_vector(1 downto 0);
     AXI_20_BVALID : out std_ulogic;
     AXI_20_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_20_DFI_CLK_BUF : out std_ulogic;
     AXI_20_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_20_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_20_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_20_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_20_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_20_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_20_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_20_DFI_RST_N_BUF : out std_ulogic;
     AXI_20_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_20_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_20_RDATA : out std_logic_vector(255 downto 0);
     AXI_20_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_20_RID : out std_logic_vector(5 downto 0);
     AXI_20_RLAST : out std_ulogic;
     AXI_20_RRESP : out std_logic_vector(1 downto 0);
     AXI_20_RVALID : out std_ulogic;
     AXI_20_WREADY : out std_ulogic;
     AXI_21_ARREADY : out std_ulogic;
     AXI_21_AWREADY : out std_ulogic;
     AXI_21_BID : out std_logic_vector(5 downto 0);
     AXI_21_BRESP : out std_logic_vector(1 downto 0);
     AXI_21_BVALID : out std_ulogic;
     AXI_21_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_21_DFI_CLK_BUF : out std_ulogic;
     AXI_21_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_21_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_21_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_21_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_21_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_21_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_21_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_21_DFI_RST_N_BUF : out std_ulogic;
     AXI_21_RDATA : out std_logic_vector(255 downto 0);
     AXI_21_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_21_RID : out std_logic_vector(5 downto 0);
     AXI_21_RLAST : out std_ulogic;
     AXI_21_RRESP : out std_logic_vector(1 downto 0);
     AXI_21_RVALID : out std_ulogic;
     AXI_21_WREADY : out std_ulogic;
     AXI_22_ARREADY : out std_ulogic;
     AXI_22_AWREADY : out std_ulogic;
     AXI_22_BID : out std_logic_vector(5 downto 0);
     AXI_22_BRESP : out std_logic_vector(1 downto 0);
     AXI_22_BVALID : out std_ulogic;
     AXI_22_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_22_DFI_CLK_BUF : out std_ulogic;
     AXI_22_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_22_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_22_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_22_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_22_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_22_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_22_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_22_DFI_RST_N_BUF : out std_ulogic;
     AXI_22_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_22_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_22_RDATA : out std_logic_vector(255 downto 0);
     AXI_22_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_22_RID : out std_logic_vector(5 downto 0);
     AXI_22_RLAST : out std_ulogic;
     AXI_22_RRESP : out std_logic_vector(1 downto 0);
     AXI_22_RVALID : out std_ulogic;
     AXI_22_WREADY : out std_ulogic;
     AXI_23_ARREADY : out std_ulogic;
     AXI_23_AWREADY : out std_ulogic;
     AXI_23_BID : out std_logic_vector(5 downto 0);
     AXI_23_BRESP : out std_logic_vector(1 downto 0);
     AXI_23_BVALID : out std_ulogic;
     AXI_23_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_23_DFI_CLK_BUF : out std_ulogic;
     AXI_23_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_23_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_23_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_23_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_23_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_23_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_23_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_23_DFI_RST_N_BUF : out std_ulogic;
     AXI_23_RDATA : out std_logic_vector(255 downto 0);
     AXI_23_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_23_RID : out std_logic_vector(5 downto 0);
     AXI_23_RLAST : out std_ulogic;
     AXI_23_RRESP : out std_logic_vector(1 downto 0);
     AXI_23_RVALID : out std_ulogic;
     AXI_23_WREADY : out std_ulogic;
     AXI_24_ARREADY : out std_ulogic;
     AXI_24_AWREADY : out std_ulogic;
     AXI_24_BID : out std_logic_vector(5 downto 0);
     AXI_24_BRESP : out std_logic_vector(1 downto 0);
     AXI_24_BVALID : out std_ulogic;
     AXI_24_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_24_DFI_CLK_BUF : out std_ulogic;
     AXI_24_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_24_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_24_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_24_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_24_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_24_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_24_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_24_DFI_RST_N_BUF : out std_ulogic;
     AXI_24_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_24_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_24_RDATA : out std_logic_vector(255 downto 0);
     AXI_24_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_24_RID : out std_logic_vector(5 downto 0);
     AXI_24_RLAST : out std_ulogic;
     AXI_24_RRESP : out std_logic_vector(1 downto 0);
     AXI_24_RVALID : out std_ulogic;
     AXI_24_WREADY : out std_ulogic;
     AXI_25_ARREADY : out std_ulogic;
     AXI_25_AWREADY : out std_ulogic;
     AXI_25_BID : out std_logic_vector(5 downto 0);
     AXI_25_BRESP : out std_logic_vector(1 downto 0);
     AXI_25_BVALID : out std_ulogic;
     AXI_25_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_25_DFI_CLK_BUF : out std_ulogic;
     AXI_25_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_25_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_25_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_25_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_25_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_25_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_25_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_25_DFI_RST_N_BUF : out std_ulogic;
     AXI_25_RDATA : out std_logic_vector(255 downto 0);
     AXI_25_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_25_RID : out std_logic_vector(5 downto 0);
     AXI_25_RLAST : out std_ulogic;
     AXI_25_RRESP : out std_logic_vector(1 downto 0);
     AXI_25_RVALID : out std_ulogic;
     AXI_25_WREADY : out std_ulogic;
     AXI_26_ARREADY : out std_ulogic;
     AXI_26_AWREADY : out std_ulogic;
     AXI_26_BID : out std_logic_vector(5 downto 0);
     AXI_26_BRESP : out std_logic_vector(1 downto 0);
     AXI_26_BVALID : out std_ulogic;
     AXI_26_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_26_DFI_CLK_BUF : out std_ulogic;
     AXI_26_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_26_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_26_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_26_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_26_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_26_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_26_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_26_DFI_RST_N_BUF : out std_ulogic;
     AXI_26_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_26_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_26_RDATA : out std_logic_vector(255 downto 0);
     AXI_26_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_26_RID : out std_logic_vector(5 downto 0);
     AXI_26_RLAST : out std_ulogic;
     AXI_26_RRESP : out std_logic_vector(1 downto 0);
     AXI_26_RVALID : out std_ulogic;
     AXI_26_WREADY : out std_ulogic;
     AXI_27_ARREADY : out std_ulogic;
     AXI_27_AWREADY : out std_ulogic;
     AXI_27_BID : out std_logic_vector(5 downto 0);
     AXI_27_BRESP : out std_logic_vector(1 downto 0);
     AXI_27_BVALID : out std_ulogic;
     AXI_27_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_27_DFI_CLK_BUF : out std_ulogic;
     AXI_27_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_27_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_27_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_27_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_27_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_27_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_27_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_27_DFI_RST_N_BUF : out std_ulogic;
     AXI_27_RDATA : out std_logic_vector(255 downto 0);
     AXI_27_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_27_RID : out std_logic_vector(5 downto 0);
     AXI_27_RLAST : out std_ulogic;
     AXI_27_RRESP : out std_logic_vector(1 downto 0);
     AXI_27_RVALID : out std_ulogic;
     AXI_27_WREADY : out std_ulogic;
     AXI_28_ARREADY : out std_ulogic;
     AXI_28_AWREADY : out std_ulogic;
     AXI_28_BID : out std_logic_vector(5 downto 0);
     AXI_28_BRESP : out std_logic_vector(1 downto 0);
     AXI_28_BVALID : out std_ulogic;
     AXI_28_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_28_DFI_CLK_BUF : out std_ulogic;
     AXI_28_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_28_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_28_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_28_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_28_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_28_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_28_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_28_DFI_RST_N_BUF : out std_ulogic;
     AXI_28_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_28_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_28_RDATA : out std_logic_vector(255 downto 0);
     AXI_28_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_28_RID : out std_logic_vector(5 downto 0);
     AXI_28_RLAST : out std_ulogic;
     AXI_28_RRESP : out std_logic_vector(1 downto 0);
     AXI_28_RVALID : out std_ulogic;
     AXI_28_WREADY : out std_ulogic;
     AXI_29_ARREADY : out std_ulogic;
     AXI_29_AWREADY : out std_ulogic;
     AXI_29_BID : out std_logic_vector(5 downto 0);
     AXI_29_BRESP : out std_logic_vector(1 downto 0);
     AXI_29_BVALID : out std_ulogic;
     AXI_29_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_29_DFI_CLK_BUF : out std_ulogic;
     AXI_29_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_29_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_29_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_29_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_29_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_29_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_29_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_29_DFI_RST_N_BUF : out std_ulogic;
     AXI_29_RDATA : out std_logic_vector(255 downto 0);
     AXI_29_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_29_RID : out std_logic_vector(5 downto 0);
     AXI_29_RLAST : out std_ulogic;
     AXI_29_RRESP : out std_logic_vector(1 downto 0);
     AXI_29_RVALID : out std_ulogic;
     AXI_29_WREADY : out std_ulogic;
     AXI_30_ARREADY : out std_ulogic;
     AXI_30_AWREADY : out std_ulogic;
     AXI_30_BID : out std_logic_vector(5 downto 0);
     AXI_30_BRESP : out std_logic_vector(1 downto 0);
     AXI_30_BVALID : out std_ulogic;
     AXI_30_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_30_DFI_CLK_BUF : out std_ulogic;
     AXI_30_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_30_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_30_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_30_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_30_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_30_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_30_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_30_DFI_RST_N_BUF : out std_ulogic;
     AXI_30_MC_STATUS : out std_logic_vector(5 downto 0);
     AXI_30_PHY_STATUS : out std_logic_vector(7 downto 0);
     AXI_30_RDATA : out std_logic_vector(255 downto 0);
     AXI_30_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_30_RID : out std_logic_vector(5 downto 0);
     AXI_30_RLAST : out std_ulogic;
     AXI_30_RRESP : out std_logic_vector(1 downto 0);
     AXI_30_RVALID : out std_ulogic;
     AXI_30_WREADY : out std_ulogic;
     AXI_31_ARREADY : out std_ulogic;
     AXI_31_AWREADY : out std_ulogic;
     AXI_31_BID : out std_logic_vector(5 downto 0);
     AXI_31_BRESP : out std_logic_vector(1 downto 0);
     AXI_31_BVALID : out std_ulogic;
     AXI_31_DFI_AW_AERR_N : out std_logic_vector(1 downto 0);
     AXI_31_DFI_CLK_BUF : out std_ulogic;
     AXI_31_DFI_DBI_BYTE_DISABLE : out std_logic_vector(7 downto 0);
     AXI_31_DFI_DW_RDDATA_DBI : out std_logic_vector(20 downto 0);
     AXI_31_DFI_DW_RDDATA_DERR : out std_logic_vector(7 downto 0);
     AXI_31_DFI_DW_RDDATA_VALID : out std_logic_vector(1 downto 0);
     AXI_31_DFI_INIT_COMPLETE : out std_ulogic;
     AXI_31_DFI_PHYUPD_REQ : out std_ulogic;
     AXI_31_DFI_PHY_LP_STATE : out std_ulogic;
     AXI_31_DFI_RST_N_BUF : out std_ulogic;
     AXI_31_RDATA : out std_logic_vector(255 downto 0);
     AXI_31_RDATA_PARITY : out std_logic_vector(31 downto 0);
     AXI_31_RID : out std_logic_vector(5 downto 0);
     AXI_31_RLAST : out std_ulogic;
     AXI_31_RRESP : out std_logic_vector(1 downto 0);
     AXI_31_RVALID : out std_ulogic;
     AXI_31_WREADY : out std_ulogic;
     DRAM_0_STAT_CATTRIP : out std_ulogic;
     DRAM_0_STAT_TEMP : out std_logic_vector(2 downto 0);
     DRAM_1_STAT_CATTRIP : out std_ulogic;
     DRAM_1_STAT_TEMP : out std_logic_vector(2 downto 0);
     APB_0_PADDR : in std_logic_vector(21 downto 0);
     APB_0_PCLK : in std_ulogic;
     APB_0_PENABLE : in std_ulogic;
     APB_0_PRESET_N : in std_ulogic;
     APB_0_PSEL : in std_ulogic;
     APB_0_PWDATA : in std_logic_vector(31 downto 0);
     APB_0_PWRITE : in std_ulogic;
     APB_1_PADDR : in std_logic_vector(21 downto 0);
     APB_1_PCLK : in std_ulogic;
     APB_1_PENABLE : in std_ulogic;
     APB_1_PRESET_N : in std_ulogic;
     APB_1_PSEL : in std_ulogic;
     APB_1_PWDATA : in std_logic_vector(31 downto 0);
     APB_1_PWRITE : in std_ulogic;
     AXI_00_ACLK : in std_ulogic;
     AXI_00_ARADDR : in std_logic_vector(36 downto 0);
     AXI_00_ARBURST : in std_logic_vector(1 downto 0);
     AXI_00_ARESET_N : in std_ulogic;
     AXI_00_ARID : in std_logic_vector(5 downto 0);
     AXI_00_ARLEN : in std_logic_vector(3 downto 0);
     AXI_00_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_00_ARVALID : in std_ulogic;
     AXI_00_AWADDR : in std_logic_vector(36 downto 0);
     AXI_00_AWBURST : in std_logic_vector(1 downto 0);
     AXI_00_AWID : in std_logic_vector(5 downto 0);
     AXI_00_AWLEN : in std_logic_vector(3 downto 0);
     AXI_00_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_00_AWVALID : in std_ulogic;
     AXI_00_BREADY : in std_ulogic;
     AXI_00_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_00_RREADY : in std_ulogic;
     AXI_00_WDATA : in std_logic_vector(255 downto 0);
     AXI_00_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_00_WLAST : in std_ulogic;
     AXI_00_WSTRB : in std_logic_vector(31 downto 0);
     AXI_00_WVALID : in std_ulogic;
     AXI_01_ACLK : in std_ulogic;
     AXI_01_ARADDR : in std_logic_vector(36 downto 0);
     AXI_01_ARBURST : in std_logic_vector(1 downto 0);
     AXI_01_ARESET_N : in std_ulogic;
     AXI_01_ARID : in std_logic_vector(5 downto 0);
     AXI_01_ARLEN : in std_logic_vector(3 downto 0);
     AXI_01_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_01_ARVALID : in std_ulogic;
     AXI_01_AWADDR : in std_logic_vector(36 downto 0);
     AXI_01_AWBURST : in std_logic_vector(1 downto 0);
     AXI_01_AWID : in std_logic_vector(5 downto 0);
     AXI_01_AWLEN : in std_logic_vector(3 downto 0);
     AXI_01_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_01_AWVALID : in std_ulogic;
     AXI_01_BREADY : in std_ulogic;
     AXI_01_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_01_RREADY : in std_ulogic;
     AXI_01_WDATA : in std_logic_vector(255 downto 0);
     AXI_01_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_01_WLAST : in std_ulogic;
     AXI_01_WSTRB : in std_logic_vector(31 downto 0);
     AXI_01_WVALID : in std_ulogic;
     AXI_02_ACLK : in std_ulogic;
     AXI_02_ARADDR : in std_logic_vector(36 downto 0);
     AXI_02_ARBURST : in std_logic_vector(1 downto 0);
     AXI_02_ARESET_N : in std_ulogic;
     AXI_02_ARID : in std_logic_vector(5 downto 0);
     AXI_02_ARLEN : in std_logic_vector(3 downto 0);
     AXI_02_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_02_ARVALID : in std_ulogic;
     AXI_02_AWADDR : in std_logic_vector(36 downto 0);
     AXI_02_AWBURST : in std_logic_vector(1 downto 0);
     AXI_02_AWID : in std_logic_vector(5 downto 0);
     AXI_02_AWLEN : in std_logic_vector(3 downto 0);
     AXI_02_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_02_AWVALID : in std_ulogic;
     AXI_02_BREADY : in std_ulogic;
     AXI_02_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_02_RREADY : in std_ulogic;
     AXI_02_WDATA : in std_logic_vector(255 downto 0);
     AXI_02_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_02_WLAST : in std_ulogic;
     AXI_02_WSTRB : in std_logic_vector(31 downto 0);
     AXI_02_WVALID : in std_ulogic;
     AXI_03_ACLK : in std_ulogic;
     AXI_03_ARADDR : in std_logic_vector(36 downto 0);
     AXI_03_ARBURST : in std_logic_vector(1 downto 0);
     AXI_03_ARESET_N : in std_ulogic;
     AXI_03_ARID : in std_logic_vector(5 downto 0);
     AXI_03_ARLEN : in std_logic_vector(3 downto 0);
     AXI_03_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_03_ARVALID : in std_ulogic;
     AXI_03_AWADDR : in std_logic_vector(36 downto 0);
     AXI_03_AWBURST : in std_logic_vector(1 downto 0);
     AXI_03_AWID : in std_logic_vector(5 downto 0);
     AXI_03_AWLEN : in std_logic_vector(3 downto 0);
     AXI_03_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_03_AWVALID : in std_ulogic;
     AXI_03_BREADY : in std_ulogic;
     AXI_03_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_03_RREADY : in std_ulogic;
     AXI_03_WDATA : in std_logic_vector(255 downto 0);
     AXI_03_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_03_WLAST : in std_ulogic;
     AXI_03_WSTRB : in std_logic_vector(31 downto 0);
     AXI_03_WVALID : in std_ulogic;
     AXI_04_ACLK : in std_ulogic;
     AXI_04_ARADDR : in std_logic_vector(36 downto 0);
     AXI_04_ARBURST : in std_logic_vector(1 downto 0);
     AXI_04_ARESET_N : in std_ulogic;
     AXI_04_ARID : in std_logic_vector(5 downto 0);
     AXI_04_ARLEN : in std_logic_vector(3 downto 0);
     AXI_04_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_04_ARVALID : in std_ulogic;
     AXI_04_AWADDR : in std_logic_vector(36 downto 0);
     AXI_04_AWBURST : in std_logic_vector(1 downto 0);
     AXI_04_AWID : in std_logic_vector(5 downto 0);
     AXI_04_AWLEN : in std_logic_vector(3 downto 0);
     AXI_04_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_04_AWVALID : in std_ulogic;
     AXI_04_BREADY : in std_ulogic;
     AXI_04_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_04_RREADY : in std_ulogic;
     AXI_04_WDATA : in std_logic_vector(255 downto 0);
     AXI_04_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_04_WLAST : in std_ulogic;
     AXI_04_WSTRB : in std_logic_vector(31 downto 0);
     AXI_04_WVALID : in std_ulogic;
     AXI_05_ACLK : in std_ulogic;
     AXI_05_ARADDR : in std_logic_vector(36 downto 0);
     AXI_05_ARBURST : in std_logic_vector(1 downto 0);
     AXI_05_ARESET_N : in std_ulogic;
     AXI_05_ARID : in std_logic_vector(5 downto 0);
     AXI_05_ARLEN : in std_logic_vector(3 downto 0);
     AXI_05_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_05_ARVALID : in std_ulogic;
     AXI_05_AWADDR : in std_logic_vector(36 downto 0);
     AXI_05_AWBURST : in std_logic_vector(1 downto 0);
     AXI_05_AWID : in std_logic_vector(5 downto 0);
     AXI_05_AWLEN : in std_logic_vector(3 downto 0);
     AXI_05_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_05_AWVALID : in std_ulogic;
     AXI_05_BREADY : in std_ulogic;
     AXI_05_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_05_RREADY : in std_ulogic;
     AXI_05_WDATA : in std_logic_vector(255 downto 0);
     AXI_05_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_05_WLAST : in std_ulogic;
     AXI_05_WSTRB : in std_logic_vector(31 downto 0);
     AXI_05_WVALID : in std_ulogic;
     AXI_06_ACLK : in std_ulogic;
     AXI_06_ARADDR : in std_logic_vector(36 downto 0);
     AXI_06_ARBURST : in std_logic_vector(1 downto 0);
     AXI_06_ARESET_N : in std_ulogic;
     AXI_06_ARID : in std_logic_vector(5 downto 0);
     AXI_06_ARLEN : in std_logic_vector(3 downto 0);
     AXI_06_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_06_ARVALID : in std_ulogic;
     AXI_06_AWADDR : in std_logic_vector(36 downto 0);
     AXI_06_AWBURST : in std_logic_vector(1 downto 0);
     AXI_06_AWID : in std_logic_vector(5 downto 0);
     AXI_06_AWLEN : in std_logic_vector(3 downto 0);
     AXI_06_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_06_AWVALID : in std_ulogic;
     AXI_06_BREADY : in std_ulogic;
     AXI_06_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_06_RREADY : in std_ulogic;
     AXI_06_WDATA : in std_logic_vector(255 downto 0);
     AXI_06_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_06_WLAST : in std_ulogic;
     AXI_06_WSTRB : in std_logic_vector(31 downto 0);
     AXI_06_WVALID : in std_ulogic;
     AXI_07_ACLK : in std_ulogic;
     AXI_07_ARADDR : in std_logic_vector(36 downto 0);
     AXI_07_ARBURST : in std_logic_vector(1 downto 0);
     AXI_07_ARESET_N : in std_ulogic;
     AXI_07_ARID : in std_logic_vector(5 downto 0);
     AXI_07_ARLEN : in std_logic_vector(3 downto 0);
     AXI_07_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_07_ARVALID : in std_ulogic;
     AXI_07_AWADDR : in std_logic_vector(36 downto 0);
     AXI_07_AWBURST : in std_logic_vector(1 downto 0);
     AXI_07_AWID : in std_logic_vector(5 downto 0);
     AXI_07_AWLEN : in std_logic_vector(3 downto 0);
     AXI_07_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_07_AWVALID : in std_ulogic;
     AXI_07_BREADY : in std_ulogic;
     AXI_07_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_07_RREADY : in std_ulogic;
     AXI_07_WDATA : in std_logic_vector(255 downto 0);
     AXI_07_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_07_WLAST : in std_ulogic;
     AXI_07_WSTRB : in std_logic_vector(31 downto 0);
     AXI_07_WVALID : in std_ulogic;
     AXI_08_ACLK : in std_ulogic;
     AXI_08_ARADDR : in std_logic_vector(36 downto 0);
     AXI_08_ARBURST : in std_logic_vector(1 downto 0);
     AXI_08_ARESET_N : in std_ulogic;
     AXI_08_ARID : in std_logic_vector(5 downto 0);
     AXI_08_ARLEN : in std_logic_vector(3 downto 0);
     AXI_08_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_08_ARVALID : in std_ulogic;
     AXI_08_AWADDR : in std_logic_vector(36 downto 0);
     AXI_08_AWBURST : in std_logic_vector(1 downto 0);
     AXI_08_AWID : in std_logic_vector(5 downto 0);
     AXI_08_AWLEN : in std_logic_vector(3 downto 0);
     AXI_08_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_08_AWVALID : in std_ulogic;
     AXI_08_BREADY : in std_ulogic;
     AXI_08_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_08_RREADY : in std_ulogic;
     AXI_08_WDATA : in std_logic_vector(255 downto 0);
     AXI_08_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_08_WLAST : in std_ulogic;
     AXI_08_WSTRB : in std_logic_vector(31 downto 0);
     AXI_08_WVALID : in std_ulogic;
     AXI_09_ACLK : in std_ulogic;
     AXI_09_ARADDR : in std_logic_vector(36 downto 0);
     AXI_09_ARBURST : in std_logic_vector(1 downto 0);
     AXI_09_ARESET_N : in std_ulogic;
     AXI_09_ARID : in std_logic_vector(5 downto 0);
     AXI_09_ARLEN : in std_logic_vector(3 downto 0);
     AXI_09_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_09_ARVALID : in std_ulogic;
     AXI_09_AWADDR : in std_logic_vector(36 downto 0);
     AXI_09_AWBURST : in std_logic_vector(1 downto 0);
     AXI_09_AWID : in std_logic_vector(5 downto 0);
     AXI_09_AWLEN : in std_logic_vector(3 downto 0);
     AXI_09_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_09_AWVALID : in std_ulogic;
     AXI_09_BREADY : in std_ulogic;
     AXI_09_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_09_RREADY : in std_ulogic;
     AXI_09_WDATA : in std_logic_vector(255 downto 0);
     AXI_09_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_09_WLAST : in std_ulogic;
     AXI_09_WSTRB : in std_logic_vector(31 downto 0);
     AXI_09_WVALID : in std_ulogic;
     AXI_10_ACLK : in std_ulogic;
     AXI_10_ARADDR : in std_logic_vector(36 downto 0);
     AXI_10_ARBURST : in std_logic_vector(1 downto 0);
     AXI_10_ARESET_N : in std_ulogic;
     AXI_10_ARID : in std_logic_vector(5 downto 0);
     AXI_10_ARLEN : in std_logic_vector(3 downto 0);
     AXI_10_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_10_ARVALID : in std_ulogic;
     AXI_10_AWADDR : in std_logic_vector(36 downto 0);
     AXI_10_AWBURST : in std_logic_vector(1 downto 0);
     AXI_10_AWID : in std_logic_vector(5 downto 0);
     AXI_10_AWLEN : in std_logic_vector(3 downto 0);
     AXI_10_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_10_AWVALID : in std_ulogic;
     AXI_10_BREADY : in std_ulogic;
     AXI_10_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_10_RREADY : in std_ulogic;
     AXI_10_WDATA : in std_logic_vector(255 downto 0);
     AXI_10_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_10_WLAST : in std_ulogic;
     AXI_10_WSTRB : in std_logic_vector(31 downto 0);
     AXI_10_WVALID : in std_ulogic;
     AXI_11_ACLK : in std_ulogic;
     AXI_11_ARADDR : in std_logic_vector(36 downto 0);
     AXI_11_ARBURST : in std_logic_vector(1 downto 0);
     AXI_11_ARESET_N : in std_ulogic;
     AXI_11_ARID : in std_logic_vector(5 downto 0);
     AXI_11_ARLEN : in std_logic_vector(3 downto 0);
     AXI_11_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_11_ARVALID : in std_ulogic;
     AXI_11_AWADDR : in std_logic_vector(36 downto 0);
     AXI_11_AWBURST : in std_logic_vector(1 downto 0);
     AXI_11_AWID : in std_logic_vector(5 downto 0);
     AXI_11_AWLEN : in std_logic_vector(3 downto 0);
     AXI_11_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_11_AWVALID : in std_ulogic;
     AXI_11_BREADY : in std_ulogic;
     AXI_11_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_11_RREADY : in std_ulogic;
     AXI_11_WDATA : in std_logic_vector(255 downto 0);
     AXI_11_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_11_WLAST : in std_ulogic;
     AXI_11_WSTRB : in std_logic_vector(31 downto 0);
     AXI_11_WVALID : in std_ulogic;
     AXI_12_ACLK : in std_ulogic;
     AXI_12_ARADDR : in std_logic_vector(36 downto 0);
     AXI_12_ARBURST : in std_logic_vector(1 downto 0);
     AXI_12_ARESET_N : in std_ulogic;
     AXI_12_ARID : in std_logic_vector(5 downto 0);
     AXI_12_ARLEN : in std_logic_vector(3 downto 0);
     AXI_12_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_12_ARVALID : in std_ulogic;
     AXI_12_AWADDR : in std_logic_vector(36 downto 0);
     AXI_12_AWBURST : in std_logic_vector(1 downto 0);
     AXI_12_AWID : in std_logic_vector(5 downto 0);
     AXI_12_AWLEN : in std_logic_vector(3 downto 0);
     AXI_12_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_12_AWVALID : in std_ulogic;
     AXI_12_BREADY : in std_ulogic;
     AXI_12_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_12_RREADY : in std_ulogic;
     AXI_12_WDATA : in std_logic_vector(255 downto 0);
     AXI_12_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_12_WLAST : in std_ulogic;
     AXI_12_WSTRB : in std_logic_vector(31 downto 0);
     AXI_12_WVALID : in std_ulogic;
     AXI_13_ACLK : in std_ulogic;
     AXI_13_ARADDR : in std_logic_vector(36 downto 0);
     AXI_13_ARBURST : in std_logic_vector(1 downto 0);
     AXI_13_ARESET_N : in std_ulogic;
     AXI_13_ARID : in std_logic_vector(5 downto 0);
     AXI_13_ARLEN : in std_logic_vector(3 downto 0);
     AXI_13_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_13_ARVALID : in std_ulogic;
     AXI_13_AWADDR : in std_logic_vector(36 downto 0);
     AXI_13_AWBURST : in std_logic_vector(1 downto 0);
     AXI_13_AWID : in std_logic_vector(5 downto 0);
     AXI_13_AWLEN : in std_logic_vector(3 downto 0);
     AXI_13_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_13_AWVALID : in std_ulogic;
     AXI_13_BREADY : in std_ulogic;
     AXI_13_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_13_RREADY : in std_ulogic;
     AXI_13_WDATA : in std_logic_vector(255 downto 0);
     AXI_13_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_13_WLAST : in std_ulogic;
     AXI_13_WSTRB : in std_logic_vector(31 downto 0);
     AXI_13_WVALID : in std_ulogic;
     AXI_14_ACLK : in std_ulogic;
     AXI_14_ARADDR : in std_logic_vector(36 downto 0);
     AXI_14_ARBURST : in std_logic_vector(1 downto 0);
     AXI_14_ARESET_N : in std_ulogic;
     AXI_14_ARID : in std_logic_vector(5 downto 0);
     AXI_14_ARLEN : in std_logic_vector(3 downto 0);
     AXI_14_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_14_ARVALID : in std_ulogic;
     AXI_14_AWADDR : in std_logic_vector(36 downto 0);
     AXI_14_AWBURST : in std_logic_vector(1 downto 0);
     AXI_14_AWID : in std_logic_vector(5 downto 0);
     AXI_14_AWLEN : in std_logic_vector(3 downto 0);
     AXI_14_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_14_AWVALID : in std_ulogic;
     AXI_14_BREADY : in std_ulogic;
     AXI_14_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_14_RREADY : in std_ulogic;
     AXI_14_WDATA : in std_logic_vector(255 downto 0);
     AXI_14_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_14_WLAST : in std_ulogic;
     AXI_14_WSTRB : in std_logic_vector(31 downto 0);
     AXI_14_WVALID : in std_ulogic;
     AXI_15_ACLK : in std_ulogic;
     AXI_15_ARADDR : in std_logic_vector(36 downto 0);
     AXI_15_ARBURST : in std_logic_vector(1 downto 0);
     AXI_15_ARESET_N : in std_ulogic;
     AXI_15_ARID : in std_logic_vector(5 downto 0);
     AXI_15_ARLEN : in std_logic_vector(3 downto 0);
     AXI_15_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_15_ARVALID : in std_ulogic;
     AXI_15_AWADDR : in std_logic_vector(36 downto 0);
     AXI_15_AWBURST : in std_logic_vector(1 downto 0);
     AXI_15_AWID : in std_logic_vector(5 downto 0);
     AXI_15_AWLEN : in std_logic_vector(3 downto 0);
     AXI_15_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_15_AWVALID : in std_ulogic;
     AXI_15_BREADY : in std_ulogic;
     AXI_15_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_15_RREADY : in std_ulogic;
     AXI_15_WDATA : in std_logic_vector(255 downto 0);
     AXI_15_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_15_WLAST : in std_ulogic;
     AXI_15_WSTRB : in std_logic_vector(31 downto 0);
     AXI_15_WVALID : in std_ulogic;
     AXI_16_ACLK : in std_ulogic;
     AXI_16_ARADDR : in std_logic_vector(36 downto 0);
     AXI_16_ARBURST : in std_logic_vector(1 downto 0);
     AXI_16_ARESET_N : in std_ulogic;
     AXI_16_ARID : in std_logic_vector(5 downto 0);
     AXI_16_ARLEN : in std_logic_vector(3 downto 0);
     AXI_16_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_16_ARVALID : in std_ulogic;
     AXI_16_AWADDR : in std_logic_vector(36 downto 0);
     AXI_16_AWBURST : in std_logic_vector(1 downto 0);
     AXI_16_AWID : in std_logic_vector(5 downto 0);
     AXI_16_AWLEN : in std_logic_vector(3 downto 0);
     AXI_16_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_16_AWVALID : in std_ulogic;
     AXI_16_BREADY : in std_ulogic;
     AXI_16_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_16_RREADY : in std_ulogic;
     AXI_16_WDATA : in std_logic_vector(255 downto 0);
     AXI_16_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_16_WLAST : in std_ulogic;
     AXI_16_WSTRB : in std_logic_vector(31 downto 0);
     AXI_16_WVALID : in std_ulogic;
     AXI_17_ACLK : in std_ulogic;
     AXI_17_ARADDR : in std_logic_vector(36 downto 0);
     AXI_17_ARBURST : in std_logic_vector(1 downto 0);
     AXI_17_ARESET_N : in std_ulogic;
     AXI_17_ARID : in std_logic_vector(5 downto 0);
     AXI_17_ARLEN : in std_logic_vector(3 downto 0);
     AXI_17_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_17_ARVALID : in std_ulogic;
     AXI_17_AWADDR : in std_logic_vector(36 downto 0);
     AXI_17_AWBURST : in std_logic_vector(1 downto 0);
     AXI_17_AWID : in std_logic_vector(5 downto 0);
     AXI_17_AWLEN : in std_logic_vector(3 downto 0);
     AXI_17_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_17_AWVALID : in std_ulogic;
     AXI_17_BREADY : in std_ulogic;
     AXI_17_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_17_RREADY : in std_ulogic;
     AXI_17_WDATA : in std_logic_vector(255 downto 0);
     AXI_17_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_17_WLAST : in std_ulogic;
     AXI_17_WSTRB : in std_logic_vector(31 downto 0);
     AXI_17_WVALID : in std_ulogic;
     AXI_18_ACLK : in std_ulogic;
     AXI_18_ARADDR : in std_logic_vector(36 downto 0);
     AXI_18_ARBURST : in std_logic_vector(1 downto 0);
     AXI_18_ARESET_N : in std_ulogic;
     AXI_18_ARID : in std_logic_vector(5 downto 0);
     AXI_18_ARLEN : in std_logic_vector(3 downto 0);
     AXI_18_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_18_ARVALID : in std_ulogic;
     AXI_18_AWADDR : in std_logic_vector(36 downto 0);
     AXI_18_AWBURST : in std_logic_vector(1 downto 0);
     AXI_18_AWID : in std_logic_vector(5 downto 0);
     AXI_18_AWLEN : in std_logic_vector(3 downto 0);
     AXI_18_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_18_AWVALID : in std_ulogic;
     AXI_18_BREADY : in std_ulogic;
     AXI_18_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_18_RREADY : in std_ulogic;
     AXI_18_WDATA : in std_logic_vector(255 downto 0);
     AXI_18_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_18_WLAST : in std_ulogic;
     AXI_18_WSTRB : in std_logic_vector(31 downto 0);
     AXI_18_WVALID : in std_ulogic;
     AXI_19_ACLK : in std_ulogic;
     AXI_19_ARADDR : in std_logic_vector(36 downto 0);
     AXI_19_ARBURST : in std_logic_vector(1 downto 0);
     AXI_19_ARESET_N : in std_ulogic;
     AXI_19_ARID : in std_logic_vector(5 downto 0);
     AXI_19_ARLEN : in std_logic_vector(3 downto 0);
     AXI_19_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_19_ARVALID : in std_ulogic;
     AXI_19_AWADDR : in std_logic_vector(36 downto 0);
     AXI_19_AWBURST : in std_logic_vector(1 downto 0);
     AXI_19_AWID : in std_logic_vector(5 downto 0);
     AXI_19_AWLEN : in std_logic_vector(3 downto 0);
     AXI_19_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_19_AWVALID : in std_ulogic;
     AXI_19_BREADY : in std_ulogic;
     AXI_19_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_19_RREADY : in std_ulogic;
     AXI_19_WDATA : in std_logic_vector(255 downto 0);
     AXI_19_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_19_WLAST : in std_ulogic;
     AXI_19_WSTRB : in std_logic_vector(31 downto 0);
     AXI_19_WVALID : in std_ulogic;
     AXI_20_ACLK : in std_ulogic;
     AXI_20_ARADDR : in std_logic_vector(36 downto 0);
     AXI_20_ARBURST : in std_logic_vector(1 downto 0);
     AXI_20_ARESET_N : in std_ulogic;
     AXI_20_ARID : in std_logic_vector(5 downto 0);
     AXI_20_ARLEN : in std_logic_vector(3 downto 0);
     AXI_20_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_20_ARVALID : in std_ulogic;
     AXI_20_AWADDR : in std_logic_vector(36 downto 0);
     AXI_20_AWBURST : in std_logic_vector(1 downto 0);
     AXI_20_AWID : in std_logic_vector(5 downto 0);
     AXI_20_AWLEN : in std_logic_vector(3 downto 0);
     AXI_20_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_20_AWVALID : in std_ulogic;
     AXI_20_BREADY : in std_ulogic;
     AXI_20_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_20_RREADY : in std_ulogic;
     AXI_20_WDATA : in std_logic_vector(255 downto 0);
     AXI_20_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_20_WLAST : in std_ulogic;
     AXI_20_WSTRB : in std_logic_vector(31 downto 0);
     AXI_20_WVALID : in std_ulogic;
     AXI_21_ACLK : in std_ulogic;
     AXI_21_ARADDR : in std_logic_vector(36 downto 0);
     AXI_21_ARBURST : in std_logic_vector(1 downto 0);
     AXI_21_ARESET_N : in std_ulogic;
     AXI_21_ARID : in std_logic_vector(5 downto 0);
     AXI_21_ARLEN : in std_logic_vector(3 downto 0);
     AXI_21_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_21_ARVALID : in std_ulogic;
     AXI_21_AWADDR : in std_logic_vector(36 downto 0);
     AXI_21_AWBURST : in std_logic_vector(1 downto 0);
     AXI_21_AWID : in std_logic_vector(5 downto 0);
     AXI_21_AWLEN : in std_logic_vector(3 downto 0);
     AXI_21_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_21_AWVALID : in std_ulogic;
     AXI_21_BREADY : in std_ulogic;
     AXI_21_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_21_RREADY : in std_ulogic;
     AXI_21_WDATA : in std_logic_vector(255 downto 0);
     AXI_21_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_21_WLAST : in std_ulogic;
     AXI_21_WSTRB : in std_logic_vector(31 downto 0);
     AXI_21_WVALID : in std_ulogic;
     AXI_22_ACLK : in std_ulogic;
     AXI_22_ARADDR : in std_logic_vector(36 downto 0);
     AXI_22_ARBURST : in std_logic_vector(1 downto 0);
     AXI_22_ARESET_N : in std_ulogic;
     AXI_22_ARID : in std_logic_vector(5 downto 0);
     AXI_22_ARLEN : in std_logic_vector(3 downto 0);
     AXI_22_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_22_ARVALID : in std_ulogic;
     AXI_22_AWADDR : in std_logic_vector(36 downto 0);
     AXI_22_AWBURST : in std_logic_vector(1 downto 0);
     AXI_22_AWID : in std_logic_vector(5 downto 0);
     AXI_22_AWLEN : in std_logic_vector(3 downto 0);
     AXI_22_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_22_AWVALID : in std_ulogic;
     AXI_22_BREADY : in std_ulogic;
     AXI_22_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_22_RREADY : in std_ulogic;
     AXI_22_WDATA : in std_logic_vector(255 downto 0);
     AXI_22_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_22_WLAST : in std_ulogic;
     AXI_22_WSTRB : in std_logic_vector(31 downto 0);
     AXI_22_WVALID : in std_ulogic;
     AXI_23_ACLK : in std_ulogic;
     AXI_23_ARADDR : in std_logic_vector(36 downto 0);
     AXI_23_ARBURST : in std_logic_vector(1 downto 0);
     AXI_23_ARESET_N : in std_ulogic;
     AXI_23_ARID : in std_logic_vector(5 downto 0);
     AXI_23_ARLEN : in std_logic_vector(3 downto 0);
     AXI_23_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_23_ARVALID : in std_ulogic;
     AXI_23_AWADDR : in std_logic_vector(36 downto 0);
     AXI_23_AWBURST : in std_logic_vector(1 downto 0);
     AXI_23_AWID : in std_logic_vector(5 downto 0);
     AXI_23_AWLEN : in std_logic_vector(3 downto 0);
     AXI_23_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_23_AWVALID : in std_ulogic;
     AXI_23_BREADY : in std_ulogic;
     AXI_23_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_23_RREADY : in std_ulogic;
     AXI_23_WDATA : in std_logic_vector(255 downto 0);
     AXI_23_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_23_WLAST : in std_ulogic;
     AXI_23_WSTRB : in std_logic_vector(31 downto 0);
     AXI_23_WVALID : in std_ulogic;
     AXI_24_ACLK : in std_ulogic;
     AXI_24_ARADDR : in std_logic_vector(36 downto 0);
     AXI_24_ARBURST : in std_logic_vector(1 downto 0);
     AXI_24_ARESET_N : in std_ulogic;
     AXI_24_ARID : in std_logic_vector(5 downto 0);
     AXI_24_ARLEN : in std_logic_vector(3 downto 0);
     AXI_24_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_24_ARVALID : in std_ulogic;
     AXI_24_AWADDR : in std_logic_vector(36 downto 0);
     AXI_24_AWBURST : in std_logic_vector(1 downto 0);
     AXI_24_AWID : in std_logic_vector(5 downto 0);
     AXI_24_AWLEN : in std_logic_vector(3 downto 0);
     AXI_24_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_24_AWVALID : in std_ulogic;
     AXI_24_BREADY : in std_ulogic;
     AXI_24_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_24_RREADY : in std_ulogic;
     AXI_24_WDATA : in std_logic_vector(255 downto 0);
     AXI_24_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_24_WLAST : in std_ulogic;
     AXI_24_WSTRB : in std_logic_vector(31 downto 0);
     AXI_24_WVALID : in std_ulogic;
     AXI_25_ACLK : in std_ulogic;
     AXI_25_ARADDR : in std_logic_vector(36 downto 0);
     AXI_25_ARBURST : in std_logic_vector(1 downto 0);
     AXI_25_ARESET_N : in std_ulogic;
     AXI_25_ARID : in std_logic_vector(5 downto 0);
     AXI_25_ARLEN : in std_logic_vector(3 downto 0);
     AXI_25_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_25_ARVALID : in std_ulogic;
     AXI_25_AWADDR : in std_logic_vector(36 downto 0);
     AXI_25_AWBURST : in std_logic_vector(1 downto 0);
     AXI_25_AWID : in std_logic_vector(5 downto 0);
     AXI_25_AWLEN : in std_logic_vector(3 downto 0);
     AXI_25_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_25_AWVALID : in std_ulogic;
     AXI_25_BREADY : in std_ulogic;
     AXI_25_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_25_RREADY : in std_ulogic;
     AXI_25_WDATA : in std_logic_vector(255 downto 0);
     AXI_25_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_25_WLAST : in std_ulogic;
     AXI_25_WSTRB : in std_logic_vector(31 downto 0);
     AXI_25_WVALID : in std_ulogic;
     AXI_26_ACLK : in std_ulogic;
     AXI_26_ARADDR : in std_logic_vector(36 downto 0);
     AXI_26_ARBURST : in std_logic_vector(1 downto 0);
     AXI_26_ARESET_N : in std_ulogic;
     AXI_26_ARID : in std_logic_vector(5 downto 0);
     AXI_26_ARLEN : in std_logic_vector(3 downto 0);
     AXI_26_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_26_ARVALID : in std_ulogic;
     AXI_26_AWADDR : in std_logic_vector(36 downto 0);
     AXI_26_AWBURST : in std_logic_vector(1 downto 0);
     AXI_26_AWID : in std_logic_vector(5 downto 0);
     AXI_26_AWLEN : in std_logic_vector(3 downto 0);
     AXI_26_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_26_AWVALID : in std_ulogic;
     AXI_26_BREADY : in std_ulogic;
     AXI_26_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_26_RREADY : in std_ulogic;
     AXI_26_WDATA : in std_logic_vector(255 downto 0);
     AXI_26_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_26_WLAST : in std_ulogic;
     AXI_26_WSTRB : in std_logic_vector(31 downto 0);
     AXI_26_WVALID : in std_ulogic;
     AXI_27_ACLK : in std_ulogic;
     AXI_27_ARADDR : in std_logic_vector(36 downto 0);
     AXI_27_ARBURST : in std_logic_vector(1 downto 0);
     AXI_27_ARESET_N : in std_ulogic;
     AXI_27_ARID : in std_logic_vector(5 downto 0);
     AXI_27_ARLEN : in std_logic_vector(3 downto 0);
     AXI_27_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_27_ARVALID : in std_ulogic;
     AXI_27_AWADDR : in std_logic_vector(36 downto 0);
     AXI_27_AWBURST : in std_logic_vector(1 downto 0);
     AXI_27_AWID : in std_logic_vector(5 downto 0);
     AXI_27_AWLEN : in std_logic_vector(3 downto 0);
     AXI_27_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_27_AWVALID : in std_ulogic;
     AXI_27_BREADY : in std_ulogic;
     AXI_27_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_27_RREADY : in std_ulogic;
     AXI_27_WDATA : in std_logic_vector(255 downto 0);
     AXI_27_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_27_WLAST : in std_ulogic;
     AXI_27_WSTRB : in std_logic_vector(31 downto 0);
     AXI_27_WVALID : in std_ulogic;
     AXI_28_ACLK : in std_ulogic;
     AXI_28_ARADDR : in std_logic_vector(36 downto 0);
     AXI_28_ARBURST : in std_logic_vector(1 downto 0);
     AXI_28_ARESET_N : in std_ulogic;
     AXI_28_ARID : in std_logic_vector(5 downto 0);
     AXI_28_ARLEN : in std_logic_vector(3 downto 0);
     AXI_28_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_28_ARVALID : in std_ulogic;
     AXI_28_AWADDR : in std_logic_vector(36 downto 0);
     AXI_28_AWBURST : in std_logic_vector(1 downto 0);
     AXI_28_AWID : in std_logic_vector(5 downto 0);
     AXI_28_AWLEN : in std_logic_vector(3 downto 0);
     AXI_28_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_28_AWVALID : in std_ulogic;
     AXI_28_BREADY : in std_ulogic;
     AXI_28_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_28_RREADY : in std_ulogic;
     AXI_28_WDATA : in std_logic_vector(255 downto 0);
     AXI_28_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_28_WLAST : in std_ulogic;
     AXI_28_WSTRB : in std_logic_vector(31 downto 0);
     AXI_28_WVALID : in std_ulogic;
     AXI_29_ACLK : in std_ulogic;
     AXI_29_ARADDR : in std_logic_vector(36 downto 0);
     AXI_29_ARBURST : in std_logic_vector(1 downto 0);
     AXI_29_ARESET_N : in std_ulogic;
     AXI_29_ARID : in std_logic_vector(5 downto 0);
     AXI_29_ARLEN : in std_logic_vector(3 downto 0);
     AXI_29_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_29_ARVALID : in std_ulogic;
     AXI_29_AWADDR : in std_logic_vector(36 downto 0);
     AXI_29_AWBURST : in std_logic_vector(1 downto 0);
     AXI_29_AWID : in std_logic_vector(5 downto 0);
     AXI_29_AWLEN : in std_logic_vector(3 downto 0);
     AXI_29_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_29_AWVALID : in std_ulogic;
     AXI_29_BREADY : in std_ulogic;
     AXI_29_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_29_RREADY : in std_ulogic;
     AXI_29_WDATA : in std_logic_vector(255 downto 0);
     AXI_29_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_29_WLAST : in std_ulogic;
     AXI_29_WSTRB : in std_logic_vector(31 downto 0);
     AXI_29_WVALID : in std_ulogic;
     AXI_30_ACLK : in std_ulogic;
     AXI_30_ARADDR : in std_logic_vector(36 downto 0);
     AXI_30_ARBURST : in std_logic_vector(1 downto 0);
     AXI_30_ARESET_N : in std_ulogic;
     AXI_30_ARID : in std_logic_vector(5 downto 0);
     AXI_30_ARLEN : in std_logic_vector(3 downto 0);
     AXI_30_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_30_ARVALID : in std_ulogic;
     AXI_30_AWADDR : in std_logic_vector(36 downto 0);
     AXI_30_AWBURST : in std_logic_vector(1 downto 0);
     AXI_30_AWID : in std_logic_vector(5 downto 0);
     AXI_30_AWLEN : in std_logic_vector(3 downto 0);
     AXI_30_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_30_AWVALID : in std_ulogic;
     AXI_30_BREADY : in std_ulogic;
     AXI_30_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_30_RREADY : in std_ulogic;
     AXI_30_WDATA : in std_logic_vector(255 downto 0);
     AXI_30_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_30_WLAST : in std_ulogic;
     AXI_30_WSTRB : in std_logic_vector(31 downto 0);
     AXI_30_WVALID : in std_ulogic;
     AXI_31_ACLK : in std_ulogic;
     AXI_31_ARADDR : in std_logic_vector(36 downto 0);
     AXI_31_ARBURST : in std_logic_vector(1 downto 0);
     AXI_31_ARESET_N : in std_ulogic;
     AXI_31_ARID : in std_logic_vector(5 downto 0);
     AXI_31_ARLEN : in std_logic_vector(3 downto 0);
     AXI_31_ARSIZE : in std_logic_vector(2 downto 0);
     AXI_31_ARVALID : in std_ulogic;
     AXI_31_AWADDR : in std_logic_vector(36 downto 0);
     AXI_31_AWBURST : in std_logic_vector(1 downto 0);
     AXI_31_AWID : in std_logic_vector(5 downto 0);
     AXI_31_AWLEN : in std_logic_vector(3 downto 0);
     AXI_31_AWSIZE : in std_logic_vector(2 downto 0);
     AXI_31_AWVALID : in std_ulogic;
     AXI_31_BREADY : in std_ulogic;
     AXI_31_DFI_LP_PWR_X_REQ : in std_ulogic;
     AXI_31_RREADY : in std_ulogic;
     AXI_31_WDATA : in std_logic_vector(255 downto 0);
     AXI_31_WDATA_PARITY : in std_logic_vector(31 downto 0);
     AXI_31_WLAST : in std_ulogic;
     AXI_31_WSTRB : in std_logic_vector(31 downto 0);
     AXI_31_WVALID : in std_ulogic;
     BSCAN_DRCK_0 : in std_ulogic;
     BSCAN_DRCK_1 : in std_ulogic;
     BSCAN_TCK_0 : in std_ulogic;
     BSCAN_TCK_1 : in std_ulogic;
     HBM_REF_CLK_0 : in std_ulogic;
     HBM_REF_CLK_1 : in std_ulogic;
     MBIST_EN_00 : in std_ulogic;
     MBIST_EN_01 : in std_ulogic;
     MBIST_EN_02 : in std_ulogic;
     MBIST_EN_03 : in std_ulogic;
     MBIST_EN_04 : in std_ulogic;
     MBIST_EN_05 : in std_ulogic;
     MBIST_EN_06 : in std_ulogic;
     MBIST_EN_07 : in std_ulogic;
     MBIST_EN_08 : in std_ulogic;
     MBIST_EN_09 : in std_ulogic;
     MBIST_EN_10 : in std_ulogic;
     MBIST_EN_11 : in std_ulogic;
     MBIST_EN_12 : in std_ulogic;
     MBIST_EN_13 : in std_ulogic;
     MBIST_EN_14 : in std_ulogic;
     MBIST_EN_15 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HBM_TWO_STACK_INTF : component is "PRIMITIVE";

----- component HPIO_VREF -----
component HPIO_VREF
  generic (
     VREF_CNTR : string := "OFF"
  );
  port (
     VREF : out std_ulogic;
     FABRIC_VREF_TUNE : in std_logic_vector(6 downto 0)
  );
end component;
attribute BOX_TYPE of
  HPIO_VREF : component is "PRIMITIVE";

----- component HSADC -----
component HSADC
  generic (
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     XPA_CFG0 : integer := 0;
     XPA_CFG1 : integer := 0;
     XPA_NUM_ADCS : string := "0";
     XPA_NUM_DDCS : integer := 0;
     XPA_PLL_USED : string := "No";
     XPA_SAMPLE_RATE_MSPS : integer := 0
  );
  port (
     CLK_ADC : out std_ulogic;
     DATA_ADC0 : out std_logic_vector(127 downto 0);
     DATA_ADC1 : out std_logic_vector(127 downto 0);
     DATA_ADC2 : out std_logic_vector(127 downto 0);
     DATA_ADC3 : out std_logic_vector(127 downto 0);
     DOUT : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     PLL_DMON_OUT : out std_ulogic;
     PLL_REFCLK_OUT : out std_ulogic;
     STATUS_ADC0 : out std_logic_vector(15 downto 0);
     STATUS_ADC1 : out std_logic_vector(15 downto 0);
     STATUS_ADC2 : out std_logic_vector(15 downto 0);
     STATUS_ADC3 : out std_logic_vector(15 downto 0);
     STATUS_COMMON : out std_logic_vector(15 downto 0);
     SYSREF_OUT_NORTH : out std_ulogic;
     SYSREF_OUT_SOUTH : out std_ulogic;
     ADC_CLK_N : in std_ulogic;
     ADC_CLK_P : in std_ulogic;
     CLK_FIFO_LM : in std_ulogic;
     CONTROL_ADC0 : in std_logic_vector(15 downto 0);
     CONTROL_ADC1 : in std_logic_vector(15 downto 0);
     CONTROL_ADC2 : in std_logic_vector(15 downto 0);
     CONTROL_ADC3 : in std_logic_vector(15 downto 0);
     CONTROL_COMMON : in std_logic_vector(15 downto 0);
     DADDR : in std_logic_vector(11 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     FABRIC_CLK : in std_ulogic;
     PLL_MONCLK : in std_ulogic;
     PLL_REFCLK_IN : in std_ulogic;
     SYSREF_IN_NORTH : in std_ulogic;
     SYSREF_IN_SOUTH : in std_ulogic;
     SYSREF_N : in std_ulogic;
     SYSREF_P : in std_ulogic;
     VIN0_N : in std_ulogic;
     VIN0_P : in std_ulogic;
     VIN1_N : in std_ulogic;
     VIN1_P : in std_ulogic;
     VIN2_N : in std_ulogic;
     VIN2_P : in std_ulogic;
     VIN3_N : in std_ulogic;
     VIN3_P : in std_ulogic;
     VIN_I01_N : in std_ulogic;
     VIN_I01_P : in std_ulogic;
     VIN_I23_N : in std_ulogic;
     VIN_I23_P : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HSADC : component is "PRIMITIVE";

----- component HSDAC -----
component HSDAC
  generic (
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     XPA_CFG0 : integer := 0;
     XPA_CFG1 : integer := 0;
     XPA_NUM_DACS : integer := 0;
     XPA_NUM_DUCS : integer := 0;
     XPA_PLL_USED : string := "No";
     XPA_SAMPLE_RATE_MSPS : integer := 0
  );
  port (
     CLK_DAC : out std_ulogic;
     DOUT : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     PLL_DMON_OUT : out std_ulogic;
     PLL_REFCLK_OUT : out std_ulogic;
     STATUS_COMMON : out std_logic_vector(15 downto 0);
     STATUS_DAC0 : out std_logic_vector(15 downto 0);
     STATUS_DAC1 : out std_logic_vector(15 downto 0);
     STATUS_DAC2 : out std_logic_vector(15 downto 0);
     STATUS_DAC3 : out std_logic_vector(15 downto 0);
     SYSREF_OUT_NORTH : out std_ulogic;
     SYSREF_OUT_SOUTH : out std_ulogic;
     VOUT0_N : out std_ulogic;
     VOUT0_P : out std_ulogic;
     VOUT1_N : out std_ulogic;
     VOUT1_P : out std_ulogic;
     VOUT2_N : out std_ulogic;
     VOUT2_P : out std_ulogic;
     VOUT3_N : out std_ulogic;
     VOUT3_P : out std_ulogic;
     CLK_FIFO_LM : in std_ulogic;
     CONTROL_COMMON : in std_logic_vector(15 downto 0);
     CONTROL_DAC0 : in std_logic_vector(15 downto 0);
     CONTROL_DAC1 : in std_logic_vector(15 downto 0);
     CONTROL_DAC2 : in std_logic_vector(15 downto 0);
     CONTROL_DAC3 : in std_logic_vector(15 downto 0);
     DAC_CLK_N : in std_ulogic;
     DAC_CLK_P : in std_ulogic;
     DADDR : in std_logic_vector(11 downto 0);
     DATA_DAC0 : in std_logic_vector(255 downto 0);
     DATA_DAC1 : in std_logic_vector(255 downto 0);
     DATA_DAC2 : in std_logic_vector(255 downto 0);
     DATA_DAC3 : in std_logic_vector(255 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     FABRIC_CLK : in std_ulogic;
     PLL_MONCLK : in std_ulogic;
     PLL_REFCLK_IN : in std_ulogic;
     SYSREF_IN_NORTH : in std_ulogic;
     SYSREF_IN_SOUTH : in std_ulogic;
     SYSREF_N : in std_ulogic;
     SYSREF_P : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HSDAC : component is "PRIMITIVE";

----- component IBUF -----
component IBUF
  generic (
     CAPACITANCE : string := "DONT_CARE";
     IBUF_DELAY_VALUE : string := "0";
     IBUF_LOW_PWR : boolean := TRUE;
     IFD_DELAY_VALUE : string := "AUTO";
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF : component is "PRIMITIVE";

----- component IBUFCTRL -----
component IBUFCTRL
  generic (
     ISTANDARD : string := "UNUSED";
     USE_IBUFDISABLE : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFCTRL : component is "PRIMITIVE";

----- component IBUFDS -----
component IBUFDS
  generic (
     CAPACITANCE : string := "DONT_CARE";
     DIFF_TERM : boolean := FALSE;
     DQS_BIAS : string := "FALSE";
     IBUF_DELAY_VALUE : string := "0";
     IBUF_LOW_PWR : boolean := TRUE;
     IFD_DELAY_VALUE : string := "AUTO";
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS : component is "PRIMITIVE";

----- component IBUFDSE3 -----
component IBUFDSE3
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0;
     USE_IBUFDISABLE : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  IBUFDSE3 : component is "PRIMITIVE";

----- component IBUFDS_DIFF_OUT -----
component IBUFDS_DIFF_OUT
  generic (
     DIFF_TERM : boolean := FALSE;
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out STD_ULOGIC;
     OB : out STD_ULOGIC;
     I : in STD_ULOGIC;
     IB : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  IBUFDS_DIFF_OUT : component is "PRIMITIVE";

----- component IBUFDS_DIFF_OUT_IBUFDISABLE -----
component IBUFDS_DIFF_OUT_IBUFDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out STD_ULOGIC;
     OB : out STD_ULOGIC;
     I : in STD_ULOGIC;
     IB : in STD_ULOGIC;
     IBUFDISABLE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  IBUFDS_DIFF_OUT_IBUFDISABLE : component is "PRIMITIVE";

----- component IBUFDS_DIFF_OUT_INTERMDISABLE -----
component IBUFDS_DIFF_OUT_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out STD_ULOGIC;
     OB : out STD_ULOGIC;
     I : in STD_ULOGIC;
     IB : in STD_ULOGIC;
     IBUFDISABLE : in STD_ULOGIC;
     INTERMDISABLE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  IBUFDS_DIFF_OUT_INTERMDISABLE : component is "PRIMITIVE";

----- component IBUFDS_DPHY -----
component IBUFDS_DPHY
  generic (
     DIFF_TERM : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "ULTRASCALE_PLUS"
  );
  port (
     HSRX_O : out std_ulogic;
     LPRX_O_N : out std_ulogic;
     LPRX_O_P : out std_ulogic;
     HSRX_DISABLE : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     LPRX_DISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_DPHY : component is "PRIMITIVE";

----- component IBUFDS_GTE2 -----
component IBUFDS_GTE2
  generic (
     CLKCM_CFG : boolean := TRUE;
     CLKRCV_TRST : boolean := TRUE;
     CLKSWING_CFG : bit_vector := "11"
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTE2 : component is "PRIMITIVE";

----- component IBUFDS_GTE3 -----
component IBUFDS_GTE3
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_HROW_CK_SEL : std_logic_vector (1 downto 0) := "00";
     REFCLK_ICNTL_RX : std_logic_vector (1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTE3 : component is "PRIMITIVE";

----- component IBUFDS_GTE4 -----
component IBUFDS_GTE4
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_HROW_CK_SEL : std_logic_vector (1 downto 0) := "00";
     REFCLK_ICNTL_RX : std_logic_vector (1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTE4 : component is "PRIMITIVE";

----- component IBUFDS_GTE5 -----
component IBUFDS_GTE5
  generic (
     REFCLK_CTL_DRV_SWING : std_logic_vector(2 downto 0) := "000";
     REFCLK_EN_DRV : bit := '0';
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_HROW_CK_SEL : integer := 0;
     REFCLK_ICNTL_RX : integer := 0
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTE5 : component is "PRIMITIVE";

----- component IBUFDS_GTM -----
component IBUFDS_GTM
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_HROW_CK_SEL : integer := 0;
     REFCLK_ICNTL_RX : integer := 0
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTM : component is "PRIMITIVE";

----- component IBUFDS_IBUFDISABLE -----
component IBUFDS_IBUFDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_IBUFDISABLE : component is "PRIMITIVE";

----- component IBUFDS_IBUFDISABLE_INT -----
component IBUFDS_IBUFDISABLE_INT
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_IBUFDISABLE_INT : component is "PRIMITIVE";

----- component IBUFDS_INTERMDISABLE -----
component IBUFDS_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_INTERMDISABLE : component is "PRIMITIVE";

----- component IBUFDS_INTERMDISABLE_INT -----
component IBUFDS_INTERMDISABLE_INT
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_INTERMDISABLE_INT : component is "PRIMITIVE";

----- component IBUFE3 -----
component IBUFE3
  generic (
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0;
     USE_IBUFDISABLE : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_ulogic;
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFE3 : component is "PRIMITIVE";

----- component IBUF_ANALOG -----
component IBUF_ANALOG
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_ANALOG : component is "PRIMITIVE";

----- component IBUF_IBUFDISABLE -----
component IBUF_IBUFDISABLE
  generic (
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_IBUFDISABLE : component is "PRIMITIVE";

----- component IBUF_INTERMDISABLE -----
component IBUF_INTERMDISABLE
  generic (
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_INTERMDISABLE : component is "PRIMITIVE";

----- component ICAPE2 -----
component ICAPE2
  generic (
     DEVICE_ID : bit_vector := X"03651093";
     ICAP_WIDTH : string := "X32";
     SIM_CFG_FILE_NAME : string := "NONE"
  );
  port (
     O : out std_logic_vector(31 downto 0);
     CLK : in std_ulogic;
     CSIB : in std_ulogic;
     I : in std_logic_vector(31 downto 0);
     RDWRB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAPE2 : component is "PRIMITIVE";

----- component ICAPE3 -----
component ICAPE3
  generic (
     DEVICE_ID : bit_vector := X"03628093";
     ICAP_AUTO_SWITCH : string := "DISABLE";
     SIM_CFG_FILE_NAME : string := "NONE"
  );
  port (
     AVAIL : out std_ulogic := '0';
     O : out std_logic_vector(31 downto 0);
     PRDONE : out std_ulogic;
     PRERROR : out std_ulogic;
     CLK : in std_ulogic;
     CSIB : in std_ulogic;
     I : in std_logic_vector(31 downto 0);
     RDWRB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAPE3 : component is "PRIMITIVE";

----- component IDDR -----
component IDDR
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic := 'L';
     S : in std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  IDDR : component is "PRIMITIVE";

----- component IDDRE1 -----
component IDDRE1
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     IS_CB_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0'
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     C : in std_ulogic;
     CB : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDDRE1 : component is "PRIMITIVE";

----- component IDDR_2CLK -----
component IDDR_2CLK
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     IS_CB_INVERTED : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     C : in std_ulogic;
     CB : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDDR_2CLK : component is "PRIMITIVE";

----- component IDELAYCTRL -----
component IDELAYCTRL
  generic (
     SIM_DEVICE : string := "7SERIES"
  );
  port (
     RDY : out std_ulogic;
     REFCLK : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYCTRL : component is "PRIMITIVE";

----- component IDELAYE2 -----
component IDELAYE2
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "IDATAIN";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IDELAY_TYPE : string := "FIXED";
     IDELAY_VALUE : integer := 0;
     IS_C_INVERTED : bit := '0';
     IS_DATAIN_INVERTED : bit := '0';
     IS_IDATAIN_INVERTED : bit := '0';
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     DATAIN : in std_ulogic;
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYE2 : component is "PRIMITIVE";

----- component IDELAYE2_FINEDELAY -----
component IDELAYE2_FINEDELAY
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "IDATAIN";
     FINEDELAY : string := "BYPASS";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IDELAY_TYPE : string := "FIXED";
     IDELAY_VALUE : integer := 0;
     IS_C_INVERTED : bit := '0';
     IS_DATAIN_INVERTED : bit := '0';
     IS_IDATAIN_INVERTED : bit := '0';
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     DATAIN : in std_ulogic;
     IDATAIN : in std_ulogic;
     IFDLY : in std_logic_vector(2 downto 0);
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYE2_FINEDELAY : component is "PRIMITIVE";

----- component IDELAYE3 -----
component IDELAYE3
  generic (
     CASCADE : string := "NONE";
     DELAY_FORMAT : string := "TIME";
     DELAY_SRC : string := "IDATAIN";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     IS_CLK_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     LOOPBACK : string := "FALSE";
     REFCLK_FREQUENCY : real := 300.0;
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0;
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     CASC_OUT : out std_ulogic;
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     DATAOUT : out std_ulogic;
     CASC_IN : in std_ulogic;
     CASC_RETURN : in std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     DATAIN : in std_ulogic;
     EN_VTC : in std_ulogic;
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYE3 : component is "PRIMITIVE";

----- component IDELAYE5 -----
component IDELAYE5
  generic (
     CASCADE : string := "FALSE";
     IS_CLK_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0'
  );
  port (
     CASC_OUT : out std_ulogic;
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     CASC_RETURN : in std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYE5 : component is "PRIMITIVE";

----- component ILKN -----
component ILKN
  generic (
     BYPASS : string := "FALSE";
     CTL_RX_BURSTMAX : std_logic_vector(1 downto 0) := "11";
     CTL_RX_CHAN_EXT : std_logic_vector(1 downto 0) := "00";
     CTL_RX_LAST_LANE : std_logic_vector(3 downto 0) := X"B";
     CTL_RX_MFRAMELEN_MINUS1 : std_logic_vector(15 downto 0) := X"07FF";
     CTL_RX_PACKET_MODE : string := "TRUE";
     CTL_RX_RETRANS_MULT : std_logic_vector(2 downto 0) := "000";
     CTL_RX_RETRANS_RETRY : std_logic_vector(3 downto 0) := X"2";
     CTL_RX_RETRANS_TIMER1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_RETRANS_TIMER2 : std_logic_vector(15 downto 0) := X"0008";
     CTL_RX_RETRANS_WDOG : std_logic_vector(11 downto 0) := X"000";
     CTL_RX_RETRANS_WRAP_TIMER : std_logic_vector(7 downto 0) := X"00";
     CTL_TEST_MODE_PIN_CHAR : string := "FALSE";
     CTL_TX_BURSTMAX : std_logic_vector(1 downto 0) := "11";
     CTL_TX_BURSTSHORT : std_logic_vector(2 downto 0) := "001";
     CTL_TX_CHAN_EXT : std_logic_vector(1 downto 0) := "00";
     CTL_TX_DISABLE_SKIPWORD : string := "TRUE";
     CTL_TX_FC_CALLEN : std_logic_vector(6 downto 0) := "000" & X"0";
     CTL_TX_LAST_LANE : std_logic_vector(3 downto 0) := X"B";
     CTL_TX_MFRAMELEN_MINUS1 : std_logic_vector(15 downto 0) := X"07FF";
     CTL_TX_RETRANS_DEPTH : std_logic_vector(13 downto 0) := "00" & X"800";
     CTL_TX_RETRANS_MULT : std_logic_vector(2 downto 0) := "000";
     CTL_TX_RETRANS_RAM_BANKS : std_logic_vector(1 downto 0) := "11";
     MODE : string := "TRUE";
     SIM_VERSION : string := "2.0";
     TEST_MODE_PIN_CHAR : string := "FALSE"
  );
  port (
     DRP_DO : out std_logic_vector(15 downto 0);
     DRP_RDY : out std_ulogic;
     RX_BYPASS_DATAOUT00 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT01 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT02 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT03 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT04 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT05 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT06 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT07 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT08 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT09 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT10 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT11 : out std_logic_vector(65 downto 0);
     RX_BYPASS_ENAOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_AVAILOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_BADLYFRAMEDOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_OVERFLOWOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_SYNCEDOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_SYNCWORDOUT : out std_logic_vector(11 downto 0);
     RX_CHANOUT0 : out std_logic_vector(10 downto 0);
     RX_CHANOUT1 : out std_logic_vector(10 downto 0);
     RX_CHANOUT2 : out std_logic_vector(10 downto 0);
     RX_CHANOUT3 : out std_logic_vector(10 downto 0);
     RX_DATAOUT0 : out std_logic_vector(127 downto 0);
     RX_DATAOUT1 : out std_logic_vector(127 downto 0);
     RX_DATAOUT2 : out std_logic_vector(127 downto 0);
     RX_DATAOUT3 : out std_logic_vector(127 downto 0);
     RX_ENAOUT0 : out std_ulogic;
     RX_ENAOUT1 : out std_ulogic;
     RX_ENAOUT2 : out std_ulogic;
     RX_ENAOUT3 : out std_ulogic;
     RX_EOPOUT0 : out std_ulogic;
     RX_EOPOUT1 : out std_ulogic;
     RX_EOPOUT2 : out std_ulogic;
     RX_EOPOUT3 : out std_ulogic;
     RX_ERROUT0 : out std_ulogic;
     RX_ERROUT1 : out std_ulogic;
     RX_ERROUT2 : out std_ulogic;
     RX_ERROUT3 : out std_ulogic;
     RX_MTYOUT0 : out std_logic_vector(3 downto 0);
     RX_MTYOUT1 : out std_logic_vector(3 downto 0);
     RX_MTYOUT2 : out std_logic_vector(3 downto 0);
     RX_MTYOUT3 : out std_logic_vector(3 downto 0);
     RX_OVFOUT : out std_ulogic;
     RX_SOPOUT0 : out std_ulogic;
     RX_SOPOUT1 : out std_ulogic;
     RX_SOPOUT2 : out std_ulogic;
     RX_SOPOUT3 : out std_ulogic;
     STAT_RX_ALIGNED : out std_ulogic;
     STAT_RX_ALIGNED_ERR : out std_ulogic;
     STAT_RX_BAD_TYPE_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_BURSTMAX_ERR : out std_ulogic;
     STAT_RX_BURST_ERR : out std_ulogic;
     STAT_RX_CRC24_ERR : out std_ulogic;
     STAT_RX_CRC32_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_CRC32_VALID : out std_logic_vector(11 downto 0);
     STAT_RX_DESCRAM_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_DIAGWORD_INTFSTAT : out std_logic_vector(11 downto 0);
     STAT_RX_DIAGWORD_LANESTAT : out std_logic_vector(11 downto 0);
     STAT_RX_FC_STAT : out std_logic_vector(255 downto 0);
     STAT_RX_FRAMING_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MEOP_ERR : out std_ulogic;
     STAT_RX_MF_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MF_LEN_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MF_REPEAT_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MISALIGNED : out std_ulogic;
     STAT_RX_MSOP_ERR : out std_ulogic;
     STAT_RX_MUBITS : out std_logic_vector(7 downto 0);
     STAT_RX_MUBITS_UPDATED : out std_ulogic;
     STAT_RX_OVERFLOW_ERR : out std_ulogic;
     STAT_RX_RETRANS_CRC24_ERR : out std_ulogic;
     STAT_RX_RETRANS_DISC : out std_ulogic;
     STAT_RX_RETRANS_LATENCY : out std_logic_vector(15 downto 0);
     STAT_RX_RETRANS_REQ : out std_ulogic;
     STAT_RX_RETRANS_RETRY_ERR : out std_ulogic;
     STAT_RX_RETRANS_SEQ : out std_logic_vector(7 downto 0);
     STAT_RX_RETRANS_SEQ_UPDATED : out std_ulogic;
     STAT_RX_RETRANS_STATE : out std_logic_vector(2 downto 0);
     STAT_RX_RETRANS_SUBSEQ : out std_logic_vector(4 downto 0);
     STAT_RX_RETRANS_WDOG_ERR : out std_ulogic;
     STAT_RX_RETRANS_WRAP_ERR : out std_ulogic;
     STAT_RX_SYNCED : out std_logic_vector(11 downto 0);
     STAT_RX_SYNCED_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_WORD_SYNC : out std_logic_vector(11 downto 0);
     STAT_TX_BURST_ERR : out std_ulogic;
     STAT_TX_ERRINJ_BITERR_DONE : out std_ulogic;
     STAT_TX_OVERFLOW_ERR : out std_ulogic;
     STAT_TX_RETRANS_BURST_ERR : out std_ulogic;
     STAT_TX_RETRANS_BUSY : out std_ulogic;
     STAT_TX_RETRANS_RAM_PERROUT : out std_ulogic;
     STAT_TX_RETRANS_RAM_RADDR : out std_logic_vector(8 downto 0);
     STAT_TX_RETRANS_RAM_RD_B0 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B1 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B2 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B3 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RSEL : out std_logic_vector(1 downto 0);
     STAT_TX_RETRANS_RAM_WADDR : out std_logic_vector(8 downto 0);
     STAT_TX_RETRANS_RAM_WDATA : out std_logic_vector(643 downto 0);
     STAT_TX_RETRANS_RAM_WE_B0 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B1 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B2 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B3 : out std_ulogic;
     STAT_TX_UNDERFLOW_ERR : out std_ulogic;
     TX_OVFOUT : out std_ulogic;
     TX_RDYOUT : out std_ulogic;
     TX_SERDES_DATA00 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA01 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA02 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA03 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA04 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA05 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA06 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA07 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA08 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA09 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA10 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA11 : out std_logic_vector(63 downto 0);
     CORE_CLK : in std_ulogic;
     CTL_RX_FORCE_RESYNC : in std_ulogic;
     CTL_RX_RETRANS_ACK : in std_ulogic;
     CTL_RX_RETRANS_ENABLE : in std_ulogic;
     CTL_RX_RETRANS_ERRIN : in std_ulogic;
     CTL_RX_RETRANS_FORCE_REQ : in std_ulogic;
     CTL_RX_RETRANS_RESET : in std_ulogic;
     CTL_RX_RETRANS_RESET_MODE : in std_ulogic;
     CTL_TX_DIAGWORD_INTFSTAT : in std_ulogic;
     CTL_TX_DIAGWORD_LANESTAT : in std_logic_vector(11 downto 0);
     CTL_TX_ENABLE : in std_ulogic;
     CTL_TX_ERRINJ_BITERR_GO : in std_ulogic;
     CTL_TX_ERRINJ_BITERR_LANE : in std_logic_vector(3 downto 0);
     CTL_TX_FC_STAT : in std_logic_vector(255 downto 0);
     CTL_TX_MUBITS : in std_logic_vector(7 downto 0);
     CTL_TX_RETRANS_ENABLE : in std_ulogic;
     CTL_TX_RETRANS_RAM_PERRIN : in std_ulogic;
     CTL_TX_RETRANS_RAM_RDATA : in std_logic_vector(643 downto 0);
     CTL_TX_RETRANS_REQ : in std_ulogic;
     CTL_TX_RETRANS_REQ_VALID : in std_ulogic;
     CTL_TX_RLIM_DELTA : in std_logic_vector(11 downto 0);
     CTL_TX_RLIM_ENABLE : in std_ulogic;
     CTL_TX_RLIM_INTV : in std_logic_vector(7 downto 0);
     CTL_TX_RLIM_MAX : in std_logic_vector(11 downto 0);
     DRP_ADDR : in std_logic_vector(9 downto 0);
     DRP_CLK : in std_ulogic;
     DRP_DI : in std_logic_vector(15 downto 0);
     DRP_EN : in std_ulogic;
     DRP_WE : in std_ulogic;
     LBUS_CLK : in std_ulogic;
     RX_BYPASS_FORCE_REALIGNIN : in std_ulogic;
     RX_BYPASS_RDIN : in std_ulogic;
     RX_RESET : in std_ulogic;
     RX_SERDES_CLK : in std_logic_vector(11 downto 0);
     RX_SERDES_DATA00 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA01 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA02 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA03 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA04 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA05 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA06 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA07 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA08 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA09 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA10 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA11 : in std_logic_vector(63 downto 0);
     RX_SERDES_RESET : in std_logic_vector(11 downto 0);
     TX_BCTLIN0 : in std_ulogic;
     TX_BCTLIN1 : in std_ulogic;
     TX_BCTLIN2 : in std_ulogic;
     TX_BCTLIN3 : in std_ulogic;
     TX_BYPASS_CTRLIN : in std_logic_vector(11 downto 0);
     TX_BYPASS_DATAIN00 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN01 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN02 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN03 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN04 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN05 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN06 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN07 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN08 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN09 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN10 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN11 : in std_logic_vector(63 downto 0);
     TX_BYPASS_ENAIN : in std_ulogic;
     TX_BYPASS_GEARBOX_SEQIN : in std_logic_vector(7 downto 0);
     TX_BYPASS_MFRAMER_STATEIN : in std_logic_vector(3 downto 0);
     TX_CHANIN0 : in std_logic_vector(10 downto 0);
     TX_CHANIN1 : in std_logic_vector(10 downto 0);
     TX_CHANIN2 : in std_logic_vector(10 downto 0);
     TX_CHANIN3 : in std_logic_vector(10 downto 0);
     TX_DATAIN0 : in std_logic_vector(127 downto 0);
     TX_DATAIN1 : in std_logic_vector(127 downto 0);
     TX_DATAIN2 : in std_logic_vector(127 downto 0);
     TX_DATAIN3 : in std_logic_vector(127 downto 0);
     TX_ENAIN0 : in std_ulogic;
     TX_ENAIN1 : in std_ulogic;
     TX_ENAIN2 : in std_ulogic;
     TX_ENAIN3 : in std_ulogic;
     TX_EOPIN0 : in std_ulogic;
     TX_EOPIN1 : in std_ulogic;
     TX_EOPIN2 : in std_ulogic;
     TX_EOPIN3 : in std_ulogic;
     TX_ERRIN0 : in std_ulogic;
     TX_ERRIN1 : in std_ulogic;
     TX_ERRIN2 : in std_ulogic;
     TX_ERRIN3 : in std_ulogic;
     TX_MTYIN0 : in std_logic_vector(3 downto 0);
     TX_MTYIN1 : in std_logic_vector(3 downto 0);
     TX_MTYIN2 : in std_logic_vector(3 downto 0);
     TX_MTYIN3 : in std_logic_vector(3 downto 0);
     TX_RESET : in std_ulogic;
     TX_SERDES_REFCLK : in std_ulogic;
     TX_SERDES_REFCLK_RESET : in std_ulogic;
     TX_SOPIN0 : in std_ulogic;
     TX_SOPIN1 : in std_ulogic;
     TX_SOPIN2 : in std_ulogic;
     TX_SOPIN3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ILKN : component is "PRIMITIVE";

----- component ILKNE4 -----
component ILKNE4
  generic (
     BYPASS : string := "FALSE";
     CTL_RX_BURSTMAX : std_logic_vector(1 downto 0) := "11";
     CTL_RX_CHAN_EXT : std_logic_vector(1 downto 0) := "00";
     CTL_RX_LAST_LANE : std_logic_vector(3 downto 0) := X"B";
     CTL_RX_MFRAMELEN_MINUS1 : std_logic_vector(15 downto 0) := X"07FF";
     CTL_RX_PACKET_MODE : string := "FALSE";
     CTL_RX_RETRANS_MULT : std_logic_vector(2 downto 0) := "000";
     CTL_RX_RETRANS_RETRY : std_logic_vector(3 downto 0) := X"2";
     CTL_RX_RETRANS_TIMER1 : std_logic_vector(15 downto 0) := X"0009";
     CTL_RX_RETRANS_TIMER2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_RETRANS_WDOG : std_logic_vector(11 downto 0) := X"000";
     CTL_RX_RETRANS_WRAP_TIMER : std_logic_vector(7 downto 0) := X"00";
     CTL_TEST_MODE_PIN_CHAR : string := "FALSE";
     CTL_TX_BURSTMAX : std_logic_vector(1 downto 0) := "11";
     CTL_TX_BURSTSHORT : std_logic_vector(2 downto 0) := "001";
     CTL_TX_CHAN_EXT : std_logic_vector(1 downto 0) := "00";
     CTL_TX_DISABLE_SKIPWORD : string := "FALSE";
     CTL_TX_FC_CALLEN : std_logic_vector(3 downto 0) := X"F";
     CTL_TX_LAST_LANE : std_logic_vector(3 downto 0) := X"B";
     CTL_TX_MFRAMELEN_MINUS1 : std_logic_vector(15 downto 0) := X"07FF";
     CTL_TX_RETRANS_DEPTH : std_logic_vector(13 downto 0) := "00" & X"800";
     CTL_TX_RETRANS_MULT : std_logic_vector(2 downto 0) := "000";
     CTL_TX_RETRANS_RAM_BANKS : std_logic_vector(1 downto 0) := "11";
     MODE : string := "TRUE";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     TEST_MODE_PIN_CHAR : string := "FALSE"
  );
  port (
     DRP_DO : out std_logic_vector(15 downto 0);
     DRP_RDY : out std_ulogic;
     RX_BYPASS_DATAOUT00 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT01 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT02 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT03 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT04 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT05 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT06 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT07 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT08 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT09 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT10 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT11 : out std_logic_vector(65 downto 0);
     RX_BYPASS_ENAOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_AVAILOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_BADLYFRAMEDOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_OVERFLOWOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_SYNCEDOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_SYNCWORDOUT : out std_logic_vector(11 downto 0);
     RX_CHANOUT0 : out std_logic_vector(10 downto 0);
     RX_CHANOUT1 : out std_logic_vector(10 downto 0);
     RX_CHANOUT2 : out std_logic_vector(10 downto 0);
     RX_CHANOUT3 : out std_logic_vector(10 downto 0);
     RX_DATAOUT0 : out std_logic_vector(127 downto 0);
     RX_DATAOUT1 : out std_logic_vector(127 downto 0);
     RX_DATAOUT2 : out std_logic_vector(127 downto 0);
     RX_DATAOUT3 : out std_logic_vector(127 downto 0);
     RX_ENAOUT0 : out std_ulogic;
     RX_ENAOUT1 : out std_ulogic;
     RX_ENAOUT2 : out std_ulogic;
     RX_ENAOUT3 : out std_ulogic;
     RX_EOPOUT0 : out std_ulogic;
     RX_EOPOUT1 : out std_ulogic;
     RX_EOPOUT2 : out std_ulogic;
     RX_EOPOUT3 : out std_ulogic;
     RX_ERROUT0 : out std_ulogic;
     RX_ERROUT1 : out std_ulogic;
     RX_ERROUT2 : out std_ulogic;
     RX_ERROUT3 : out std_ulogic;
     RX_MTYOUT0 : out std_logic_vector(3 downto 0);
     RX_MTYOUT1 : out std_logic_vector(3 downto 0);
     RX_MTYOUT2 : out std_logic_vector(3 downto 0);
     RX_MTYOUT3 : out std_logic_vector(3 downto 0);
     RX_OVFOUT : out std_ulogic;
     RX_SOPOUT0 : out std_ulogic;
     RX_SOPOUT1 : out std_ulogic;
     RX_SOPOUT2 : out std_ulogic;
     RX_SOPOUT3 : out std_ulogic;
     STAT_RX_ALIGNED : out std_ulogic;
     STAT_RX_ALIGNED_ERR : out std_ulogic;
     STAT_RX_BAD_TYPE_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_BURSTMAX_ERR : out std_ulogic;
     STAT_RX_BURST_ERR : out std_ulogic;
     STAT_RX_CRC24_ERR : out std_ulogic;
     STAT_RX_CRC32_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_CRC32_VALID : out std_logic_vector(11 downto 0);
     STAT_RX_DESCRAM_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_DIAGWORD_INTFSTAT : out std_logic_vector(11 downto 0);
     STAT_RX_DIAGWORD_LANESTAT : out std_logic_vector(11 downto 0);
     STAT_RX_FC_STAT : out std_logic_vector(255 downto 0);
     STAT_RX_FRAMING_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MEOP_ERR : out std_ulogic;
     STAT_RX_MF_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MF_LEN_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MF_REPEAT_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MISALIGNED : out std_ulogic;
     STAT_RX_MSOP_ERR : out std_ulogic;
     STAT_RX_MUBITS : out std_logic_vector(7 downto 0);
     STAT_RX_MUBITS_UPDATED : out std_ulogic;
     STAT_RX_OVERFLOW_ERR : out std_ulogic;
     STAT_RX_RETRANS_CRC24_ERR : out std_ulogic;
     STAT_RX_RETRANS_DISC : out std_ulogic;
     STAT_RX_RETRANS_LATENCY : out std_logic_vector(15 downto 0);
     STAT_RX_RETRANS_REQ : out std_ulogic;
     STAT_RX_RETRANS_RETRY_ERR : out std_ulogic;
     STAT_RX_RETRANS_SEQ : out std_logic_vector(7 downto 0);
     STAT_RX_RETRANS_SEQ_UPDATED : out std_ulogic;
     STAT_RX_RETRANS_STATE : out std_logic_vector(2 downto 0);
     STAT_RX_RETRANS_SUBSEQ : out std_logic_vector(4 downto 0);
     STAT_RX_RETRANS_WDOG_ERR : out std_ulogic;
     STAT_RX_RETRANS_WRAP_ERR : out std_ulogic;
     STAT_RX_SYNCED : out std_logic_vector(11 downto 0);
     STAT_RX_SYNCED_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_WORD_SYNC : out std_logic_vector(11 downto 0);
     STAT_TX_BURST_ERR : out std_ulogic;
     STAT_TX_ERRINJ_BITERR_DONE : out std_ulogic;
     STAT_TX_OVERFLOW_ERR : out std_ulogic;
     STAT_TX_RETRANS_BURST_ERR : out std_ulogic;
     STAT_TX_RETRANS_BUSY : out std_ulogic;
     STAT_TX_RETRANS_RAM_PERROUT : out std_ulogic;
     STAT_TX_RETRANS_RAM_RADDR : out std_logic_vector(8 downto 0);
     STAT_TX_RETRANS_RAM_RD_B0 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B1 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B2 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B3 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RSEL : out std_logic_vector(1 downto 0);
     STAT_TX_RETRANS_RAM_WADDR : out std_logic_vector(8 downto 0);
     STAT_TX_RETRANS_RAM_WDATA : out std_logic_vector(643 downto 0);
     STAT_TX_RETRANS_RAM_WE_B0 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B1 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B2 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B3 : out std_ulogic;
     STAT_TX_UNDERFLOW_ERR : out std_ulogic;
     TX_OVFOUT : out std_ulogic;
     TX_RDYOUT : out std_ulogic;
     TX_SERDES_DATA00 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA01 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA02 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA03 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA04 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA05 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA06 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA07 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA08 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA09 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA10 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA11 : out std_logic_vector(63 downto 0);
     CORE_CLK : in std_ulogic;
     CTL_RX_FORCE_RESYNC : in std_ulogic;
     CTL_RX_RETRANS_ACK : in std_ulogic;
     CTL_RX_RETRANS_ENABLE : in std_ulogic;
     CTL_RX_RETRANS_ERRIN : in std_ulogic;
     CTL_RX_RETRANS_FORCE_REQ : in std_ulogic;
     CTL_RX_RETRANS_RESET : in std_ulogic;
     CTL_RX_RETRANS_RESET_MODE : in std_ulogic;
     CTL_TX_DIAGWORD_INTFSTAT : in std_ulogic;
     CTL_TX_DIAGWORD_LANESTAT : in std_logic_vector(11 downto 0);
     CTL_TX_ENABLE : in std_ulogic;
     CTL_TX_ERRINJ_BITERR_GO : in std_ulogic;
     CTL_TX_ERRINJ_BITERR_LANE : in std_logic_vector(3 downto 0);
     CTL_TX_FC_STAT : in std_logic_vector(255 downto 0);
     CTL_TX_MUBITS : in std_logic_vector(7 downto 0);
     CTL_TX_RETRANS_ENABLE : in std_ulogic;
     CTL_TX_RETRANS_RAM_PERRIN : in std_ulogic;
     CTL_TX_RETRANS_RAM_RDATA : in std_logic_vector(643 downto 0);
     CTL_TX_RETRANS_REQ : in std_ulogic;
     CTL_TX_RETRANS_REQ_VALID : in std_ulogic;
     CTL_TX_RLIM_DELTA : in std_logic_vector(11 downto 0);
     CTL_TX_RLIM_ENABLE : in std_ulogic;
     CTL_TX_RLIM_INTV : in std_logic_vector(7 downto 0);
     CTL_TX_RLIM_MAX : in std_logic_vector(11 downto 0);
     DRP_ADDR : in std_logic_vector(9 downto 0);
     DRP_CLK : in std_ulogic;
     DRP_DI : in std_logic_vector(15 downto 0);
     DRP_EN : in std_ulogic;
     DRP_WE : in std_ulogic;
     LBUS_CLK : in std_ulogic;
     RX_BYPASS_FORCE_REALIGNIN : in std_ulogic;
     RX_BYPASS_RDIN : in std_ulogic;
     RX_RESET : in std_ulogic;
     RX_SERDES_CLK : in std_logic_vector(11 downto 0);
     RX_SERDES_DATA00 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA01 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA02 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA03 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA04 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA05 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA06 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA07 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA08 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA09 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA10 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA11 : in std_logic_vector(63 downto 0);
     RX_SERDES_RESET : in std_logic_vector(11 downto 0);
     TX_BCTLIN0 : in std_ulogic;
     TX_BCTLIN1 : in std_ulogic;
     TX_BCTLIN2 : in std_ulogic;
     TX_BCTLIN3 : in std_ulogic;
     TX_BYPASS_CTRLIN : in std_logic_vector(11 downto 0);
     TX_BYPASS_DATAIN00 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN01 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN02 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN03 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN04 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN05 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN06 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN07 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN08 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN09 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN10 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN11 : in std_logic_vector(63 downto 0);
     TX_BYPASS_ENAIN : in std_ulogic;
     TX_BYPASS_GEARBOX_SEQIN : in std_logic_vector(7 downto 0);
     TX_BYPASS_MFRAMER_STATEIN : in std_logic_vector(3 downto 0);
     TX_CHANIN0 : in std_logic_vector(10 downto 0);
     TX_CHANIN1 : in std_logic_vector(10 downto 0);
     TX_CHANIN2 : in std_logic_vector(10 downto 0);
     TX_CHANIN3 : in std_logic_vector(10 downto 0);
     TX_DATAIN0 : in std_logic_vector(127 downto 0);
     TX_DATAIN1 : in std_logic_vector(127 downto 0);
     TX_DATAIN2 : in std_logic_vector(127 downto 0);
     TX_DATAIN3 : in std_logic_vector(127 downto 0);
     TX_ENAIN0 : in std_ulogic;
     TX_ENAIN1 : in std_ulogic;
     TX_ENAIN2 : in std_ulogic;
     TX_ENAIN3 : in std_ulogic;
     TX_EOPIN0 : in std_ulogic;
     TX_EOPIN1 : in std_ulogic;
     TX_EOPIN2 : in std_ulogic;
     TX_EOPIN3 : in std_ulogic;
     TX_ERRIN0 : in std_ulogic;
     TX_ERRIN1 : in std_ulogic;
     TX_ERRIN2 : in std_ulogic;
     TX_ERRIN3 : in std_ulogic;
     TX_MTYIN0 : in std_logic_vector(3 downto 0);
     TX_MTYIN1 : in std_logic_vector(3 downto 0);
     TX_MTYIN2 : in std_logic_vector(3 downto 0);
     TX_MTYIN3 : in std_logic_vector(3 downto 0);
     TX_RESET : in std_ulogic;
     TX_SERDES_REFCLK : in std_ulogic;
     TX_SERDES_REFCLK_RESET : in std_ulogic;
     TX_SOPIN0 : in std_ulogic;
     TX_SOPIN1 : in std_ulogic;
     TX_SOPIN2 : in std_ulogic;
     TX_SOPIN3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ILKNE4 : component is "PRIMITIVE";

----- component INBUF -----
component INBUF
  generic (
     IBUF_LOW_PWR : string := "TRUE";
     ISTANDARD : string := "UNUSED";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_ulogic;
     PAD : in std_ulogic;
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  INBUF : component is "PRIMITIVE";

----- component INV -----
component INV
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  INV : component is "PRIMITIVE";

----- component IN_FIFO -----
component IN_FIFO
  generic (
     ALMOST_EMPTY_VALUE : integer := 1;
     ALMOST_FULL_VALUE : integer := 1;
     ARRAY_MODE : string := "ARRAY_MODE_4_X_8";
     SYNCHRONOUS_MODE : string := "FALSE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     Q0 : out std_logic_vector(7 downto 0);
     Q1 : out std_logic_vector(7 downto 0);
     Q2 : out std_logic_vector(7 downto 0);
     Q3 : out std_logic_vector(7 downto 0);
     Q4 : out std_logic_vector(7 downto 0);
     Q5 : out std_logic_vector(7 downto 0);
     Q6 : out std_logic_vector(7 downto 0);
     Q7 : out std_logic_vector(7 downto 0);
     Q8 : out std_logic_vector(7 downto 0);
     Q9 : out std_logic_vector(7 downto 0);
     D0 : in std_logic_vector(3 downto 0);
     D1 : in std_logic_vector(3 downto 0);
     D2 : in std_logic_vector(3 downto 0);
     D3 : in std_logic_vector(3 downto 0);
     D4 : in std_logic_vector(3 downto 0);
     D5 : in std_logic_vector(7 downto 0);
     D6 : in std_logic_vector(7 downto 0);
     D7 : in std_logic_vector(3 downto 0);
     D8 : in std_logic_vector(3 downto 0);
     D9 : in std_logic_vector(3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RESET : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IN_FIFO : component is "PRIMITIVE";

----- component IOBUF -----
component IOBUF
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF : component is "PRIMITIVE";

----- component IOBUFDS -----
component IOBUFDS
  generic (
     DIFF_TERM : boolean := FALSE;
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS : component is "PRIMITIVE";

----- component IOBUFDSE3 -----
component IOBUFDSE3
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0;
     USE_IBUFDISABLE : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_logic_vector(1 downto 0);
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDSE3 : component is "PRIMITIVE";

----- component IOBUFDS_COMP -----
component IOBUFDS_COMP
  generic (
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_COMP : component is "PRIMITIVE";

----- component IOBUFDS_DCIEN -----
component IOBUFDS_DCIEN
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DCIEN : component is "PRIMITIVE";

----- component IOBUFDS_DIFF_OUT -----
component IOBUFDS_DIFF_OUT
  generic (
     DIFF_TERM : boolean := FALSE;
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     TM : in std_ulogic;
     TS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DIFF_OUT : component is "PRIMITIVE";

----- component IOBUFDS_DIFF_OUT_DCIEN -----
component IOBUFDS_DIFF_OUT_DCIEN
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     TM : in std_ulogic;
     TS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DIFF_OUT_DCIEN : component is "PRIMITIVE";

----- component IOBUFDS_DIFF_OUT_INTERMDISABLE -----
component IOBUFDS_DIFF_OUT_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     TM : in std_ulogic;
     TS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DIFF_OUT_INTERMDISABLE : component is "PRIMITIVE";

----- component IOBUFDS_INTERMDISABLE -----
component IOBUFDS_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_INTERMDISABLE : component is "PRIMITIVE";

----- component IOBUFE3 -----
component IOBUFE3
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0;
     USE_IBUFDISABLE : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_ulogic;
     T : in std_ulogic;
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFE3 : component is "PRIMITIVE";

----- component IOBUF_ANALOG -----
component IOBUF_ANALOG
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_ANALOG : component is "PRIMITIVE";

----- component IOBUF_DCIEN -----
component IOBUF_DCIEN
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_DCIEN : component is "PRIMITIVE";

----- component IOBUF_INTERMDISABLE -----
component IOBUF_INTERMDISABLE
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SIM_DEVICE : string := "7SERIES";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_INTERMDISABLE : component is "PRIMITIVE";

----- component ISERDES -----
component ISERDES
  generic (
     BITSLIP_ENABLE : boolean := false;
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     IOBDELAY : string := "NONE";
     IOBDELAY_TYPE : string := "DEFAULT";
     IOBDELAY_VALUE : integer := 0;
     NUM_CE : integer := 2;
     SERDES_MODE : string := "MASTER";
     SRVAL_Q1 : bit := '0';
     SRVAL_Q2 : bit := '0';
     SRVAL_Q3 : bit := '0';
     SRVAL_Q4 : bit := '0'
  );
  port (
     O : out std_ulogic;
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_ulogic;
     DLYCE : in std_ulogic;
     DLYINC : in std_ulogic;
     DLYRST : in std_ulogic;
     OCLK : in std_ulogic;
     REV : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     SR : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDES : component is "PRIMITIVE";

----- component ISERDESE1 -----
component ISERDESE1
  generic (
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     DYN_CLKDIV_INV_EN : boolean := FALSE;
     DYN_CLK_INV_EN : boolean := FALSE;
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     IOBDELAY : string := "NONE";
     NUM_CE : integer := 2;
     OFB_USED : boolean := FALSE;
     SERDES_MODE : string := "MASTER";
     SRVAL_Q1 : bit := '0';
     SRVAL_Q2 : bit := '0';
     SRVAL_Q3 : bit := '0';
     SRVAL_Q4 : bit := '0'
  );
  port (
     O : out std_ulogic;
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKB : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_ulogic;
     DDLY : in std_ulogic;
     DYNCLKDIVSEL : in std_ulogic;
     DYNCLKSEL : in std_ulogic;
     OCLK : in std_ulogic;
     OFB : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDESE1 : component is "PRIMITIVE";

----- component ISERDESE2 -----
component ISERDESE2
  generic (
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     DYN_CLKDIV_INV_EN : string := "FALSE";
     DYN_CLK_INV_EN : string := "FALSE";
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     IOBDELAY : string := "NONE";
     IS_CLKB_INVERTED : bit := '0';
     IS_CLKDIVP_INVERTED : bit := '0';
     IS_CLKDIV_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_D_INVERTED : bit := '0';
     IS_OCLKB_INVERTED : bit := '0';
     IS_OCLK_INVERTED : bit := '0';
     NUM_CE : integer := 2;
     OFB_USED : string := "FALSE";
     SERDES_MODE : string := "MASTER";
     SRVAL_Q1 : bit := '0';
     SRVAL_Q2 : bit := '0';
     SRVAL_Q3 : bit := '0';
     SRVAL_Q4 : bit := '0'
  );
  port (
     O : out std_ulogic;
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     Q7 : out std_ulogic;
     Q8 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKB : in std_ulogic;
     CLKDIV : in std_ulogic;
     CLKDIVP : in std_ulogic;
     D : in std_ulogic;
     DDLY : in std_ulogic;
     DYNCLKDIVSEL : in std_ulogic;
     DYNCLKSEL : in std_ulogic;
     OCLK : in std_ulogic;
     OCLKB : in std_ulogic;
     OFB : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDESE2 : component is "PRIMITIVE";

----- component ISERDESE3 -----
component ISERDESE3
  generic (
     DATA_WIDTH : integer := 8;
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     FIFO_ENABLE : string := "FALSE";
     FIFO_SYNC_MODE : string := "FALSE";
     IDDR_MODE : string := "FALSE";
     IS_CLK_B_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0
  );
  port (
     FIFO_EMPTY : out std_ulogic;
     INTERNAL_DIVCLK : out std_ulogic;
     Q : out std_logic_vector(7 downto 0);
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     CLK_B : in std_ulogic;
     D : in std_ulogic;
     FIFO_RD_CLK : in std_ulogic;
     FIFO_RD_EN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDESE3 : component is "PRIMITIVE";

----- component ISERDES_NODELAY -----
component ISERDES_NODELAY
  generic (
     BITSLIP_ENABLE : boolean := false;
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     NUM_CE : integer := 2;
     SERDES_MODE : string := "MASTER"
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKB : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_ulogic;
     OCLK : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDES_NODELAY : component is "PRIMITIVE";

----- component JTAG_SIME2 -----
component JTAG_SIME2
  generic (
     PART_NAME : string := "7K325T"
  );
  port (
     TDO : out std_ulogic;
     TCK : in std_ulogic;
     TDI : in std_ulogic;
     TMS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  JTAG_SIME2 : component is "PRIMITIVE";

----- component KEEPER -----
component KEEPER
  port (
     O : inout std_ulogic := 'W'
  );
end component;
attribute BOX_TYPE of
  KEEPER : component is "PRIMITIVE";

----- component LDCE -----
component LDCE
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : bit := '0';
     IS_G_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDCE : component is "PRIMITIVE";

----- component LDPE -----
component LDPE
  generic (
     INIT : bit := '1';
     IS_G_INVERTED : bit := '0';
     IS_PRE_INVERTED : bit := '0'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDPE : component is "PRIMITIVE";

----- component LOOKAHEAD8 -----
component LOOKAHEAD8
  generic (
     LOOKB : string := "FALSE";
     LOOKD : string := "FALSE";
     LOOKF : string := "FALSE";
     LOOKH : string := "FALSE"
  );
  port (
     COUTB : out std_ulogic;
     COUTD : out std_ulogic;
     COUTF : out std_ulogic;
     COUTH : out std_ulogic;
     CIN : in std_ulogic;
     CYA : in std_ulogic;
     CYB : in std_ulogic;
     CYC : in std_ulogic;
     CYD : in std_ulogic;
     CYE : in std_ulogic;
     CYF : in std_ulogic;
     CYG : in std_ulogic;
     CYH : in std_ulogic;
     GEA : in std_ulogic;
     GEB : in std_ulogic;
     GEC : in std_ulogic;
     GED : in std_ulogic;
     GEE : in std_ulogic;
     GEF : in std_ulogic;
     GEG : in std_ulogic;
     GEH : in std_ulogic;
     PROPA : in std_ulogic;
     PROPB : in std_ulogic;
     PROPC : in std_ulogic;
     PROPD : in std_ulogic;
     PROPE : in std_ulogic;
     PROPF : in std_ulogic;
     PROPG : in std_ulogic;
     PROPH : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LOOKAHEAD8 : component is "PRIMITIVE";

----- component LUT1 -----
component LUT1
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT1 : component is "PRIMITIVE";

----- component LUT2 -----
component LUT2
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT2 : component is "PRIMITIVE";

----- component LUT3 -----
component LUT3
  generic (
     INIT : bit_vector := X"00"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT3 : component is "PRIMITIVE";

----- component LUT4 -----
component LUT4
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT4 : component is "PRIMITIVE";

----- component LUT5 -----
component LUT5
  generic (
     INIT : bit_vector := X"00000000"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT5 : component is "PRIMITIVE";

----- component LUT6 -----
component LUT6
  generic (
     INIT : bit_vector := X"0000000000000000"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic;
     I5 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT6 : component is "PRIMITIVE";

----- component LUT6CY -----
component LUT6CY
  generic (
     INIT : std_logic_vector(63 downto 0) := X"0000000000000000"
  );
  port (
     GE : out std_ulogic;
     O51 : out std_ulogic;
     O52 : out std_ulogic;
     PROP : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT6CY : component is "PRIMITIVE";

----- component LUT6_2 -----
component LUT6_2
  generic (
     INIT : bit_vector := X"0000000000000000"
  );
  port (
     O5 : out std_ulogic;
     O6 : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic;
     I5 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT6_2 : component is "PRIMITIVE";

----- component LUTCY1 -----
component LUTCY1
  generic (
     INIT : std_logic_vector(31 downto 0) := X"00000000"
  );
  port (
     O : out std_ulogic;
     PROP : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUTCY1 : component is "PRIMITIVE";

----- component LUTCY2 -----
component LUTCY2
  generic (
     INIT : std_logic_vector(31 downto 0) := X"00000000"
  );
  port (
     GE : out std_ulogic;
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUTCY2 : component is "PRIMITIVE";

----- component MASTER_JTAG -----
component MASTER_JTAG
  port (
     TDO : out std_ulogic;
     TCK : in std_ulogic;
     TDI : in std_ulogic;
     TMS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MASTER_JTAG : component is "PRIMITIVE";

----- component MBUFGCE -----
component MBUFGCE
  generic (
     CE_TYPE : string := "SYNC";
     IS_CE_INVERTED : bit := '0';
     IS_I_INVERTED : bit := '0';
     MODE : string := "PERFORMANCE";
     SIM_DEVICE : string := "VERSAL";
     STARTUP_SYNC : string := "TRUE"
  );
  port (
     O1 : out std_ulogic;
     O2 : out std_ulogic;
     O3 : out std_ulogic;
     O4 : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MBUFGCE : component is "PRIMITIVE";

----- component MBUFGCTRL -----
component MBUFGCTRL
  generic (
     CE_TYPE_CE0 : string := "SYNC";
     CE_TYPE_CE1 : string := "SYNC";
     INIT_OUT : integer := 0;
     IS_CE0_INVERTED : bit := '0';
     IS_CE1_INVERTED : bit := '0';
     IS_I0_INVERTED : bit := '0';
     IS_I1_INVERTED : bit := '0';
     IS_IGNORE0_INVERTED : bit := '0';
     IS_IGNORE1_INVERTED : bit := '0';
     IS_S0_INVERTED : bit := '0';
     IS_S1_INVERTED : bit := '0';
     MODE : string := "PERFORMANCE";
     PRESELECT_I0 : string := "FALSE";
     PRESELECT_I1 : string := "FALSE";
     SIM_DEVICE : string := "VERSAL";
     STARTUP_SYNC : string := "TRUE"
  );
  port (
     O1 : out std_ulogic;
     O2 : out std_ulogic;
     O3 : out std_ulogic;
     O4 : out std_ulogic;
     CE0 : in std_ulogic;
     CE1 : in std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     IGNORE0 : in std_ulogic;
     IGNORE1 : in std_ulogic;
     S0 : in std_ulogic;
     S1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MBUFGCTRL : component is "PRIMITIVE";

----- component MBUFG_GT -----
component MBUFG_GT
  generic (
     MODE : string := "PERFORMANCE";
     SIM_DEVICE : string := "VERSAL";
     STARTUP_SYNC : string := "TRUE"
  );
  port (
     O1 : out std_ulogic;
     O2 : out std_ulogic;
     O3 : out std_ulogic;
     O4 : out std_ulogic;
     CE : in std_ulogic;
     CEMASK : in std_ulogic;
     CLR : in std_ulogic;
     CLRMASK : in std_ulogic;
     DIV : in std_logic_vector(2 downto 0);
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MBUFG_GT : component is "PRIMITIVE";

----- component MMCME2_ADV -----
component MMCME2_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKFBOUT_USE_FINE_PS : boolean := FALSE;
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_USE_FINE_PS : boolean := FALSE;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_USE_FINE_PS : boolean := FALSE;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_USE_FINE_PS : boolean := FALSE;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_USE_FINE_PS : boolean := FALSE;
     CLKOUT4_CASCADE : boolean := FALSE;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT4_USE_FINE_PS : boolean := FALSE;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT5_USE_FINE_PS : boolean := FALSE;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLKOUT6_USE_FINE_PS : boolean := FALSE;
     COMPENSATION : string := "ZHOLD";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKINSEL_INVERTED : bit := '0';
     IS_PSEN_INVERTED : bit := '0';
     IS_PSINCDEC_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.0;
     REF_JITTER2 : real := 0.0;
     SS_EN : string := "FALSE";
     SS_MODE : string := "CENTER_HIGH";
     SS_MOD_PERIOD : integer := 10000;
     STARTUP_WAIT : boolean := FALSE
  );
  port (
     CLKFBOUT : out std_ulogic := '0';
     CLKFBOUTB : out std_ulogic := '0';
     CLKFBSTOPPED : out std_ulogic := '0';
     CLKINSTOPPED : out std_ulogic := '0';
     CLKOUT0 : out std_ulogic := '0';
     CLKOUT0B : out std_ulogic := '0';
     CLKOUT1 : out std_ulogic := '0';
     CLKOUT1B : out std_ulogic := '0';
     CLKOUT2 : out std_ulogic := '0';
     CLKOUT2B : out std_ulogic := '0';
     CLKOUT3 : out std_ulogic := '0';
     CLKOUT3B : out std_ulogic := '0';
     CLKOUT4 : out std_ulogic := '0';
     CLKOUT5 : out std_ulogic := '0';
     CLKOUT6 : out std_ulogic := '0';
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME2_ADV : component is "PRIMITIVE";

----- component MMCME2_BASE -----
component MMCME2_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_CASCADE : boolean := FALSE;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     DIVCLK_DIVIDE : integer := 1;
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : boolean := FALSE
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME2_BASE : component is "PRIMITIVE";

----- component MMCME3_ADV -----
component MMCME3_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKFBOUT_USE_FINE_PS : string := "FALSE";
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_USE_FINE_PS : string := "FALSE";
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_USE_FINE_PS : string := "FALSE";
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_USE_FINE_PS : string := "FALSE";
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_USE_FINE_PS : string := "FALSE";
     CLKOUT4_CASCADE : string := "FALSE";
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT4_USE_FINE_PS : string := "FALSE";
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT5_USE_FINE_PS : string := "FALSE";
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLKOUT6_USE_FINE_PS : string := "FALSE";
     COMPENSATION : string := "AUTO";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN1_INVERTED : bit := '0';
     IS_CLKIN2_INVERTED : bit := '0';
     IS_CLKINSEL_INVERTED : bit := '0';
     IS_PSEN_INVERTED : bit := '0';
     IS_PSINCDEC_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.010;
     REF_JITTER2 : real := 0.010;
     SS_EN : string := "FALSE";
     SS_MODE : string := "CENTER_HIGH";
     SS_MOD_PERIOD : integer := 10000;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CDDCDONE : out std_ulogic;
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKFBSTOPPED : out std_ulogic;
     CLKINSTOPPED : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     PSDONE : out std_ulogic;
     CDDCREQ : in std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME3_ADV : component is "PRIMITIVE";

----- component MMCME3_BASE -----
component MMCME3_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_CASCADE : string := "FALSE";
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN1_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME3_BASE : component is "PRIMITIVE";

----- component MMCME4_ADV -----
component MMCME4_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKFBOUT_USE_FINE_PS : string := "FALSE";
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_USE_FINE_PS : string := "FALSE";
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_USE_FINE_PS : string := "FALSE";
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_USE_FINE_PS : string := "FALSE";
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_USE_FINE_PS : string := "FALSE";
     CLKOUT4_CASCADE : string := "FALSE";
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT4_USE_FINE_PS : string := "FALSE";
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT5_USE_FINE_PS : string := "FALSE";
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLKOUT6_USE_FINE_PS : string := "FALSE";
     COMPENSATION : string := "AUTO";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN1_INVERTED : bit := '0';
     IS_CLKIN2_INVERTED : bit := '0';
     IS_CLKINSEL_INVERTED : bit := '0';
     IS_PSEN_INVERTED : bit := '0';
     IS_PSINCDEC_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.010;
     REF_JITTER2 : real := 0.010;
     SS_EN : string := "FALSE";
     SS_MODE : string := "CENTER_HIGH";
     SS_MOD_PERIOD : integer := 10000;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CDDCDONE : out std_ulogic;
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKFBSTOPPED : out std_ulogic;
     CLKINSTOPPED : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     PSDONE : out std_ulogic;
     CDDCREQ : in std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME4_ADV : component is "PRIMITIVE";

----- component MMCME4_BASE -----
component MMCME4_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_CASCADE : string := "FALSE";
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN1_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME4_BASE : component is "PRIMITIVE";

----- component MMCME5 -----
component MMCME5
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_FRACT : integer := 0;
     CLKFBOUT_MULT : integer := 42;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 2;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT1_DIVIDE : integer := 2;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT2_DIVIDE : integer := 2;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT3_DIVIDE : integer := 2;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT4_DIVIDE : integer := 2;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT4_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT5_DIVIDE : integer := 2;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT5_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT6_DIVIDE : integer := 2;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLKOUT6_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUTFB_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     COMPENSATION : string := "AUTO";
     DESKEW_DELAY1 : integer := 0;
     DESKEW_DELAY2 : integer := 0;
     DESKEW_DELAY_EN1 : string := "FALSE";
     DESKEW_DELAY_EN2 : string := "FALSE";
     DESKEW_DELAY_PATH1 : string := "FALSE";
     DESKEW_DELAY_PATH2 : string := "FALSE";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN1_INVERTED : bit := '0';
     IS_CLKIN2_INVERTED : bit := '0';
     IS_CLKINSEL_INVERTED : bit := '0';
     IS_PSEN_INVERTED : bit := '0';
     IS_PSINCDEC_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.010;
     REF_JITTER2 : real := 0.010;
     SS_EN : string := "FALSE";
     SS_MODE : string := "CENTER_HIGH";
     SS_MOD_PERIOD : integer := 10000
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKFBSTOPPED : out std_ulogic;
     CLKINSTOPPED : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     LOCKED1_DESKEW : out std_ulogic;
     LOCKED2_DESKEW : out std_ulogic;
     LOCKED_FB : out std_ulogic;
     PSDONE : out std_ulogic;
     CLKFB1_DESKEW : in std_ulogic;
     CLKFB2_DESKEW : in std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN1_DESKEW : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKIN2_DESKEW : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME5 : component is "PRIMITIVE";

----- component MRMAC -----
component MRMAC
  generic (
     CTL_AXIS_CFG_0 : std_logic_vector(2 downto 0) := "000";
     CTL_AXIS_CFG_1 : std_logic_vector(2 downto 0) := "000";
     CTL_AXIS_CFG_2 : std_logic_vector(2 downto 0) := "000";
     CTL_AXIS_CFG_3 : std_logic_vector(2 downto 0) := "000";
     CTL_COUNTER_EXTEND_0 : string := "FALSE";
     CTL_COUNTER_EXTEND_1 : string := "FALSE";
     CTL_COUNTER_EXTEND_2 : string := "FALSE";
     CTL_COUNTER_EXTEND_3 : string := "FALSE";
     CTL_CUSTOM_RX_AMS_0 : string := "FALSE";
     CTL_CUSTOM_RX_AMS_1 : string := "FALSE";
     CTL_CUSTOM_RX_AMS_2 : string := "FALSE";
     CTL_CUSTOM_RX_AMS_3 : string := "FALSE";
     CTL_CUSTOM_TX_AMS_0 : string := "FALSE";
     CTL_CUSTOM_TX_AMS_1 : string := "FALSE";
     CTL_CUSTOM_TX_AMS_2 : string := "FALSE";
     CTL_CUSTOM_TX_AMS_3 : string := "FALSE";
     CTL_DATA_RATE_0 : std_logic_vector(2 downto 0) := "100";
     CTL_DATA_RATE_1 : std_logic_vector(1 downto 0) := "01";
     CTL_DATA_RATE_2 : std_logic_vector(1 downto 0) := "01";
     CTL_DATA_RATE_3 : std_logic_vector(1 downto 0) := "01";
     CTL_FEC_MODE_0 : std_logic_vector(3 downto 0) := X"8";
     CTL_FEC_MODE_1 : std_logic_vector(3 downto 0) := X"0";
     CTL_FEC_MODE_2 : std_logic_vector(3 downto 0) := X"0";
     CTL_FEC_MODE_3 : std_logic_vector(3 downto 0) := X"0";
     CTL_PCS_RX_TS_EN_0 : string := "FALSE";
     CTL_PCS_RX_TS_EN_1 : string := "FALSE";
     CTL_PCS_RX_TS_EN_2 : string := "FALSE";
     CTL_PCS_RX_TS_EN_3 : string := "FALSE";
     CTL_PREEMPT_ENABLE_0 : string := "FALSE";
     CTL_PREEMPT_ENABLE_1 : string := "FALSE";
     CTL_PREEMPT_ENABLE_2 : string := "FALSE";
     CTL_PREEMPT_ENABLE_3 : string := "FALSE";
     CTL_REVISION : std_logic_vector(31 downto 0) := X"00000001";
     CTL_RX01_DEGRADE_ACT_THRESH : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX01_DEGRADE_DEACT_THRESH : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX01_DEGRADE_ENABLE : string := "FALSE";
     CTL_RX01_DEGRADE_INTERVAL : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX23_DEGRADE_ACT_THRESH : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX23_DEGRADE_DEACT_THRESH : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX23_DEGRADE_ENABLE : string := "FALSE";
     CTL_RX23_DEGRADE_INTERVAL : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_CHECK_ACK_0 : string := "TRUE";
     CTL_RX_CHECK_ACK_1 : string := "TRUE";
     CTL_RX_CHECK_ACK_2 : string := "TRUE";
     CTL_RX_CHECK_ACK_3 : string := "TRUE";
     CTL_RX_CHECK_ETYPE_GCP_0 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_GCP_1 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_GCP_2 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_GCP_3 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_GPP_0 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_GPP_1 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_GPP_2 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_GPP_3 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PCP_0 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PCP_1 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PCP_2 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PCP_3 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PPP_0 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PPP_1 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PPP_2 : string := "FALSE";
     CTL_RX_CHECK_ETYPE_PPP_3 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GCP_0 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GCP_1 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GCP_2 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GCP_3 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GPP_0 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GPP_1 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GPP_2 : string := "FALSE";
     CTL_RX_CHECK_MCAST_GPP_3 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PCP_0 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PCP_1 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PCP_2 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PCP_3 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PPP_0 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PPP_1 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PPP_2 : string := "FALSE";
     CTL_RX_CHECK_MCAST_PPP_3 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GCP_0 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GCP_1 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GCP_2 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GCP_3 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GPP_0 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GPP_1 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GPP_2 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_GPP_3 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PCP_0 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PCP_1 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PCP_2 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PCP_3 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PPP_0 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PPP_1 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PPP_2 : string := "FALSE";
     CTL_RX_CHECK_OPCODE_PPP_3 : string := "FALSE";
     CTL_RX_CHECK_PREAMBLE_0 : string := "FALSE";
     CTL_RX_CHECK_PREAMBLE_1 : string := "FALSE";
     CTL_RX_CHECK_PREAMBLE_2 : string := "FALSE";
     CTL_RX_CHECK_PREAMBLE_3 : string := "FALSE";
     CTL_RX_CHECK_SA_GCP_0 : string := "FALSE";
     CTL_RX_CHECK_SA_GCP_1 : string := "FALSE";
     CTL_RX_CHECK_SA_GCP_2 : string := "FALSE";
     CTL_RX_CHECK_SA_GCP_3 : string := "FALSE";
     CTL_RX_CHECK_SA_GPP_0 : string := "FALSE";
     CTL_RX_CHECK_SA_GPP_1 : string := "FALSE";
     CTL_RX_CHECK_SA_GPP_2 : string := "FALSE";
     CTL_RX_CHECK_SA_GPP_3 : string := "FALSE";
     CTL_RX_CHECK_SA_PCP_0 : string := "FALSE";
     CTL_RX_CHECK_SA_PCP_1 : string := "FALSE";
     CTL_RX_CHECK_SA_PCP_2 : string := "FALSE";
     CTL_RX_CHECK_SA_PCP_3 : string := "FALSE";
     CTL_RX_CHECK_SA_PPP_0 : string := "FALSE";
     CTL_RX_CHECK_SA_PPP_1 : string := "FALSE";
     CTL_RX_CHECK_SA_PPP_2 : string := "FALSE";
     CTL_RX_CHECK_SA_PPP_3 : string := "FALSE";
     CTL_RX_CHECK_SFD_0 : string := "FALSE";
     CTL_RX_CHECK_SFD_1 : string := "FALSE";
     CTL_RX_CHECK_SFD_2 : string := "FALSE";
     CTL_RX_CHECK_SFD_3 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GCP_0 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GCP_1 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GCP_2 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GCP_3 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GPP_0 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GPP_1 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GPP_2 : string := "FALSE";
     CTL_RX_CHECK_UCAST_GPP_3 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PCP_0 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PCP_1 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PCP_2 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PCP_3 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PPP_0 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PPP_1 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PPP_2 : string := "FALSE";
     CTL_RX_CHECK_UCAST_PPP_3 : string := "FALSE";
     CTL_RX_DATA_PATTERN_SELECT_0 : string := "FALSE";
     CTL_RX_DATA_PATTERN_SELECT_1 : string := "FALSE";
     CTL_RX_DATA_PATTERN_SELECT_2 : string := "FALSE";
     CTL_RX_DATA_PATTERN_SELECT_3 : string := "FALSE";
     CTL_RX_DELETE_FCS_0 : string := "TRUE";
     CTL_RX_DELETE_FCS_1 : string := "TRUE";
     CTL_RX_DELETE_FCS_2 : string := "TRUE";
     CTL_RX_DELETE_FCS_3 : string := "TRUE";
     CTL_RX_ENABLE_0 : string := "TRUE";
     CTL_RX_ENABLE_1 : string := "TRUE";
     CTL_RX_ENABLE_2 : string := "TRUE";
     CTL_RX_ENABLE_3 : string := "TRUE";
     CTL_RX_ENABLE_GCP_0 : string := "FALSE";
     CTL_RX_ENABLE_GCP_1 : string := "FALSE";
     CTL_RX_ENABLE_GCP_2 : string := "FALSE";
     CTL_RX_ENABLE_GCP_3 : string := "FALSE";
     CTL_RX_ENABLE_GPP_0 : string := "FALSE";
     CTL_RX_ENABLE_GPP_1 : string := "FALSE";
     CTL_RX_ENABLE_GPP_2 : string := "FALSE";
     CTL_RX_ENABLE_GPP_3 : string := "FALSE";
     CTL_RX_ENABLE_PCP_0 : string := "FALSE";
     CTL_RX_ENABLE_PCP_1 : string := "FALSE";
     CTL_RX_ENABLE_PCP_2 : string := "FALSE";
     CTL_RX_ENABLE_PCP_3 : string := "FALSE";
     CTL_RX_ENABLE_PPP_0 : string := "FALSE";
     CTL_RX_ENABLE_PPP_1 : string := "FALSE";
     CTL_RX_ENABLE_PPP_2 : string := "FALSE";
     CTL_RX_ENABLE_PPP_3 : string := "FALSE";
     CTL_RX_ETYPE_GCP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_GCP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_GCP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_GCP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_GPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_GPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_GPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_GPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PCP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PCP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PCP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PCP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_ETYPE_PPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_FEC_ALIGNMENT_BYPASS_0 : string := "FALSE";
     CTL_RX_FEC_ALIGNMENT_BYPASS_1 : string := "FALSE";
     CTL_RX_FEC_ALIGNMENT_BYPASS_2 : string := "FALSE";
     CTL_RX_FEC_ALIGNMENT_BYPASS_3 : string := "FALSE";
     CTL_RX_FEC_BYPASS_CORRECTION_0 : string := "FALSE";
     CTL_RX_FEC_BYPASS_CORRECTION_1 : string := "FALSE";
     CTL_RX_FEC_BYPASS_CORRECTION_2 : string := "FALSE";
     CTL_RX_FEC_BYPASS_CORRECTION_3 : string := "FALSE";
     CTL_RX_FEC_BYPASS_INDICATION_0 : string := "FALSE";
     CTL_RX_FEC_BYPASS_INDICATION_1 : string := "FALSE";
     CTL_RX_FEC_BYPASS_INDICATION_2 : string := "FALSE";
     CTL_RX_FEC_BYPASS_INDICATION_3 : string := "FALSE";
     CTL_RX_FEC_CDC_BYPASS_01 : string := "FALSE";
     CTL_RX_FEC_CDC_BYPASS_23 : string := "FALSE";
     CTL_RX_FEC_ERRIND_MODE : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_BYPASS_0 : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_BYPASS_1 : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_BYPASS_2 : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_BYPASS_3 : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_CLAUSE49_0 : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_CLAUSE49_1 : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_CLAUSE49_2 : string := "FALSE";
     CTL_RX_FEC_TRANSCODE_CLAUSE49_3 : string := "FALSE";
     CTL_RX_FLEXIF_INPUT_ENABLE_0 : string := "FALSE";
     CTL_RX_FLEXIF_INPUT_ENABLE_1 : string := "FALSE";
     CTL_RX_FLEXIF_INPUT_ENABLE_2 : string := "FALSE";
     CTL_RX_FLEXIF_INPUT_ENABLE_3 : string := "FALSE";
     CTL_RX_FLEXIF_SELECT_0 : std_logic_vector(3 downto 0) := X"1";
     CTL_RX_FLEXIF_SELECT_1 : std_logic_vector(3 downto 0) := X"1";
     CTL_RX_FLEXIF_SELECT_2 : std_logic_vector(3 downto 0) := X"1";
     CTL_RX_FLEXIF_SELECT_3 : std_logic_vector(3 downto 0) := X"1";
     CTL_RX_FORWARD_CONTROL_0 : string := "FALSE";
     CTL_RX_FORWARD_CONTROL_1 : string := "FALSE";
     CTL_RX_FORWARD_CONTROL_2 : string := "FALSE";
     CTL_RX_FORWARD_CONTROL_3 : string := "FALSE";
     CTL_RX_IGNORE_FCS_0 : string := "FALSE";
     CTL_RX_IGNORE_FCS_1 : string := "FALSE";
     CTL_RX_IGNORE_FCS_2 : string := "FALSE";
     CTL_RX_IGNORE_FCS_3 : string := "FALSE";
     CTL_RX_IGNORE_INRANGE_0 : string := "FALSE";
     CTL_RX_IGNORE_INRANGE_1 : string := "FALSE";
     CTL_RX_IGNORE_INRANGE_2 : string := "FALSE";
     CTL_RX_IGNORE_INRANGE_3 : string := "FALSE";
     CTL_RX_MAX_PACKET_LEN_0 : std_logic_vector(14 downto 0) := "010" & X"580";
     CTL_RX_MAX_PACKET_LEN_1 : std_logic_vector(14 downto 0) := "010" & X"580";
     CTL_RX_MAX_PACKET_LEN_2 : std_logic_vector(14 downto 0) := "010" & X"580";
     CTL_RX_MAX_PACKET_LEN_3 : std_logic_vector(14 downto 0) := "010" & X"580";
     CTL_RX_MIN_PACKET_LEN_0 : std_logic_vector(7 downto 0) := X"40";
     CTL_RX_MIN_PACKET_LEN_1 : std_logic_vector(7 downto 0) := X"40";
     CTL_RX_MIN_PACKET_LEN_2 : std_logic_vector(7 downto 0) := X"40";
     CTL_RX_MIN_PACKET_LEN_3 : std_logic_vector(7 downto 0) := X"40";
     CTL_RX_OPCODE_GPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_GPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_GPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_GPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_GCP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_GCP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_GCP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_GCP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_PCP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_PCP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_PCP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MAX_PCP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_GCP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_GCP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_GCP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_GCP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_PCP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_PCP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_PCP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_PCP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_PPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_PPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_PPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_PPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_PAUSE_DA_MCAST_0 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_DA_MCAST_1 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_DA_MCAST_2 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_DA_MCAST_3 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_DA_UCAST_0 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_DA_UCAST_1 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_DA_UCAST_2 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_DA_UCAST_3 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_SA_0 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_SA_1 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_SA_2 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_SA_3 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PROCESS_LFI_0 : string := "FALSE";
     CTL_RX_PROCESS_LFI_1 : string := "FALSE";
     CTL_RX_PROCESS_LFI_2 : string := "FALSE";
     CTL_RX_PROCESS_LFI_3 : string := "FALSE";
     CTL_RX_PTP_LATENCY_ADJUST_0 : std_logic_vector(19 downto 0) := X"00000";
     CTL_RX_PTP_LATENCY_ADJUST_1 : std_logic_vector(19 downto 0) := X"00000";
     CTL_RX_PTP_LATENCY_ADJUST_2 : std_logic_vector(19 downto 0) := X"00000";
     CTL_RX_PTP_LATENCY_ADJUST_3 : std_logic_vector(19 downto 0) := X"00000";
     CTL_RX_PTP_ST_OFFSET_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_PTP_ST_OFFSET_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_PTP_ST_OFFSET_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_PTP_ST_OFFSET_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_TEST_PATTERN_0 : string := "FALSE";
     CTL_RX_TEST_PATTERN_1 : string := "FALSE";
     CTL_RX_TEST_PATTERN_2 : string := "FALSE";
     CTL_RX_TEST_PATTERN_3 : string := "FALSE";
     CTL_RX_TEST_PATTERN_ENABLE_0 : string := "FALSE";
     CTL_RX_TEST_PATTERN_ENABLE_1 : string := "FALSE";
     CTL_RX_TEST_PATTERN_ENABLE_2 : string := "FALSE";
     CTL_RX_TEST_PATTERN_ENABLE_3 : string := "FALSE";
     CTL_RX_VL_LENGTH_MINUS1_100GE_0 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_RX_VL_LENGTH_MINUS1_25GE_0 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_RX_VL_LENGTH_MINUS1_25GE_1 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_RX_VL_LENGTH_MINUS1_25GE_2 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_RX_VL_LENGTH_MINUS1_25GE_3 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_RX_VL_LENGTH_MINUS1_40GE_0 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_RX_VL_LENGTH_MINUS1_50GE_0 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_RX_VL_LENGTH_MINUS1_50GE_2 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_SERDES_PASSTHRU_0 : string := "FALSE";
     CTL_SERDES_PASSTHRU_1 : string := "FALSE";
     CTL_SERDES_PASSTHRU_2 : string := "FALSE";
     CTL_SERDES_PASSTHRU_3 : string := "FALSE";
     CTL_SERDES_WIDTH_0 : std_logic_vector(2 downto 0) := "010";
     CTL_SERDES_WIDTH_1 : std_logic_vector(2 downto 0) := "010";
     CTL_SERDES_WIDTH_2 : std_logic_vector(2 downto 0) := "010";
     CTL_SERDES_WIDTH_3 : std_logic_vector(2 downto 0) := "010";
     CTL_TX_AXI_FIFO_HIGH_THRESHOLD_0 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_AXI_FIFO_HIGH_THRESHOLD_1 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_AXI_FIFO_HIGH_THRESHOLD_2 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_AXI_FIFO_HIGH_THRESHOLD_3 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_0 : std_logic_vector(2 downto 0) := "011";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_1 : std_logic_vector(2 downto 0) := "011";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_2 : std_logic_vector(2 downto 0) := "011";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_3 : std_logic_vector(2 downto 0) := "011";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_ALT_0 : std_logic_vector(2 downto 0) := "100";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_ALT_1 : std_logic_vector(2 downto 0) := "100";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_ALT_2 : std_logic_vector(2 downto 0) := "100";
     CTL_TX_AXI_FIFO_LOW_THRESHOLD_ALT_3 : std_logic_vector(2 downto 0) := "100";
     CTL_TX_CORRUPT_FCS_ON_ERR_0 : std_logic_vector(1 downto 0) := "00";
     CTL_TX_CORRUPT_FCS_ON_ERR_1 : std_logic_vector(1 downto 0) := "00";
     CTL_TX_CORRUPT_FCS_ON_ERR_2 : std_logic_vector(1 downto 0) := "00";
     CTL_TX_CORRUPT_FCS_ON_ERR_3 : std_logic_vector(1 downto 0) := "00";
     CTL_TX_CUSTOM_PREAMBLE_ENABLE_0 : string := "FALSE";
     CTL_TX_CUSTOM_PREAMBLE_ENABLE_1 : string := "FALSE";
     CTL_TX_CUSTOM_PREAMBLE_ENABLE_2 : string := "FALSE";
     CTL_TX_CUSTOM_PREAMBLE_ENABLE_3 : string := "FALSE";
     CTL_TX_DATA_PATTERN_SELECT_0 : string := "FALSE";
     CTL_TX_DATA_PATTERN_SELECT_1 : string := "FALSE";
     CTL_TX_DATA_PATTERN_SELECT_2 : string := "FALSE";
     CTL_TX_DATA_PATTERN_SELECT_3 : string := "FALSE";
     CTL_TX_DA_GPP_0 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_DA_GPP_1 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_DA_GPP_2 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_DA_GPP_3 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_DA_PPP_0 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_DA_PPP_1 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_DA_PPP_2 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_DA_PPP_3 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_ENABLE_0 : string := "TRUE";
     CTL_TX_ENABLE_1 : string := "TRUE";
     CTL_TX_ENABLE_2 : string := "TRUE";
     CTL_TX_ENABLE_3 : string := "TRUE";
     CTL_TX_ETHERTYPE_GPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_ETHERTYPE_GPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_ETHERTYPE_GPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_ETHERTYPE_GPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_ETHERTYPE_PPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_ETHERTYPE_PPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_ETHERTYPE_PPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_ETHERTYPE_PPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_FCS_INS_ENABLE_0 : string := "TRUE";
     CTL_TX_FCS_INS_ENABLE_1 : string := "TRUE";
     CTL_TX_FCS_INS_ENABLE_2 : string := "TRUE";
     CTL_TX_FCS_INS_ENABLE_3 : string := "TRUE";
     CTL_TX_FEC_FOUR_LANE_PMD : string := "FALSE";
     CTL_TX_FEC_TRANSCODE_BYPASS_0 : string := "FALSE";
     CTL_TX_FEC_TRANSCODE_BYPASS_1 : string := "FALSE";
     CTL_TX_FEC_TRANSCODE_BYPASS_2 : string := "FALSE";
     CTL_TX_FEC_TRANSCODE_BYPASS_3 : string := "FALSE";
     CTL_TX_FLEXIF_INPUT_ENABLE_0 : string := "FALSE";
     CTL_TX_FLEXIF_INPUT_ENABLE_1 : string := "FALSE";
     CTL_TX_FLEXIF_INPUT_ENABLE_2 : string := "FALSE";
     CTL_TX_FLEXIF_INPUT_ENABLE_3 : string := "FALSE";
     CTL_TX_FLEXIF_SELECT_0 : std_logic_vector(2 downto 0) := "001";
     CTL_TX_FLEXIF_SELECT_1 : std_logic_vector(2 downto 0) := "001";
     CTL_TX_FLEXIF_SELECT_2 : std_logic_vector(2 downto 0) := "001";
     CTL_TX_FLEXIF_SELECT_3 : std_logic_vector(2 downto 0) := "001";
     CTL_TX_IGNORE_FCS_0 : string := "TRUE";
     CTL_TX_IGNORE_FCS_1 : string := "TRUE";
     CTL_TX_IGNORE_FCS_2 : string := "TRUE";
     CTL_TX_IGNORE_FCS_3 : string := "TRUE";
     CTL_TX_IPG_VALUE_0 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_IPG_VALUE_1 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_IPG_VALUE_2 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_IPG_VALUE_3 : std_logic_vector(3 downto 0) := X"C";
     CTL_TX_OPCODE_GPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_OPCODE_GPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_OPCODE_GPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_OPCODE_GPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_OPCODE_PPP_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_OPCODE_PPP_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_OPCODE_PPP_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_OPCODE_PPP_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA0_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA0_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA0_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA0_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA1_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA1_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA1_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA1_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA2_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA2_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA2_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA2_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA3_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA3_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA3_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA3_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA4_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA4_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA4_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA4_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA5_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA5_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA5_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA5_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA6_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA6_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA6_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA6_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA7_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA7_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA7_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA7_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA8_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA8_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA8_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_QUANTA8_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER0_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER0_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER0_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER0_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER1_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER1_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER1_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER1_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER2_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER2_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER2_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER2_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER3_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER3_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER3_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER3_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER4_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER4_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER4_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER4_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER5_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER5_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER5_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER5_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER6_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER6_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER6_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER6_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER7_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER7_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER7_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER7_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER8_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER8_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER8_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PAUSE_REFRESH_TIMER8_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PTP_1STEP_ENABLE_0 : string := "FALSE";
     CTL_TX_PTP_1STEP_ENABLE_1 : string := "FALSE";
     CTL_TX_PTP_1STEP_ENABLE_2 : string := "FALSE";
     CTL_TX_PTP_1STEP_ENABLE_3 : string := "FALSE";
     CTL_TX_PTP_LATENCY_ADJUST_0 : std_logic_vector(19 downto 0) := X"00000";
     CTL_TX_PTP_LATENCY_ADJUST_1 : std_logic_vector(19 downto 0) := X"00000";
     CTL_TX_PTP_LATENCY_ADJUST_2 : std_logic_vector(19 downto 0) := X"00000";
     CTL_TX_PTP_LATENCY_ADJUST_3 : std_logic_vector(19 downto 0) := X"00000";
     CTL_TX_PTP_RSFEC_COMP_EN_0 : string := "FALSE";
     CTL_TX_PTP_RSFEC_COMP_EN_1 : string := "FALSE";
     CTL_TX_PTP_RSFEC_COMP_EN_2 : string := "FALSE";
     CTL_TX_PTP_RSFEC_COMP_EN_3 : string := "FALSE";
     CTL_TX_PTP_SAT_ENABLE_0 : std_logic_vector(1 downto 0) := "01";
     CTL_TX_PTP_SAT_ENABLE_1 : std_logic_vector(1 downto 0) := "01";
     CTL_TX_PTP_SAT_ENABLE_2 : std_logic_vector(1 downto 0) := "01";
     CTL_TX_PTP_SAT_ENABLE_3 : std_logic_vector(1 downto 0) := "01";
     CTL_TX_PTP_ST_OFFSET_0 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PTP_ST_OFFSET_1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PTP_ST_OFFSET_2 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_PTP_ST_OFFSET_3 : std_logic_vector(15 downto 0) := X"0000";
     CTL_TX_SA_GPP_0 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_GPP_1 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_GPP_2 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_GPP_3 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_PPP_0 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_PPP_1 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_PPP_2 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_PPP_3 : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SEND_IDLE_0 : string := "FALSE";
     CTL_TX_SEND_IDLE_1 : string := "FALSE";
     CTL_TX_SEND_IDLE_2 : string := "FALSE";
     CTL_TX_SEND_IDLE_3 : string := "FALSE";
     CTL_TX_SEND_LFI_0 : string := "FALSE";
     CTL_TX_SEND_LFI_1 : string := "FALSE";
     CTL_TX_SEND_LFI_2 : string := "FALSE";
     CTL_TX_SEND_LFI_3 : string := "FALSE";
     CTL_TX_SEND_RFI_0 : string := "FALSE";
     CTL_TX_SEND_RFI_1 : string := "FALSE";
     CTL_TX_SEND_RFI_2 : string := "FALSE";
     CTL_TX_SEND_RFI_3 : string := "FALSE";
     CTL_TX_TEST_PATTERN_0 : string := "FALSE";
     CTL_TX_TEST_PATTERN_1 : string := "FALSE";
     CTL_TX_TEST_PATTERN_2 : string := "FALSE";
     CTL_TX_TEST_PATTERN_3 : string := "FALSE";
     CTL_TX_TEST_PATTERN_ENABLE_0 : string := "FALSE";
     CTL_TX_TEST_PATTERN_ENABLE_1 : string := "FALSE";
     CTL_TX_TEST_PATTERN_ENABLE_2 : string := "FALSE";
     CTL_TX_TEST_PATTERN_ENABLE_3 : string := "FALSE";
     CTL_TX_TEST_PATTERN_SEED_A_0 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SEED_A_1 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SEED_A_2 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SEED_A_3 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SEED_B_0 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SEED_B_1 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SEED_B_2 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SEED_B_3 : std_logic_vector(57 downto 0) := "00" & X"00000000000000";
     CTL_TX_TEST_PATTERN_SELECT_0 : string := "FALSE";
     CTL_TX_TEST_PATTERN_SELECT_1 : string := "FALSE";
     CTL_TX_TEST_PATTERN_SELECT_2 : string := "FALSE";
     CTL_TX_TEST_PATTERN_SELECT_3 : string := "FALSE";
     CTL_TX_VL_LENGTH_MINUS1_100GE_0 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_TX_VL_LENGTH_MINUS1_25GE_0 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_TX_VL_LENGTH_MINUS1_25GE_1 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_TX_VL_LENGTH_MINUS1_25GE_2 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_TX_VL_LENGTH_MINUS1_25GE_3 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_TX_VL_LENGTH_MINUS1_40GE_0 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_TX_VL_LENGTH_MINUS1_50GE_0 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_TX_VL_LENGTH_MINUS1_50GE_2 : std_logic_vector(15 downto 0) := X"4FFF";
     CTL_VL_MARKER_ID0 : std_logic_vector(63 downto 0) := X"C16821333E97DECC";
     CTL_VL_MARKER_ID1 : std_logic_vector(63 downto 0) := X"9D718E33628E71CC";
     CTL_VL_MARKER_ID10 : std_logic_vector(63 downto 0) := X"FD6C9933029366CC";
     CTL_VL_MARKER_ID11 : std_logic_vector(63 downto 0) := X"B9915533466EAACC";
     CTL_VL_MARKER_ID12 : std_logic_vector(63 downto 0) := X"5CB9B233A3464DCC";
     CTL_VL_MARKER_ID13 : std_logic_vector(63 downto 0) := X"1AF8BD33E50742CC";
     CTL_VL_MARKER_ID14 : std_logic_vector(63 downto 0) := X"83C7CA337C3835CC";
     CTL_VL_MARKER_ID15 : std_logic_vector(63 downto 0) := X"3536CD33CAC932CC";
     CTL_VL_MARKER_ID16 : std_logic_vector(63 downto 0) := X"C4314C333BCEB3CC";
     CTL_VL_MARKER_ID17 : std_logic_vector(63 downto 0) := X"ADD6B733522948CC";
     CTL_VL_MARKER_ID18 : std_logic_vector(63 downto 0) := X"5F662A33A099D5CC";
     CTL_VL_MARKER_ID19 : std_logic_vector(63 downto 0) := X"C0F0E5333F0F1ACC";
     CTL_VL_MARKER_ID2 : std_logic_vector(63 downto 0) := X"594BE833A6B417CC";
     CTL_VL_MARKER_ID3 : std_logic_vector(63 downto 0) := X"4D957B33B26A84CC";
     CTL_VL_MARKER_ID4 : std_logic_vector(63 downto 0) := X"F50709330AF8F6CC";
     CTL_VL_MARKER_ID5 : std_logic_vector(63 downto 0) := X"DD14C23322EB3DCC";
     CTL_VL_MARKER_ID6 : std_logic_vector(63 downto 0) := X"9A4A263365B5D9CC";
     CTL_VL_MARKER_ID7 : std_logic_vector(63 downto 0) := X"7B45663384BA99CC";
     CTL_VL_MARKER_ID8 : std_logic_vector(63 downto 0) := X"A02476335FDB89CC";
     CTL_VL_MARKER_ID9 : std_logic_vector(63 downto 0) := X"68C9FB33973604CC";
     MEM_CTRL : std_logic_vector(7 downto 0) := X"1B";
     RSVD0 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD1 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD2 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD3 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD4 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD5 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD6 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD7 : std_logic_vector(31 downto 0) := X"00000000";
     RSVD8 : std_logic_vector(31 downto 0) := X"0000CCCC";
     RSVD9 : std_logic_vector(31 downto 0) := X"00000000";
     SIM_DEVICE : string := "EVEREST";
     TICK_REG_MODE_SEL_0 : string := "FALSE";
     TICK_REG_MODE_SEL_1 : string := "FALSE";
     TICK_REG_MODE_SEL_2 : string := "FALSE";
     TICK_REG_MODE_SEL_3 : string := "FALSE"
  );
  port (
     APB3_PRDATA : out std_logic_vector(31 downto 0);
     APB3_PREADY : out std_ulogic;
     APB3_PSLVERR : out std_ulogic;
     EXT_COUNT_ADDR : out std_logic_vector(8 downto 0);
     EXT_COUNT_FLAGS : out std_logic_vector(4 downto 0);
     EXT_COUNT_INC : out std_ulogic;
     FEC_RX_DOUT_FLAGS_0 : out std_logic_vector(3 downto 0);
     FEC_RX_DOUT_FLAGS_1 : out std_logic_vector(3 downto 0);
     FEC_RX_DOUT_FLAGS_2 : out std_logic_vector(3 downto 0);
     FEC_RX_DOUT_FLAGS_3 : out std_logic_vector(3 downto 0);
     FEC_RX_DOUT_IS_AM_0 : out std_ulogic;
     FEC_RX_DOUT_IS_AM_1 : out std_ulogic;
     FEC_RX_DOUT_IS_AM_2 : out std_ulogic;
     FEC_RX_DOUT_IS_AM_3 : out std_ulogic;
     FEC_RX_DOUT_START_0 : out std_ulogic;
     FEC_RX_DOUT_START_1 : out std_ulogic;
     FEC_RX_DOUT_START_2 : out std_ulogic;
     FEC_RX_DOUT_START_3 : out std_ulogic;
     FEC_RX_DOUT_VALID_0 : out std_ulogic;
     FEC_RX_DOUT_VALID_1 : out std_ulogic;
     FEC_RX_DOUT_VALID_2 : out std_ulogic;
     FEC_RX_DOUT_VALID_3 : out std_ulogic;
     FEC_TX_DOUT_START_0 : out std_ulogic;
     FEC_TX_DOUT_START_1 : out std_ulogic;
     FEC_TX_DOUT_START_2 : out std_ulogic;
     FEC_TX_DOUT_START_3 : out std_ulogic;
     PM_RDY : out std_logic_vector(3 downto 0);
     RX_AXIS_TDATA0 : out std_logic_vector(63 downto 0);
     RX_AXIS_TDATA1 : out std_logic_vector(63 downto 0);
     RX_AXIS_TDATA2 : out std_logic_vector(63 downto 0);
     RX_AXIS_TDATA3 : out std_logic_vector(63 downto 0);
     RX_AXIS_TDATA4 : out std_logic_vector(63 downto 0);
     RX_AXIS_TDATA5 : out std_logic_vector(63 downto 0);
     RX_AXIS_TDATA6 : out std_logic_vector(63 downto 0);
     RX_AXIS_TDATA7 : out std_logic_vector(63 downto 0);
     RX_AXIS_TKEEP_USER0 : out std_logic_vector(10 downto 0);
     RX_AXIS_TKEEP_USER1 : out std_logic_vector(10 downto 0);
     RX_AXIS_TKEEP_USER2 : out std_logic_vector(10 downto 0);
     RX_AXIS_TKEEP_USER3 : out std_logic_vector(10 downto 0);
     RX_AXIS_TKEEP_USER4 : out std_logic_vector(10 downto 0);
     RX_AXIS_TKEEP_USER5 : out std_logic_vector(10 downto 0);
     RX_AXIS_TKEEP_USER6 : out std_logic_vector(10 downto 0);
     RX_AXIS_TKEEP_USER7 : out std_logic_vector(10 downto 0);
     RX_AXIS_TLAST_0 : out std_ulogic;
     RX_AXIS_TLAST_1 : out std_ulogic;
     RX_AXIS_TLAST_2 : out std_ulogic;
     RX_AXIS_TLAST_3 : out std_ulogic;
     RX_AXIS_TVALID_0 : out std_ulogic;
     RX_AXIS_TVALID_1 : out std_ulogic;
     RX_AXIS_TVALID_2 : out std_ulogic;
     RX_AXIS_TVALID_3 : out std_ulogic;
     RX_FLEX_ALMARKER0 : out std_ulogic;
     RX_FLEX_ALMARKER1 : out std_ulogic;
     RX_FLEX_ALMARKER2 : out std_ulogic;
     RX_FLEX_ALMARKER3 : out std_ulogic;
     RX_FLEX_ALMARKER4 : out std_ulogic;
     RX_FLEX_ALMARKER5 : out std_ulogic;
     RX_FLEX_ALMARKER6 : out std_ulogic;
     RX_FLEX_ALMARKER7 : out std_ulogic;
     RX_FLEX_BIP80 : out std_logic_vector(7 downto 0);
     RX_FLEX_BIP81 : out std_logic_vector(7 downto 0);
     RX_FLEX_BIP82 : out std_logic_vector(7 downto 0);
     RX_FLEX_BIP83 : out std_logic_vector(7 downto 0);
     RX_FLEX_BIP84 : out std_logic_vector(7 downto 0);
     RX_FLEX_BIP85 : out std_logic_vector(7 downto 0);
     RX_FLEX_BIP86 : out std_logic_vector(7 downto 0);
     RX_FLEX_BIP87 : out std_logic_vector(7 downto 0);
     RX_FLEX_CM_STALLOUT_0 : out std_ulogic;
     RX_FLEX_CM_STALLOUT_1 : out std_ulogic;
     RX_FLEX_CM_STALLOUT_2 : out std_ulogic;
     RX_FLEX_CM_STALLOUT_3 : out std_ulogic;
     RX_FLEX_DATA0 : out std_logic_vector(65 downto 0);
     RX_FLEX_DATA1 : out std_logic_vector(65 downto 0);
     RX_FLEX_DATA2 : out std_logic_vector(65 downto 0);
     RX_FLEX_DATA3 : out std_logic_vector(65 downto 0);
     RX_FLEX_DATA4 : out std_logic_vector(65 downto 0);
     RX_FLEX_DATA5 : out std_logic_vector(65 downto 0);
     RX_FLEX_DATA6 : out std_logic_vector(65 downto 0);
     RX_FLEX_DATA7 : out std_logic_vector(65 downto 0);
     RX_FLEX_ENA_0 : out std_ulogic;
     RX_FLEX_ENA_1 : out std_ulogic;
     RX_FLEX_ENA_2 : out std_ulogic;
     RX_FLEX_ENA_3 : out std_ulogic;
     RX_FLEX_LANE0 : out std_ulogic;
     RX_LANE_ALIGNER_FILL_0 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_1 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_10 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_11 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_12 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_13 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_14 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_15 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_16 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_17 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_18 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_19 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_2 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_3 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_4 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_5 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_6 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_7 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_8 : out std_logic_vector(7 downto 0);
     RX_LANE_ALIGNER_FILL_9 : out std_logic_vector(7 downto 0);
     RX_PREAMBLEOUT_0 : out std_logic_vector(55 downto 0);
     RX_PREAMBLEOUT_1 : out std_logic_vector(55 downto 0);
     RX_PREAMBLEOUT_2 : out std_logic_vector(55 downto 0);
     RX_PREAMBLEOUT_3 : out std_logic_vector(55 downto 0);
     RX_PTP_RSFEC_OFFSET_OUT_0 : out std_logic_vector(6 downto 0);
     RX_PTP_RSFEC_OFFSET_OUT_1 : out std_logic_vector(6 downto 0);
     RX_PTP_RSFEC_OFFSET_OUT_2 : out std_logic_vector(6 downto 0);
     RX_PTP_RSFEC_OFFSET_OUT_3 : out std_logic_vector(6 downto 0);
     RX_PTP_TSTAMP_OUT_0 : out std_logic_vector(54 downto 0);
     RX_PTP_TSTAMP_OUT_1 : out std_logic_vector(54 downto 0);
     RX_PTP_TSTAMP_OUT_2 : out std_logic_vector(54 downto 0);
     RX_PTP_TSTAMP_OUT_3 : out std_logic_vector(54 downto 0);
     STAT_RSVD_OUT : out std_logic_vector(216 downto 0);
     STAT_RX01_FEC_DEGRADED_SER : out std_ulogic;
     STAT_RX23_FEC_DEGRADED_SER : out std_ulogic;
     STAT_RX_ALIGNED_0 : out std_ulogic;
     STAT_RX_ALIGNED_2 : out std_ulogic;
     STAT_RX_ALIGNED_ERR_0 : out std_ulogic;
     STAT_RX_ALIGNED_ERR_2 : out std_ulogic;
     STAT_RX_AXIS_ERR_0 : out std_ulogic;
     STAT_RX_AXIS_ERR_1 : out std_ulogic;
     STAT_RX_AXIS_ERR_2 : out std_ulogic;
     STAT_RX_AXIS_ERR_3 : out std_ulogic;
     STAT_RX_AXIS_FIFO_OVERFLOW_0 : out std_ulogic;
     STAT_RX_AXIS_FIFO_OVERFLOW_1 : out std_ulogic;
     STAT_RX_AXIS_FIFO_OVERFLOW_2 : out std_ulogic;
     STAT_RX_AXIS_FIFO_OVERFLOW_3 : out std_ulogic;
     STAT_RX_BAD_CODE_0 : out std_ulogic;
     STAT_RX_BAD_CODE_1 : out std_ulogic;
     STAT_RX_BAD_CODE_2 : out std_ulogic;
     STAT_RX_BAD_CODE_3 : out std_ulogic;
     STAT_RX_BAD_FCS_0 : out std_ulogic;
     STAT_RX_BAD_FCS_1 : out std_ulogic;
     STAT_RX_BAD_FCS_2 : out std_ulogic;
     STAT_RX_BAD_FCS_3 : out std_ulogic;
     STAT_RX_BAD_PREAMBLE_0 : out std_ulogic;
     STAT_RX_BAD_PREAMBLE_1 : out std_ulogic;
     STAT_RX_BAD_PREAMBLE_2 : out std_ulogic;
     STAT_RX_BAD_PREAMBLE_3 : out std_ulogic;
     STAT_RX_BAD_SFD_0 : out std_ulogic;
     STAT_RX_BAD_SFD_1 : out std_ulogic;
     STAT_RX_BAD_SFD_2 : out std_ulogic;
     STAT_RX_BAD_SFD_3 : out std_ulogic;
     STAT_RX_BIP_ERR_0 : out std_logic_vector(19 downto 0);
     STAT_RX_BIP_ERR_2 : out std_logic_vector(3 downto 0);
     STAT_RX_BLOCK_LOCK_0 : out std_logic_vector(19 downto 0);
     STAT_RX_BLOCK_LOCK_1 : out std_ulogic;
     STAT_RX_BLOCK_LOCK_2 : out std_logic_vector(3 downto 0);
     STAT_RX_BLOCK_LOCK_3 : out std_ulogic;
     STAT_RX_CL49_82_CONVERT_ERR_0 : out std_ulogic;
     STAT_RX_CL49_82_CONVERT_ERR_1 : out std_ulogic;
     STAT_RX_CL49_82_CONVERT_ERR_2 : out std_ulogic;
     STAT_RX_CL49_82_CONVERT_ERR_3 : out std_ulogic;
     STAT_RX_ECC_ERR_0 : out std_logic_vector(1 downto 0);
     STAT_RX_ECC_ERR_1 : out std_logic_vector(1 downto 0);
     STAT_RX_ECC_ERR_2 : out std_logic_vector(1 downto 0);
     STAT_RX_ECC_ERR_3 : out std_logic_vector(1 downto 0);
     STAT_RX_FEC_ALIGNED_0 : out std_ulogic;
     STAT_RX_FEC_ALIGNED_1 : out std_ulogic;
     STAT_RX_FEC_ALIGNED_2 : out std_ulogic;
     STAT_RX_FEC_ALIGNED_3 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_0_0 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_0_1 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_0_2 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_0_3 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_1 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_2_0 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_2_1 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_2_2 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_2_3 : out std_ulogic;
     STAT_RX_FEC_CORRECTED_CW_3 : out std_ulogic;
     STAT_RX_FEC_CW_0_0 : out std_ulogic;
     STAT_RX_FEC_CW_0_1 : out std_ulogic;
     STAT_RX_FEC_CW_0_2 : out std_ulogic;
     STAT_RX_FEC_CW_0_3 : out std_ulogic;
     STAT_RX_FEC_CW_1 : out std_ulogic;
     STAT_RX_FEC_CW_2_0 : out std_ulogic;
     STAT_RX_FEC_CW_2_1 : out std_ulogic;
     STAT_RX_FEC_CW_2_2 : out std_ulogic;
     STAT_RX_FEC_CW_2_3 : out std_ulogic;
     STAT_RX_FEC_CW_3 : out std_ulogic;
     STAT_RX_FEC_DELAY_0 : out std_logic_vector(14 downto 0);
     STAT_RX_FEC_DELAY_1 : out std_logic_vector(14 downto 0);
     STAT_RX_FEC_DELAY_2 : out std_logic_vector(14 downto 0);
     STAT_RX_FEC_DELAY_3 : out std_logic_vector(14 downto 0);
     STAT_RX_FEC_ERR_COUNT_0_0 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_ERR_COUNT_0_1 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_ERR_COUNT_0_2 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_ERR_COUNT_0_3 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_ERR_COUNT_1 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_ERR_COUNT_2_0 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_ERR_COUNT_2_1 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_ERR_COUNT_3 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_HI_SER_0 : out std_ulogic;
     STAT_RX_FEC_HI_SER_1 : out std_ulogic;
     STAT_RX_FEC_HI_SER_2 : out std_ulogic;
     STAT_RX_FEC_HI_SER_3 : out std_ulogic;
     STAT_RX_FEC_LANE_LOCK_0 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_LANE_LOCK_1 : out std_ulogic;
     STAT_RX_FEC_LANE_LOCK_2 : out std_logic_vector(3 downto 0);
     STAT_RX_FEC_LANE_LOCK_3 : out std_ulogic;
     STAT_RX_FEC_MAPPING_0 : out std_logic_vector(1 downto 0);
     STAT_RX_FEC_MAPPING_1 : out std_logic_vector(1 downto 0);
     STAT_RX_FEC_MAPPING_2 : out std_logic_vector(1 downto 0);
     STAT_RX_FEC_MAPPING_3 : out std_logic_vector(1 downto 0);
     STAT_RX_FEC_UNCORRECTED_CW_0_0 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_0_1 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_0_2 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_0_3 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_1 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_2_0 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_2_1 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_2_2 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_2_3 : out std_ulogic;
     STAT_RX_FEC_UNCORRECTED_CW_3 : out std_ulogic;
     STAT_RX_FLEXIF_ERR_0 : out std_ulogic;
     STAT_RX_FLEXIF_ERR_1 : out std_ulogic;
     STAT_RX_FLEXIF_ERR_2 : out std_ulogic;
     STAT_RX_FLEXIF_ERR_3 : out std_ulogic;
     STAT_RX_FLEX_FIFO_OVF_0 : out std_ulogic;
     STAT_RX_FLEX_FIFO_OVF_1 : out std_ulogic;
     STAT_RX_FLEX_FIFO_OVF_2 : out std_ulogic;
     STAT_RX_FLEX_FIFO_OVF_3 : out std_ulogic;
     STAT_RX_FLEX_FIFO_UDF_0 : out std_ulogic;
     STAT_RX_FLEX_FIFO_UDF_1 : out std_ulogic;
     STAT_RX_FLEX_FIFO_UDF_2 : out std_ulogic;
     STAT_RX_FLEX_FIFO_UDF_3 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_OVF_0 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_OVF_1 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_OVF_2 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_OVF_3 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_UDF_0 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_UDF_1 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_UDF_2 : out std_ulogic;
     STAT_RX_FLEX_MON_FIFO_UDF_3 : out std_ulogic;
     STAT_RX_FRAMING_ERR_0 : out std_logic_vector(19 downto 0);
     STAT_RX_FRAMING_ERR_1 : out std_ulogic;
     STAT_RX_FRAMING_ERR_2 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_3 : out std_ulogic;
     STAT_RX_GOT_SIGNAL_OS_0 : out std_ulogic;
     STAT_RX_GOT_SIGNAL_OS_1 : out std_ulogic;
     STAT_RX_GOT_SIGNAL_OS_2 : out std_ulogic;
     STAT_RX_GOT_SIGNAL_OS_3 : out std_ulogic;
     STAT_RX_HI_BER_0 : out std_ulogic;
     STAT_RX_HI_BER_1 : out std_ulogic;
     STAT_RX_HI_BER_2 : out std_ulogic;
     STAT_RX_HI_BER_3 : out std_ulogic;
     STAT_RX_INTERNAL_LOCAL_FAULT_0 : out std_ulogic;
     STAT_RX_INTERNAL_LOCAL_FAULT_1 : out std_ulogic;
     STAT_RX_INTERNAL_LOCAL_FAULT_2 : out std_ulogic;
     STAT_RX_INTERNAL_LOCAL_FAULT_3 : out std_ulogic;
     STAT_RX_INVALID_START_0 : out std_ulogic;
     STAT_RX_INVALID_START_1 : out std_ulogic;
     STAT_RX_INVALID_START_2 : out std_ulogic;
     STAT_RX_INVALID_START_3 : out std_ulogic;
     STAT_RX_LANE0_VLM_BIP7_0 : out std_logic_vector(7 downto 0);
     STAT_RX_LANE0_VLM_BIP7_2 : out std_logic_vector(7 downto 0);
     STAT_RX_LANE0_VLM_BIP7_VALID_0 : out std_ulogic;
     STAT_RX_LANE0_VLM_BIP7_VALID_2 : out std_ulogic;
     STAT_RX_LOCAL_FAULT_0 : out std_ulogic;
     STAT_RX_LOCAL_FAULT_1 : out std_ulogic;
     STAT_RX_LOCAL_FAULT_2 : out std_ulogic;
     STAT_RX_LOCAL_FAULT_3 : out std_ulogic;
     STAT_RX_MF_ERR_0 : out std_logic_vector(19 downto 0);
     STAT_RX_MF_ERR_2 : out std_logic_vector(3 downto 0);
     STAT_RX_MISALIGNED_0 : out std_ulogic;
     STAT_RX_MISALIGNED_2 : out std_ulogic;
     STAT_RX_PAUSE_QUANTA0_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA0_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA0_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA0_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA1_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA1_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA1_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA1_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA2_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA2_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA2_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA2_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA3_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA3_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA3_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA3_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA4_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA4_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA4_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA4_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA5_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA5_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA5_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA5_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA6_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA6_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA6_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA6_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA7_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA7_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA7_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA7_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA8_0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA8_1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA8_2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA8_3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_REQ_0 : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_REQ_1 : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_REQ_2 : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_REQ_3 : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_VALID_0 : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_VALID_1 : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_VALID_2 : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_VALID_3 : out std_logic_vector(8 downto 0);
     STAT_RX_PCS_BAD_CODE_0 : out std_ulogic;
     STAT_RX_PCS_BAD_CODE_1 : out std_ulogic;
     STAT_RX_PCS_BAD_CODE_2 : out std_ulogic;
     STAT_RX_PCS_BAD_CODE_3 : out std_ulogic;
     STAT_RX_PTP_ST_SYNC_0 : out std_ulogic;
     STAT_RX_PTP_ST_SYNC_1 : out std_ulogic;
     STAT_RX_PTP_ST_SYNC_2 : out std_ulogic;
     STAT_RX_PTP_ST_SYNC_3 : out std_ulogic;
     STAT_RX_PTP_SYSTEMTIMER_0 : out std_logic_vector(54 downto 0);
     STAT_RX_PTP_SYSTEMTIMER_1 : out std_logic_vector(54 downto 0);
     STAT_RX_PTP_SYSTEMTIMER_2 : out std_logic_vector(54 downto 0);
     STAT_RX_PTP_SYSTEMTIMER_3 : out std_logic_vector(54 downto 0);
     STAT_RX_RECEIVED_LOCAL_FAULT_0 : out std_ulogic;
     STAT_RX_RECEIVED_LOCAL_FAULT_1 : out std_ulogic;
     STAT_RX_RECEIVED_LOCAL_FAULT_2 : out std_ulogic;
     STAT_RX_RECEIVED_LOCAL_FAULT_3 : out std_ulogic;
     STAT_RX_REMOTE_FAULT_0 : out std_ulogic;
     STAT_RX_REMOTE_FAULT_1 : out std_ulogic;
     STAT_RX_REMOTE_FAULT_2 : out std_ulogic;
     STAT_RX_REMOTE_FAULT_3 : out std_ulogic;
     STAT_RX_STATUS_0 : out std_ulogic;
     STAT_RX_STATUS_1 : out std_ulogic;
     STAT_RX_STATUS_2 : out std_ulogic;
     STAT_RX_STATUS_3 : out std_ulogic;
     STAT_RX_SYNCED_0 : out std_logic_vector(19 downto 0);
     STAT_RX_SYNCED_2 : out std_logic_vector(3 downto 0);
     STAT_RX_SYNCED_ERR_0 : out std_logic_vector(19 downto 0);
     STAT_RX_SYNCED_ERR_2 : out std_logic_vector(3 downto 0);
     STAT_RX_TEST_PATTERN_MISMATCH_0 : out std_ulogic;
     STAT_RX_TEST_PATTERN_MISMATCH_1 : out std_ulogic;
     STAT_RX_TEST_PATTERN_MISMATCH_2 : out std_ulogic;
     STAT_RX_TEST_PATTERN_MISMATCH_3 : out std_ulogic;
     STAT_RX_TRUNCATED_0 : out std_ulogic;
     STAT_RX_TRUNCATED_1 : out std_ulogic;
     STAT_RX_TRUNCATED_2 : out std_ulogic;
     STAT_RX_TRUNCATED_3 : out std_ulogic;
     STAT_RX_TSN_FRAGMENT_0 : out std_ulogic;
     STAT_RX_TSN_FRAGMENT_1 : out std_ulogic;
     STAT_RX_TSN_FRAGMENT_2 : out std_ulogic;
     STAT_RX_TSN_FRAGMENT_3 : out std_ulogic;
     STAT_RX_TSN_PREEMPTED_PKT_0 : out std_ulogic;
     STAT_RX_TSN_PREEMPTED_PKT_1 : out std_ulogic;
     STAT_RX_TSN_PREEMPTED_PKT_2 : out std_ulogic;
     STAT_RX_TSN_PREEMPTED_PKT_3 : out std_ulogic;
     STAT_RX_VALID_CTRL_CODE_0 : out std_ulogic;
     STAT_RX_VALID_CTRL_CODE_1 : out std_ulogic;
     STAT_RX_VALID_CTRL_CODE_2 : out std_ulogic;
     STAT_RX_VALID_CTRL_CODE_3 : out std_ulogic;
     STAT_RX_VL_DEMUXED_0 : out std_ulogic;
     STAT_RX_VL_DEMUXED_2 : out std_ulogic;
     STAT_TX_AXIS_ERR_0 : out std_ulogic;
     STAT_TX_AXIS_ERR_1 : out std_ulogic;
     STAT_TX_AXIS_ERR_2 : out std_ulogic;
     STAT_TX_AXIS_ERR_3 : out std_ulogic;
     STAT_TX_AXIS_UNF_0 : out std_ulogic;
     STAT_TX_AXIS_UNF_1 : out std_ulogic;
     STAT_TX_AXIS_UNF_2 : out std_ulogic;
     STAT_TX_AXIS_UNF_3 : out std_ulogic;
     STAT_TX_BAD_FCS_0 : out std_ulogic;
     STAT_TX_BAD_FCS_1 : out std_ulogic;
     STAT_TX_BAD_FCS_2 : out std_ulogic;
     STAT_TX_BAD_FCS_3 : out std_ulogic;
     STAT_TX_CL82_49_CONVERT_ERR_0 : out std_ulogic;
     STAT_TX_CL82_49_CONVERT_ERR_1 : out std_ulogic;
     STAT_TX_CL82_49_CONVERT_ERR_2 : out std_ulogic;
     STAT_TX_CL82_49_CONVERT_ERR_3 : out std_ulogic;
     STAT_TX_ECC_ERR_0 : out std_logic_vector(1 downto 0);
     STAT_TX_ECC_ERR_1 : out std_logic_vector(1 downto 0);
     STAT_TX_ECC_ERR_2 : out std_logic_vector(1 downto 0);
     STAT_TX_ECC_ERR_3 : out std_logic_vector(1 downto 0);
     STAT_TX_FEC_PCS_AM_LOCK_0 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_AM_LOCK_1 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_AM_LOCK_2 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_AM_LOCK_3 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_BLOCK_LOCK_0 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_BLOCK_LOCK_1 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_BLOCK_LOCK_2 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_BLOCK_LOCK_3 : out std_logic_vector(4 downto 0);
     STAT_TX_FEC_PCS_LANE_ALIGN_0 : out std_ulogic;
     STAT_TX_FEC_PCS_LANE_ALIGN_1 : out std_ulogic;
     STAT_TX_FEC_PCS_LANE_ALIGN_2 : out std_ulogic;
     STAT_TX_FEC_PCS_LANE_ALIGN_3 : out std_ulogic;
     STAT_TX_FLEXIF_ERR_0 : out std_ulogic;
     STAT_TX_FLEXIF_ERR_1 : out std_ulogic;
     STAT_TX_FLEXIF_ERR_2 : out std_ulogic;
     STAT_TX_FLEXIF_ERR_3 : out std_ulogic;
     STAT_TX_FLEX_FIFO_OVF_0 : out std_ulogic;
     STAT_TX_FLEX_FIFO_OVF_1 : out std_ulogic;
     STAT_TX_FLEX_FIFO_OVF_2 : out std_ulogic;
     STAT_TX_FLEX_FIFO_OVF_3 : out std_ulogic;
     STAT_TX_FLEX_FIFO_UDF_0 : out std_ulogic;
     STAT_TX_FLEX_FIFO_UDF_1 : out std_ulogic;
     STAT_TX_FLEX_FIFO_UDF_2 : out std_ulogic;
     STAT_TX_FLEX_FIFO_UDF_3 : out std_ulogic;
     STAT_TX_FRAME_ERROR_0 : out std_ulogic;
     STAT_TX_FRAME_ERROR_1 : out std_ulogic;
     STAT_TX_FRAME_ERROR_2 : out std_ulogic;
     STAT_TX_FRAME_ERROR_3 : out std_ulogic;
     STAT_TX_LOCAL_FAULT_0 : out std_ulogic;
     STAT_TX_LOCAL_FAULT_1 : out std_ulogic;
     STAT_TX_LOCAL_FAULT_2 : out std_ulogic;
     STAT_TX_LOCAL_FAULT_3 : out std_ulogic;
     STAT_TX_PAUSE_VALID_0 : out std_logic_vector(8 downto 0);
     STAT_TX_PAUSE_VALID_1 : out std_logic_vector(8 downto 0);
     STAT_TX_PAUSE_VALID_2 : out std_logic_vector(8 downto 0);
     STAT_TX_PAUSE_VALID_3 : out std_logic_vector(8 downto 0);
     STAT_TX_PCS_BAD_CODE_0 : out std_logic_vector(2 downto 0);
     STAT_TX_PCS_BAD_CODE_1 : out std_logic_vector(2 downto 0);
     STAT_TX_PCS_BAD_CODE_2 : out std_logic_vector(2 downto 0);
     STAT_TX_PCS_BAD_CODE_3 : out std_logic_vector(2 downto 0);
     STAT_TX_PTP_ST_SYNC_0 : out std_ulogic;
     STAT_TX_PTP_ST_SYNC_1 : out std_ulogic;
     STAT_TX_PTP_ST_SYNC_2 : out std_ulogic;
     STAT_TX_PTP_ST_SYNC_3 : out std_ulogic;
     STAT_TX_PTP_SYSTEMTIMER_0 : out std_logic_vector(54 downto 0);
     STAT_TX_PTP_SYSTEMTIMER_1 : out std_logic_vector(54 downto 0);
     STAT_TX_PTP_SYSTEMTIMER_2 : out std_logic_vector(54 downto 0);
     STAT_TX_PTP_SYSTEMTIMER_3 : out std_logic_vector(54 downto 0);
     STAT_TX_TSN_FRAGMENT_0 : out std_ulogic;
     STAT_TX_TSN_FRAGMENT_1 : out std_ulogic;
     STAT_TX_TSN_FRAGMENT_2 : out std_ulogic;
     STAT_TX_TSN_FRAGMENT_3 : out std_ulogic;
     STAT_TX_TSN_PREEMPTED_PKT_0 : out std_ulogic;
     STAT_TX_TSN_PREEMPTED_PKT_1 : out std_ulogic;
     STAT_TX_TSN_PREEMPTED_PKT_2 : out std_ulogic;
     STAT_TX_TSN_PREEMPTED_PKT_3 : out std_ulogic;
     TX_AXIS_TREADY_0 : out std_ulogic;
     TX_AXIS_TREADY_1 : out std_ulogic;
     TX_AXIS_TREADY_2 : out std_ulogic;
     TX_AXIS_TREADY_3 : out std_ulogic;
     TX_FLEX_STALL_0 : out std_ulogic;
     TX_FLEX_STALL_1 : out std_ulogic;
     TX_FLEX_STALL_2 : out std_ulogic;
     TX_FLEX_STALL_3 : out std_ulogic;
     TX_PTP_RSFEC_OFFSET_OUT_0 : out std_logic_vector(6 downto 0);
     TX_PTP_RSFEC_OFFSET_OUT_1 : out std_logic_vector(6 downto 0);
     TX_PTP_RSFEC_OFFSET_OUT_2 : out std_logic_vector(6 downto 0);
     TX_PTP_RSFEC_OFFSET_OUT_3 : out std_logic_vector(6 downto 0);
     TX_PTP_TSTAMP_OUT_0 : out std_logic_vector(54 downto 0);
     TX_PTP_TSTAMP_OUT_1 : out std_logic_vector(54 downto 0);
     TX_PTP_TSTAMP_OUT_2 : out std_logic_vector(54 downto 0);
     TX_PTP_TSTAMP_OUT_3 : out std_logic_vector(54 downto 0);
     TX_PTP_TSTAMP_TAG_OUT_0 : out std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_TAG_OUT_1 : out std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_TAG_OUT_2 : out std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_TAG_OUT_3 : out std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_VALID_OUT_0 : out std_ulogic;
     TX_PTP_TSTAMP_VALID_OUT_1 : out std_ulogic;
     TX_PTP_TSTAMP_VALID_OUT_2 : out std_ulogic;
     TX_PTP_TSTAMP_VALID_OUT_3 : out std_ulogic;
     TX_SERDES_DATA0 : out std_logic_vector(79 downto 0);
     TX_SERDES_DATA1 : out std_logic_vector(79 downto 0);
     TX_SERDES_DATA2 : out std_logic_vector(79 downto 0);
     TX_SERDES_DATA3 : out std_logic_vector(79 downto 0);
     TX_SERDES_IS_AM_0 : out std_logic_vector(8 downto 0);
     TX_SERDES_IS_AM_1 : out std_logic_vector(7 downto 0);
     TX_SERDES_IS_AM_2 : out std_logic_vector(8 downto 0);
     TX_SERDES_IS_AM_3 : out std_logic_vector(7 downto 0);
     APB3_CLK : in std_ulogic;
     APB3_PADDR : in std_logic_vector(15 downto 0);
     APB3_PENABLE : in std_ulogic;
     APB3_PRESET : in std_ulogic;
     APB3_PSEL : in std_ulogic;
     APB3_PWDATA : in std_logic_vector(31 downto 0);
     APB3_PWRITE : in std_ulogic;
     CTL_RSVD_IN : in std_logic_vector(127 downto 0);
     CTL_RX_FEC_FC32_RA_MODE_0 : in std_ulogic;
     CTL_RX_FEC_FC32_RA_MODE_1 : in std_ulogic;
     CTL_RX_FEC_FC32_RA_MODE_2 : in std_ulogic;
     CTL_RX_FEC_FC32_RA_MODE_3 : in std_ulogic;
     CTL_RX_PAUSE_ACK_0 : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ACK_1 : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ACK_2 : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ACK_3 : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ENABLE_0 : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ENABLE_1 : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ENABLE_2 : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ENABLE_3 : in std_logic_vector(8 downto 0);
     CTL_RX_PTP_ST_ADJUST_0 : in std_logic_vector(31 downto 0);
     CTL_RX_PTP_ST_ADJUST_1 : in std_logic_vector(31 downto 0);
     CTL_RX_PTP_ST_ADJUST_2 : in std_logic_vector(31 downto 0);
     CTL_RX_PTP_ST_ADJUST_3 : in std_logic_vector(31 downto 0);
     CTL_RX_PTP_ST_ADJUST_TYPE_0 : in std_logic_vector(1 downto 0);
     CTL_RX_PTP_ST_ADJUST_TYPE_1 : in std_logic_vector(1 downto 0);
     CTL_RX_PTP_ST_ADJUST_TYPE_2 : in std_logic_vector(1 downto 0);
     CTL_RX_PTP_ST_ADJUST_TYPE_3 : in std_logic_vector(1 downto 0);
     CTL_RX_PTP_ST_ADJUST_VLD_0 : in std_ulogic;
     CTL_RX_PTP_ST_ADJUST_VLD_1 : in std_ulogic;
     CTL_RX_PTP_ST_ADJUST_VLD_2 : in std_ulogic;
     CTL_RX_PTP_ST_ADJUST_VLD_3 : in std_ulogic;
     CTL_RX_PTP_ST_OVERWRITE_0 : in std_ulogic;
     CTL_RX_PTP_ST_OVERWRITE_1 : in std_ulogic;
     CTL_RX_PTP_ST_OVERWRITE_2 : in std_ulogic;
     CTL_RX_PTP_ST_OVERWRITE_3 : in std_ulogic;
     CTL_RX_PTP_ST_SYNC_0 : in std_ulogic;
     CTL_RX_PTP_ST_SYNC_1 : in std_ulogic;
     CTL_RX_PTP_ST_SYNC_2 : in std_ulogic;
     CTL_RX_PTP_ST_SYNC_3 : in std_ulogic;
     CTL_RX_PTP_SYSTEMTIMER_0 : in std_logic_vector(54 downto 0);
     CTL_RX_PTP_SYSTEMTIMER_1 : in std_logic_vector(54 downto 0);
     CTL_RX_PTP_SYSTEMTIMER_2 : in std_logic_vector(54 downto 0);
     CTL_RX_PTP_SYSTEMTIMER_3 : in std_logic_vector(54 downto 0);
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE_01 : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE_23 : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE_VALUE_01 : in std_logic_vector(7 downto 0);
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE_VALUE_23 : in std_logic_vector(7 downto 0);
     CTL_TX_PAUSE_ENABLE_0 : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_ENABLE_1 : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_ENABLE_2 : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_ENABLE_3 : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_REQ_0 : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_REQ_1 : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_REQ_2 : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_REQ_3 : in std_logic_vector(8 downto 0);
     CTL_TX_PTP_ST_ADJUST_0 : in std_logic_vector(31 downto 0);
     CTL_TX_PTP_ST_ADJUST_1 : in std_logic_vector(31 downto 0);
     CTL_TX_PTP_ST_ADJUST_2 : in std_logic_vector(31 downto 0);
     CTL_TX_PTP_ST_ADJUST_3 : in std_logic_vector(31 downto 0);
     CTL_TX_PTP_ST_ADJUST_TYPE_0 : in std_logic_vector(1 downto 0);
     CTL_TX_PTP_ST_ADJUST_TYPE_1 : in std_logic_vector(1 downto 0);
     CTL_TX_PTP_ST_ADJUST_TYPE_2 : in std_logic_vector(1 downto 0);
     CTL_TX_PTP_ST_ADJUST_TYPE_3 : in std_logic_vector(1 downto 0);
     CTL_TX_PTP_ST_ADJUST_VLD_0 : in std_ulogic;
     CTL_TX_PTP_ST_ADJUST_VLD_1 : in std_ulogic;
     CTL_TX_PTP_ST_ADJUST_VLD_2 : in std_ulogic;
     CTL_TX_PTP_ST_ADJUST_VLD_3 : in std_ulogic;
     CTL_TX_PTP_ST_OVERWRITE_0 : in std_ulogic;
     CTL_TX_PTP_ST_OVERWRITE_1 : in std_ulogic;
     CTL_TX_PTP_ST_OVERWRITE_2 : in std_ulogic;
     CTL_TX_PTP_ST_OVERWRITE_3 : in std_ulogic;
     CTL_TX_PTP_ST_SYNC_0 : in std_ulogic;
     CTL_TX_PTP_ST_SYNC_1 : in std_ulogic;
     CTL_TX_PTP_ST_SYNC_2 : in std_ulogic;
     CTL_TX_PTP_ST_SYNC_3 : in std_ulogic;
     CTL_TX_PTP_SYSTEMTIMER_0 : in std_logic_vector(54 downto 0);
     CTL_TX_PTP_SYSTEMTIMER_1 : in std_logic_vector(54 downto 0);
     CTL_TX_PTP_SYSTEMTIMER_2 : in std_logic_vector(54 downto 0);
     CTL_TX_PTP_SYSTEMTIMER_3 : in std_logic_vector(54 downto 0);
     CTL_TX_RESEND_PAUSE_0 : in std_ulogic;
     CTL_TX_RESEND_PAUSE_1 : in std_ulogic;
     CTL_TX_RESEND_PAUSE_2 : in std_ulogic;
     CTL_TX_RESEND_PAUSE_3 : in std_ulogic;
     CTL_TX_SEND_IDLE_IN_0 : in std_ulogic;
     CTL_TX_SEND_IDLE_IN_1 : in std_ulogic;
     CTL_TX_SEND_IDLE_IN_2 : in std_ulogic;
     CTL_TX_SEND_IDLE_IN_3 : in std_ulogic;
     CTL_TX_SEND_LFI_IN_0 : in std_ulogic;
     CTL_TX_SEND_LFI_IN_1 : in std_ulogic;
     CTL_TX_SEND_LFI_IN_2 : in std_ulogic;
     CTL_TX_SEND_LFI_IN_3 : in std_ulogic;
     CTL_TX_SEND_RFI_IN_0 : in std_ulogic;
     CTL_TX_SEND_RFI_IN_1 : in std_ulogic;
     CTL_TX_SEND_RFI_IN_2 : in std_ulogic;
     CTL_TX_SEND_RFI_IN_3 : in std_ulogic;
     FEC_RX_DIN_START_0 : in std_ulogic;
     FEC_RX_DIN_START_1 : in std_ulogic;
     FEC_RX_DIN_START_2 : in std_ulogic;
     FEC_RX_DIN_START_3 : in std_ulogic;
     FEC_TX_DIN_IS_AM_0 : in std_ulogic;
     FEC_TX_DIN_IS_AM_1 : in std_ulogic;
     FEC_TX_DIN_IS_AM_2 : in std_ulogic;
     FEC_TX_DIN_IS_AM_3 : in std_ulogic;
     FEC_TX_DIN_START_0 : in std_ulogic;
     FEC_TX_DIN_START_1 : in std_ulogic;
     FEC_TX_DIN_START_2 : in std_ulogic;
     FEC_TX_DIN_START_3 : in std_ulogic;
     FEC_TX_DIN_VALID_0 : in std_ulogic;
     FEC_TX_DIN_VALID_1 : in std_ulogic;
     FEC_TX_DIN_VALID_2 : in std_ulogic;
     FEC_TX_DIN_VALID_3 : in std_ulogic;
     PM_TICK : in std_logic_vector(3 downto 0);
     RX_ALT_SERDES_CLK : in std_logic_vector(3 downto 0);
     RX_AXI_CLK : in std_logic_vector(3 downto 0);
     RX_CORE_CLK : in std_logic_vector(3 downto 0);
     RX_CORE_RESET : in std_logic_vector(3 downto 0);
     RX_FLEXIF_CLK : in std_logic_vector(3 downto 0);
     RX_FLEXIF_RESET : in std_logic_vector(3 downto 0);
     RX_FLEX_CM_DATA0 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_DATA1 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_DATA2 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_DATA3 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_DATA4 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_DATA5 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_DATA6 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_DATA7 : in std_logic_vector(65 downto 0);
     RX_FLEX_CM_ENA_0 : in std_ulogic;
     RX_FLEX_CM_ENA_1 : in std_ulogic;
     RX_FLEX_CM_ENA_2 : in std_ulogic;
     RX_FLEX_CM_ENA_3 : in std_ulogic;
     RX_SERDES_CLK : in std_logic_vector(3 downto 0);
     RX_SERDES_DATA0 : in std_logic_vector(79 downto 0);
     RX_SERDES_DATA1 : in std_logic_vector(79 downto 0);
     RX_SERDES_DATA2 : in std_logic_vector(79 downto 0);
     RX_SERDES_DATA3 : in std_logic_vector(79 downto 0);
     RX_SERDES_RESET : in std_logic_vector(3 downto 0);
     RX_TS_CLK : in std_logic_vector(3 downto 0);
     TX_ALT_SERDES_CLK : in std_logic_vector(3 downto 0);
     TX_AXIS_TDATA0 : in std_logic_vector(63 downto 0);
     TX_AXIS_TDATA1 : in std_logic_vector(63 downto 0);
     TX_AXIS_TDATA2 : in std_logic_vector(63 downto 0);
     TX_AXIS_TDATA3 : in std_logic_vector(63 downto 0);
     TX_AXIS_TDATA4 : in std_logic_vector(63 downto 0);
     TX_AXIS_TDATA5 : in std_logic_vector(63 downto 0);
     TX_AXIS_TDATA6 : in std_logic_vector(63 downto 0);
     TX_AXIS_TDATA7 : in std_logic_vector(63 downto 0);
     TX_AXIS_TKEEP_USER0 : in std_logic_vector(10 downto 0);
     TX_AXIS_TKEEP_USER1 : in std_logic_vector(10 downto 0);
     TX_AXIS_TKEEP_USER2 : in std_logic_vector(10 downto 0);
     TX_AXIS_TKEEP_USER3 : in std_logic_vector(10 downto 0);
     TX_AXIS_TKEEP_USER4 : in std_logic_vector(10 downto 0);
     TX_AXIS_TKEEP_USER5 : in std_logic_vector(10 downto 0);
     TX_AXIS_TKEEP_USER6 : in std_logic_vector(10 downto 0);
     TX_AXIS_TKEEP_USER7 : in std_logic_vector(10 downto 0);
     TX_AXIS_TLAST_0 : in std_ulogic;
     TX_AXIS_TLAST_1 : in std_ulogic;
     TX_AXIS_TLAST_2 : in std_ulogic;
     TX_AXIS_TLAST_3 : in std_ulogic;
     TX_AXIS_TVALID_0 : in std_ulogic;
     TX_AXIS_TVALID_1 : in std_ulogic;
     TX_AXIS_TVALID_2 : in std_ulogic;
     TX_AXIS_TVALID_3 : in std_ulogic;
     TX_AXI_CLK : in std_logic_vector(3 downto 0);
     TX_CORE_CLK : in std_logic_vector(3 downto 0);
     TX_CORE_RESET : in std_logic_vector(3 downto 0);
     TX_FLEXIF_CLK : in std_logic_vector(3 downto 0);
     TX_FLEX_ALMARKER0 : in std_ulogic;
     TX_FLEX_ALMARKER1 : in std_ulogic;
     TX_FLEX_ALMARKER2 : in std_ulogic;
     TX_FLEX_ALMARKER3 : in std_ulogic;
     TX_FLEX_ALMARKER4 : in std_ulogic;
     TX_FLEX_ALMARKER5 : in std_ulogic;
     TX_FLEX_ALMARKER6 : in std_ulogic;
     TX_FLEX_ALMARKER7 : in std_ulogic;
     TX_FLEX_DATA0 : in std_logic_vector(65 downto 0);
     TX_FLEX_DATA1 : in std_logic_vector(65 downto 0);
     TX_FLEX_DATA2 : in std_logic_vector(65 downto 0);
     TX_FLEX_DATA3 : in std_logic_vector(65 downto 0);
     TX_FLEX_DATA4 : in std_logic_vector(65 downto 0);
     TX_FLEX_DATA5 : in std_logic_vector(65 downto 0);
     TX_FLEX_DATA6 : in std_logic_vector(65 downto 0);
     TX_FLEX_DATA7 : in std_logic_vector(65 downto 0);
     TX_FLEX_ENA_0 : in std_ulogic;
     TX_FLEX_ENA_1 : in std_ulogic;
     TX_FLEX_ENA_2 : in std_ulogic;
     TX_FLEX_ENA_3 : in std_ulogic;
     TX_PREAMBLEIN_0 : in std_logic_vector(55 downto 0);
     TX_PREAMBLEIN_1 : in std_logic_vector(55 downto 0);
     TX_PREAMBLEIN_2 : in std_logic_vector(55 downto 0);
     TX_PREAMBLEIN_3 : in std_logic_vector(55 downto 0);
     TX_PTP_1588OP_IN_0 : in std_logic_vector(1 downto 0);
     TX_PTP_1588OP_IN_1 : in std_logic_vector(1 downto 0);
     TX_PTP_1588OP_IN_2 : in std_logic_vector(1 downto 0);
     TX_PTP_1588OP_IN_3 : in std_logic_vector(1 downto 0);
     TX_PTP_CF_OFFSET_IN_0 : in std_logic_vector(15 downto 0);
     TX_PTP_CF_OFFSET_IN_1 : in std_logic_vector(15 downto 0);
     TX_PTP_CF_OFFSET_IN_2 : in std_logic_vector(15 downto 0);
     TX_PTP_CF_OFFSET_IN_3 : in std_logic_vector(15 downto 0);
     TX_PTP_FLEX_1588LOC_IN_0 : in std_logic_vector(2 downto 0);
     TX_PTP_FLEX_1588LOC_IN_1 : in std_logic_vector(1 downto 0);
     TX_PTP_FLEX_1588LOC_IN_2 : in std_logic_vector(1 downto 0);
     TX_PTP_FLEX_1588LOC_IN_3 : in std_logic_vector(1 downto 0);
     TX_PTP_FLEX_1588OP_IN_0 : in std_ulogic;
     TX_PTP_FLEX_1588OP_IN_1 : in std_ulogic;
     TX_PTP_FLEX_1588OP_IN_2 : in std_ulogic;
     TX_PTP_FLEX_1588OP_IN_3 : in std_ulogic;
     TX_PTP_FLEX_TAG_FIELD_IN_0 : in std_logic_vector(15 downto 0);
     TX_PTP_FLEX_TAG_FIELD_IN_1 : in std_logic_vector(15 downto 0);
     TX_PTP_FLEX_TAG_FIELD_IN_2 : in std_logic_vector(15 downto 0);
     TX_PTP_FLEX_TAG_FIELD_IN_3 : in std_logic_vector(15 downto 0);
     TX_PTP_TAG_FIELD_IN_0 : in std_logic_vector(15 downto 0);
     TX_PTP_TAG_FIELD_IN_1 : in std_logic_vector(15 downto 0);
     TX_PTP_TAG_FIELD_IN_2 : in std_logic_vector(15 downto 0);
     TX_PTP_TAG_FIELD_IN_3 : in std_logic_vector(15 downto 0);
     TX_PTP_UPD_CHKSUM_IN_0 : in std_ulogic;
     TX_PTP_UPD_CHKSUM_IN_1 : in std_ulogic;
     TX_PTP_UPD_CHKSUM_IN_2 : in std_ulogic;
     TX_PTP_UPD_CHKSUM_IN_3 : in std_ulogic;
     TX_SERDES_RESET : in std_logic_vector(3 downto 0);
     TX_TS_CLK : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  MRMAC : component is "PRIMITIVE";

----- component MUXCY -----
component MUXCY
  port (
     O : out std_ulogic;
     CI : in std_ulogic;
     DI : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXCY : component is "PRIMITIVE";

----- component MUXF7 -----
component MUXF7
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF7 : component is "PRIMITIVE";

----- component MUXF8 -----
component MUXF8
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF8 : component is "PRIMITIVE";

----- component MUXF9 -----
component MUXF9
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF9 : component is "PRIMITIVE";

----- component NOC_NCRB -----
component NOC_NCRB
  generic (
     REG_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P0_R2W_EB_CTRL : std_logic_vector(20 downto 0) := "0" & X"7FC2C";
     REG_P0_W2R_EB_CTRL : std_logic_vector(20 downto 0) := "0" & X"7FC2C";
     REG_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P1_R2W_EB_CTRL : std_logic_vector(20 downto 0) := "0" & X"7FC2C";
     REG_P1_W2R_EB_CTRL : std_logic_vector(20 downto 0) := "0" & X"7FC2C";
     REG_PIPE_MODE : bit := '0'
  );
  port (
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT0_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT1_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_VALID_EN : out std_ulogic;
     CREDIT_RDY_NPS_O_IN : in std_logic_vector(1 downto 0);
     CREDIT_RDY_O_IN : in std_logic_vector(1 downto 0);
     IF_NOC_NPP_IN0_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN0_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN1_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN_EN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOC_NCRB : component is "PRIMITIVE";

----- component NOC_NIDB -----
component NOC_NIDB
  generic (
     REG_ID : std_logic_vector(9 downto 0) := "00" & X"00";
     REG_NOC_CTL : std_logic_vector(15 downto 0) := X"FF00";
     REG_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010"
  );
  port (
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT0_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_VALID_EN : out std_ulogic;
     NIDB_P0_RX_DW0_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_RX_DW0_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_RX_DW0_STRB : inout std_ulogic;
     NIDB_P0_RX_DW1_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_RX_DW1_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_RX_DW1_STRB : inout std_ulogic;
     NIDB_P0_RX_DW2_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_RX_DW2_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_RX_DW2_STRB : inout std_ulogic;
     NIDB_P0_RX_DW3_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_RX_DW3_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_RX_DW3_STRB : inout std_ulogic;
     NIDB_P0_RX_DW4_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_RX_DW4_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_RX_DW4_STRB : inout std_ulogic;
     NIDB_P0_TX_DW0_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_TX_DW0_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_TX_DW0_STRB : inout std_ulogic;
     NIDB_P0_TX_DW1_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_TX_DW1_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_TX_DW1_STRB : inout std_ulogic;
     NIDB_P0_TX_DW2_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_TX_DW2_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_TX_DW2_STRB : inout std_ulogic;
     NIDB_P0_TX_DW3_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_TX_DW3_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_TX_DW3_STRB : inout std_ulogic;
     NIDB_P0_TX_DW4_DATA : inout std_logic_vector(37 downto 0);
     NIDB_P0_TX_DW4_DBI_REDUN : inout std_logic_vector(4 downto 0);
     NIDB_P0_TX_DW4_STRB : inout std_ulogic;
     IF_NOC_NPP_IN0_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN0_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN_EN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOC_NIDB : component is "PRIMITIVE";

----- component NOC_NMU128 -----
component NOC_NMU128
  generic (
     REG_ADDR_DST0 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST1 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST10 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST11 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST12 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST13 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST14 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST15 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST2 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST3 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST4 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST5 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST6 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST7 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST8 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST9 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_ENABLE : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_MADDR0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_REMAP : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_RPADDR0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADR_MAP_CPM : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_FPD_AFI_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_FPD_AFI_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_LPD_AFI_FS : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_2 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_3 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PCIE : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_2 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_3 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_QSPI : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_STM_GIC : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_XPDS : std_logic_vector(11 downto 0) := X"000";
     REG_AXI_NON_MOD_DISABLE : bit := '0';
     REG_AXI_PAR_CHK : std_logic_vector(1 downto 0) := "00";
     REG_CHOPSIZE : std_logic_vector(3 downto 0) := X"A";
     REG_DDR_ADR_MAP0 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP1 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP2 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP3 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP4 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP5 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP6 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_DST_MAP0 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP1 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP2 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP3 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP4 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP5 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP6 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP7 : std_logic_vector(11 downto 0) := X"000";
     REG_DWIDTH : std_logic_vector(2 downto 0) := "100";
     REG_ECC_CHK_EN : bit := '1';
     REG_HBM_MAP_T0_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_MODE_SELECT : std_logic_vector(15 downto 0) := X"0000";
     REG_OUTSTANDING_RD_TXN : std_logic_vector(6 downto 0) := "100" & X"0";
     REG_OUTSTANDING_WR_TXN : std_logic_vector(6 downto 0) := "100" & X"0";
     REG_PRIORITY : std_logic_vector(1 downto 0) := "00";
     REG_RD_AXPROT_SEL : std_logic_vector(5 downto 0) := "00" & X"0";
     REG_RD_RATE_CREDIT_DROP : std_logic_vector(9 downto 0) := "00" & X"05";
     REG_RD_RATE_CREDIT_LIMIT : std_logic_vector(12 downto 0) := "0" & X"100";
     REG_RD_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_RPOISON_TO_SLVERR : bit := '0';
     REG_RROB_RAM_SETTING : std_logic_vector(8 downto 0) := "0" & X"12";
     REG_SMID_SEL : std_logic_vector(19 downto 0) := X"00000";
     REG_SRC : std_logic_vector(11 downto 0) := X"000";
     REG_TBASE_AXI_TIMEOUT : std_logic_vector(3 downto 0) := X"1";
     REG_TBASE_MODE_RLIMIT_RD : std_logic_vector(2 downto 0) := "010";
     REG_TBASE_MODE_RLIMIT_WR : std_logic_vector(2 downto 0) := "010";
     REG_TBASE_TRK_TIMEOUT : std_logic_vector(3 downto 0) := X"1";
     REG_VC_MAP : std_logic_vector(11 downto 0) := X"688";
     REG_WBUF_LAUNCH_SIZE : std_logic_vector(5 downto 0) := "01" & X"0";
     REG_WBUF_RAM_SETTING : std_logic_vector(8 downto 0) := "0" & X"12";
     REG_WR_AXPROT_SEL : std_logic_vector(5 downto 0) := "00" & X"0";
     REG_WR_RATE_CREDIT_DROP : std_logic_vector(9 downto 0) := "00" & X"05";
     REG_WR_RATE_CREDIT_LIMIT : std_logic_vector(12 downto 0) := "0" & X"100";
     REG_WR_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10"
  );
  port (
     IF_NOC_AXI_ARREADY : out std_ulogic;
     IF_NOC_AXI_AWREADY : out std_ulogic;
     IF_NOC_AXI_BID : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_BRESP : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_BUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_BVALID : out std_ulogic;
     IF_NOC_AXI_RDATA : out std_logic_vector(127 downto 0);
     IF_NOC_AXI_RDATA_PAR : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_RID : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_RLAST : out std_logic_vector(0 to 0);
     IF_NOC_AXI_RPOISON : out std_ulogic;
     IF_NOC_AXI_RRESP : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_RUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_RVALID : out std_ulogic;
     IF_NOC_AXI_WREADY : out std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_VALID_EN : out std_ulogic;
     CLK : in std_ulogic;
     IF_NOC_AXI_ARADDR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_ARADDR_PAR : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARBURST : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_ARCACHE : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARLEN : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARLOCK : in std_logic_vector(0 to 0);
     IF_NOC_AXI_ARPROT : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARQOS : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARREGION : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARSIZE : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARVALID : in std_ulogic;
     IF_NOC_AXI_AWADDR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_AWADDR_PAR : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWBURST : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_AWCACHE : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWLEN : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWLOCK : in std_logic_vector(0 to 0);
     IF_NOC_AXI_AWPROT : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWQOS : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWREGION : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWSIZE : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWVALID : in std_ulogic;
     IF_NOC_AXI_BREADY : in std_ulogic;
     IF_NOC_AXI_RREADY : in std_ulogic;
     IF_NOC_AXI_TDEST : in std_logic_vector(9 downto 0);
     IF_NOC_AXI_WDATA : in std_logic_vector(127 downto 0);
     IF_NOC_AXI_WDATA_PAR : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WLAST : in std_logic_vector(0 to 0);
     IF_NOC_AXI_WPOISON : in std_ulogic;
     IF_NOC_AXI_WSTRB : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WVALID : in std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN_EN : in std_ulogic;
     NMU_RD_DEST_MODE : in std_ulogic;
     NMU_RD_USR_DST : in std_logic_vector(11 downto 0);
     NMU_USR_INTERRUPT_IN : in std_logic_vector(3 downto 0);
     NMU_WR_DEST_MODE : in std_ulogic;
     NMU_WR_USR_DST : in std_logic_vector(11 downto 0)
  );
end component;
attribute BOX_TYPE of
  NOC_NMU128 : component is "PRIMITIVE";

----- component NOC_NMU256 -----
component NOC_NMU256
  generic (
     REG_ADDR_DST0 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST1 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST10 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST11 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST12 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST13 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST14 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST15 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST2 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST3 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST4 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST5 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST6 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST7 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST8 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST9 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_ENABLE : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_MADDR0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_REMAP : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_RPADDR0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADR_MAP_CPM : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_FPD_AFI_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_FPD_AFI_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_LPD_AFI_FS : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_2 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_3 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PCIE : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_2 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_3 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_QSPI : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_STM_GIC : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_XPDS : std_logic_vector(11 downto 0) := X"000";
     REG_AXI_NON_MOD_DISABLE : bit := '0';
     REG_AXI_PAR_CHK : std_logic_vector(1 downto 0) := "00";
     REG_CHOPSIZE : std_logic_vector(3 downto 0) := X"A";
     REG_DDR_ADR_MAP0 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP1 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP2 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP3 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP4 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP5 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP6 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_DST_MAP0 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP1 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP2 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP3 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP4 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP5 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP6 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP7 : std_logic_vector(11 downto 0) := X"000";
     REG_DWIDTH : std_logic_vector(2 downto 0) := "100";
     REG_ECC_CHK_EN : bit := '1';
     REG_HBM_MAP_T0_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_MODE_SELECT : std_logic_vector(15 downto 0) := X"0000";
     REG_OUTSTANDING_RD_TXN : std_logic_vector(6 downto 0) := "100" & X"0";
     REG_OUTSTANDING_WR_TXN : std_logic_vector(6 downto 0) := "100" & X"0";
     REG_PRIORITY : std_logic_vector(1 downto 0) := "00";
     REG_RD_AXPROT_SEL : std_logic_vector(5 downto 0) := "00" & X"0";
     REG_RD_RATE_CREDIT_DROP : std_logic_vector(9 downto 0) := "00" & X"05";
     REG_RD_RATE_CREDIT_LIMIT : std_logic_vector(12 downto 0) := "0" & X"100";
     REG_RD_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_RPOISON_TO_SLVERR : bit := '0';
     REG_RROB_RAM_SETTING : std_logic_vector(8 downto 0) := "0" & X"12";
     REG_SMID_SEL : std_logic_vector(19 downto 0) := X"00000";
     REG_SRC : std_logic_vector(11 downto 0) := X"000";
     REG_TBASE_AXI_TIMEOUT : std_logic_vector(3 downto 0) := X"1";
     REG_TBASE_MODE_RLIMIT_RD : std_logic_vector(2 downto 0) := "010";
     REG_TBASE_MODE_RLIMIT_WR : std_logic_vector(2 downto 0) := "010";
     REG_TBASE_TRK_TIMEOUT : std_logic_vector(3 downto 0) := X"1";
     REG_VC_MAP : std_logic_vector(11 downto 0) := X"688";
     REG_WBUF_LAUNCH_SIZE : std_logic_vector(5 downto 0) := "01" & X"0";
     REG_WBUF_RAM_SETTING : std_logic_vector(8 downto 0) := "0" & X"12";
     REG_WR_AXPROT_SEL : std_logic_vector(5 downto 0) := "00" & X"0";
     REG_WR_RATE_CREDIT_DROP : std_logic_vector(9 downto 0) := "00" & X"05";
     REG_WR_RATE_CREDIT_LIMIT : std_logic_vector(12 downto 0) := "0" & X"100";
     REG_WR_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10"
  );
  port (
     IF_NOC_AXI_ARREADY : out std_ulogic;
     IF_NOC_AXI_AWREADY : out std_ulogic;
     IF_NOC_AXI_BID : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_BRESP : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_BUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_BVALID : out std_ulogic;
     IF_NOC_AXI_RDATA : out std_logic_vector(255 downto 0);
     IF_NOC_AXI_RDATA_PAR : out std_logic_vector(31 downto 0);
     IF_NOC_AXI_RID : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_RLAST : out std_logic_vector(0 to 0);
     IF_NOC_AXI_RPOISON : out std_ulogic;
     IF_NOC_AXI_RRESP : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_RUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_RVALID : out std_ulogic;
     IF_NOC_AXI_WREADY : out std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_VALID_EN : out std_ulogic;
     CLK : in std_ulogic;
     IF_NOC_AXI_ARADDR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_ARADDR_PAR : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARBURST : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_ARCACHE : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARLEN : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARLOCK : in std_logic_vector(0 to 0);
     IF_NOC_AXI_ARPROT : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARQOS : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARREGION : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARSIZE : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARVALID : in std_ulogic;
     IF_NOC_AXI_AWADDR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_AWADDR_PAR : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWBURST : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_AWCACHE : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWLEN : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWLOCK : in std_logic_vector(0 to 0);
     IF_NOC_AXI_AWPROT : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWQOS : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWREGION : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWSIZE : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWVALID : in std_ulogic;
     IF_NOC_AXI_BREADY : in std_ulogic;
     IF_NOC_AXI_RREADY : in std_ulogic;
     IF_NOC_AXI_TDEST : in std_logic_vector(9 downto 0);
     IF_NOC_AXI_WDATA : in std_logic_vector(255 downto 0);
     IF_NOC_AXI_WDATA_PAR : in std_logic_vector(31 downto 0);
     IF_NOC_AXI_WID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WLAST : in std_logic_vector(0 to 0);
     IF_NOC_AXI_WPOISON : in std_ulogic;
     IF_NOC_AXI_WSTRB : in std_logic_vector(31 downto 0);
     IF_NOC_AXI_WUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WVALID : in std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN_EN : in std_ulogic;
     NMU_RD_DEST_MODE : in std_ulogic;
     NMU_RD_USR_DST : in std_logic_vector(11 downto 0);
     NMU_USR_INTERRUPT_IN : in std_logic_vector(3 downto 0);
     NMU_WR_DEST_MODE : in std_ulogic;
     NMU_WR_USR_DST : in std_logic_vector(11 downto 0)
  );
end component;
attribute BOX_TYPE of
  NOC_NMU256 : component is "PRIMITIVE";

----- component NOC_NMU512 -----
component NOC_NMU512
  generic (
     REG_ADDR_DST0 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST1 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST10 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST11 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST12 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST13 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST14 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST15 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST2 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST3 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST4 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST5 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST6 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST7 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST8 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_DST9 : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_ENABLE : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_MADDR0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MADDR9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_MASK9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_REMAP : std_logic_vector(15 downto 0) := X"0000";
     REG_ADDR_RPADDR0 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR1 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR10 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR11 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR12 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR13 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR14 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR15 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR2 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR3 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR4 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR5 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR6 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR7 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR8 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADDR_RPADDR9 : std_logic_vector(31 downto 0) := X"00000000";
     REG_ADR_MAP_CPM : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_FPD_AFI_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_FPD_AFI_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_LPD_AFI_FS : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_2 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_ME_ARRAY_3 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PCIE : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_0 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_1 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_2 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_PMC_ALIAS_3 : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_QSPI : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_STM_GIC : std_logic_vector(11 downto 0) := X"000";
     REG_ADR_MAP_XPDS : std_logic_vector(11 downto 0) := X"000";
     REG_AXI_NON_MOD_DISABLE : bit := '0';
     REG_AXI_PAR_CHK : std_logic_vector(1 downto 0) := "00";
     REG_CHOPSIZE : std_logic_vector(3 downto 0) := X"A";
     REG_DDR_ADR_MAP0 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP1 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP2 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP3 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP4 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP5 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_ADR_MAP6 : std_logic_vector(14 downto 0) := "001" & X"000";
     REG_DDR_DST_MAP0 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP1 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP2 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP3 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP4 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP5 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP6 : std_logic_vector(11 downto 0) := X"000";
     REG_DDR_DST_MAP7 : std_logic_vector(11 downto 0) := X"000";
     REG_DWIDTH : std_logic_vector(2 downto 0) := "100";
     REG_ECC_CHK_EN : bit := '1';
     REG_HBM_MAP_T0_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T0_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T1_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T2_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH0 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH1 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH10 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH11 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH12 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH13 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH14 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH15 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH2 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH3 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH4 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH5 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH6 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH7 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH8 : std_logic_vector(11 downto 0) := X"000";
     REG_HBM_MAP_T3_CH9 : std_logic_vector(11 downto 0) := X"000";
     REG_MODE_SELECT : std_logic_vector(15 downto 0) := X"0000";
     REG_OUTSTANDING_RD_TXN : std_logic_vector(6 downto 0) := "100" & X"0";
     REG_OUTSTANDING_WR_TXN : std_logic_vector(6 downto 0) := "100" & X"0";
     REG_PRIORITY : std_logic_vector(1 downto 0) := "00";
     REG_RD_AXPROT_SEL : std_logic_vector(5 downto 0) := "00" & X"0";
     REG_RD_RATE_CREDIT_DROP : std_logic_vector(9 downto 0) := "00" & X"05";
     REG_RD_RATE_CREDIT_LIMIT : std_logic_vector(12 downto 0) := "0" & X"100";
     REG_RD_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_RPOISON_TO_SLVERR : bit := '0';
     REG_RROB_RAM_SETTING : std_logic_vector(8 downto 0) := "0" & X"12";
     REG_SMID_SEL : std_logic_vector(19 downto 0) := X"00000";
     REG_SRC : std_logic_vector(11 downto 0) := X"000";
     REG_TBASE_AXI_TIMEOUT : std_logic_vector(3 downto 0) := X"1";
     REG_TBASE_MODE_RLIMIT_RD : std_logic_vector(2 downto 0) := "010";
     REG_TBASE_MODE_RLIMIT_WR : std_logic_vector(2 downto 0) := "010";
     REG_TBASE_TRK_TIMEOUT : std_logic_vector(3 downto 0) := X"1";
     REG_VC_MAP : std_logic_vector(11 downto 0) := X"688";
     REG_WBUF_LAUNCH_SIZE : std_logic_vector(5 downto 0) := "01" & X"0";
     REG_WBUF_RAM_SETTING : std_logic_vector(8 downto 0) := "0" & X"12";
     REG_WR_AXPROT_SEL : std_logic_vector(5 downto 0) := "00" & X"0";
     REG_WR_RATE_CREDIT_DROP : std_logic_vector(9 downto 0) := "00" & X"05";
     REG_WR_RATE_CREDIT_LIMIT : std_logic_vector(12 downto 0) := "0" & X"100";
     REG_WR_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10"
  );
  port (
     IF_NOC_AXI_ARREADY : out std_ulogic;
     IF_NOC_AXI_AWREADY : out std_ulogic;
     IF_NOC_AXI_BID : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_BRESP : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_BUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_BVALID : out std_ulogic;
     IF_NOC_AXI_RDATA : out std_logic_vector(511 downto 0);
     IF_NOC_AXI_RDATA_PAR : out std_logic_vector(63 downto 0);
     IF_NOC_AXI_RID : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_RLAST : out std_logic_vector(0 to 0);
     IF_NOC_AXI_RPOISON : out std_ulogic;
     IF_NOC_AXI_RRESP : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_RUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_RVALID : out std_ulogic;
     IF_NOC_AXI_WREADY : out std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_VALID_EN : out std_ulogic;
     CLK : in std_ulogic;
     IF_NOC_AXI_ARADDR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_ARADDR_PAR : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARBURST : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_ARCACHE : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARLEN : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARLOCK : in std_logic_vector(0 to 0);
     IF_NOC_AXI_ARPROT : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARQOS : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARREGION : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARSIZE : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARVALID : in std_ulogic;
     IF_NOC_AXI_AWADDR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_AWADDR_PAR : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWBURST : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_AWCACHE : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWLEN : in std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWLOCK : in std_logic_vector(0 to 0);
     IF_NOC_AXI_AWPROT : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWQOS : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWREGION : in std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWSIZE : in std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWVALID : in std_ulogic;
     IF_NOC_AXI_BREADY : in std_ulogic;
     IF_NOC_AXI_RREADY : in std_ulogic;
     IF_NOC_AXI_TDEST : in std_logic_vector(9 downto 0);
     IF_NOC_AXI_WDATA : in std_logic_vector(511 downto 0);
     IF_NOC_AXI_WDATA_PAR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_WID : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WLAST : in std_logic_vector(0 to 0);
     IF_NOC_AXI_WPOISON : in std_ulogic;
     IF_NOC_AXI_WSTRB : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_WUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_WVALID : in std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN_EN : in std_ulogic;
     NMU_RD_DEST_MODE : in std_ulogic;
     NMU_RD_USR_DST : in std_logic_vector(11 downto 0);
     NMU_USR_INTERRUPT_IN : in std_logic_vector(3 downto 0);
     NMU_WR_DEST_MODE : in std_ulogic;
     NMU_WR_USR_DST : in std_logic_vector(11 downto 0)
  );
end component;
attribute BOX_TYPE of
  NOC_NMU512 : component is "PRIMITIVE";

----- component NOC_NPP_RPTR -----
component NOC_NPP_RPTR
  port (
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN_EN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOC_NPP_RPTR : component is "PRIMITIVE";

----- component NOC_NPS5555 -----
component NOC_NPS5555
  generic (
     REG_CLOCK_MUX : std_logic_vector(31 downto 0) := X"00000000";
     REG_HIGH_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID10_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID10_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID11_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID11_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID12_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID12_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID13_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID13_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID14_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID14_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID15_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID15_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID16_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID16_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID17_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID17_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID18_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID18_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID19_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID19_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID20_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID20_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID21_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID21_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID22_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID22_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID23_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID23_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID24_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID24_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID25_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID25_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID26_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID26_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID27_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID27_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID28_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID28_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID29_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID29_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID30_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID30_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID31_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID31_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID32_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID32_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID33_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID33_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID34_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID34_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID35_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID35_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID36_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID36_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID37_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID37_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID38_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID38_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID39_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID39_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID40_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID40_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID41_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID41_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID42_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID42_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID43_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID43_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID44_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID44_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID45_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID45_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID46_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID46_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID47_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID47_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID48_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID48_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID49_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID49_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID4_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID4_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID50_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID50_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID51_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID51_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID52_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID52_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID53_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID53_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID54_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID54_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID55_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID55_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID56_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID56_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID57_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID57_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID58_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID58_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID59_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID59_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID5_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID5_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID60_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID60_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID61_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID61_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID62_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID62_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID63_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID63_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID6_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID6_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID7_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID7_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID8_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID8_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID9_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID9_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_ID : std_logic_vector(9 downto 0) := "00" & X"00";
     REG_LOW_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID10_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID10_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID11_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID11_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID12_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID12_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID13_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID13_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID14_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID14_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID15_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID15_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID4_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID4_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID5_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID5_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID6_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID6_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID7_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID7_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID8_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID8_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID9_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID9_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_NOC_CTL : std_logic_vector(15 downto 0) := X"FF00";
     REG_P00_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P00_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P01_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P01_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P02_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P02_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P10_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P10_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P11_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P11_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P12_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P12_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P20_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P20_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P21_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P21_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P22_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P22_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P30_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P30_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P31_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P31_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P32_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P32_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010"
  );
  port (
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN2_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN2_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN3_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN3_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT0_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT1_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT2_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT2_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT3_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT3_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_IN0_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN0_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN1_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN2_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN2_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN3_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN3_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT2_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT2_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT3_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT3_NOC_CREDIT_RETURN_EN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOC_NPS5555 : component is "PRIMITIVE";

----- component NOC_NPS7575 -----
component NOC_NPS7575
  generic (
     REG_CLOCK_MUX : std_logic_vector(31 downto 0) := X"00000000";
     REG_HIGH_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID10_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID10_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID11_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID11_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID12_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID12_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID13_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID13_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID14_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID14_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID15_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID15_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID16_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID16_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID17_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID17_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID18_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID18_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID19_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID19_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID20_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID20_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID21_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID21_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID22_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID22_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID23_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID23_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID24_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID24_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID25_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID25_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID26_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID26_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID27_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID27_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID28_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID28_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID29_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID29_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID30_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID30_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID31_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID31_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID32_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID32_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID33_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID33_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID34_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID34_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID35_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID35_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID36_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID36_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID37_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID37_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID38_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID38_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID39_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID39_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID40_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID40_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID41_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID41_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID42_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID42_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID43_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID43_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID44_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID44_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID45_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID45_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID46_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID46_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID47_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID47_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID48_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID48_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID49_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID49_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID4_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID4_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID50_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID50_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID51_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID51_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID52_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID52_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID53_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID53_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID54_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID54_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID55_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID55_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID56_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID56_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID57_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID57_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID58_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID58_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID59_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID59_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID5_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID5_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID60_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID60_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID61_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID61_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID62_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID62_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID63_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID63_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID6_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID6_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID7_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID7_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID8_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID8_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID9_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID9_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_ID : std_logic_vector(9 downto 0) := "00" & X"00";
     REG_LOW_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID10_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID10_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID11_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID11_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID12_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID12_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID13_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID13_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID14_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID14_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID15_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID15_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID4_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID4_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID5_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID5_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID6_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID6_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID7_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID7_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID8_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID8_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID9_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID9_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_NOC_CTL : std_logic_vector(15 downto 0) := X"FF00";
     REG_P00_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P00_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P01_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P01_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P02_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P02_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P10_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P10_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P11_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P11_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P12_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P12_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P20_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P20_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P21_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P21_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P22_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P22_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P30_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P30_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P31_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P31_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P32_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P32_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010"
  );
  port (
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN2_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN2_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN3_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN3_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT0_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT1_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT2_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT2_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT3_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT3_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_IN0_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN0_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN1_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN2_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN2_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN3_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN3_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT2_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT2_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT3_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT3_NOC_CREDIT_RETURN_EN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOC_NPS7575 : component is "PRIMITIVE";

----- component NOC_NPS_VNOC -----
component NOC_NPS_VNOC
  generic (
     REG_CLOCK_MUX : std_logic_vector(31 downto 0) := X"00000000";
     REG_HIGH_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID10_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID10_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID11_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID11_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID12_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID12_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID13_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID13_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID14_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID14_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID15_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID15_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID16_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID16_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID17_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID17_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID18_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID18_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID19_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID19_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID20_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID20_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID21_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID21_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID22_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID22_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID23_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID23_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID24_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID24_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID25_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID25_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID26_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID26_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID27_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID27_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID28_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID28_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID29_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID29_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID30_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID30_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID31_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID31_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID32_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID32_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID33_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID33_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID34_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID34_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID35_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID35_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID36_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID36_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID37_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID37_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID38_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID38_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID39_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID39_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID40_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID40_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID41_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID41_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID42_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID42_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID43_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID43_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID44_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID44_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID45_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID45_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID46_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID46_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID47_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID47_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID48_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID48_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID49_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID49_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID4_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID4_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID50_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID50_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID51_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID51_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID52_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID52_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID53_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID53_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID54_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID54_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID55_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID55_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID56_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID56_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID57_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID57_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID58_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID58_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID59_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID59_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID5_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID5_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID60_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID60_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID61_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID61_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID62_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID62_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID63_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID63_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID6_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID6_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID7_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID7_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID8_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID8_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_HIGH_ID9_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_HIGH_ID9_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_ID : std_logic_vector(9 downto 0) := "00" & X"00";
     REG_LOW_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID10_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID10_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID11_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID11_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID12_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID12_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID13_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID13_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID14_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID14_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID15_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID15_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID4_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID4_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID5_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID5_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID6_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID6_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID7_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID7_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID8_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID8_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_LOW_ID9_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_LOW_ID9_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID0_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID0_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID1_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID1_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID2_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID2_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_MID_ID3_P01 : std_logic_vector(31 downto 0) := X"FFFFAAAA";
     REG_MID_ID3_P23 : std_logic_vector(31 downto 0) := X"55550000";
     REG_NOC_CTL : std_logic_vector(15 downto 0) := X"FF00";
     REG_P00_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P00_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P01_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P01_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P02_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P02_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P10_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P10_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P11_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P11_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P12_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P12_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P20_P3_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P20_P3_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P21_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P21_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P22_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P22_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P30_P0_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P30_P0_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P31_P1_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P31_P1_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P32_P2_0_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010";
     REG_P32_P2_1_VCA_TOKEN : std_logic_vector(31 downto 0) := X"10101010"
  );
  port (
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN2_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN2_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_IN3_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN3_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT0_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT0_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT1_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT1_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT2_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT2_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT2_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT3_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT3_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT3_NOC_VALID_EN : out std_ulogic;
     IF_NOC_NPP_IN0_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN0_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN0_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN0_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN1_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN1_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN1_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN2_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN2_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN2_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN3_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN3_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN3_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT0_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT1_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT2_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT2_NOC_CREDIT_RETURN_EN : in std_ulogic;
     IF_NOC_NPP_OUT3_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT3_NOC_CREDIT_RETURN_EN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NOC_NPS_VNOC : component is "PRIMITIVE";

----- component NOC_NSU128 -----
component NOC_NSU128
  generic (
     REG_AXI_LOOPBACK : std_logic_vector(1 downto 0) := "00";
     REG_COMP_ID_INDEX0 : std_logic_vector(4 downto 0) := "0" & X"0";
     REG_COMP_ID_INDEX1 : std_logic_vector(4 downto 0) := "0" & X"1";
     REG_COMP_ID_MODE : bit := '0';
     REG_DISABLE_EX_MON : bit := '1';
     REG_DWIDTH : std_logic_vector(2 downto 0) := "100";
     REG_ECC_CHK_EN : bit := '1';
     REG_FIXED_COMP_ID : std_logic_vector(1 downto 0) := "00";
     REG_MODE_SELECT : std_logic_vector(1 downto 0) := "00";
     REG_ODISABLE_AXI_RESP : bit := '0';
     REG_OUTSTANDING_RD_TXN : std_logic_vector(5 downto 0) := "10" & X"0";
     REG_OUTSTANDING_WR_TXN : std_logic_vector(5 downto 0) := "10" & X"0";
     REG_PAR_CHK : std_logic_vector(1 downto 0) := "00";
     REG_RDTRK_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_RDTRK_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_RD_REQ_VC_MAP0 : std_logic_vector(2 downto 0) := "000";
     REG_RD_REQ_VC_MAP1 : std_logic_vector(2 downto 0) := "100";
     REG_RD_RESP_VC_MAP0 : std_logic_vector(2 downto 0) := "010";
     REG_RD_RESP_VC_MAP1 : std_logic_vector(2 downto 0) := "110";
     REG_RD_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_RD_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_SRC : std_logic_vector(11 downto 0) := X"000";
     REG_TBASE_AXI_TIMEOUT : std_logic_vector(3 downto 0) := X"2";
     REG_TBASE_TRK_TIMEOUT : std_logic_vector(3 downto 0) := X"2";
     REG_VMAP_OUT_RD_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_VMAP_OUT_RD_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_VMAP_OUT_WR_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_VMAP_OUT_WR_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_WRTRK_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_WRTRK_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_WR_REQ_VC_MAP0 : std_logic_vector(2 downto 0) := "001";
     REG_WR_REQ_VC_MAP1 : std_logic_vector(2 downto 0) := "101";
     REG_WR_RESP_VC_MAP0 : std_logic_vector(2 downto 0) := "011";
     REG_WR_RESP_VC_MAP1 : std_logic_vector(2 downto 0) := "111";
     REG_WR_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_WR_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10"
  );
  port (
     IF_NOC_AXI_ARADDR : out std_logic_vector(63 downto 0);
     IF_NOC_AXI_ARADDR_PAR : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARBURST : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_ARCACHE : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARCID : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_ARID_INFO : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARLEN : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARLOCK : out std_logic_vector(0 to 0);
     IF_NOC_AXI_ARPROT : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARQOS : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARREGION : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARSIZE : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARSRC_INFO : out std_logic_vector(11 downto 0);
     IF_NOC_AXI_ARUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARVALID : out std_ulogic;
     IF_NOC_AXI_AWADDR : out std_logic_vector(63 downto 0);
     IF_NOC_AXI_AWADDR_PAR : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWBURST : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_AWCACHE : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWCID : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_AWID_INFO : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWLEN : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWLOCK : out std_logic_vector(0 to 0);
     IF_NOC_AXI_AWPROT : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWQOS : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWREGION : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWSIZE : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWSRC_INFO : out std_logic_vector(11 downto 0);
     IF_NOC_AXI_AWUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWVALID : out std_ulogic;
     IF_NOC_AXI_BREADY : out std_ulogic;
     IF_NOC_AXI_RREADY : out std_ulogic;
     IF_NOC_AXI_TDEST : out std_logic_vector(9 downto 0);
     IF_NOC_AXI_WCID : out std_logic_vector(5 downto 0);
     IF_NOC_AXI_WDATA : out std_logic_vector(127 downto 0);
     IF_NOC_AXI_WDATA_PAR : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_WID_INFO : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_WLAST : out std_logic_vector(0 to 0);
     IF_NOC_AXI_WPOISON : out std_ulogic;
     IF_NOC_AXI_WSRC_INFO : out std_logic_vector(11 downto 0);
     IF_NOC_AXI_WSTRB : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_WUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_WVALID : out std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_VALID_EN : out std_ulogic;
     CLK : in std_ulogic;
     IF_NOC_AXI_ARREADY : in std_ulogic;
     IF_NOC_AXI_AWREADY : in std_ulogic;
     IF_NOC_AXI_BCID : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_BRESP : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_BUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_BVALID : in std_ulogic;
     IF_NOC_AXI_RCID : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_RDATA : in std_logic_vector(127 downto 0);
     IF_NOC_AXI_RDATA_PAR : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_RLAST : in std_logic_vector(0 to 0);
     IF_NOC_AXI_RPOISON : in std_ulogic;
     IF_NOC_AXI_RRESP : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_RUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_RVALID : in std_ulogic;
     IF_NOC_AXI_WREADY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN_EN : in std_ulogic;
     NSU_USR_INTERRUPT_IN : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  NOC_NSU128 : component is "PRIMITIVE";

----- component NOC_NSU512 -----
component NOC_NSU512
  generic (
     REG_AXI_LOOPBACK : std_logic_vector(1 downto 0) := "00";
     REG_COMP_ID_INDEX0 : std_logic_vector(4 downto 0) := "0" & X"0";
     REG_COMP_ID_INDEX1 : std_logic_vector(4 downto 0) := "0" & X"1";
     REG_COMP_ID_MODE : bit := '0';
     REG_DISABLE_EX_MON : bit := '1';
     REG_DWIDTH : std_logic_vector(2 downto 0) := "100";
     REG_ECC_CHK_EN : bit := '1';
     REG_FIXED_COMP_ID : std_logic_vector(1 downto 0) := "00";
     REG_MODE_SELECT : std_logic_vector(1 downto 0) := "00";
     REG_ODISABLE_AXI_RESP : bit := '0';
     REG_OUTSTANDING_RD_TXN : std_logic_vector(5 downto 0) := "10" & X"0";
     REG_OUTSTANDING_WR_TXN : std_logic_vector(5 downto 0) := "10" & X"0";
     REG_PAR_CHK : std_logic_vector(1 downto 0) := "00";
     REG_RDTRK_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_RDTRK_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_RD_REQ_VC_MAP0 : std_logic_vector(2 downto 0) := "000";
     REG_RD_REQ_VC_MAP1 : std_logic_vector(2 downto 0) := "100";
     REG_RD_RESP_VC_MAP0 : std_logic_vector(2 downto 0) := "010";
     REG_RD_RESP_VC_MAP1 : std_logic_vector(2 downto 0) := "110";
     REG_RD_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_RD_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_SRC : std_logic_vector(11 downto 0) := X"000";
     REG_TBASE_AXI_TIMEOUT : std_logic_vector(3 downto 0) := X"2";
     REG_TBASE_TRK_TIMEOUT : std_logic_vector(3 downto 0) := X"2";
     REG_VMAP_OUT_RD_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_VMAP_OUT_RD_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_VMAP_OUT_WR_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_VMAP_OUT_WR_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_WRTRK_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_WRTRK_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10";
     REG_WR_REQ_VC_MAP0 : std_logic_vector(2 downto 0) := "001";
     REG_WR_REQ_VC_MAP1 : std_logic_vector(2 downto 0) := "101";
     REG_WR_RESP_VC_MAP0 : std_logic_vector(2 downto 0) := "011";
     REG_WR_RESP_VC_MAP1 : std_logic_vector(2 downto 0) := "111";
     REG_WR_VCA_TOKEN0 : std_logic_vector(7 downto 0) := X"10";
     REG_WR_VCA_TOKEN1 : std_logic_vector(7 downto 0) := X"10"
  );
  port (
     IF_NOC_AXI_ARADDR : out std_logic_vector(63 downto 0);
     IF_NOC_AXI_ARADDR_PAR : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARBURST : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_ARCACHE : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARCID : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_ARID_INFO : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARLEN : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_ARLOCK : out std_logic_vector(0 to 0);
     IF_NOC_AXI_ARPROT : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARQOS : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARREGION : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_ARSIZE : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_ARSRC_INFO : out std_logic_vector(11 downto 0);
     IF_NOC_AXI_ARUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_ARVALID : out std_ulogic;
     IF_NOC_AXI_AWADDR : out std_logic_vector(63 downto 0);
     IF_NOC_AXI_AWADDR_PAR : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWBURST : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_AWCACHE : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWCID : out std_logic_vector(1 downto 0);
     IF_NOC_AXI_AWID_INFO : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWLEN : out std_logic_vector(7 downto 0);
     IF_NOC_AXI_AWLOCK : out std_logic_vector(0 to 0);
     IF_NOC_AXI_AWPROT : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWQOS : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWREGION : out std_logic_vector(3 downto 0);
     IF_NOC_AXI_AWSIZE : out std_logic_vector(2 downto 0);
     IF_NOC_AXI_AWSRC_INFO : out std_logic_vector(11 downto 0);
     IF_NOC_AXI_AWUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_AWVALID : out std_ulogic;
     IF_NOC_AXI_BREADY : out std_ulogic;
     IF_NOC_AXI_RREADY : out std_ulogic;
     IF_NOC_AXI_TDEST : out std_logic_vector(9 downto 0);
     IF_NOC_AXI_WCID : out std_logic_vector(5 downto 0);
     IF_NOC_AXI_WDATA : out std_logic_vector(511 downto 0);
     IF_NOC_AXI_WDATA_PAR : out std_logic_vector(63 downto 0);
     IF_NOC_AXI_WID_INFO : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_WLAST : out std_logic_vector(0 to 0);
     IF_NOC_AXI_WPOISON : out std_ulogic;
     IF_NOC_AXI_WSRC_INFO : out std_logic_vector(11 downto 0);
     IF_NOC_AXI_WSTRB : out std_logic_vector(63 downto 0);
     IF_NOC_AXI_WUSER : out std_logic_vector(15 downto 0);
     IF_NOC_AXI_WVALID : out std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_CREDIT_RETURN_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RDY : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_FLIT : out std_logic_vector(181 downto 0);
     IF_NOC_NPP_OUT_NOC_FLIT_EN : out std_ulogic;
     IF_NOC_NPP_OUT_NOC_VALID : out std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_VALID_EN : out std_ulogic;
     CLK : in std_ulogic;
     IF_NOC_AXI_ARREADY : in std_ulogic;
     IF_NOC_AXI_AWREADY : in std_ulogic;
     IF_NOC_AXI_BCID : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_BRESP : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_BUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_BVALID : in std_ulogic;
     IF_NOC_AXI_RCID : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_RDATA : in std_logic_vector(511 downto 0);
     IF_NOC_AXI_RDATA_PAR : in std_logic_vector(63 downto 0);
     IF_NOC_AXI_RLAST : in std_logic_vector(0 to 0);
     IF_NOC_AXI_RPOISON : in std_ulogic;
     IF_NOC_AXI_RRESP : in std_logic_vector(1 downto 0);
     IF_NOC_AXI_RUSER : in std_logic_vector(15 downto 0);
     IF_NOC_AXI_RVALID : in std_ulogic;
     IF_NOC_AXI_WREADY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_CREDIT_RDY : in std_ulogic;
     IF_NOC_NPP_IN_NOC_FLIT : in std_logic_vector(181 downto 0);
     IF_NOC_NPP_IN_NOC_FLIT_EN : in std_ulogic;
     IF_NOC_NPP_IN_NOC_VALID : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_IN_NOC_VALID_EN : in std_ulogic;
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN : in std_logic_vector(7 downto 0);
     IF_NOC_NPP_OUT_NOC_CREDIT_RETURN_EN : in std_ulogic;
     NSU_USR_INTERRUPT_IN : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  NOC_NSU512 : component is "PRIMITIVE";

----- component NPI_NIR -----
component NPI_NIR
  generic (
     REG_CNTL : std_logic_vector(22 downto 0) := "100" & X"00002";
     REG_SRVC : std_logic_vector(2 downto 0) := "000";
     REG_TIMEBASE_SEL : std_logic_vector(29 downto 0) := "11" & X"98B2310"
  );
  port (
     IF_NPI_AXI_ARREADY : out std_ulogic;
     IF_NPI_AXI_AWREADY : out std_ulogic;
     IF_NPI_AXI_BID : out std_logic_vector(15 downto 0);
     IF_NPI_AXI_BRESP : out std_logic_vector(1 downto 0);
     IF_NPI_AXI_BUSER : out std_logic_vector(15 downto 0);
     IF_NPI_AXI_BVALID : out std_ulogic;
     IF_NPI_AXI_RDATA : out std_logic_vector(31 downto 0);
     IF_NPI_AXI_RID : out std_logic_vector(15 downto 0);
     IF_NPI_AXI_RLAST : out std_logic_vector(0 to 0);
     IF_NPI_AXI_RRESP : out std_logic_vector(1 downto 0);
     IF_NPI_AXI_RUSER : out std_logic_vector(15 downto 0);
     IF_NPI_AXI_RVALID : out std_ulogic;
     IF_NPI_AXI_WREADY : out std_ulogic;
     NPI_INTERRUPT_OUT : out std_logic_vector(23 downto 0);
     IF_NPI_AXI_ARADDR : in std_logic_vector(63 downto 0);
     IF_NPI_AXI_ARBURST : in std_logic_vector(1 downto 0);
     IF_NPI_AXI_ARCACHE : in std_logic_vector(3 downto 0);
     IF_NPI_AXI_ARID : in std_logic_vector(15 downto 0);
     IF_NPI_AXI_ARLEN : in std_logic_vector(7 downto 0);
     IF_NPI_AXI_ARLOCK : in std_logic_vector(0 to 0);
     IF_NPI_AXI_ARPROT : in std_logic_vector(2 downto 0);
     IF_NPI_AXI_ARQOS : in std_logic_vector(3 downto 0);
     IF_NPI_AXI_ARREGION : in std_logic_vector(3 downto 0);
     IF_NPI_AXI_ARSIZE : in std_logic_vector(2 downto 0);
     IF_NPI_AXI_ARUSER : in std_logic_vector(15 downto 0);
     IF_NPI_AXI_ARVALID : in std_ulogic;
     IF_NPI_AXI_AWADDR : in std_logic_vector(63 downto 0);
     IF_NPI_AXI_AWBURST : in std_logic_vector(1 downto 0);
     IF_NPI_AXI_AWCACHE : in std_logic_vector(3 downto 0);
     IF_NPI_AXI_AWID : in std_logic_vector(15 downto 0);
     IF_NPI_AXI_AWLEN : in std_logic_vector(7 downto 0);
     IF_NPI_AXI_AWLOCK : in std_logic_vector(0 to 0);
     IF_NPI_AXI_AWPROT : in std_logic_vector(2 downto 0);
     IF_NPI_AXI_AWQOS : in std_logic_vector(3 downto 0);
     IF_NPI_AXI_AWREGION : in std_logic_vector(3 downto 0);
     IF_NPI_AXI_AWSIZE : in std_logic_vector(2 downto 0);
     IF_NPI_AXI_AWUSER : in std_logic_vector(15 downto 0);
     IF_NPI_AXI_AWVALID : in std_ulogic;
     IF_NPI_AXI_BREADY : in std_ulogic;
     IF_NPI_AXI_RREADY : in std_ulogic;
     IF_NPI_AXI_WDATA : in std_logic_vector(31 downto 0);
     IF_NPI_AXI_WID : in std_logic_vector(15 downto 0);
     IF_NPI_AXI_WLAST : in std_logic_vector(0 to 0);
     IF_NPI_AXI_WSTRB : in std_logic_vector(3 downto 0);
     IF_NPI_AXI_WUSER : in std_logic_vector(15 downto 0);
     IF_NPI_AXI_WVALID : in std_ulogic;
     NPI_CLK : in std_ulogic;
     NPI_RST_N : in std_ulogic;
     PMC_CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  NPI_NIR : component is "PRIMITIVE";

----- component OBUF -----
component OBUF
  generic (
     CAPACITANCE : string := "DONT_CARE";
     DRIVE : integer := 12;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF : component is "PRIMITIVE";

----- component OBUFDS -----
component OBUFDS
  generic (
     CAPACITANCE : string := "DONT_CARE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS : component is "PRIMITIVE";

----- component OBUFDS_COMP -----
component OBUFDS_COMP
  generic (
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_COMP : component is "PRIMITIVE";

----- component OBUFDS_DPHY -----
component OBUFDS_DPHY
  generic (
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     HSTX_I : in std_ulogic;
     HSTX_T : in std_ulogic;
     LPTX_I_N : in std_ulogic;
     LPTX_I_P : in std_ulogic;
     LPTX_T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_DPHY : component is "PRIMITIVE";

----- component OBUFDS_GTE3 -----
component OBUFDS_GTE3
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_ICNTL_TX : std_logic_vector (4 downto 0) := "00000"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE3 : component is "PRIMITIVE";

----- component OBUFDS_GTE3_ADV -----
component OBUFDS_GTE3_ADV
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_ICNTL_TX : std_logic_vector(4 downto 0) := "00000"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_logic_vector(3 downto 0);
     RXRECCLK_SEL : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE3_ADV : component is "PRIMITIVE";

----- component OBUFDS_GTE4 -----
component OBUFDS_GTE4
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_ICNTL_TX : std_logic_vector(4 downto 0) := "00000"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE4 : component is "PRIMITIVE";

----- component OBUFDS_GTE4_ADV -----
component OBUFDS_GTE4_ADV
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_ICNTL_TX : std_logic_vector(4 downto 0) := "00000"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_logic_vector(3 downto 0);
     RXRECCLK_SEL : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE4_ADV : component is "PRIMITIVE";

----- component OBUFDS_GTE5 -----
component OBUFDS_GTE5
  generic (
     REFCLK_EN_TX_PATH : bit := '0'
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE5 : component is "PRIMITIVE";

----- component OBUFDS_GTE5_ADV -----
component OBUFDS_GTE5_ADV
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     RXRECCLK_SEL : std_logic_vector(1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE5_ADV : component is "PRIMITIVE";

----- component OBUFDS_GTM -----
component OBUFDS_GTM
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_ICNTL_TX : integer := 0
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTM : component is "PRIMITIVE";

----- component OBUFDS_GTM_ADV -----
component OBUFDS_GTM_ADV
  generic (
     REFCLK_EN_TX_PATH : bit := '0';
     REFCLK_ICNTL_TX : integer := 0;
     RXRECCLK_SEL : std_logic_vector(1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTM_ADV : component is "PRIMITIVE";

----- component OBUFT -----
component OBUFT
  generic (
     CAPACITANCE : string := "DONT_CARE";
     DRIVE : integer := 12;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT : component is "PRIMITIVE";

----- component OBUFTDS -----
component OBUFTDS
  generic (
     CAPACITANCE : string := "DONT_CARE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS : component is "PRIMITIVE";

----- component OBUFTDS_COMP -----
component OBUFTDS_COMP
  generic (
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_COMP : component is "PRIMITIVE";

----- component OBUFTDS_DCIEN -----
component OBUFTDS_DCIEN
  generic (
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_DCIEN : component is "PRIMITIVE";

----- component OBUFT_DCIEN -----
component OBUFT_DCIEN
  generic (
     DRIVE : integer := 12;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_DCIEN : component is "PRIMITIVE";

----- component ODDR -----
component ODDR
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     INIT : bit := '0';
     IS_C_INVERTED : bit := '0';
     IS_D1_INVERTED : bit := '0';
     IS_D2_INVERTED : bit := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     R : in std_ulogic := 'L';
     S : in std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  ODDR : component is "PRIMITIVE";

----- component ODDRE1 -----
component ODDRE1
  generic (
     IS_C_INVERTED : bit := '0';
     IS_D1_INVERTED : bit := '0';
     IS_D2_INVERTED : bit := '0';
     SIM_DEVICE : string := "ULTRASCALE";
     SRVAL : bit := '0'
  );
  port (
     Q : out std_ulogic := TO_X01(SRVAL);
     C : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     SR : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODDRE1 : component is "PRIMITIVE";

----- component ODELAYE2 -----
component ODELAYE2
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "ODATAIN";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IS_C_INVERTED : bit := '0';
     IS_ODATAIN_INVERTED : bit := '0';
     ODELAY_TYPE : string := "FIXED";
     ODELAY_VALUE : integer := 0;
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CLKIN : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     ODATAIN : in std_ulogic;
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODELAYE2 : component is "PRIMITIVE";

----- component ODELAYE2_FINEDELAY -----
component ODELAYE2_FINEDELAY
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "ODATAIN";
     FINEDELAY : string := "BYPASS";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IS_C_INVERTED : bit := '0';
     IS_ODATAIN_INVERTED : bit := '0';
     ODELAY_TYPE : string := "FIXED";
     ODELAY_VALUE : integer := 0;
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CLKIN : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     ODATAIN : in std_ulogic;
     OFDLY : in std_logic_vector(2 downto 0);
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODELAYE2_FINEDELAY : component is "PRIMITIVE";

----- component ODELAYE3 -----
component ODELAYE3
  generic (
     CASCADE : string := "NONE";
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     IS_CLK_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REFCLK_FREQUENCY : real := 300.0;
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0;
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     CASC_OUT : out std_ulogic;
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     DATAOUT : out std_ulogic;
     CASC_IN : in std_ulogic;
     CASC_RETURN : in std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     EN_VTC : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     ODATAIN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODELAYE3 : component is "PRIMITIVE";

----- component ODELAYE5 -----
component ODELAYE5
  generic (
     CASCADE : string := "FALSE";
     IS_CLK_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0'
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     CASC_IN : in std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     ODATAIN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODELAYE5 : component is "PRIMITIVE";

----- component OR2L -----
component OR2L
  generic (
     IS_SRI_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     DI : in std_ulogic;
     SRI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR2L : component is "PRIMITIVE";

----- component OSERDES -----
component OSERDES
  generic (
     DATA_RATE_OQ : string := "DDR";
     DATA_RATE_TQ : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_OQ : bit := '0';
     INIT_TQ : bit := '0';
     SERDES_MODE : string := "MASTER";
     SRVAL_OQ : bit := '0';
     SRVAL_TQ : bit := '0';
     TRISTATE_WIDTH : integer := 4
  );
  port (
     OQ : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     TQ : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     D4 : in std_ulogic;
     D5 : in std_ulogic;
     D6 : in std_ulogic;
     OCE : in std_ulogic;
     REV : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     SR : in std_ulogic;
     T1 : in std_ulogic;
     T2 : in std_ulogic;
     T3 : in std_ulogic;
     T4 : in std_ulogic;
     TCE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDES : component is "PRIMITIVE";

----- component OSERDESE1 -----
component OSERDESE1
  generic (
     DATA_RATE_OQ : string := "DDR";
     DATA_RATE_TQ : string := "DDR";
     DATA_WIDTH : integer := 4;
     DDR3_DATA : integer := 1;
     INIT_OQ : bit := '0';
     INIT_TQ : bit := '0';
     INTERFACE_TYPE : string := "DEFAULT";
     ODELAY_USED : integer := 0;
     SERDES_MODE : string := "MASTER";
     SRVAL_OQ : bit := '0';
     SRVAL_TQ : bit := '0';
     TRISTATE_WIDTH : integer := 4
  );
  port (
     OCBEXTEND : out std_ulogic;
     OFB : out std_ulogic;
     OQ : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     TFB : out std_ulogic;
     TQ : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     CLKPERF : in std_ulogic;
     CLKPERFDELAY : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     D4 : in std_ulogic;
     D5 : in std_ulogic;
     D6 : in std_ulogic;
     OCE : in std_ulogic;
     ODV : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     T1 : in std_ulogic;
     T2 : in std_ulogic;
     T3 : in std_ulogic;
     T4 : in std_ulogic;
     TCE : in std_ulogic;
     WC : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDESE1 : component is "PRIMITIVE";

----- component OSERDESE2 -----
component OSERDESE2
  generic (
     DATA_RATE_OQ : string := "DDR";
     DATA_RATE_TQ : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_OQ : bit := '0';
     INIT_TQ : bit := '0';
     IS_CLKDIV_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_D1_INVERTED : bit := '0';
     IS_D2_INVERTED : bit := '0';
     IS_D3_INVERTED : bit := '0';
     IS_D4_INVERTED : bit := '0';
     IS_D5_INVERTED : bit := '0';
     IS_D6_INVERTED : bit := '0';
     IS_D7_INVERTED : bit := '0';
     IS_D8_INVERTED : bit := '0';
     IS_T1_INVERTED : bit := '0';
     IS_T2_INVERTED : bit := '0';
     IS_T3_INVERTED : bit := '0';
     IS_T4_INVERTED : bit := '0';
     SERDES_MODE : string := "MASTER";
     SRVAL_OQ : bit := '0';
     SRVAL_TQ : bit := '0';
     TBYTE_CTL : string := "FALSE";
     TBYTE_SRC : string := "FALSE";
     TRISTATE_WIDTH : integer := 4
  );
  port (
     OFB : out std_ulogic;
     OQ : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     TBYTEOUT : out std_ulogic;
     TFB : out std_ulogic;
     TQ : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     D4 : in std_ulogic;
     D5 : in std_ulogic;
     D6 : in std_ulogic;
     D7 : in std_ulogic;
     D8 : in std_ulogic;
     OCE : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     T1 : in std_ulogic;
     T2 : in std_ulogic;
     T3 : in std_ulogic;
     T4 : in std_ulogic;
     TBYTEIN : in std_ulogic;
     TCE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDESE2 : component is "PRIMITIVE";

----- component OSERDESE3 -----
component OSERDESE3
  generic (
     DATA_WIDTH : integer := 8;
     INIT : bit := '0';
     IS_CLKDIV_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     ODDR_MODE : string := "FALSE";
     OSERDES_D_BYPASS : string := "FALSE";
     OSERDES_T_BYPASS : string := "FALSE";
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0
  );
  port (
     OQ : out std_ulogic;
     T_OUT : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_logic_vector(7 downto 0);
     RST : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDESE3 : component is "PRIMITIVE";

----- component OUT_FIFO -----
component OUT_FIFO
  generic (
     ALMOST_EMPTY_VALUE : integer := 1;
     ALMOST_FULL_VALUE : integer := 1;
     ARRAY_MODE : string := "ARRAY_MODE_8_X_4";
     OUTPUT_DISABLE : string := "FALSE";
     SYNCHRONOUS_MODE : string := "FALSE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     Q0 : out std_logic_vector(3 downto 0);
     Q1 : out std_logic_vector(3 downto 0);
     Q2 : out std_logic_vector(3 downto 0);
     Q3 : out std_logic_vector(3 downto 0);
     Q4 : out std_logic_vector(3 downto 0);
     Q5 : out std_logic_vector(7 downto 0);
     Q6 : out std_logic_vector(7 downto 0);
     Q7 : out std_logic_vector(3 downto 0);
     Q8 : out std_logic_vector(3 downto 0);
     Q9 : out std_logic_vector(3 downto 0);
     D0 : in std_logic_vector(7 downto 0);
     D1 : in std_logic_vector(7 downto 0);
     D2 : in std_logic_vector(7 downto 0);
     D3 : in std_logic_vector(7 downto 0);
     D4 : in std_logic_vector(7 downto 0);
     D5 : in std_logic_vector(7 downto 0);
     D6 : in std_logic_vector(7 downto 0);
     D7 : in std_logic_vector(7 downto 0);
     D8 : in std_logic_vector(7 downto 0);
     D9 : in std_logic_vector(7 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RESET : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OUT_FIFO : component is "PRIMITIVE";

----- component PCIE40E4 -----
component PCIE40E4
  generic (
     ARI_CAP_ENABLE : string := "FALSE";
     AUTO_FLR_RESPONSE : string := "FALSE";
     AXISTEN_IF_CC_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_COMPL_TIMEOUT_REG0 : std_logic_vector(23 downto 0) := X"BEBC20";
     AXISTEN_IF_COMPL_TIMEOUT_REG1 : std_logic_vector(27 downto 0) := X"2FAF080";
     AXISTEN_IF_CQ_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_CQ_EN_POISONED_MEM_WR : string := "FALSE";
     AXISTEN_IF_ENABLE_256_TAGS : string := "FALSE";
     AXISTEN_IF_ENABLE_CLIENT_TAG : string := "FALSE";
     AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE : string := "FALSE";
     AXISTEN_IF_ENABLE_MESSAGE_RID_CHECK : string := "TRUE";
     AXISTEN_IF_ENABLE_MSG_ROUTE : std_logic_vector(17 downto 0) := "00" & X"0000";
     AXISTEN_IF_ENABLE_RX_MSG_INTFC : string := "FALSE";
     AXISTEN_IF_EXT_512 : string := "FALSE";
     AXISTEN_IF_EXT_512_CC_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_CQ_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_RQ_STRADDLE : string := "FALSE";
     AXISTEN_IF_LEGACY_MODE_ENABLE : string := "FALSE";
     AXISTEN_IF_MSIX_FROM_RAM_PIPELINE : string := "FALSE";
     AXISTEN_IF_MSIX_RX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_MSIX_TO_RAM_PIPELINE : string := "FALSE";
     AXISTEN_IF_RC_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_RQ_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_RX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_SIM_SHORT_CPL_TIMEOUT : string := "FALSE";
     AXISTEN_IF_TX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_WIDTH : std_logic_vector(1 downto 0) := "10";
     CFG_BYPASS_MODE_ENABLE : string := "FALSE";
     CRM_CORE_CLK_FREQ_500 : string := "TRUE";
     CRM_USER_CLK_FREQ : std_logic_vector(1 downto 0) := "10";
     DEBUG_AXI4ST_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_AXIST_DISABLE_FEATURE_BIT : std_logic_vector(7 downto 0) := X"00";
     DEBUG_CAR_SPARE : std_logic_vector(3 downto 0) := X"0";
     DEBUG_CFG_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_LL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_DEFRAMER_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_PARITY_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_REC_ENTRY_ON_DYNAMIC_DSKEW_FAIL : string := "FALSE";
     DEBUG_PL_DISABLE_REC_ENTRY_ON_RX_BUFFER_UNDER_OVER_FLOW : string := "FALSE";
     DEBUG_PL_DISABLE_SCRAMBLING : string := "FALSE";
     DEBUG_PL_SIM_RESET_LFSR : string := "FALSE";
     DEBUG_PL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_TL_DISABLE_FC_TIMEOUT : string := "FALSE";
     DEBUG_TL_DISABLE_RX_TLP_ORDER_CHECKS : string := "FALSE";
     DEBUG_TL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DNSTREAM_LINK_NUM : std_logic_vector(7 downto 0) := X"00";
     DSN_CAP_ENABLE : string := "FALSE";
     EXTENDED_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     HEADER_TYPE_OVERRIDE : string := "FALSE";
     IS_SWITCH_PORT : string := "FALSE";
     LEGACY_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     LL_ACK_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_DISABLE_SCHED_TX_NAK : string := "FALSE";
     LL_REPLAY_FROM_RAM_PIPELINE : string := "FALSE";
     LL_REPLAY_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LL_REPLAY_TO_RAM_PIPELINE : string := "FALSE";
     LL_RX_TLP_PARITY_GEN : string := "TRUE";
     LL_TX_TLP_PARITY_CHK : string := "TRUE";
     LL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     LTR_TX_MESSAGE_MINIMUM_INTERVAL : std_logic_vector(9 downto 0) := "10" & X"50";
     LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE : string := "FALSE";
     LTR_TX_MESSAGE_ON_LTR_ENABLE : string := "FALSE";
     MCAP_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     MCAP_CONFIGURE_OVERRIDE : string := "FALSE";
     MCAP_ENABLE : string := "FALSE";
     MCAP_EOS_DESIGN_SWITCH : string := "FALSE";
     MCAP_FPGA_BITSTREAM_VERSION : std_logic_vector(31 downto 0) := X"00000000";
     MCAP_GATE_IO_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_GATE_MEM_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INPUT_GATE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_EOS : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_ERROR : string := "FALSE";
     MCAP_VSEC_ID : std_logic_vector(15 downto 0) := X"0000";
     MCAP_VSEC_LEN : std_logic_vector(11 downto 0) := X"02C";
     MCAP_VSEC_REV : std_logic_vector(3 downto 0) := X"0";
     PF0_AER_CAP_ECRC_GEN_AND_CHECK_CAPABLE : string := "FALSE";
     PF0_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF0_ARI_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF0_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_ARI_FORWARD_ENABLE : string := "FALSE";
     PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE : string := "TRUE";
     PF0_DEV_CAP2_LTR_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_OBFF_SUPPORT : std_logic_vector(1 downto 0) := "00";
     PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT : string := "FALSE";
     PF0_DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     PF0_DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     PF0_DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "TRUE";
     PF0_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF0_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF0_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF0_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF0_LINK_CAP_ASPM_SUPPORT : integer := 0;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN4 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN4 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN4 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN4 : integer := 7;
     PF0_LINK_CONTROL_RCB : bit := '0';
     PF0_LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     PF0_LTR_CAP_MAX_NOSNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_MAX_SNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_LTR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSIX_CAP_PBA_BIR : integer := 0;
     PF0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF0_MSIX_CAP_TABLE_BIR : integer := 0;
     PF0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_MSIX_VECTOR_COUNT : std_logic_vector(5 downto 0) := "00" & X"4";
     PF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF0_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF0_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF0_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PM_CAP_PMESUPPORT_D0 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D1 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3HOT : string := "TRUE";
     PF0_PM_CAP_SUPP_D1_STATE : string := "TRUE";
     PF0_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF0_PM_CSR_NOSOFTRESET : string := "TRUE";
     PF0_SECONDARY_PCIE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF0_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF0_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF0_TPHR_CAP_ENABLE : string := "FALSE";
     PF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF0_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF0_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_VC_CAP_ENABLE : string := "FALSE";
     PF0_VC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_VC_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF1_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF1_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF1_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF1_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF1_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF1_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSIX_CAP_PBA_BIR : integer := 0;
     PF1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF1_MSIX_CAP_TABLE_BIR : integer := 0;
     PF1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF1_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF1_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF1_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF1_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF2_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF2_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF2_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF2_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF2_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF2_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF2_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSIX_CAP_PBA_BIR : integer := 0;
     PF2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF2_MSIX_CAP_TABLE_BIR : integer := 0;
     PF2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF2_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF2_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF2_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF2_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF3_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF3_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF3_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF3_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF3_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF3_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF3_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSIX_CAP_PBA_BIR : integer := 0;
     PF3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF3_MSIX_CAP_TABLE_BIR : integer := 0;
     PF3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF3_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF3_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF3_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF3_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PL_CFG_STATE_ROBUSTNESS_ENABLE : string := "TRUE";
     PL_DEEMPH_SOURCE_SELECT : string := "TRUE";
     PL_DESKEW_ON_SKIP_IN_GEN12 : string := "FALSE";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN3 : string := "FALSE";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN4 : string := "FALSE";
     PL_DISABLE_AUTO_SPEED_CHANGE_TO_GEN2 : string := "FALSE";
     PL_DISABLE_DC_BALANCE : string := "FALSE";
     PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     PL_DISABLE_LANE_REVERSAL : string := "FALSE";
     PL_DISABLE_LFSR_UPDATE_ON_SKP : std_logic_vector(1 downto 0) := "00";
     PL_DISABLE_RETRAIN_ON_EB_ERROR : string := "FALSE";
     PL_DISABLE_RETRAIN_ON_FRAMING_ERROR : string := "FALSE";
     PL_DISABLE_RETRAIN_ON_SPECIFIC_FRAMING_ERROR : std_logic_vector(15 downto 0) := X"0000";
     PL_DISABLE_UPCONFIG_CAPABLE : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_COEFF_CHECK : std_logic_vector(1 downto 0) := "00";
     PL_EQ_ADAPT_DISABLE_PRESET_CHECK : std_logic_vector(1 downto 0) := "00";
     PL_EQ_ADAPT_ITER_COUNT : std_logic_vector(4 downto 0) := "0" & X"2";
     PL_EQ_ADAPT_REJECT_RETRY_COUNT : std_logic_vector(1 downto 0) := "01";
     PL_EQ_BYPASS_PHASE23 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_DEFAULT_RX_PRESET_HINT : std_logic_vector(5 downto 0) := "11" & X"3";
     PL_EQ_DEFAULT_TX_PRESET : std_logic_vector(7 downto 0) := X"44";
     PL_EQ_DISABLE_MISMATCH_CHECK : string := "TRUE";
     PL_EQ_RX_ADAPT_EQ_PHASE0 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_RX_ADAPT_EQ_PHASE1 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_SHORT_ADAPT_PHASE : string := "FALSE";
     PL_EQ_TX_8G_EQ_TS2_ENABLE : string := "FALSE";
     PL_EXIT_LOOPBACK_ON_EI_ENTRY : string := "TRUE";
     PL_INFER_EI_DISABLE_LPBK_ACTIVE : string := "TRUE";
     PL_INFER_EI_DISABLE_REC_RC : string := "FALSE";
     PL_INFER_EI_DISABLE_REC_SPD : string := "FALSE";
     PL_LANE0_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE10_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE11_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE12_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE13_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE14_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE15_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE1_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE2_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE3_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE4_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE5_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE6_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE7_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE8_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE9_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LINK_CAP_MAX_LINK_SPEED : std_logic_vector(3 downto 0) := X"4";
     PL_LINK_CAP_MAX_LINK_WIDTH : std_logic_vector(4 downto 0) := "0" & X"8";
     PL_N_FTS : integer := 255;
     PL_QUIESCE_GUARANTEE_DISABLE : string := "FALSE";
     PL_REDO_EQ_SOURCE_SELECT : string := "TRUE";
     PL_REPORT_ALL_PHY_ERRORS : std_logic_vector(7 downto 0) := X"00";
     PL_RX_ADAPT_TIMER_CLWS_CLOBBER_TX_TS : std_logic_vector(1 downto 0) := "00";
     PL_RX_ADAPT_TIMER_CLWS_GEN3 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_CLWS_GEN4 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_TS : std_logic_vector(1 downto 0) := "00";
     PL_RX_ADAPT_TIMER_RRL_GEN3 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_RRL_GEN4 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_L0S_EXIT_TO_RECOVERY : std_logic_vector(1 downto 0) := "00";
     PL_SIM_FAST_LINK_TRAINING : std_logic_vector(1 downto 0) := "00";
     PL_SRIS_ENABLE : string := "FALSE";
     PL_SRIS_SKPOS_GEN_SPD_VEC : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_SRIS_SKPOS_REC_SPD_VEC : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_UPSTREAM_FACING : string := "TRUE";
     PL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     PM_ASPML0S_TIMEOUT : std_logic_vector(15 downto 0) := X"1500";
     PM_ASPML1_ENTRY_DELAY : std_logic_vector(19 downto 0) := X"003E8";
     PM_ENABLE_L23_ENTRY : string := "FALSE";
     PM_ENABLE_SLOT_POWER_CAPTURE : string := "TRUE";
     PM_L1_REENTRY_DELAY : std_logic_vector(31 downto 0) := X"00000100";
     PM_PME_SERVICE_TIMEOUT_DELAY : std_logic_vector(19 downto 0) := X"00000";
     PM_PME_TURNOFF_ACK_DELAY : std_logic_vector(15 downto 0) := X"0100";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SIM_JTAG_IDCODE : std_logic_vector(31 downto 0) := X"00000000";
     SIM_VERSION : string := "1.0";
     SPARE_BIT0 : string := "FALSE";
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : string := "FALSE";
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE1 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE2 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE3 : std_logic_vector(7 downto 0) := X"00";
     SPARE_WORD0 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD1 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD2 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD3 : std_logic_vector(31 downto 0) := X"00000000";
     SRIOV_CAP_ENABLE : std_logic_vector(3 downto 0) := X"0";
     TL2CFG_IF_PARITY_CHK : string := "TRUE";
     TL_COMPLETION_RAM_NUM_TLPS : std_logic_vector(1 downto 0) := "00";
     TL_COMPLETION_RAM_SIZE : std_logic_vector(1 downto 0) := "01";
     TL_CREDITS_CD : std_logic_vector(11 downto 0) := X"000";
     TL_CREDITS_CH : std_logic_vector(7 downto 0) := X"00";
     TL_CREDITS_NPD : std_logic_vector(11 downto 0) := X"004";
     TL_CREDITS_NPH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_PD : std_logic_vector(11 downto 0) := X"0E0";
     TL_CREDITS_PH : std_logic_vector(7 downto 0) := X"20";
     TL_FC_UPDATE_MIN_INTERVAL_TIME : std_logic_vector(4 downto 0) := "0" & X"2";
     TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT : std_logic_vector(4 downto 0) := "0" & X"8";
     TL_PF_ENABLE_REG : std_logic_vector(1 downto 0) := "00";
     TL_POSTED_RAM_SIZE : bit := '0';
     TL_RX_COMPLETION_FROM_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_COMPLETION_TO_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_COMPLETION_TO_RAM_WRITE_PIPELINE : string := "FALSE";
     TL_RX_POSTED_FROM_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_POSTED_TO_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_POSTED_TO_RAM_WRITE_PIPELINE : string := "FALSE";
     TL_TX_MUX_STRICT_PRIORITY : string := "TRUE";
     TL_TX_TLP_STRADDLE_ENABLE : string := "FALSE";
     TL_TX_TLP_TERMINATE_PARITY : string := "FALSE";
     TL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     TPH_FROM_RAM_PIPELINE : string := "FALSE";
     TPH_TO_RAM_PIPELINE : string := "FALSE";
     VF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     VFG0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG0_MSIX_CAP_PBA_BIR : integer := 0;
     VFG0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG0_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG0_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG1_MSIX_CAP_PBA_BIR : integer := 0;
     VFG1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG1_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG1_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG2_MSIX_CAP_PBA_BIR : integer := 0;
     VFG2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG2_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG2_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG3_MSIX_CAP_PBA_BIR : integer := 0;
     VFG3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG3_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG3_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000"
  );
  port (
     AXIUSEROUT : out std_logic_vector(7 downto 0);
     CFGBUSNUMBER : out std_logic_vector(7 downto 0);
     CFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     CFGERRCOROUT : out std_ulogic;
     CFGERRFATALOUT : out std_ulogic;
     CFGERRNONFATALOUT : out std_ulogic;
     CFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     CFGEXTREADRECEIVED : out std_ulogic;
     CFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     CFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGEXTWRITERECEIVED : out std_ulogic;
     CFGFCCPLD : out std_logic_vector(11 downto 0);
     CFGFCCPLH : out std_logic_vector(7 downto 0);
     CFGFCNPD : out std_logic_vector(11 downto 0);
     CFGFCNPH : out std_logic_vector(7 downto 0);
     CFGFCPD : out std_logic_vector(11 downto 0);
     CFGFCPH : out std_logic_vector(7 downto 0);
     CFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     CFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     CFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     CFGHOTRESETOUT : out std_ulogic;
     CFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIFAIL : out std_ulogic;
     CFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     CFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     CFGINTERRUPTMSISENT : out std_ulogic;
     CFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXVECPENDINGSTATUS : out std_ulogic;
     CFGINTERRUPTSENT : out std_ulogic;
     CFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     CFGLOCALERRORVALID : out std_ulogic;
     CFGLTRENABLE : out std_ulogic;
     CFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     CFGMAXPAYLOAD : out std_logic_vector(1 downto 0);
     CFGMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     CFGMGMTREADWRITEDONE : out std_ulogic;
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     CFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     CFGMSGTRANSMITDONE : out std_ulogic;
     CFGMSIXRAMADDRESS : out std_logic_vector(12 downto 0);
     CFGMSIXRAMREADENABLE : out std_ulogic;
     CFGMSIXRAMWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGMSIXRAMWRITEDATA : out std_logic_vector(35 downto 0);
     CFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     CFGOBFFENABLE : out std_logic_vector(1 downto 0);
     CFGPHYLINKDOWN : out std_ulogic;
     CFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     CFGPLSTATUSCHANGE : out std_ulogic;
     CFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     CFGRCBSTATUS : out std_logic_vector(3 downto 0);
     CFGRXPMSTATE : out std_logic_vector(1 downto 0);
     CFGTPHRAMADDRESS : out std_logic_vector(11 downto 0);
     CFGTPHRAMREADENABLE : out std_ulogic;
     CFGTPHRAMWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGTPHRAMWRITEDATA : out std_logic_vector(35 downto 0);
     CFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     CFGTPHSTMODE : out std_logic_vector(11 downto 0);
     CFGTXPMSTATE : out std_logic_vector(1 downto 0);
     CONFMCAPDESIGNSWITCH : out std_ulogic;
     CONFMCAPEOS : out std_ulogic;
     CONFMCAPINUSEBYPCIE : out std_ulogic;
     CONFREQREADY : out std_ulogic;
     CONFRESPRDATA : out std_logic_vector(31 downto 0);
     CONFRESPVALID : out std_ulogic;
     DBGCTRL0OUT : out std_logic_vector(31 downto 0);
     DBGCTRL1OUT : out std_logic_vector(31 downto 0);
     DBGDATA0OUT : out std_logic_vector(255 downto 0);
     DBGDATA1OUT : out std_logic_vector(255 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     MAXISCQTDATA : out std_logic_vector(255 downto 0);
     MAXISCQTKEEP : out std_logic_vector(7 downto 0);
     MAXISCQTLAST : out std_ulogic;
     MAXISCQTUSER : out std_logic_vector(87 downto 0);
     MAXISCQTVALID : out std_ulogic;
     MAXISRCTDATA : out std_logic_vector(255 downto 0);
     MAXISRCTKEEP : out std_logic_vector(7 downto 0);
     MAXISRCTLAST : out std_ulogic;
     MAXISRCTUSER : out std_logic_vector(74 downto 0);
     MAXISRCTVALID : out std_ulogic;
     MIREPLAYRAMADDRESS0 : out std_logic_vector(8 downto 0);
     MIREPLAYRAMADDRESS1 : out std_logic_vector(8 downto 0);
     MIREPLAYRAMREADENABLE0 : out std_ulogic;
     MIREPLAYRAMREADENABLE1 : out std_ulogic;
     MIREPLAYRAMWRITEDATA0 : out std_logic_vector(127 downto 0);
     MIREPLAYRAMWRITEDATA1 : out std_logic_vector(127 downto 0);
     MIREPLAYRAMWRITEENABLE0 : out std_ulogic;
     MIREPLAYRAMWRITEENABLE1 : out std_ulogic;
     MIRXCOMPLETIONRAMREADADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMREADADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMREADENABLE0 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMREADENABLE1 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMWRITEADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMWRITEADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMWRITEDATA0 : out std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMWRITEDATA1 : out std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMWRITEENABLE0 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMWRITEENABLE1 : out std_logic_vector(1 downto 0);
     MIRXPOSTEDREQUESTRAMREADADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMREADADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMREADENABLE0 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMREADENABLE1 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMWRITEADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEDATA0 : out std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEDATA1 : out std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEENABLE0 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMWRITEENABLE1 : out std_ulogic;
     PCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     PCIEPERST0B : out std_ulogic;
     PCIEPERST1B : out std_ulogic;
     PCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     PCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     PCIERQSEQNUMVLD0 : out std_ulogic;
     PCIERQSEQNUMVLD1 : out std_ulogic;
     PCIERQTAG0 : out std_logic_vector(7 downto 0);
     PCIERQTAG1 : out std_logic_vector(7 downto 0);
     PCIERQTAGAV : out std_logic_vector(3 downto 0);
     PCIERQTAGVLD0 : out std_ulogic;
     PCIERQTAGVLD1 : out std_ulogic;
     PCIETFCNPDAV : out std_logic_vector(3 downto 0);
     PCIETFCNPHAV : out std_logic_vector(3 downto 0);
     PIPERX00EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX00POLARITY : out std_ulogic;
     PIPERX01EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX01POLARITY : out std_ulogic;
     PIPERX02EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX02POLARITY : out std_ulogic;
     PIPERX03EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX03POLARITY : out std_ulogic;
     PIPERX04EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX04POLARITY : out std_ulogic;
     PIPERX05EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX05POLARITY : out std_ulogic;
     PIPERX06EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX06POLARITY : out std_ulogic;
     PIPERX07EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX07POLARITY : out std_ulogic;
     PIPERX08EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX08POLARITY : out std_ulogic;
     PIPERX09EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX09POLARITY : out std_ulogic;
     PIPERX10EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX10POLARITY : out std_ulogic;
     PIPERX11EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX11POLARITY : out std_ulogic;
     PIPERX12EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX12POLARITY : out std_ulogic;
     PIPERX13EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX13POLARITY : out std_ulogic;
     PIPERX14EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX14POLARITY : out std_ulogic;
     PIPERX15EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX15POLARITY : out std_ulogic;
     PIPERXEQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERXEQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPETX00CHARISK : out std_logic_vector(1 downto 0);
     PIPETX00COMPLIANCE : out std_ulogic;
     PIPETX00DATA : out std_logic_vector(31 downto 0);
     PIPETX00DATAVALID : out std_ulogic;
     PIPETX00ELECIDLE : out std_ulogic;
     PIPETX00EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX00EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX00POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX00STARTBLOCK : out std_ulogic;
     PIPETX00SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX01CHARISK : out std_logic_vector(1 downto 0);
     PIPETX01COMPLIANCE : out std_ulogic;
     PIPETX01DATA : out std_logic_vector(31 downto 0);
     PIPETX01DATAVALID : out std_ulogic;
     PIPETX01ELECIDLE : out std_ulogic;
     PIPETX01EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX01EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX01POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX01STARTBLOCK : out std_ulogic;
     PIPETX01SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX02CHARISK : out std_logic_vector(1 downto 0);
     PIPETX02COMPLIANCE : out std_ulogic;
     PIPETX02DATA : out std_logic_vector(31 downto 0);
     PIPETX02DATAVALID : out std_ulogic;
     PIPETX02ELECIDLE : out std_ulogic;
     PIPETX02EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX02EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX02POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX02STARTBLOCK : out std_ulogic;
     PIPETX02SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX03CHARISK : out std_logic_vector(1 downto 0);
     PIPETX03COMPLIANCE : out std_ulogic;
     PIPETX03DATA : out std_logic_vector(31 downto 0);
     PIPETX03DATAVALID : out std_ulogic;
     PIPETX03ELECIDLE : out std_ulogic;
     PIPETX03EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX03EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX03POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX03STARTBLOCK : out std_ulogic;
     PIPETX03SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX04CHARISK : out std_logic_vector(1 downto 0);
     PIPETX04COMPLIANCE : out std_ulogic;
     PIPETX04DATA : out std_logic_vector(31 downto 0);
     PIPETX04DATAVALID : out std_ulogic;
     PIPETX04ELECIDLE : out std_ulogic;
     PIPETX04EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX04EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX04POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX04STARTBLOCK : out std_ulogic;
     PIPETX04SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX05CHARISK : out std_logic_vector(1 downto 0);
     PIPETX05COMPLIANCE : out std_ulogic;
     PIPETX05DATA : out std_logic_vector(31 downto 0);
     PIPETX05DATAVALID : out std_ulogic;
     PIPETX05ELECIDLE : out std_ulogic;
     PIPETX05EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX05EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX05POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX05STARTBLOCK : out std_ulogic;
     PIPETX05SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX06CHARISK : out std_logic_vector(1 downto 0);
     PIPETX06COMPLIANCE : out std_ulogic;
     PIPETX06DATA : out std_logic_vector(31 downto 0);
     PIPETX06DATAVALID : out std_ulogic;
     PIPETX06ELECIDLE : out std_ulogic;
     PIPETX06EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX06EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX06POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX06STARTBLOCK : out std_ulogic;
     PIPETX06SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX07CHARISK : out std_logic_vector(1 downto 0);
     PIPETX07COMPLIANCE : out std_ulogic;
     PIPETX07DATA : out std_logic_vector(31 downto 0);
     PIPETX07DATAVALID : out std_ulogic;
     PIPETX07ELECIDLE : out std_ulogic;
     PIPETX07EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX07EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX07POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX07STARTBLOCK : out std_ulogic;
     PIPETX07SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX08CHARISK : out std_logic_vector(1 downto 0);
     PIPETX08COMPLIANCE : out std_ulogic;
     PIPETX08DATA : out std_logic_vector(31 downto 0);
     PIPETX08DATAVALID : out std_ulogic;
     PIPETX08ELECIDLE : out std_ulogic;
     PIPETX08EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX08EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX08POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX08STARTBLOCK : out std_ulogic;
     PIPETX08SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX09CHARISK : out std_logic_vector(1 downto 0);
     PIPETX09COMPLIANCE : out std_ulogic;
     PIPETX09DATA : out std_logic_vector(31 downto 0);
     PIPETX09DATAVALID : out std_ulogic;
     PIPETX09ELECIDLE : out std_ulogic;
     PIPETX09EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX09EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX09POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX09STARTBLOCK : out std_ulogic;
     PIPETX09SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX10CHARISK : out std_logic_vector(1 downto 0);
     PIPETX10COMPLIANCE : out std_ulogic;
     PIPETX10DATA : out std_logic_vector(31 downto 0);
     PIPETX10DATAVALID : out std_ulogic;
     PIPETX10ELECIDLE : out std_ulogic;
     PIPETX10EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX10EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX10POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX10STARTBLOCK : out std_ulogic;
     PIPETX10SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX11CHARISK : out std_logic_vector(1 downto 0);
     PIPETX11COMPLIANCE : out std_ulogic;
     PIPETX11DATA : out std_logic_vector(31 downto 0);
     PIPETX11DATAVALID : out std_ulogic;
     PIPETX11ELECIDLE : out std_ulogic;
     PIPETX11EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX11EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX11POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX11STARTBLOCK : out std_ulogic;
     PIPETX11SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX12CHARISK : out std_logic_vector(1 downto 0);
     PIPETX12COMPLIANCE : out std_ulogic;
     PIPETX12DATA : out std_logic_vector(31 downto 0);
     PIPETX12DATAVALID : out std_ulogic;
     PIPETX12ELECIDLE : out std_ulogic;
     PIPETX12EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX12EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX12POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX12STARTBLOCK : out std_ulogic;
     PIPETX12SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX13CHARISK : out std_logic_vector(1 downto 0);
     PIPETX13COMPLIANCE : out std_ulogic;
     PIPETX13DATA : out std_logic_vector(31 downto 0);
     PIPETX13DATAVALID : out std_ulogic;
     PIPETX13ELECIDLE : out std_ulogic;
     PIPETX13EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX13EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX13POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX13STARTBLOCK : out std_ulogic;
     PIPETX13SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX14CHARISK : out std_logic_vector(1 downto 0);
     PIPETX14COMPLIANCE : out std_ulogic;
     PIPETX14DATA : out std_logic_vector(31 downto 0);
     PIPETX14DATAVALID : out std_ulogic;
     PIPETX14ELECIDLE : out std_ulogic;
     PIPETX14EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX14EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX14POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX14STARTBLOCK : out std_ulogic;
     PIPETX14SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX15CHARISK : out std_logic_vector(1 downto 0);
     PIPETX15COMPLIANCE : out std_ulogic;
     PIPETX15DATA : out std_logic_vector(31 downto 0);
     PIPETX15DATAVALID : out std_ulogic;
     PIPETX15ELECIDLE : out std_ulogic;
     PIPETX15EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX15EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX15POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX15STARTBLOCK : out std_ulogic;
     PIPETX15SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETXDEEMPH : out std_ulogic;
     PIPETXMARGIN : out std_logic_vector(2 downto 0);
     PIPETXRATE : out std_logic_vector(1 downto 0);
     PIPETXRCVRDET : out std_ulogic;
     PIPETXRESET : out std_ulogic;
     PIPETXSWING : out std_ulogic;
     PLEQINPROGRESS : out std_ulogic;
     PLEQPHASE : out std_logic_vector(1 downto 0);
     PLGEN34EQMISMATCH : out std_ulogic;
     SAXISCCTREADY : out std_logic_vector(3 downto 0);
     SAXISRQTREADY : out std_logic_vector(3 downto 0);
     USERSPAREOUT : out std_logic_vector(31 downto 0);
     AXIUSERIN : in std_logic_vector(7 downto 0);
     CFGCONFIGSPACEENABLE : in std_ulogic;
     CFGDEVIDPF0 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF1 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF2 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF3 : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGDSPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGERRCORIN : in std_ulogic;
     CFGERRUNCORIN : in std_ulogic;
     CFGEXTREADDATA : in std_logic_vector(31 downto 0);
     CFGEXTREADDATAVALID : in std_ulogic;
     CFGFCSEL : in std_logic_vector(2 downto 0);
     CFGFLRDONE : in std_logic_vector(3 downto 0);
     CFGHOTRESETIN : in std_ulogic;
     CFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     CFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     CFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSISELECT : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     CFGINTERRUPTMSITPHSTTAG : in std_logic_vector(7 downto 0);
     CFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIXINT : in std_ulogic;
     CFGINTERRUPTMSIXVECPENDING : in std_logic_vector(1 downto 0);
     CFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     CFGLINKTRAININGENABLE : in std_ulogic;
     CFGMGMTADDR : in std_logic_vector(9 downto 0);
     CFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     CFGMGMTDEBUGACCESS : in std_ulogic;
     CFGMGMTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     CFGMGMTREAD : in std_ulogic;
     CFGMGMTWRITE : in std_ulogic;
     CFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMIT : in std_ulogic;
     CFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     CFGMSIXRAMREADDATA : in std_logic_vector(35 downto 0);
     CFGPMASPML1ENTRYREJECT : in std_ulogic;
     CFGPMASPMTXL0SENTRYDISABLE : in std_ulogic;
     CFGPOWERSTATECHANGEACK : in std_ulogic;
     CFGREQPMTRANSITIONL23READY : in std_ulogic;
     CFGREVIDPF0 : in std_logic_vector(7 downto 0);
     CFGREVIDPF1 : in std_logic_vector(7 downto 0);
     CFGREVIDPF2 : in std_logic_vector(7 downto 0);
     CFGREVIDPF3 : in std_logic_vector(7 downto 0);
     CFGSUBSYSIDPF0 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF1 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF2 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF3 : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTPHRAMREADDATA : in std_logic_vector(35 downto 0);
     CFGVENDID : in std_logic_vector(15 downto 0);
     CFGVFFLRDONE : in std_ulogic;
     CFGVFFLRFUNCNUM : in std_logic_vector(7 downto 0);
     CONFMCAPREQUESTBYCONF : in std_ulogic;
     CONFREQDATA : in std_logic_vector(31 downto 0);
     CONFREQREGNUM : in std_logic_vector(3 downto 0);
     CONFREQTYPE : in std_logic_vector(1 downto 0);
     CONFREQVALID : in std_ulogic;
     CORECLK : in std_ulogic;
     CORECLKMIREPLAYRAM0 : in std_ulogic;
     CORECLKMIREPLAYRAM1 : in std_ulogic;
     CORECLKMIRXCOMPLETIONRAM0 : in std_ulogic;
     CORECLKMIRXCOMPLETIONRAM1 : in std_ulogic;
     CORECLKMIRXPOSTEDREQUESTRAM0 : in std_ulogic;
     CORECLKMIRXPOSTEDREQUESTRAM1 : in std_ulogic;
     DBGSEL0 : in std_logic_vector(5 downto 0);
     DBGSEL1 : in std_logic_vector(5 downto 0);
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     MAXISCQTREADY : in std_logic_vector(21 downto 0);
     MAXISRCTREADY : in std_logic_vector(21 downto 0);
     MCAPCLK : in std_ulogic;
     MCAPPERST0B : in std_ulogic;
     MCAPPERST1B : in std_ulogic;
     MGMTRESETN : in std_ulogic;
     MGMTSTICKYRESETN : in std_ulogic;
     MIREPLAYRAMERRCOR : in std_logic_vector(5 downto 0);
     MIREPLAYRAMERRUNCOR : in std_logic_vector(5 downto 0);
     MIREPLAYRAMREADDATA0 : in std_logic_vector(127 downto 0);
     MIREPLAYRAMREADDATA1 : in std_logic_vector(127 downto 0);
     MIRXCOMPLETIONRAMERRCOR : in std_logic_vector(11 downto 0);
     MIRXCOMPLETIONRAMERRUNCOR : in std_logic_vector(11 downto 0);
     MIRXCOMPLETIONRAMREADDATA0 : in std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMREADDATA1 : in std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMERRCOR : in std_logic_vector(5 downto 0);
     MIRXPOSTEDREQUESTRAMERRUNCOR : in std_logic_vector(5 downto 0);
     MIRXPOSTEDREQUESTRAMREADDATA0 : in std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMREADDATA1 : in std_logic_vector(143 downto 0);
     PCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     PCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     PCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     PCIECQNPREQ : in std_logic_vector(1 downto 0);
     PCIECQNPUSERCREDITRCVD : in std_ulogic;
     PCIECQPIPELINEEMPTY : in std_ulogic;
     PCIEPOSTEDREQDELIVERED : in std_ulogic;
     PIPECLK : in std_ulogic;
     PIPECLKEN : in std_ulogic;
     PIPEEQFS : in std_logic_vector(5 downto 0);
     PIPEEQLF : in std_logic_vector(5 downto 0);
     PIPERESETN : in std_ulogic;
     PIPERX00CHARISK : in std_logic_vector(1 downto 0);
     PIPERX00DATA : in std_logic_vector(31 downto 0);
     PIPERX00DATAVALID : in std_ulogic;
     PIPERX00ELECIDLE : in std_ulogic;
     PIPERX00EQDONE : in std_ulogic;
     PIPERX00EQLPADAPTDONE : in std_ulogic;
     PIPERX00EQLPLFFSSEL : in std_ulogic;
     PIPERX00EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX00PHYSTATUS : in std_ulogic;
     PIPERX00STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX00STATUS : in std_logic_vector(2 downto 0);
     PIPERX00SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX00VALID : in std_ulogic;
     PIPERX01CHARISK : in std_logic_vector(1 downto 0);
     PIPERX01DATA : in std_logic_vector(31 downto 0);
     PIPERX01DATAVALID : in std_ulogic;
     PIPERX01ELECIDLE : in std_ulogic;
     PIPERX01EQDONE : in std_ulogic;
     PIPERX01EQLPADAPTDONE : in std_ulogic;
     PIPERX01EQLPLFFSSEL : in std_ulogic;
     PIPERX01EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX01PHYSTATUS : in std_ulogic;
     PIPERX01STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX01STATUS : in std_logic_vector(2 downto 0);
     PIPERX01SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX01VALID : in std_ulogic;
     PIPERX02CHARISK : in std_logic_vector(1 downto 0);
     PIPERX02DATA : in std_logic_vector(31 downto 0);
     PIPERX02DATAVALID : in std_ulogic;
     PIPERX02ELECIDLE : in std_ulogic;
     PIPERX02EQDONE : in std_ulogic;
     PIPERX02EQLPADAPTDONE : in std_ulogic;
     PIPERX02EQLPLFFSSEL : in std_ulogic;
     PIPERX02EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX02PHYSTATUS : in std_ulogic;
     PIPERX02STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX02STATUS : in std_logic_vector(2 downto 0);
     PIPERX02SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX02VALID : in std_ulogic;
     PIPERX03CHARISK : in std_logic_vector(1 downto 0);
     PIPERX03DATA : in std_logic_vector(31 downto 0);
     PIPERX03DATAVALID : in std_ulogic;
     PIPERX03ELECIDLE : in std_ulogic;
     PIPERX03EQDONE : in std_ulogic;
     PIPERX03EQLPADAPTDONE : in std_ulogic;
     PIPERX03EQLPLFFSSEL : in std_ulogic;
     PIPERX03EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX03PHYSTATUS : in std_ulogic;
     PIPERX03STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX03STATUS : in std_logic_vector(2 downto 0);
     PIPERX03SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX03VALID : in std_ulogic;
     PIPERX04CHARISK : in std_logic_vector(1 downto 0);
     PIPERX04DATA : in std_logic_vector(31 downto 0);
     PIPERX04DATAVALID : in std_ulogic;
     PIPERX04ELECIDLE : in std_ulogic;
     PIPERX04EQDONE : in std_ulogic;
     PIPERX04EQLPADAPTDONE : in std_ulogic;
     PIPERX04EQLPLFFSSEL : in std_ulogic;
     PIPERX04EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX04PHYSTATUS : in std_ulogic;
     PIPERX04STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX04STATUS : in std_logic_vector(2 downto 0);
     PIPERX04SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX04VALID : in std_ulogic;
     PIPERX05CHARISK : in std_logic_vector(1 downto 0);
     PIPERX05DATA : in std_logic_vector(31 downto 0);
     PIPERX05DATAVALID : in std_ulogic;
     PIPERX05ELECIDLE : in std_ulogic;
     PIPERX05EQDONE : in std_ulogic;
     PIPERX05EQLPADAPTDONE : in std_ulogic;
     PIPERX05EQLPLFFSSEL : in std_ulogic;
     PIPERX05EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX05PHYSTATUS : in std_ulogic;
     PIPERX05STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX05STATUS : in std_logic_vector(2 downto 0);
     PIPERX05SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX05VALID : in std_ulogic;
     PIPERX06CHARISK : in std_logic_vector(1 downto 0);
     PIPERX06DATA : in std_logic_vector(31 downto 0);
     PIPERX06DATAVALID : in std_ulogic;
     PIPERX06ELECIDLE : in std_ulogic;
     PIPERX06EQDONE : in std_ulogic;
     PIPERX06EQLPADAPTDONE : in std_ulogic;
     PIPERX06EQLPLFFSSEL : in std_ulogic;
     PIPERX06EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX06PHYSTATUS : in std_ulogic;
     PIPERX06STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX06STATUS : in std_logic_vector(2 downto 0);
     PIPERX06SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX06VALID : in std_ulogic;
     PIPERX07CHARISK : in std_logic_vector(1 downto 0);
     PIPERX07DATA : in std_logic_vector(31 downto 0);
     PIPERX07DATAVALID : in std_ulogic;
     PIPERX07ELECIDLE : in std_ulogic;
     PIPERX07EQDONE : in std_ulogic;
     PIPERX07EQLPADAPTDONE : in std_ulogic;
     PIPERX07EQLPLFFSSEL : in std_ulogic;
     PIPERX07EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX07PHYSTATUS : in std_ulogic;
     PIPERX07STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX07STATUS : in std_logic_vector(2 downto 0);
     PIPERX07SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX07VALID : in std_ulogic;
     PIPERX08CHARISK : in std_logic_vector(1 downto 0);
     PIPERX08DATA : in std_logic_vector(31 downto 0);
     PIPERX08DATAVALID : in std_ulogic;
     PIPERX08ELECIDLE : in std_ulogic;
     PIPERX08EQDONE : in std_ulogic;
     PIPERX08EQLPADAPTDONE : in std_ulogic;
     PIPERX08EQLPLFFSSEL : in std_ulogic;
     PIPERX08EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX08PHYSTATUS : in std_ulogic;
     PIPERX08STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX08STATUS : in std_logic_vector(2 downto 0);
     PIPERX08SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX08VALID : in std_ulogic;
     PIPERX09CHARISK : in std_logic_vector(1 downto 0);
     PIPERX09DATA : in std_logic_vector(31 downto 0);
     PIPERX09DATAVALID : in std_ulogic;
     PIPERX09ELECIDLE : in std_ulogic;
     PIPERX09EQDONE : in std_ulogic;
     PIPERX09EQLPADAPTDONE : in std_ulogic;
     PIPERX09EQLPLFFSSEL : in std_ulogic;
     PIPERX09EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX09PHYSTATUS : in std_ulogic;
     PIPERX09STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX09STATUS : in std_logic_vector(2 downto 0);
     PIPERX09SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX09VALID : in std_ulogic;
     PIPERX10CHARISK : in std_logic_vector(1 downto 0);
     PIPERX10DATA : in std_logic_vector(31 downto 0);
     PIPERX10DATAVALID : in std_ulogic;
     PIPERX10ELECIDLE : in std_ulogic;
     PIPERX10EQDONE : in std_ulogic;
     PIPERX10EQLPADAPTDONE : in std_ulogic;
     PIPERX10EQLPLFFSSEL : in std_ulogic;
     PIPERX10EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX10PHYSTATUS : in std_ulogic;
     PIPERX10STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX10STATUS : in std_logic_vector(2 downto 0);
     PIPERX10SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX10VALID : in std_ulogic;
     PIPERX11CHARISK : in std_logic_vector(1 downto 0);
     PIPERX11DATA : in std_logic_vector(31 downto 0);
     PIPERX11DATAVALID : in std_ulogic;
     PIPERX11ELECIDLE : in std_ulogic;
     PIPERX11EQDONE : in std_ulogic;
     PIPERX11EQLPADAPTDONE : in std_ulogic;
     PIPERX11EQLPLFFSSEL : in std_ulogic;
     PIPERX11EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX11PHYSTATUS : in std_ulogic;
     PIPERX11STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX11STATUS : in std_logic_vector(2 downto 0);
     PIPERX11SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX11VALID : in std_ulogic;
     PIPERX12CHARISK : in std_logic_vector(1 downto 0);
     PIPERX12DATA : in std_logic_vector(31 downto 0);
     PIPERX12DATAVALID : in std_ulogic;
     PIPERX12ELECIDLE : in std_ulogic;
     PIPERX12EQDONE : in std_ulogic;
     PIPERX12EQLPADAPTDONE : in std_ulogic;
     PIPERX12EQLPLFFSSEL : in std_ulogic;
     PIPERX12EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX12PHYSTATUS : in std_ulogic;
     PIPERX12STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX12STATUS : in std_logic_vector(2 downto 0);
     PIPERX12SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX12VALID : in std_ulogic;
     PIPERX13CHARISK : in std_logic_vector(1 downto 0);
     PIPERX13DATA : in std_logic_vector(31 downto 0);
     PIPERX13DATAVALID : in std_ulogic;
     PIPERX13ELECIDLE : in std_ulogic;
     PIPERX13EQDONE : in std_ulogic;
     PIPERX13EQLPADAPTDONE : in std_ulogic;
     PIPERX13EQLPLFFSSEL : in std_ulogic;
     PIPERX13EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX13PHYSTATUS : in std_ulogic;
     PIPERX13STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX13STATUS : in std_logic_vector(2 downto 0);
     PIPERX13SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX13VALID : in std_ulogic;
     PIPERX14CHARISK : in std_logic_vector(1 downto 0);
     PIPERX14DATA : in std_logic_vector(31 downto 0);
     PIPERX14DATAVALID : in std_ulogic;
     PIPERX14ELECIDLE : in std_ulogic;
     PIPERX14EQDONE : in std_ulogic;
     PIPERX14EQLPADAPTDONE : in std_ulogic;
     PIPERX14EQLPLFFSSEL : in std_ulogic;
     PIPERX14EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX14PHYSTATUS : in std_ulogic;
     PIPERX14STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX14STATUS : in std_logic_vector(2 downto 0);
     PIPERX14SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX14VALID : in std_ulogic;
     PIPERX15CHARISK : in std_logic_vector(1 downto 0);
     PIPERX15DATA : in std_logic_vector(31 downto 0);
     PIPERX15DATAVALID : in std_ulogic;
     PIPERX15ELECIDLE : in std_ulogic;
     PIPERX15EQDONE : in std_ulogic;
     PIPERX15EQLPADAPTDONE : in std_ulogic;
     PIPERX15EQLPLFFSSEL : in std_ulogic;
     PIPERX15EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX15PHYSTATUS : in std_ulogic;
     PIPERX15STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX15STATUS : in std_logic_vector(2 downto 0);
     PIPERX15SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX15VALID : in std_ulogic;
     PIPETX00EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX00EQDONE : in std_ulogic;
     PIPETX01EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX01EQDONE : in std_ulogic;
     PIPETX02EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX02EQDONE : in std_ulogic;
     PIPETX03EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX03EQDONE : in std_ulogic;
     PIPETX04EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX04EQDONE : in std_ulogic;
     PIPETX05EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX05EQDONE : in std_ulogic;
     PIPETX06EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX06EQDONE : in std_ulogic;
     PIPETX07EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX07EQDONE : in std_ulogic;
     PIPETX08EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX08EQDONE : in std_ulogic;
     PIPETX09EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX09EQDONE : in std_ulogic;
     PIPETX10EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX10EQDONE : in std_ulogic;
     PIPETX11EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX11EQDONE : in std_ulogic;
     PIPETX12EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX12EQDONE : in std_ulogic;
     PIPETX13EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX13EQDONE : in std_ulogic;
     PIPETX14EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX14EQDONE : in std_ulogic;
     PIPETX15EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX15EQDONE : in std_ulogic;
     PLEQRESETEIEOSCOUNT : in std_ulogic;
     PLGEN2UPSTREAMPREFERDEEMPH : in std_ulogic;
     PLGEN34REDOEQSPEED : in std_ulogic;
     PLGEN34REDOEQUALIZATION : in std_ulogic;
     RESETN : in std_ulogic;
     SAXISCCTDATA : in std_logic_vector(255 downto 0);
     SAXISCCTKEEP : in std_logic_vector(7 downto 0);
     SAXISCCTLAST : in std_ulogic;
     SAXISCCTUSER : in std_logic_vector(32 downto 0);
     SAXISCCTVALID : in std_ulogic;
     SAXISRQTDATA : in std_logic_vector(255 downto 0);
     SAXISRQTKEEP : in std_logic_vector(7 downto 0);
     SAXISRQTLAST : in std_ulogic;
     SAXISRQTUSER : in std_logic_vector(61 downto 0);
     SAXISRQTVALID : in std_ulogic;
     USERCLK : in std_ulogic;
     USERCLK2 : in std_ulogic;
     USERCLKEN : in std_ulogic;
     USERSPAREIN : in std_logic_vector(31 downto 0)
  );
end component;
attribute BOX_TYPE of
  PCIE40E4 : component is "PRIMITIVE";

----- component PCIE40E5 -----
component PCIE40E5
  generic (
     AER_CAP_PERMIT_ROOTERR_UPDATE : string := "FALSE";
     ARI_CAP_ENABLE : string := "FALSE";
     AUTO_FLR_RESPONSE : string := "FALSE";
     AXISTEN_IF_CCIX_RX_CREDIT_LIMIT : std_logic_vector(7 downto 0) := X"08";
     AXISTEN_IF_CCIX_TX_CREDIT_LIMIT : std_logic_vector(5 downto 0) := "00" & X"8";
     AXISTEN_IF_CCIX_TX_REGISTERED_TREADY : string := "FALSE";
     AXISTEN_IF_CC_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_COMPL_TIMEOUT_REG0 : std_logic_vector(23 downto 0) := X"BEBC20";
     AXISTEN_IF_COMPL_TIMEOUT_REG1 : std_logic_vector(27 downto 0) := X"2FAF080";
     AXISTEN_IF_CQ_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_CQ_EN_POISONED_MEM_WR : string := "FALSE";
     AXISTEN_IF_CQ_POISON_DISCARD_DISABLE : string := "FALSE";
     AXISTEN_IF_ENABLE_10B_TAGS : string := "FALSE";
     AXISTEN_IF_ENABLE_256_TAGS : string := "FALSE";
     AXISTEN_IF_ENABLE_CLIENT_TAG : string := "FALSE";
     AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE : string := "FALSE";
     AXISTEN_IF_ENABLE_MESSAGE_RID_CHECK : string := "TRUE";
     AXISTEN_IF_ENABLE_MSG_ROUTE : std_logic_vector(17 downto 0) := "00" & X"0000";
     AXISTEN_IF_ENABLE_RX_MSG_INTFC : string := "FALSE";
     AXISTEN_IF_ENABLE_RX_TAG_SCALING : string := "FALSE";
     AXISTEN_IF_ENABLE_TX_TAG_SCALING : string := "FALSE";
     AXISTEN_IF_EXTEND_CPL_TIMEOUT : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_EXT_512 : string := "FALSE";
     AXISTEN_IF_EXT_512_CC_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_CQ_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_RQ_STRADDLE : string := "FALSE";
     AXISTEN_IF_INTERNAL_MSIX_VECTORS_PER_FUNCTION : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_LEGACY_MODE_ENABLE : string := "FALSE";
     AXISTEN_IF_MSIX_FROM_RAM_PIPELINE : string := "FALSE";
     AXISTEN_IF_MSIX_RX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_MSIX_TO_RAM_PIPELINE : string := "FALSE";
     AXISTEN_IF_PASID_UR_CHECK_DISABLE : string := "FALSE";
     AXISTEN_IF_RC_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_RQ_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_RQ_CC_REGISTERED_TREADY : string := "FALSE";
     AXISTEN_IF_RX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_SIM_SHORT_CPL_TIMEOUT : string := "FALSE";
     AXISTEN_IF_TX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_WIDTH : std_logic_vector(1 downto 0) := "10";
     AXISTEN_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     CCIX_CFG_MGMT_MUX_ENABLE : string := "FALSE";
     CCIX_DIRECT_ATTACH_MODE : string := "FALSE";
     CCIX_ENABLE : string := "FALSE";
     CCIX_OPT_TLP_GEN_AND_RECEPT_EN_CONTROL_INTERNAL : string := "FALSE";
     CCIX_PDVSEC_CPL_TIMEOUT : std_logic_vector(16 downto 0) := "0" & X"0000";
     CCIX_PROTOCOL_PF0_DVSEC_ENABLE : string := "FALSE";
     CCIX_PROTOCOL_PF1_DVSEC_ENABLE : string := "FALSE";
     CCIX_TRANSPORT_PF0_DVSEC_ENABLE : string := "FALSE";
     CCIX_TX_CREDIT_CHECK_DISABLE : string := "FALSE";
     CCIX_VENDOR_ID : std_logic_vector(15 downto 0) := X"0000";
     CFG_BYPASS_MODE_ENABLE : string := "FALSE";
     CFG_PRIVATE_SPC : string := "FALSE";
     CFG_SPEC_4_0 : string := "FALSE";
     CRM_CORE_CLK_FREQ : std_logic_vector(4 downto 0) := "0" & X"2";
     CRM_USER_CLK_FREQ : std_logic_vector(2 downto 0) := "010";
     DEBUG_AXI4ST_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_AXIST_DISABLE_FEATURE_BIT : std_logic_vector(7 downto 0) := X"00";
     DEBUG_CAR_SPARE : std_logic_vector(3 downto 0) := X"0";
     DEBUG_CFG_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_LL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_NO_STICKY_RESET : string := "FALSE";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_DEFRAMER_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_PARITY_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_REC_ENTRY_ON_DYNAMIC_DSKEW_FAIL : string := "FALSE";
     DEBUG_PL_DISABLE_REC_ENTRY_ON_RX_BUFFER_UNDER_OVER_FLOW : string := "FALSE";
     DEBUG_PL_DISABLE_SCRAMBLING : string := "FALSE";
     DEBUG_PL_SIM_RESET_LFSR : string := "FALSE";
     DEBUG_PL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_TL_DISABLE_FC_TIMEOUT : string := "FALSE";
     DEBUG_TL_DISABLE_RX_TLP_ORDER_CHECKS : string := "FALSE";
     DEBUG_TL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DELAYED_FLR : string := "FALSE";
     DNSTREAM_LINK_NUM : std_logic_vector(7 downto 0) := X"00";
     DSN_CAP_ENABLE : string := "FALSE";
     EXTENDED_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     HEADER_TYPE_OVERRIDE : string := "FALSE";
     IS_SWITCH_PORT : string := "FALSE";
     LEGACY_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     LINK_CONTROL2_SELECTABLE_DEEMPH : string := "FALSE";
     LL_ACK_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_DISABLE_SCHED_TX_NAK : string := "FALSE";
     LL_FEATURE_EN_DLLP_EXCHANGE : string := "FALSE";
     LL_FEATURE_EN_FC_SCALING : string := "FALSE";
     LL_FEATURE_EN_FC_SCALING_SCALE_FACTOR_4 : string := "FALSE";
     LL_REPLAY_FROM_RAM_PIPELINE : string := "FALSE";
     LL_REPLAY_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LL_REPLAY_TIMER40_ENABLE : string := "FALSE";
     LL_REPLAY_TO_RAM_PIPELINE : string := "FALSE";
     LL_RX_TLP_PARITY_GEN : string := "TRUE";
     LL_TX_PARITY_CHECK_CHANGE_DISABLE : string := "FALSE";
     LL_TX_STALL_ON_ASPM_L1_ENTRY_DISABLE : string := "FALSE";
     LL_TX_STALL_ON_PPM_L1_ENTRY_DISABLE : string := "FALSE";
     LL_TX_TLP_PARITY_CHK : string := "TRUE";
     LL_UFC_ARBITER_ENABLE : string := "TRUE";
     LL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     LTR_TX_MESSAGE_MINIMUM_INTERVAL : std_logic_vector(9 downto 0) := "10" & X"50";
     LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE : string := "FALSE";
     LTR_TX_MESSAGE_ON_LTR_ENABLE : string := "FALSE";
     MCAP_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     MCAP_CFG_SLAVE_BLOCK : string := "FALSE";
     MCAP_CONFIGURE_OVERRIDE : string := "FALSE";
     MCAP_ENABLE : string := "FALSE";
     MCAP_EOS_DESIGN_SWITCH : string := "FALSE";
     MCAP_FPGA_BITSTREAM_VERSION : std_logic_vector(31 downto 0) := X"00000000";
     MCAP_GATE_IO_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_GATE_MEM_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INPUT_GATE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_EOS : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_ERROR : string := "FALSE";
     MCAP_VSEC_ID : std_logic_vector(15 downto 0) := X"0000";
     MCAP_VSEC_LEN : std_logic_vector(11 downto 0) := X"02C";
     MCAP_VSEC_REV : std_logic_vector(3 downto 0) := X"0";
     PF0_AER_CAP_ECRC_GEN_AND_CHECK_CAPABLE : string := "FALSE";
     PF0_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF0_ARI_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ATS_CAP_ON : string := "FALSE";
     PF0_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF0_CCIX_ESM_QUICK_EQ_TIMEOUT : std_logic_vector(2 downto 0) := "000";
     PF0_CCIX_PDVSEC_CAP_ID : std_logic_vector(15 downto 0) := X"0023";
     PF0_CCIX_PDVSEC_CAP_LENGTH : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_PDVSEC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_PDVSEC_CAP_REVISION : std_logic_vector(3 downto 0) := X"0";
     PF0_CCIX_PDVSEC_CAP_VENDOR_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_CCIX_PDVSEC_PCR_SIZE : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_PDVSEC_PCR_START_ADDR : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_PDVSEC_PCSR_SIZE : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_PDVSEC_PCSR_START_ADDR : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_TDVSEC_CAP_ID : std_logic_vector(15 downto 0) := X"0023";
     PF0_CCIX_TDVSEC_CAP_LENGTH : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_TDVSEC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_CCIX_TDVSEC_CAP_REVISION : std_logic_vector(3 downto 0) := X"0";
     PF0_CCIX_TDVSEC_CAP_VENDOR_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_CCIX_TDVSEC_CCIX_VC_BYTE_OFFSET : std_logic_vector(6 downto 0) := "001" & X"C";
     PF0_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF0_DEV_CAP2_10B_TAG_COMPLETER_SUPPORTED : string := "FALSE";
     PF0_DEV_CAP2_10B_TAG_REQUESTER_SUPPORTED : string := "FALSE";
     PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_ARI_FORWARD_ENABLE : string := "FALSE";
     PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE : string := "TRUE";
     PF0_DEV_CAP2_LTR_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_OBFF_SUPPORT : std_logic_vector(1 downto 0) := "00";
     PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT : string := "FALSE";
     PF0_DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     PF0_DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     PF0_DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "TRUE";
     PF0_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF0_DEV_CONTROL2_PERMIT_IDO_CPL_EN : string := "FALSE";
     PF0_DEV_CONTROL2_PERMIT_IDO_REQ_EN : string := "FALSE";
     PF0_DLL_FEATURE_CAP_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_DLL_FEATURE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_DLL_FEATURE_CAP_ON : string := "FALSE";
     PF0_DLL_FEATURE_CAP_VER : std_logic_vector(3 downto 0) := X"0";
     PF0_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF0_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF0_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF0_LINK_CAP_ASPM_SUPPORT : integer := 0;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN4 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN4 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN4 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN4 : integer := 7;
     PF0_LINK_CONTROL_RCB : bit := '0';
     PF0_LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     PF0_LTR_CAP_MAX_NOSNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_MAX_SNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_LTR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_MARGINING_CAP_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_MARGINING_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_MARGINING_CAP_ON : string := "FALSE";
     PF0_MARGINING_CAP_VER : std_logic_vector(3 downto 0) := X"0";
     PF0_MARGINING_USES_DRVR_SW : string := "FALSE";
     PF0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSIX_CAP_PBA_BIR : integer := 0;
     PF0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF0_MSIX_CAP_TABLE_BIR : integer := 0;
     PF0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_MSIX_VECTOR_COUNT : std_logic_vector(5 downto 0) := "00" & X"4";
     PF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF0_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF0_PASID_CAP_EXEC_PERM_SUPP : bit := '0';
     PF0_PASID_CAP_MAX_PASID_WIDTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_PASID_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_PASID_CAP_ON : bit := '0';
     PF0_PASID_CAP_PRIVIL_MODE_SUPP : bit := '0';
     PF0_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PL16_CAP_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_PL16_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_PL16_CAP_ON : string := "FALSE";
     PF0_PL16_CAP_VER : std_logic_vector(3 downto 0) := X"0";
     PF0_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF0_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PM_CAP_PMESUPPORT_D0 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D1 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3COLD : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3HOT : string := "TRUE";
     PF0_PM_CAP_SUPP_D1_STATE : string := "TRUE";
     PF0_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF0_PM_CSR_NOSOFTRESET : string := "TRUE";
     PF0_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_PRI_CAP_ON : string := "FALSE";
     PF0_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF0_SECONDARY_PCIE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF0_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF0_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF0_TPHR_CAP_ENABLE : string := "FALSE";
     PF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF0_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF0_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_VC_ARB_CAPABILITY : std_logic_vector(3 downto 0) := X"0";
     PF0_VC_ARB_TBL_OFFSET : std_logic_vector(7 downto 0) := X"00";
     PF0_VC_CAP_ENABLE : string := "FALSE";
     PF0_VC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_VC_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_VC_EXTENDED_COUNT : string := "FALSE";
     PF0_VC_LOW_PRIORITY_EXTENDED_COUNT : string := "FALSE";
     PF1_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF1_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ATS_CAP_ON : string := "FALSE";
     PF1_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF1_CCIX_PDVSEC_CAP_ID : std_logic_vector(15 downto 0) := X"0023";
     PF1_CCIX_PDVSEC_CAP_LENGTH : std_logic_vector(11 downto 0) := X"000";
     PF1_CCIX_PDVSEC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_CCIX_PDVSEC_CAP_REVISION : std_logic_vector(3 downto 0) := X"0";
     PF1_CCIX_PDVSEC_CAP_VENDOR_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_CCIX_PDVSEC_PCR_SIZE : std_logic_vector(11 downto 0) := X"000";
     PF1_CCIX_PDVSEC_PCR_START_ADDR : std_logic_vector(11 downto 0) := X"000";
     PF1_CCIX_PDVSEC_PCSR_SIZE : std_logic_vector(11 downto 0) := X"000";
     PF1_CCIX_PDVSEC_PCSR_START_ADDR : std_logic_vector(11 downto 0) := X"000";
     PF1_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF1_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF1_DLL_FEATURE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF1_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF1_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSIX_CAP_PBA_BIR : integer := 0;
     PF1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF1_MSIX_CAP_TABLE_BIR : integer := 0;
     PF1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF1_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF1_PASID_CAP_EXEC_PERM_SUPP : bit := '0';
     PF1_PASID_CAP_MAX_PASID_WIDTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_PASID_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_PASID_CAP_PRIVIL_MODE_SUPP : bit := '0';
     PF1_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_PRI_CAP_ON : string := "FALSE";
     PF1_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF1_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF1_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF1_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF2_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF2_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ATS_CAP_ON : string := "FALSE";
     PF2_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF2_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF2_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF2_DLL_FEATURE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF2_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF2_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSIX_CAP_PBA_BIR : integer := 0;
     PF2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF2_MSIX_CAP_TABLE_BIR : integer := 0;
     PF2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF2_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF2_PASID_CAP_EXEC_PERM_SUPP : bit := '0';
     PF2_PASID_CAP_MAX_PASID_WIDTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_PASID_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_PASID_CAP_PRIVIL_MODE_SUPP : bit := '0';
     PF2_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_PRI_CAP_ON : string := "FALSE";
     PF2_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF2_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF2_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF2_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF3_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF3_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ATS_CAP_ON : string := "FALSE";
     PF3_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF3_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF3_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF3_DLL_FEATURE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF3_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF3_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSIX_CAP_PBA_BIR : integer := 0;
     PF3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF3_MSIX_CAP_TABLE_BIR : integer := 0;
     PF3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF3_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF3_PASID_CAP_EXEC_PERM_SUPP : bit := '0';
     PF3_PASID_CAP_MAX_PASID_WIDTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_PASID_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_PASID_CAP_PRIVIL_MODE_SUPP : bit := '0';
     PF3_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_PRI_CAP_ON : string := "FALSE";
     PF3_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF3_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF3_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF3_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PL_CCIX_ESM_CALIBRATION_TIMEOUT : std_logic_vector(2 downto 0) := "000";
     PL_CCIX_ESM_EXTENDED_EQ_TIMEOUT : std_logic_vector(2 downto 0) := "000";
     PL_CFG_STATE_ROBUSTNESS_ENABLE : string := "TRUE";
     PL_CTRL_SKP_GEN_ENABLE : string := "TRUE";
     PL_CTRL_SKP_PARITY_AND_CRC_CHECK_DISABLE : string := "FALSE";
     PL_DEEMPH_SOURCE_SELECT : string := "TRUE";
     PL_DESKEW_ON_SKIP_IN_GEN12 : string := "FALSE";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN3 : string := "FALSE";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN4 : string := "FALSE";
     PL_DISABLE_AUTO_SPEED_CHANGE_TO_GEN2 : string := "FALSE";
     PL_DISABLE_DC_BALANCE : string := "FALSE";
     PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     PL_DISABLE_LANE_REVERSAL : string := "FALSE";
     PL_DISABLE_LFSR_UPDATE_ON_SKP : std_logic_vector(1 downto 0) := "00";
     PL_DISABLE_RETRAIN_ON_EB_ERROR : string := "FALSE";
     PL_DISABLE_RETRAIN_ON_FRAMING_ERROR : string := "FALSE";
     PL_DISABLE_RETRAIN_ON_SPECIFIC_FRAMING_ERROR : std_logic_vector(15 downto 0) := X"0000";
     PL_DISABLE_UPCONFIG_CAPABLE : string := "FALSE";
     PL_ENABLE_CCIX_EDR : string := "FALSE";
     PL_ENABLE_CCIX_EDR_REACH_MODE : std_logic_vector(1 downto 0) := "00";
     PL_EQ_ADAPT_DISABLE_COEFF_CHECK : std_logic_vector(1 downto 0) := "00";
     PL_EQ_ADAPT_DISABLE_PRESET_CHECK : std_logic_vector(1 downto 0) := "00";
     PL_EQ_ADAPT_ITER_COUNT : std_logic_vector(4 downto 0) := "0" & X"2";
     PL_EQ_ADAPT_REJECT_RETRY_COUNT : std_logic_vector(1 downto 0) := "01";
     PL_EQ_BYPASS_PHASE23 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_DEFAULT_CCIX_EDR_TX_PRESET : std_logic_vector(15 downto 0) := X"0044";
     PL_EQ_DEFAULT_RX_PRESET_HINT : std_logic_vector(5 downto 0) := "11" & X"3";
     PL_EQ_DEFAULT_TX_PRESET : std_logic_vector(15 downto 0) := X"0044";
     PL_EQ_DISABLE_MISMATCH_CHECK : string := "TRUE";
     PL_EQ_FS : std_logic_vector(5 downto 0) := "10" & X"8";
     PL_EQ_LF : std_logic_vector(5 downto 0) := "00" & X"C";
     PL_EQ_LP_TXPRESET : std_logic_vector(15 downto 0) := X"4444";
     PL_EQ_LP_TXPRESET2 : std_logic_vector(15 downto 0) := X"4444";
     PL_EQ_RX_ADAPTATION_MODE : std_logic_vector(2 downto 0) := "001";
     PL_EQ_RX_ADAPT_EQ_PHASE0 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_RX_ADAPT_EQ_PHASE1 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_RX_ADAPT_SIM_ENABLE : string := "FALSE";
     PL_EQ_RX_ADAPT_TIMER : std_logic_vector(21 downto 0) := "01" & X"E8480";
     PL_EQ_RX_ADAPT_TIMER_SIM : std_logic_vector(21 downto 0) := "00" & X"003E8";
     PL_EQ_RX_ADV_EQ_PER_DATA_RATE_ENABLE : std_logic_vector(3 downto 0) := X"C";
     PL_EQ_SHORT_ADAPT_PHASE : string := "FALSE";
     PL_EQ_TX_8G_EQ_TS2_ENABLE : string := "TRUE";
     PL_EQ_TX_MAINCUR_0 : std_logic_vector(6 downto 0) := "011" & X"A";
     PL_EQ_TX_MAINCUR_1 : std_logic_vector(6 downto 0) := "100" & X"0";
     PL_EQ_TX_MAINCUR_2 : std_logic_vector(6 downto 0) := "011" & X"E";
     PL_EQ_TX_MAINCUR_3 : std_logic_vector(6 downto 0) := "100" & X"4";
     PL_EQ_TX_MAINCUR_4 : std_logic_vector(6 downto 0) := "101" & X"0";
     PL_EQ_TX_MAINCUR_5 : std_logic_vector(6 downto 0) := "100" & X"8";
     PL_EQ_TX_MAINCUR_6 : std_logic_vector(6 downto 0) := "100" & X"6";
     PL_EQ_TX_MAINCUR_7 : std_logic_vector(6 downto 0) := "011" & X"6";
     PL_EQ_TX_MAINCUR_8 : std_logic_vector(6 downto 0) := "011" & X"C";
     PL_EQ_TX_MAINCUR_9 : std_logic_vector(6 downto 0) := "100" & X"2";
     PL_EQ_TX_MAINCUR_A : std_logic_vector(6 downto 0) := "011" & X"6";
     PL_EQ_TX_MAINCUR_B : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_EQ_TX_MAINCUR_C : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_EQ_TX_MAINCUR_D : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_EQ_TX_MAINCUR_E : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_EQ_TX_MAINCUR_F : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_EQ_TX_POSTCUR_0 : std_logic_vector(5 downto 0) := "01" & X"6";
     PL_EQ_TX_POSTCUR_1 : std_logic_vector(5 downto 0) := "01" & X"0";
     PL_EQ_TX_POSTCUR_2 : std_logic_vector(5 downto 0) := "01" & X"2";
     PL_EQ_TX_POSTCUR_3 : std_logic_vector(5 downto 0) := "00" & X"C";
     PL_EQ_TX_POSTCUR_4 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_5 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_6 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_7 : std_logic_vector(5 downto 0) := "01" & X"0";
     PL_EQ_TX_POSTCUR_8 : std_logic_vector(5 downto 0) := "00" & X"A";
     PL_EQ_TX_POSTCUR_9 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_A : std_logic_vector(5 downto 0) := "01" & X"A";
     PL_EQ_TX_POSTCUR_B : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_C : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_D : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_E : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_POSTCUR_F : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_0 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_1 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_2 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_3 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_4 : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_5 : std_logic_vector(5 downto 0) := "00" & X"8";
     PL_EQ_TX_PRECUR_6 : std_logic_vector(5 downto 0) := "00" & X"A";
     PL_EQ_TX_PRECUR_7 : std_logic_vector(5 downto 0) := "00" & X"A";
     PL_EQ_TX_PRECUR_8 : std_logic_vector(5 downto 0) := "00" & X"A";
     PL_EQ_TX_PRECUR_9 : std_logic_vector(5 downto 0) := "00" & X"E";
     PL_EQ_TX_PRECUR_A : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_B : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_C : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_D : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_E : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EQ_TX_PRECUR_F : std_logic_vector(5 downto 0) := "00" & X"0";
     PL_EXIT_LOOPBACK_ON_EI_ENTRY : string := "TRUE";
     PL_INFER_EI_DISABLE_LPBK_ACTIVE : string := "FALSE";
     PL_INFER_EI_DISABLE_REC_RC : string := "FALSE";
     PL_INFER_EI_DISABLE_REC_SPD : string := "FALSE";
     PL_LANE0_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE0_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE10_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE11_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE12_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE13_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE14_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE15_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE1_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE1_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE2_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE2_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE3_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE3_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE4_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE4_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE5_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE5_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE6_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE6_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE7_CCIX_EDR_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE7_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE8_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LANE9_EQ_CONTROL : std_logic_vector(31 downto 0) := X"35353535";
     PL_LINK_CAP_MAX_LINK_SPEED : std_logic_vector(3 downto 0) := X"4";
     PL_LINK_CAP_MAX_LINK_WIDTH : std_logic_vector(4 downto 0) := "0" & X"8";
     PL_N_FTS : integer := 255;
     PL_QUIESCE_GUARANTEE_DISABLE : string := "TRUE";
     PL_RECALIBRATION_NEEDED_ON_ESM_RATE01_PROGRAMMING_CHANGE : string := "FALSE";
     PL_REDO_EQ_SOURCE_SELECT : string := "TRUE";
     PL_REPORT_ALL_PHY_ERRORS : std_logic_vector(7 downto 0) := X"00";
     PL_RETIMER_PRESENCE_DETECTION_SUPPORTED : string := "TRUE";
     PL_RX_ADAPT_TIMER_CLWS_CLOBBER_TX_TS : std_logic_vector(1 downto 0) := "00";
     PL_RX_ADAPT_TIMER_CLWS_GEN3 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_CLWS_GEN4 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_TS : std_logic_vector(1 downto 0) := "11";
     PL_RX_ADAPT_TIMER_RRL_GEN3 : std_logic_vector(3 downto 0) := X"1";
     PL_RX_ADAPT_TIMER_RRL_GEN4 : std_logic_vector(3 downto 0) := X"1";
     PL_RX_L0S_EXIT_TO_RECOVERY : std_logic_vector(1 downto 0) := "00";
     PL_SELF_TRAIN : string := "FALSE";
     PL_SIM_FAST_LINK_TRAINING : std_logic_vector(1 downto 0) := "00";
     PL_SRIS_ENABLE : string := "FALSE";
     PL_SRIS_SKPOS_GEN_SPD_VEC : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_SRIS_SKPOS_REC_SPD_VEC : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_TWO_RETIMER_PRESENCE_DETECTION_SUPPORTED : string := "FALSE";
     PL_UPSTREAM_FACING : string := "TRUE";
     PL_USER_SPARE : std_logic_vector(15 downto 0) := X"0013";
     PL_USER_SPARE2 : std_logic_vector(15 downto 0) := X"0000";
     PL_USER_SPARE3 : std_logic_vector(31 downto 0) := X"00000000";
     PM_ASPML0S_TIMEOUT : std_logic_vector(15 downto 0) := X"1500";
     PM_ASPML1_ENTRY_DELAY : std_logic_vector(19 downto 0) := X"003E8";
     PM_ENABLE_L23_ENTRY : string := "FALSE";
     PM_ENABLE_SLOT_POWER_CAPTURE : string := "TRUE";
     PM_L1_REENTRY_DELAY : std_logic_vector(31 downto 0) := X"00000100";
     PM_PME_TURNOFF_ACK_DELAY : std_logic_vector(15 downto 0) := X"0100";
     ROOT_CAP_CRS_SW_VISIBILITY : string := "FALSE";
     SIM_DEVICE : string := "EVEREST";
     SPARE_BIT0 : string := "FALSE";
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : string := "FALSE";
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE1 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE2 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE3 : std_logic_vector(7 downto 0) := X"00";
     SPARE_WORD0 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD1 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD2 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD3 : std_logic_vector(31 downto 0) := X"00000000";
     SRIOV_CAP_ENABLE : std_logic_vector(3 downto 0) := X"0";
     TL2CFG_IF_PARITY_CHK : string := "TRUE";
     TL_COMPLETION_RAM_NUM_TLPS : std_logic_vector(1 downto 0) := "00";
     TL_COMPLETION_RAM_SIZE : std_logic_vector(1 downto 0) := "01";
     TL_CREDITS_CD : std_logic_vector(11 downto 0) := X"000";
     TL_CREDITS_CD_VC1 : std_logic_vector(11 downto 0) := X"000";
     TL_CREDITS_CH : std_logic_vector(7 downto 0) := X"00";
     TL_CREDITS_CH_VC1 : std_logic_vector(7 downto 0) := X"00";
     TL_CREDITS_NPD : std_logic_vector(11 downto 0) := X"040";
     TL_CREDITS_NPD_VC1 : std_logic_vector(11 downto 0) := X"000";
     TL_CREDITS_NPH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_NPH_VC1 : std_logic_vector(7 downto 0) := X"01";
     TL_CREDITS_PD : std_logic_vector(11 downto 0) := X"3E0";
     TL_CREDITS_PD_VC1 : std_logic_vector(11 downto 0) := X"3E0";
     TL_CREDITS_PH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_PH_VC1 : std_logic_vector(7 downto 0) := X"40";
     TL_DISABLE_RX_FLOW_CTL : string := "FALSE";
     TL_FC_UPDATE_MIN_INTERVAL_TIME : std_logic_vector(4 downto 0) := "0" & X"2";
     TL_FC_UPDATE_MIN_INTERVAL_TIME_VC1 : std_logic_vector(4 downto 0) := "0" & X"2";
     TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT : std_logic_vector(4 downto 0) := "0" & X"8";
     TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT_VC1 : std_logic_vector(4 downto 0) := "0" & X"8";
     TL_FEATURE_ENABLE_FC_SCALING : string := "FALSE";
     TL_NP_FIFO_NUM_TLPS : bit := '0';
     TL_PF_ENABLE_REG : std_logic_vector(1 downto 0) := "00";
     TL_POSTED_RAM_SIZE : bit := '0';
     TL_RX_CCIX_FIFO_FROM_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_CCIX_FIFO_RAM_SIZE : bit := '1';
     TL_RX_CCIX_FIFO_TO_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_CCIX_FIFO_TO_RAM_WRITE_PIPELINE : string := "FALSE";
     TL_RX_COMPLETION_FROM_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_COMPLETION_TO_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_COMPLETION_TO_RAM_WRITE_PIPELINE : string := "FALSE";
     TL_RX_POSTED_FROM_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_POSTED_TO_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_POSTED_TO_RAM_WRITE_PIPELINE : string := "FALSE";
     TL_TX_MUX_STRICT_PRIORITY : string := "TRUE";
     TL_TX_TLP_STRADDLE_ENABLE : string := "FALSE";
     TL_TX_TLP_TERMINATE_PARITY : string := "FALSE";
     TL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     TPH_FROM_RAM_PIPELINE : string := "FALSE";
     TPH_TO_RAM_PIPELINE : string := "FALSE";
     VC1_BASE_DISABLE : string := "FALSE";
     VF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     VFG0_10B_TAG_REQUESTER_SUPPORTED : string := "FALSE";
     VFG0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG0_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_ATS_CAP_ON : string := "FALSE";
     VFG0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG0_MSIX_CAP_PBA_BIR : integer := 0;
     VFG0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG0_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG0_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG1_10B_TAG_REQUESTER_SUPPORTED : string := "FALSE";
     VFG1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG1_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_ATS_CAP_ON : string := "FALSE";
     VFG1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG1_MSIX_CAP_PBA_BIR : integer := 0;
     VFG1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG1_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG1_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG2_10B_TAG_REQUESTER_SUPPORTED : string := "FALSE";
     VFG2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG2_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_ATS_CAP_ON : string := "FALSE";
     VFG2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG2_MSIX_CAP_PBA_BIR : integer := 0;
     VFG2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG2_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG2_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG3_10B_TAG_REQUESTER_SUPPORTED : string := "FALSE";
     VFG3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG3_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_ATS_CAP_ON : string := "FALSE";
     VFG3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG3_MSIX_CAP_PBA_BIR : integer := 0;
     VFG3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG3_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG3_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000"
  );
  port (
     APB3PRDATA : out std_logic_vector(31 downto 0);
     APB3PREADY : out std_ulogic;
     APB3PSLVERR : out std_ulogic;
     AXIUSEROUT : out std_logic_vector(15 downto 0);
     CFG10BTAGREQUESTERENABLE : out std_logic_vector(3 downto 0);
     CFGATOMICREQUESTERENABLE : out std_logic_vector(3 downto 0);
     CFGBUSNUMBER : out std_logic_vector(7 downto 0);
     CFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     CFGERRCOROUT : out std_ulogic;
     CFGERRFATALOUT : out std_ulogic;
     CFGERRNONFATALOUT : out std_ulogic;
     CFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     CFGEXTREADRECEIVED : out std_ulogic;
     CFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     CFGEXTTAGENABLE : out std_ulogic;
     CFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGEXTWRITERECEIVED : out std_ulogic;
     CFGFCCPLD : out std_logic_vector(11 downto 0);
     CFGFCCPLDSCALE : out std_logic_vector(1 downto 0);
     CFGFCCPLH : out std_logic_vector(7 downto 0);
     CFGFCCPLHSCALE : out std_logic_vector(1 downto 0);
     CFGFCNPD : out std_logic_vector(11 downto 0);
     CFGFCNPDSCALE : out std_logic_vector(1 downto 0);
     CFGFCNPH : out std_logic_vector(7 downto 0);
     CFGFCNPHSCALE : out std_logic_vector(1 downto 0);
     CFGFCPD : out std_logic_vector(11 downto 0);
     CFGFCPDSCALE : out std_logic_vector(1 downto 0);
     CFGFCPH : out std_logic_vector(7 downto 0);
     CFGFCPHSCALE : out std_logic_vector(1 downto 0);
     CFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     CFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     CFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     CFGHOTRESETOUT : out std_ulogic;
     CFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIFAIL : out std_ulogic;
     CFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     CFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     CFGINTERRUPTMSISENT : out std_ulogic;
     CFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXVECPENDINGSTATUS : out std_ulogic;
     CFGINTERRUPTSENT : out std_ulogic;
     CFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     CFGLOCALERRORVALID : out std_ulogic;
     CFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     CFGMAXPAYLOAD : out std_logic_vector(1 downto 0);
     CFGMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     CFGMGMTREADWRITEDONE : out std_ulogic;
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     CFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     CFGMSGTRANSMITDONE : out std_ulogic;
     CFGMSIXRAMADDRESS : out std_logic_vector(12 downto 0);
     CFGMSIXRAMREADENABLE : out std_ulogic;
     CFGMSIXRAMWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGMSIXRAMWRITEDATA : out std_logic_vector(35 downto 0);
     CFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     CFGPASIDENABLE : out std_logic_vector(3 downto 0);
     CFGPASIDEXECPERMISSIONENABLE : out std_logic_vector(3 downto 0);
     CFGPASIDPRIVILMODEENABLE : out std_logic_vector(3 downto 0);
     CFGPHYLINKDOWN : out std_ulogic;
     CFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     CFGPLSTATUSCHANGE : out std_ulogic;
     CFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     CFGRCBSTATUS : out std_logic_vector(3 downto 0);
     CFGRXPMSTATE : out std_logic_vector(1 downto 0);
     CFGTPHRAMADDRESS : out std_logic_vector(11 downto 0);
     CFGTPHRAMREADENABLE : out std_ulogic;
     CFGTPHRAMWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGTPHRAMWRITEDATA : out std_logic_vector(35 downto 0);
     CFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     CFGTPHSTMODE : out std_logic_vector(11 downto 0);
     CFGTXPMSTATE : out std_logic_vector(1 downto 0);
     CFGVC1ENABLE : out std_ulogic;
     CFGVC1NEGOTIATIONPENDING : out std_ulogic;
     DBGCTRL0OUT : out std_logic_vector(31 downto 0);
     DBGCTRL1OUT : out std_logic_vector(31 downto 0);
     DBGDATA0OUT : out std_logic_vector(255 downto 0);
     DBGDATA1OUT : out std_logic_vector(255 downto 0);
     MAXISCQTDATA : out std_logic_vector(511 downto 0);
     MAXISCQTKEEP : out std_logic_vector(15 downto 0);
     MAXISCQTLAST : out std_ulogic;
     MAXISCQTUSER : out std_logic_vector(228 downto 0);
     MAXISCQTVALID : out std_ulogic;
     MAXISRCTDATA : out std_logic_vector(511 downto 0);
     MAXISRCTKEEP : out std_logic_vector(15 downto 0);
     MAXISRCTLAST : out std_ulogic;
     MAXISRCTUSER : out std_logic_vector(160 downto 0);
     MAXISRCTVALID : out std_ulogic;
     MIREPLAYRAMADDRESS0 : out std_logic_vector(9 downto 0);
     MIREPLAYRAMADDRESS1 : out std_logic_vector(9 downto 0);
     MIREPLAYRAMREADENABLE0 : out std_ulogic;
     MIREPLAYRAMREADENABLE1 : out std_ulogic;
     MIREPLAYRAMWRITEDATA0 : out std_logic_vector(127 downto 0);
     MIREPLAYRAMWRITEDATA1 : out std_logic_vector(127 downto 0);
     MIREPLAYRAMWRITEENABLE0 : out std_ulogic;
     MIREPLAYRAMWRITEENABLE1 : out std_ulogic;
     MIRXCOMPLETIONRAMREADADDRESS0 : out std_logic_vector(9 downto 0);
     MIRXCOMPLETIONRAMREADADDRESS1 : out std_logic_vector(9 downto 0);
     MIRXCOMPLETIONRAMREADENABLE0 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMREADENABLE1 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMWRITEADDRESS0 : out std_logic_vector(9 downto 0);
     MIRXCOMPLETIONRAMWRITEADDRESS1 : out std_logic_vector(9 downto 0);
     MIRXCOMPLETIONRAMWRITEDATA0 : out std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMWRITEDATA1 : out std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMWRITEENABLE0 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMWRITEENABLE1 : out std_logic_vector(1 downto 0);
     MIRXPOSTEDREQUESTRAMREADADDRESS0 : out std_logic_vector(9 downto 0);
     MIRXPOSTEDREQUESTRAMREADADDRESS1 : out std_logic_vector(9 downto 0);
     MIRXPOSTEDREQUESTRAMREADENABLE0 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMREADENABLE1 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMWRITEADDRESS0 : out std_logic_vector(9 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEADDRESS1 : out std_logic_vector(9 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEDATA0 : out std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEDATA1 : out std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEENABLE0 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMWRITEENABLE1 : out std_ulogic;
     PCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     PCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     PCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     PCIERQSEQNUMVLD0 : out std_ulogic;
     PCIERQSEQNUMVLD1 : out std_ulogic;
     PCIERQTAG0 : out std_logic_vector(9 downto 0);
     PCIERQTAG1 : out std_logic_vector(9 downto 0);
     PCIERQTAGAV : out std_logic_vector(3 downto 0);
     PCIERQTAGVLD0 : out std_ulogic;
     PCIERQTAGVLD1 : out std_ulogic;
     PCIETFCNPDAV : out std_logic_vector(3 downto 0);
     PCIETFCNPHAV : out std_logic_vector(3 downto 0);
     PIPELTSSM : out std_logic_vector(5 downto 0);
     PIPERX00EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX00EQPRESETREJECT : out std_ulogic;
     PIPERX00POLARITY : out std_ulogic;
     PIPERX01EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX01EQPRESETREJECT : out std_ulogic;
     PIPERX01POLARITY : out std_ulogic;
     PIPERX02EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX02EQPRESETREJECT : out std_ulogic;
     PIPERX02POLARITY : out std_ulogic;
     PIPERX03EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX03EQPRESETREJECT : out std_ulogic;
     PIPERX03POLARITY : out std_ulogic;
     PIPERX04EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX04EQPRESETREJECT : out std_ulogic;
     PIPERX04POLARITY : out std_ulogic;
     PIPERX05EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX05EQPRESETREJECT : out std_ulogic;
     PIPERX05POLARITY : out std_ulogic;
     PIPERX06EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX06EQPRESETREJECT : out std_ulogic;
     PIPERX06POLARITY : out std_ulogic;
     PIPERX07EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX07EQPRESETREJECT : out std_ulogic;
     PIPERX07POLARITY : out std_ulogic;
     PIPERX08EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX08EQPRESETREJECT : out std_ulogic;
     PIPERX08POLARITY : out std_ulogic;
     PIPERX09EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX09EQPRESETREJECT : out std_ulogic;
     PIPERX09POLARITY : out std_ulogic;
     PIPERX10EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX10EQPRESETREJECT : out std_ulogic;
     PIPERX10POLARITY : out std_ulogic;
     PIPERX11EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX11EQPRESETREJECT : out std_ulogic;
     PIPERX11POLARITY : out std_ulogic;
     PIPERX12EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX12EQPRESETREJECT : out std_ulogic;
     PIPERX12POLARITY : out std_ulogic;
     PIPERX13EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX13EQPRESETREJECT : out std_ulogic;
     PIPERX13POLARITY : out std_ulogic;
     PIPERX14EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX14EQPRESETREJECT : out std_ulogic;
     PIPERX14POLARITY : out std_ulogic;
     PIPERX15EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX15EQPRESETREJECT : out std_ulogic;
     PIPERX15POLARITY : out std_ulogic;
     PIPERXEQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERXEQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERXMARGIN0REQCMD : out std_logic_vector(3 downto 0);
     PIPERXMARGIN0REQLANENUM : out std_logic_vector(1 downto 0);
     PIPERXMARGIN0REQPAYLOAD : out std_logic_vector(7 downto 0);
     PIPERXMARGIN0REQREQ : out std_ulogic;
     PIPERXMARGIN0RESACK : out std_ulogic;
     PIPERXMARGIN1REQCMD : out std_logic_vector(3 downto 0);
     PIPERXMARGIN1REQLANENUM : out std_logic_vector(1 downto 0);
     PIPERXMARGIN1REQPAYLOAD : out std_logic_vector(7 downto 0);
     PIPERXMARGIN1REQREQ : out std_ulogic;
     PIPERXMARGIN1RESACK : out std_ulogic;
     PIPERXMARGIN2REQCMD : out std_logic_vector(3 downto 0);
     PIPERXMARGIN2REQLANENUM : out std_logic_vector(1 downto 0);
     PIPERXMARGIN2REQPAYLOAD : out std_logic_vector(7 downto 0);
     PIPERXMARGIN2REQREQ : out std_ulogic;
     PIPERXMARGIN2RESACK : out std_ulogic;
     PIPERXMARGIN3REQCMD : out std_logic_vector(3 downto 0);
     PIPERXMARGIN3REQLANENUM : out std_logic_vector(1 downto 0);
     PIPERXMARGIN3REQPAYLOAD : out std_logic_vector(7 downto 0);
     PIPERXMARGIN3REQREQ : out std_ulogic;
     PIPERXMARGIN3RESACK : out std_ulogic;
     PIPERXTERMINATION : out std_ulogic;
     PIPETX00CHARISK : out std_logic_vector(1 downto 0);
     PIPETX00COMPLIANCE : out std_ulogic;
     PIPETX00DATA : out std_logic_vector(31 downto 0);
     PIPETX00DATAVALID : out std_ulogic;
     PIPETX00ELECIDLE : out std_ulogic;
     PIPETX00EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX00EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX00POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX00STARTBLOCK : out std_ulogic;
     PIPETX00SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX01CHARISK : out std_logic_vector(1 downto 0);
     PIPETX01COMPLIANCE : out std_ulogic;
     PIPETX01DATA : out std_logic_vector(31 downto 0);
     PIPETX01DATAVALID : out std_ulogic;
     PIPETX01ELECIDLE : out std_ulogic;
     PIPETX01EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX01EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX01POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX01STARTBLOCK : out std_ulogic;
     PIPETX01SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX02CHARISK : out std_logic_vector(1 downto 0);
     PIPETX02COMPLIANCE : out std_ulogic;
     PIPETX02DATA : out std_logic_vector(31 downto 0);
     PIPETX02DATAVALID : out std_ulogic;
     PIPETX02ELECIDLE : out std_ulogic;
     PIPETX02EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX02EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX02POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX02STARTBLOCK : out std_ulogic;
     PIPETX02SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX03CHARISK : out std_logic_vector(1 downto 0);
     PIPETX03COMPLIANCE : out std_ulogic;
     PIPETX03DATA : out std_logic_vector(31 downto 0);
     PIPETX03DATAVALID : out std_ulogic;
     PIPETX03ELECIDLE : out std_ulogic;
     PIPETX03EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX03EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX03POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX03STARTBLOCK : out std_ulogic;
     PIPETX03SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX04CHARISK : out std_logic_vector(1 downto 0);
     PIPETX04COMPLIANCE : out std_ulogic;
     PIPETX04DATA : out std_logic_vector(31 downto 0);
     PIPETX04DATAVALID : out std_ulogic;
     PIPETX04ELECIDLE : out std_ulogic;
     PIPETX04EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX04EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX04POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX04STARTBLOCK : out std_ulogic;
     PIPETX04SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX05CHARISK : out std_logic_vector(1 downto 0);
     PIPETX05COMPLIANCE : out std_ulogic;
     PIPETX05DATA : out std_logic_vector(31 downto 0);
     PIPETX05DATAVALID : out std_ulogic;
     PIPETX05ELECIDLE : out std_ulogic;
     PIPETX05EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX05EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX05POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX05STARTBLOCK : out std_ulogic;
     PIPETX05SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX06CHARISK : out std_logic_vector(1 downto 0);
     PIPETX06COMPLIANCE : out std_ulogic;
     PIPETX06DATA : out std_logic_vector(31 downto 0);
     PIPETX06DATAVALID : out std_ulogic;
     PIPETX06ELECIDLE : out std_ulogic;
     PIPETX06EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX06EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX06POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX06STARTBLOCK : out std_ulogic;
     PIPETX06SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX07CHARISK : out std_logic_vector(1 downto 0);
     PIPETX07COMPLIANCE : out std_ulogic;
     PIPETX07DATA : out std_logic_vector(31 downto 0);
     PIPETX07DATAVALID : out std_ulogic;
     PIPETX07ELECIDLE : out std_ulogic;
     PIPETX07EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX07EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX07POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX07STARTBLOCK : out std_ulogic;
     PIPETX07SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX08CHARISK : out std_logic_vector(1 downto 0);
     PIPETX08COMPLIANCE : out std_ulogic;
     PIPETX08DATA : out std_logic_vector(31 downto 0);
     PIPETX08DATAVALID : out std_ulogic;
     PIPETX08ELECIDLE : out std_ulogic;
     PIPETX08EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX08EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX08POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX08STARTBLOCK : out std_ulogic;
     PIPETX08SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX09CHARISK : out std_logic_vector(1 downto 0);
     PIPETX09COMPLIANCE : out std_ulogic;
     PIPETX09DATA : out std_logic_vector(31 downto 0);
     PIPETX09DATAVALID : out std_ulogic;
     PIPETX09ELECIDLE : out std_ulogic;
     PIPETX09EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX09EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX09POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX09STARTBLOCK : out std_ulogic;
     PIPETX09SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX10CHARISK : out std_logic_vector(1 downto 0);
     PIPETX10COMPLIANCE : out std_ulogic;
     PIPETX10DATA : out std_logic_vector(31 downto 0);
     PIPETX10DATAVALID : out std_ulogic;
     PIPETX10ELECIDLE : out std_ulogic;
     PIPETX10EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX10EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX10POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX10STARTBLOCK : out std_ulogic;
     PIPETX10SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX11CHARISK : out std_logic_vector(1 downto 0);
     PIPETX11COMPLIANCE : out std_ulogic;
     PIPETX11DATA : out std_logic_vector(31 downto 0);
     PIPETX11DATAVALID : out std_ulogic;
     PIPETX11ELECIDLE : out std_ulogic;
     PIPETX11EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX11EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX11POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX11STARTBLOCK : out std_ulogic;
     PIPETX11SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX12CHARISK : out std_logic_vector(1 downto 0);
     PIPETX12COMPLIANCE : out std_ulogic;
     PIPETX12DATA : out std_logic_vector(31 downto 0);
     PIPETX12DATAVALID : out std_ulogic;
     PIPETX12ELECIDLE : out std_ulogic;
     PIPETX12EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX12EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX12POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX12STARTBLOCK : out std_ulogic;
     PIPETX12SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX13CHARISK : out std_logic_vector(1 downto 0);
     PIPETX13COMPLIANCE : out std_ulogic;
     PIPETX13DATA : out std_logic_vector(31 downto 0);
     PIPETX13DATAVALID : out std_ulogic;
     PIPETX13ELECIDLE : out std_ulogic;
     PIPETX13EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX13EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX13POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX13STARTBLOCK : out std_ulogic;
     PIPETX13SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX14CHARISK : out std_logic_vector(1 downto 0);
     PIPETX14COMPLIANCE : out std_ulogic;
     PIPETX14DATA : out std_logic_vector(31 downto 0);
     PIPETX14DATAVALID : out std_ulogic;
     PIPETX14ELECIDLE : out std_ulogic;
     PIPETX14EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX14EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX14POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX14STARTBLOCK : out std_ulogic;
     PIPETX14SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX15CHARISK : out std_logic_vector(1 downto 0);
     PIPETX15COMPLIANCE : out std_ulogic;
     PIPETX15DATA : out std_logic_vector(31 downto 0);
     PIPETX15DATAVALID : out std_ulogic;
     PIPETX15ELECIDLE : out std_ulogic;
     PIPETX15EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX15EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX15POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX15STARTBLOCK : out std_ulogic;
     PIPETX15SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETXDEEMPH : out std_ulogic;
     PIPETXMARGIN : out std_logic_vector(2 downto 0);
     PIPETXRATE : out std_logic_vector(2 downto 0);
     PIPETXRCVRDET : out std_ulogic;
     PIPETXRESET : out std_ulogic;
     PIPETXSWING : out std_ulogic;
     PLEQINPROGRESS : out std_ulogic;
     PLEQPHASE : out std_logic_vector(1 downto 0);
     PLGEN34EQMISMATCH : out std_ulogic;
     PLRCVDEIOSANYLANE : out std_ulogic;
     SAXISCCTREADY : out std_logic_vector(3 downto 0);
     SAXISRQTREADY : out std_logic_vector(3 downto 0);
     USERSPAREOUT : out std_logic_vector(31 downto 0);
     APB3CLK : in std_ulogic;
     APB3PADDR : in std_logic_vector(8 downto 0);
     APB3PENABLE : in std_ulogic;
     APB3PRESETN : in std_ulogic;
     APB3PSEL : in std_ulogic;
     APB3PWDATA : in std_logic_vector(31 downto 0);
     APB3PWRITE : in std_ulogic;
     AXIUSERIN : in std_logic_vector(15 downto 0);
     CFGCONFIGSPACEENABLE : in std_ulogic;
     CFGDEVIDPF0 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF1 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF2 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF3 : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGDSPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGERRCORIN : in std_ulogic;
     CFGERRUNCORIN : in std_ulogic;
     CFGEXTREADDATA : in std_logic_vector(31 downto 0);
     CFGEXTREADDATAVALID : in std_ulogic;
     CFGFCSEL : in std_logic_vector(2 downto 0);
     CFGFLRDONE : in std_logic_vector(3 downto 0);
     CFGHOTRESETIN : in std_ulogic;
     CFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     CFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     CFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSISELECT : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     CFGINTERRUPTMSITPHSTTAG : in std_logic_vector(7 downto 0);
     CFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIXINT : in std_ulogic;
     CFGINTERRUPTMSIXVECPENDING : in std_logic_vector(1 downto 0);
     CFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     CFGLINKTRAININGENABLE : in std_ulogic;
     CFGMGMTADDR : in std_logic_vector(9 downto 0);
     CFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     CFGMGMTDEBUGACCESS : in std_ulogic;
     CFGMGMTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     CFGMGMTREAD : in std_ulogic;
     CFGMGMTWRITE : in std_ulogic;
     CFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMIT : in std_ulogic;
     CFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     CFGMSIXRAMERRCOR : in std_ulogic;
     CFGMSIXRAMERRUNCOR : in std_ulogic;
     CFGMSIXRAMREADDATA : in std_logic_vector(35 downto 0);
     CFGPMASPML1ENTRYREJECT : in std_ulogic;
     CFGPMASPMTXL0SENTRYDISABLE : in std_ulogic;
     CFGPOWERSTATECHANGEACK : in std_ulogic;
     CFGREQPMTRANSITIONL23READY : in std_ulogic;
     CFGREVIDPF0 : in std_logic_vector(7 downto 0);
     CFGREVIDPF1 : in std_logic_vector(7 downto 0);
     CFGREVIDPF2 : in std_logic_vector(7 downto 0);
     CFGREVIDPF3 : in std_logic_vector(7 downto 0);
     CFGSUBSYSIDPF0 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF1 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF2 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF3 : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTPHRAMERRCOR : in std_ulogic;
     CFGTPHRAMERRUNCOR : in std_ulogic;
     CFGTPHRAMREADDATA : in std_logic_vector(35 downto 0);
     CFGVENDID : in std_logic_vector(15 downto 0);
     CFGVFFLRDONE : in std_ulogic;
     CFGVFFLRFUNCNUM : in std_logic_vector(7 downto 0);
     CORECLK : in std_ulogic;
     CORECLKMIREPLAYRAM0 : in std_ulogic;
     CORECLKMIREPLAYRAM1 : in std_ulogic;
     CORECLKMIRXCOMPLETIONRAM0 : in std_ulogic;
     CORECLKMIRXCOMPLETIONRAM1 : in std_ulogic;
     CORECLKMIRXPOSTEDREQUESTRAM0 : in std_ulogic;
     CORECLKMIRXPOSTEDREQUESTRAM1 : in std_ulogic;
     DBGSEL0 : in std_logic_vector(5 downto 0);
     DBGSEL1 : in std_logic_vector(5 downto 0);
     MAXISCQTREADY : in std_logic_vector(21 downto 0);
     MAXISRCTREADY : in std_logic_vector(21 downto 0);
     MGMTRESETN : in std_ulogic;
     MGMTSTICKYRESETN : in std_ulogic;
     MIREPLAYRAMERRCOR : in std_logic_vector(11 downto 0);
     MIREPLAYRAMERRUNCOR : in std_logic_vector(11 downto 0);
     MIREPLAYRAMREADDATA0 : in std_logic_vector(127 downto 0);
     MIREPLAYRAMREADDATA1 : in std_logic_vector(127 downto 0);
     MIRXCOMPLETIONRAMERRCOR : in std_logic_vector(23 downto 0);
     MIRXCOMPLETIONRAMERRUNCOR : in std_logic_vector(23 downto 0);
     MIRXCOMPLETIONRAMREADDATA0 : in std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMREADDATA1 : in std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMERRCOR : in std_logic_vector(11 downto 0);
     MIRXPOSTEDREQUESTRAMERRUNCOR : in std_logic_vector(11 downto 0);
     MIRXPOSTEDREQUESTRAMREADDATA0 : in std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMREADDATA1 : in std_logic_vector(143 downto 0);
     PCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     PCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     PCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     PCIECQNPREQ : in std_logic_vector(1 downto 0);
     PCIECQNPUSERCREDITRCVD : in std_ulogic;
     PCIECQPIPELINEEMPTY : in std_ulogic;
     PCIEPOSTEDREQDELIVERED : in std_ulogic;
     PIPECLK : in std_ulogic;
     PIPECLKEN : in std_ulogic;
     PIPEEQFS : in std_logic_vector(5 downto 0);
     PIPEEQLF : in std_logic_vector(5 downto 0);
     PIPERESETN : in std_ulogic;
     PIPERX00CHARISK : in std_logic_vector(1 downto 0);
     PIPERX00DATA : in std_logic_vector(31 downto 0);
     PIPERX00DATAVALID : in std_ulogic;
     PIPERX00ELECIDLE : in std_ulogic;
     PIPERX00EQDONE : in std_ulogic;
     PIPERX00EQLPADAPTDONE : in std_ulogic;
     PIPERX00EQLPLFFSSEL : in std_ulogic;
     PIPERX00EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX00PHYSTATUS : in std_ulogic;
     PIPERX00STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX00STATUS : in std_logic_vector(2 downto 0);
     PIPERX00SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX00VALID : in std_ulogic;
     PIPERX01CHARISK : in std_logic_vector(1 downto 0);
     PIPERX01DATA : in std_logic_vector(31 downto 0);
     PIPERX01DATAVALID : in std_ulogic;
     PIPERX01ELECIDLE : in std_ulogic;
     PIPERX01EQDONE : in std_ulogic;
     PIPERX01EQLPADAPTDONE : in std_ulogic;
     PIPERX01EQLPLFFSSEL : in std_ulogic;
     PIPERX01EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX01PHYSTATUS : in std_ulogic;
     PIPERX01STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX01STATUS : in std_logic_vector(2 downto 0);
     PIPERX01SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX01VALID : in std_ulogic;
     PIPERX02CHARISK : in std_logic_vector(1 downto 0);
     PIPERX02DATA : in std_logic_vector(31 downto 0);
     PIPERX02DATAVALID : in std_ulogic;
     PIPERX02ELECIDLE : in std_ulogic;
     PIPERX02EQDONE : in std_ulogic;
     PIPERX02EQLPADAPTDONE : in std_ulogic;
     PIPERX02EQLPLFFSSEL : in std_ulogic;
     PIPERX02EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX02PHYSTATUS : in std_ulogic;
     PIPERX02STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX02STATUS : in std_logic_vector(2 downto 0);
     PIPERX02SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX02VALID : in std_ulogic;
     PIPERX03CHARISK : in std_logic_vector(1 downto 0);
     PIPERX03DATA : in std_logic_vector(31 downto 0);
     PIPERX03DATAVALID : in std_ulogic;
     PIPERX03ELECIDLE : in std_ulogic;
     PIPERX03EQDONE : in std_ulogic;
     PIPERX03EQLPADAPTDONE : in std_ulogic;
     PIPERX03EQLPLFFSSEL : in std_ulogic;
     PIPERX03EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX03PHYSTATUS : in std_ulogic;
     PIPERX03STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX03STATUS : in std_logic_vector(2 downto 0);
     PIPERX03SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX03VALID : in std_ulogic;
     PIPERX04CHARISK : in std_logic_vector(1 downto 0);
     PIPERX04DATA : in std_logic_vector(31 downto 0);
     PIPERX04DATAVALID : in std_ulogic;
     PIPERX04ELECIDLE : in std_ulogic;
     PIPERX04EQDONE : in std_ulogic;
     PIPERX04EQLPADAPTDONE : in std_ulogic;
     PIPERX04EQLPLFFSSEL : in std_ulogic;
     PIPERX04EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX04PHYSTATUS : in std_ulogic;
     PIPERX04STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX04STATUS : in std_logic_vector(2 downto 0);
     PIPERX04SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX04VALID : in std_ulogic;
     PIPERX05CHARISK : in std_logic_vector(1 downto 0);
     PIPERX05DATA : in std_logic_vector(31 downto 0);
     PIPERX05DATAVALID : in std_ulogic;
     PIPERX05ELECIDLE : in std_ulogic;
     PIPERX05EQDONE : in std_ulogic;
     PIPERX05EQLPADAPTDONE : in std_ulogic;
     PIPERX05EQLPLFFSSEL : in std_ulogic;
     PIPERX05EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX05PHYSTATUS : in std_ulogic;
     PIPERX05STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX05STATUS : in std_logic_vector(2 downto 0);
     PIPERX05SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX05VALID : in std_ulogic;
     PIPERX06CHARISK : in std_logic_vector(1 downto 0);
     PIPERX06DATA : in std_logic_vector(31 downto 0);
     PIPERX06DATAVALID : in std_ulogic;
     PIPERX06ELECIDLE : in std_ulogic;
     PIPERX06EQDONE : in std_ulogic;
     PIPERX06EQLPADAPTDONE : in std_ulogic;
     PIPERX06EQLPLFFSSEL : in std_ulogic;
     PIPERX06EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX06PHYSTATUS : in std_ulogic;
     PIPERX06STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX06STATUS : in std_logic_vector(2 downto 0);
     PIPERX06SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX06VALID : in std_ulogic;
     PIPERX07CHARISK : in std_logic_vector(1 downto 0);
     PIPERX07DATA : in std_logic_vector(31 downto 0);
     PIPERX07DATAVALID : in std_ulogic;
     PIPERX07ELECIDLE : in std_ulogic;
     PIPERX07EQDONE : in std_ulogic;
     PIPERX07EQLPADAPTDONE : in std_ulogic;
     PIPERX07EQLPLFFSSEL : in std_ulogic;
     PIPERX07EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX07PHYSTATUS : in std_ulogic;
     PIPERX07STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX07STATUS : in std_logic_vector(2 downto 0);
     PIPERX07SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX07VALID : in std_ulogic;
     PIPERX08CHARISK : in std_logic_vector(1 downto 0);
     PIPERX08DATA : in std_logic_vector(31 downto 0);
     PIPERX08DATAVALID : in std_ulogic;
     PIPERX08ELECIDLE : in std_ulogic;
     PIPERX08EQDONE : in std_ulogic;
     PIPERX08EQLPADAPTDONE : in std_ulogic;
     PIPERX08EQLPLFFSSEL : in std_ulogic;
     PIPERX08EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX08PHYSTATUS : in std_ulogic;
     PIPERX08STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX08STATUS : in std_logic_vector(2 downto 0);
     PIPERX08SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX08VALID : in std_ulogic;
     PIPERX09CHARISK : in std_logic_vector(1 downto 0);
     PIPERX09DATA : in std_logic_vector(31 downto 0);
     PIPERX09DATAVALID : in std_ulogic;
     PIPERX09ELECIDLE : in std_ulogic;
     PIPERX09EQDONE : in std_ulogic;
     PIPERX09EQLPADAPTDONE : in std_ulogic;
     PIPERX09EQLPLFFSSEL : in std_ulogic;
     PIPERX09EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX09PHYSTATUS : in std_ulogic;
     PIPERX09STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX09STATUS : in std_logic_vector(2 downto 0);
     PIPERX09SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX09VALID : in std_ulogic;
     PIPERX10CHARISK : in std_logic_vector(1 downto 0);
     PIPERX10DATA : in std_logic_vector(31 downto 0);
     PIPERX10DATAVALID : in std_ulogic;
     PIPERX10ELECIDLE : in std_ulogic;
     PIPERX10EQDONE : in std_ulogic;
     PIPERX10EQLPADAPTDONE : in std_ulogic;
     PIPERX10EQLPLFFSSEL : in std_ulogic;
     PIPERX10EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX10PHYSTATUS : in std_ulogic;
     PIPERX10STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX10STATUS : in std_logic_vector(2 downto 0);
     PIPERX10SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX10VALID : in std_ulogic;
     PIPERX11CHARISK : in std_logic_vector(1 downto 0);
     PIPERX11DATA : in std_logic_vector(31 downto 0);
     PIPERX11DATAVALID : in std_ulogic;
     PIPERX11ELECIDLE : in std_ulogic;
     PIPERX11EQDONE : in std_ulogic;
     PIPERX11EQLPADAPTDONE : in std_ulogic;
     PIPERX11EQLPLFFSSEL : in std_ulogic;
     PIPERX11EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX11PHYSTATUS : in std_ulogic;
     PIPERX11STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX11STATUS : in std_logic_vector(2 downto 0);
     PIPERX11SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX11VALID : in std_ulogic;
     PIPERX12CHARISK : in std_logic_vector(1 downto 0);
     PIPERX12DATA : in std_logic_vector(31 downto 0);
     PIPERX12DATAVALID : in std_ulogic;
     PIPERX12ELECIDLE : in std_ulogic;
     PIPERX12EQDONE : in std_ulogic;
     PIPERX12EQLPADAPTDONE : in std_ulogic;
     PIPERX12EQLPLFFSSEL : in std_ulogic;
     PIPERX12EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX12PHYSTATUS : in std_ulogic;
     PIPERX12STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX12STATUS : in std_logic_vector(2 downto 0);
     PIPERX12SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX12VALID : in std_ulogic;
     PIPERX13CHARISK : in std_logic_vector(1 downto 0);
     PIPERX13DATA : in std_logic_vector(31 downto 0);
     PIPERX13DATAVALID : in std_ulogic;
     PIPERX13ELECIDLE : in std_ulogic;
     PIPERX13EQDONE : in std_ulogic;
     PIPERX13EQLPADAPTDONE : in std_ulogic;
     PIPERX13EQLPLFFSSEL : in std_ulogic;
     PIPERX13EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX13PHYSTATUS : in std_ulogic;
     PIPERX13STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX13STATUS : in std_logic_vector(2 downto 0);
     PIPERX13SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX13VALID : in std_ulogic;
     PIPERX14CHARISK : in std_logic_vector(1 downto 0);
     PIPERX14DATA : in std_logic_vector(31 downto 0);
     PIPERX14DATAVALID : in std_ulogic;
     PIPERX14ELECIDLE : in std_ulogic;
     PIPERX14EQDONE : in std_ulogic;
     PIPERX14EQLPADAPTDONE : in std_ulogic;
     PIPERX14EQLPLFFSSEL : in std_ulogic;
     PIPERX14EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX14PHYSTATUS : in std_ulogic;
     PIPERX14STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX14STATUS : in std_logic_vector(2 downto 0);
     PIPERX14SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX14VALID : in std_ulogic;
     PIPERX15CHARISK : in std_logic_vector(1 downto 0);
     PIPERX15DATA : in std_logic_vector(31 downto 0);
     PIPERX15DATAVALID : in std_ulogic;
     PIPERX15ELECIDLE : in std_ulogic;
     PIPERX15EQDONE : in std_ulogic;
     PIPERX15EQLPADAPTDONE : in std_ulogic;
     PIPERX15EQLPLFFSSEL : in std_ulogic;
     PIPERX15EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX15PHYSTATUS : in std_ulogic;
     PIPERX15STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX15STATUS : in std_logic_vector(2 downto 0);
     PIPERX15SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX15VALID : in std_ulogic;
     PIPERXMARGIN0REQACK : in std_ulogic;
     PIPERXMARGIN0RESCMD : in std_logic_vector(3 downto 0);
     PIPERXMARGIN0RESLANENUM : in std_logic_vector(1 downto 0);
     PIPERXMARGIN0RESPAYLOAD : in std_logic_vector(7 downto 0);
     PIPERXMARGIN0RESREQ : in std_ulogic;
     PIPERXMARGIN1REQACK : in std_ulogic;
     PIPERXMARGIN1RESCMD : in std_logic_vector(3 downto 0);
     PIPERXMARGIN1RESLANENUM : in std_logic_vector(1 downto 0);
     PIPERXMARGIN1RESPAYLOAD : in std_logic_vector(7 downto 0);
     PIPERXMARGIN1RESREQ : in std_ulogic;
     PIPERXMARGIN2REQACK : in std_ulogic;
     PIPERXMARGIN2RESCMD : in std_logic_vector(3 downto 0);
     PIPERXMARGIN2RESLANENUM : in std_logic_vector(1 downto 0);
     PIPERXMARGIN2RESPAYLOAD : in std_logic_vector(7 downto 0);
     PIPERXMARGIN2RESREQ : in std_ulogic;
     PIPERXMARGIN3REQACK : in std_ulogic;
     PIPERXMARGIN3RESCMD : in std_logic_vector(3 downto 0);
     PIPERXMARGIN3RESLANENUM : in std_logic_vector(1 downto 0);
     PIPERXMARGIN3RESPAYLOAD : in std_logic_vector(7 downto 0);
     PIPERXMARGIN3RESREQ : in std_ulogic;
     PIPETX00EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX00EQDONE : in std_ulogic;
     PIPETX01EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX01EQDONE : in std_ulogic;
     PIPETX02EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX02EQDONE : in std_ulogic;
     PIPETX03EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX03EQDONE : in std_ulogic;
     PIPETX04EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX04EQDONE : in std_ulogic;
     PIPETX05EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX05EQDONE : in std_ulogic;
     PIPETX06EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX06EQDONE : in std_ulogic;
     PIPETX07EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX07EQDONE : in std_ulogic;
     PIPETX08EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX08EQDONE : in std_ulogic;
     PIPETX09EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX09EQDONE : in std_ulogic;
     PIPETX10EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX10EQDONE : in std_ulogic;
     PIPETX11EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX11EQDONE : in std_ulogic;
     PIPETX12EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX12EQDONE : in std_ulogic;
     PIPETX13EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX13EQDONE : in std_ulogic;
     PIPETX14EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX14EQDONE : in std_ulogic;
     PIPETX15EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX15EQDONE : in std_ulogic;
     PLEQRESETEIEOSCOUNT : in std_ulogic;
     PLGEN2UPSTREAMPREFERDEEMPH : in std_ulogic;
     PLGEN34REDOEQSPEED : in std_ulogic;
     PLGEN34REDOEQUALIZATION : in std_ulogic;
     RESETN : in std_ulogic;
     SAXISCCTDATA : in std_logic_vector(511 downto 0);
     SAXISCCTKEEP : in std_logic_vector(15 downto 0);
     SAXISCCTLAST : in std_ulogic;
     SAXISCCTUSER : in std_logic_vector(80 downto 0);
     SAXISCCTVALID : in std_ulogic;
     SAXISRQTDATA : in std_logic_vector(511 downto 0);
     SAXISRQTKEEP : in std_logic_vector(15 downto 0);
     SAXISRQTLAST : in std_ulogic;
     SAXISRQTUSER : in std_logic_vector(136 downto 0);
     SAXISRQTVALID : in std_ulogic;
     USERCLK : in std_ulogic;
     USERCLK2 : in std_ulogic;
     USERCLKEN : in std_ulogic;
     USERSPAREIN : in std_logic_vector(31 downto 0)
  );
end component;
attribute BOX_TYPE of
  PCIE40E5 : component is "PRIMITIVE";

----- component PCIE4CE4 -----
component PCIE4CE4
  generic (
     ARI_CAP_ENABLE : string := "FALSE";
     AUTO_FLR_RESPONSE : string := "FALSE";
     AXISTEN_IF_CCIX_RX_CREDIT_LIMIT : std_logic_vector(7 downto 0) := X"08";
     AXISTEN_IF_CCIX_TX_CREDIT_LIMIT : std_logic_vector(7 downto 0) := X"08";
     AXISTEN_IF_CCIX_TX_REGISTERED_TREADY : string := "FALSE";
     AXISTEN_IF_CC_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_COMPL_TIMEOUT_REG0 : std_logic_vector(23 downto 0) := X"BEBC20";
     AXISTEN_IF_COMPL_TIMEOUT_REG1 : std_logic_vector(27 downto 0) := X"2FAF080";
     AXISTEN_IF_CQ_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_CQ_EN_POISONED_MEM_WR : string := "FALSE";
     AXISTEN_IF_ENABLE_256_TAGS : string := "FALSE";
     AXISTEN_IF_ENABLE_CLIENT_TAG : string := "FALSE";
     AXISTEN_IF_ENABLE_INTERNAL_MSIX_TABLE : string := "FALSE";
     AXISTEN_IF_ENABLE_MESSAGE_RID_CHECK : string := "TRUE";
     AXISTEN_IF_ENABLE_MSG_ROUTE : std_logic_vector(17 downto 0) := "00" & X"0000";
     AXISTEN_IF_ENABLE_RX_MSG_INTFC : string := "FALSE";
     AXISTEN_IF_EXT_512 : string := "FALSE";
     AXISTEN_IF_EXT_512_CC_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_CQ_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_EXT_512_RQ_STRADDLE : string := "FALSE";
     AXISTEN_IF_LEGACY_MODE_ENABLE : string := "FALSE";
     AXISTEN_IF_MSIX_FROM_RAM_PIPELINE : string := "FALSE";
     AXISTEN_IF_MSIX_RX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_MSIX_TO_RAM_PIPELINE : string := "FALSE";
     AXISTEN_IF_RC_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_RQ_ALIGNMENT_MODE : std_logic_vector(1 downto 0) := "00";
     AXISTEN_IF_RX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_SIM_SHORT_CPL_TIMEOUT : string := "FALSE";
     AXISTEN_IF_TX_PARITY_EN : string := "TRUE";
     AXISTEN_IF_WIDTH : std_logic_vector(1 downto 0) := "10";
     CCIX_DIRECT_ATTACH_MODE : string := "FALSE";
     CCIX_ENABLE : string := "FALSE";
     CCIX_VENDOR_ID : std_logic_vector(15 downto 0) := X"0000";
     CFG_BYPASS_MODE_ENABLE : string := "FALSE";
     CRM_CORE_CLK_FREQ_500 : string := "TRUE";
     CRM_USER_CLK_FREQ : std_logic_vector(1 downto 0) := "10";
     DEBUG_AXI4ST_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_AXIST_DISABLE_FEATURE_BIT : std_logic_vector(7 downto 0) := X"00";
     DEBUG_CAR_SPARE : std_logic_vector(3 downto 0) := X"0";
     DEBUG_CFG_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_LL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_DEFRAMER_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_LES_UPDATE_ON_SKP_PARITY_ERROR : string := "FALSE";
     DEBUG_PL_DISABLE_REC_ENTRY_ON_DYNAMIC_DSKEW_FAIL : string := "FALSE";
     DEBUG_PL_DISABLE_REC_ENTRY_ON_RX_BUFFER_UNDER_OVER_FLOW : string := "FALSE";
     DEBUG_PL_DISABLE_SCRAMBLING : string := "FALSE";
     DEBUG_PL_SIM_RESET_LFSR : string := "FALSE";
     DEBUG_PL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DEBUG_TL_DISABLE_FC_TIMEOUT : string := "FALSE";
     DEBUG_TL_DISABLE_RX_TLP_ORDER_CHECKS : string := "FALSE";
     DEBUG_TL_SPARE : std_logic_vector(15 downto 0) := X"0000";
     DNSTREAM_LINK_NUM : std_logic_vector(7 downto 0) := X"00";
     DSN_CAP_ENABLE : string := "FALSE";
     EXTENDED_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     HEADER_TYPE_OVERRIDE : string := "FALSE";
     IS_SWITCH_PORT : string := "FALSE";
     LEGACY_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     LL_ACK_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_DISABLE_SCHED_TX_NAK : string := "FALSE";
     LL_REPLAY_FROM_RAM_PIPELINE : string := "FALSE";
     LL_REPLAY_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LL_REPLAY_TO_RAM_PIPELINE : string := "FALSE";
     LL_RX_TLP_PARITY_GEN : string := "TRUE";
     LL_TX_TLP_PARITY_CHK : string := "TRUE";
     LL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     LTR_TX_MESSAGE_MINIMUM_INTERVAL : std_logic_vector(9 downto 0) := "10" & X"50";
     LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE : string := "FALSE";
     LTR_TX_MESSAGE_ON_LTR_ENABLE : string := "FALSE";
     MCAP_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     MCAP_CONFIGURE_OVERRIDE : string := "FALSE";
     MCAP_ENABLE : string := "FALSE";
     MCAP_EOS_DESIGN_SWITCH : string := "FALSE";
     MCAP_FPGA_BITSTREAM_VERSION : std_logic_vector(31 downto 0) := X"00000000";
     MCAP_GATE_IO_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_GATE_MEM_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INPUT_GATE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_EOS : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_ERROR : string := "FALSE";
     MCAP_VSEC_ID : std_logic_vector(15 downto 0) := X"0000";
     MCAP_VSEC_LEN : std_logic_vector(11 downto 0) := X"02C";
     MCAP_VSEC_REV : std_logic_vector(3 downto 0) := X"0";
     PF0_AER_CAP_ECRC_GEN_AND_CHECK_CAPABLE : string := "FALSE";
     PF0_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF0_ARI_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ATS_CAP_ON : string := "FALSE";
     PF0_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF0_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_ARI_FORWARD_ENABLE : string := "FALSE";
     PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE : string := "TRUE";
     PF0_DEV_CAP2_LTR_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_OBFF_SUPPORT : std_logic_vector(1 downto 0) := "00";
     PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT : string := "FALSE";
     PF0_DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     PF0_DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     PF0_DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "TRUE";
     PF0_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF0_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF0_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF0_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF0_LINK_CAP_ASPM_SUPPORT : integer := 0;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN4 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN4 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN4 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN4 : integer := 7;
     PF0_LINK_CONTROL_RCB : bit := '0';
     PF0_LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     PF0_LTR_CAP_MAX_NOSNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_MAX_SNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_LTR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSIX_CAP_PBA_BIR : integer := 0;
     PF0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF0_MSIX_CAP_TABLE_BIR : integer := 0;
     PF0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_MSIX_VECTOR_COUNT : std_logic_vector(5 downto 0) := "00" & X"4";
     PF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF0_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF0_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF0_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PM_CAP_PMESUPPORT_D0 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D1 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3HOT : string := "TRUE";
     PF0_PM_CAP_SUPP_D1_STATE : string := "TRUE";
     PF0_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF0_PM_CSR_NOSOFTRESET : string := "TRUE";
     PF0_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_PRI_CAP_ON : string := "FALSE";
     PF0_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF0_SECONDARY_PCIE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF0_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF0_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF0_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF0_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF0_TPHR_CAP_ENABLE : string := "FALSE";
     PF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF0_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF0_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_VC_ARB_CAPABILITY : std_logic_vector(3 downto 0) := X"0";
     PF0_VC_ARB_TBL_OFFSET : std_logic_vector(7 downto 0) := X"00";
     PF0_VC_CAP_ENABLE : string := "FALSE";
     PF0_VC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_VC_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_VC_EXTENDED_COUNT : string := "FALSE";
     PF0_VC_LOW_PRIORITY_EXTENDED_COUNT : string := "FALSE";
     PF1_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF1_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ATS_CAP_ON : string := "FALSE";
     PF1_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF1_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF1_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF1_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF1_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF1_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSIX_CAP_PBA_BIR : integer := 0;
     PF1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF1_MSIX_CAP_TABLE_BIR : integer := 0;
     PF1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF1_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF1_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_PRI_CAP_ON : string := "FALSE";
     PF1_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF1_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF1_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF1_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF1_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF1_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF2_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF2_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ATS_CAP_ON : string := "FALSE";
     PF2_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF2_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF2_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF2_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF2_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF2_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSIX_CAP_PBA_BIR : integer := 0;
     PF2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF2_MSIX_CAP_TABLE_BIR : integer := 0;
     PF2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF2_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF2_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_PRI_CAP_ON : string := "FALSE";
     PF2_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF2_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF2_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF2_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF2_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF2_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF3_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF3_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ATS_CAP_ON : string := "FALSE";
     PF3_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     PF3_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF3_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF3_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF3_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF3_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSIX_CAP_PBA_BIR : integer := 0;
     PF3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF3_MSIX_CAP_TABLE_BIR : integer := 0;
     PF3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF3_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF3_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_PRI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_PRI_CAP_ON : string := "FALSE";
     PF3_PRI_OST_PR_CAPACITY : std_logic_vector(31 downto 0) := X"00000000";
     PF3_SRIOV_ARI_CAPBL_HIER_PRESERVED : string := "FALSE";
     PF3_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"3";
     PF3_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"3";
     PF3_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF3_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PL_CFG_STATE_ROBUSTNESS_ENABLE : string := "TRUE";
     PL_CTRL_SKP_GEN_ENABLE : string := "FALSE";
     PL_CTRL_SKP_PARITY_AND_CRC_CHECK_DISABLE : string := "TRUE";
     PL_DEEMPH_SOURCE_SELECT : string := "TRUE";
     PL_DESKEW_ON_SKIP_IN_GEN12 : string := "FALSE";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN3 : string := "FALSE";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN4 : string := "FALSE";
     PL_DISABLE_AUTO_SPEED_CHANGE_TO_GEN2 : string := "FALSE";
     PL_DISABLE_DC_BALANCE : string := "FALSE";
     PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     PL_DISABLE_LANE_REVERSAL : string := "FALSE";
     PL_DISABLE_LFSR_UPDATE_ON_SKP : std_logic_vector(1 downto 0) := "00";
     PL_DISABLE_RETRAIN_ON_EB_ERROR : string := "FALSE";
     PL_DISABLE_RETRAIN_ON_FRAMING_ERROR : string := "FALSE";
     PL_DISABLE_RETRAIN_ON_SPECIFIC_FRAMING_ERROR : std_logic_vector(15 downto 0) := X"0000";
     PL_DISABLE_UPCONFIG_CAPABLE : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_COEFF_CHECK : std_logic_vector(1 downto 0) := "00";
     PL_EQ_ADAPT_DISABLE_PRESET_CHECK : std_logic_vector(1 downto 0) := "00";
     PL_EQ_ADAPT_ITER_COUNT : std_logic_vector(4 downto 0) := "0" & X"2";
     PL_EQ_ADAPT_REJECT_RETRY_COUNT : std_logic_vector(1 downto 0) := "01";
     PL_EQ_BYPASS_PHASE23 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_DEFAULT_RX_PRESET_HINT : std_logic_vector(5 downto 0) := "11" & X"3";
     PL_EQ_DEFAULT_TX_PRESET : std_logic_vector(7 downto 0) := X"44";
     PL_EQ_DISABLE_MISMATCH_CHECK : string := "TRUE";
     PL_EQ_RX_ADAPT_EQ_PHASE0 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_RX_ADAPT_EQ_PHASE1 : std_logic_vector(1 downto 0) := "00";
     PL_EQ_SHORT_ADAPT_PHASE : string := "FALSE";
     PL_EQ_TX_8G_EQ_TS2_ENABLE : string := "FALSE";
     PL_EXIT_LOOPBACK_ON_EI_ENTRY : string := "TRUE";
     PL_INFER_EI_DISABLE_LPBK_ACTIVE : string := "TRUE";
     PL_INFER_EI_DISABLE_REC_RC : string := "FALSE";
     PL_INFER_EI_DISABLE_REC_SPD : string := "FALSE";
     PL_LANE0_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE10_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE11_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE12_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE13_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE14_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE15_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE1_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE2_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE3_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE4_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE5_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE6_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE7_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE8_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LANE9_EQ_CONTROL : std_logic_vector(31 downto 0) := X"00003F00";
     PL_LINK_CAP_MAX_LINK_SPEED : std_logic_vector(3 downto 0) := X"4";
     PL_LINK_CAP_MAX_LINK_WIDTH : std_logic_vector(4 downto 0) := "0" & X"8";
     PL_N_FTS : integer := 255;
     PL_QUIESCE_GUARANTEE_DISABLE : string := "FALSE";
     PL_REDO_EQ_SOURCE_SELECT : string := "TRUE";
     PL_REPORT_ALL_PHY_ERRORS : std_logic_vector(7 downto 0) := X"00";
     PL_RX_ADAPT_TIMER_CLWS_CLOBBER_TX_TS : std_logic_vector(1 downto 0) := "00";
     PL_RX_ADAPT_TIMER_CLWS_GEN3 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_CLWS_GEN4 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_RRL_CLOBBER_TX_TS : std_logic_vector(1 downto 0) := "00";
     PL_RX_ADAPT_TIMER_RRL_GEN3 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_ADAPT_TIMER_RRL_GEN4 : std_logic_vector(3 downto 0) := X"0";
     PL_RX_L0S_EXIT_TO_RECOVERY : std_logic_vector(1 downto 0) := "00";
     PL_SIM_FAST_LINK_TRAINING : std_logic_vector(1 downto 0) := "00";
     PL_SRIS_ENABLE : string := "FALSE";
     PL_SRIS_SKPOS_GEN_SPD_VEC : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_SRIS_SKPOS_REC_SPD_VEC : std_logic_vector(6 downto 0) := "000" & X"0";
     PL_UPSTREAM_FACING : string := "TRUE";
     PL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     PL_USER_SPARE2 : std_logic_vector(15 downto 0) := X"0000";
     PM_ASPML0S_TIMEOUT : std_logic_vector(15 downto 0) := X"1500";
     PM_ASPML1_ENTRY_DELAY : std_logic_vector(19 downto 0) := X"003E8";
     PM_ENABLE_L23_ENTRY : string := "FALSE";
     PM_ENABLE_SLOT_POWER_CAPTURE : string := "TRUE";
     PM_L1_REENTRY_DELAY : std_logic_vector(31 downto 0) := X"00000100";
     PM_PME_SERVICE_TIMEOUT_DELAY : std_logic_vector(19 downto 0) := X"00000";
     PM_PME_TURNOFF_ACK_DELAY : std_logic_vector(15 downto 0) := X"0100";
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SIM_JTAG_IDCODE : std_logic_vector(31 downto 0) := X"00000000";
     SIM_VERSION : string := "1.0";
     SPARE_BIT0 : string := "FALSE";
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : string := "FALSE";
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE1 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE2 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE3 : std_logic_vector(7 downto 0) := X"00";
     SPARE_WORD0 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD1 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD2 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD3 : std_logic_vector(31 downto 0) := X"00000000";
     SRIOV_CAP_ENABLE : std_logic_vector(3 downto 0) := X"0";
     TL2CFG_IF_PARITY_CHK : string := "TRUE";
     TL_COMPLETION_RAM_NUM_TLPS : std_logic_vector(1 downto 0) := "00";
     TL_COMPLETION_RAM_SIZE : std_logic_vector(1 downto 0) := "01";
     TL_CREDITS_CD : std_logic_vector(11 downto 0) := X"000";
     TL_CREDITS_CD_VC1 : std_logic_vector(11 downto 0) := X"000";
     TL_CREDITS_CH : std_logic_vector(7 downto 0) := X"00";
     TL_CREDITS_CH_VC1 : std_logic_vector(7 downto 0) := X"00";
     TL_CREDITS_NPD : std_logic_vector(11 downto 0) := X"004";
     TL_CREDITS_NPD_VC1 : std_logic_vector(11 downto 0) := X"000";
     TL_CREDITS_NPH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_NPH_VC1 : std_logic_vector(7 downto 0) := X"01";
     TL_CREDITS_PD : std_logic_vector(11 downto 0) := X"0E0";
     TL_CREDITS_PD_VC1 : std_logic_vector(11 downto 0) := X"3E0";
     TL_CREDITS_PH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_PH_VC1 : std_logic_vector(7 downto 0) := X"20";
     TL_FC_UPDATE_MIN_INTERVAL_TIME : std_logic_vector(4 downto 0) := "0" & X"2";
     TL_FC_UPDATE_MIN_INTERVAL_TIME_VC1 : std_logic_vector(4 downto 0) := "0" & X"2";
     TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT : std_logic_vector(4 downto 0) := "0" & X"8";
     TL_FC_UPDATE_MIN_INTERVAL_TLP_COUNT_VC1 : std_logic_vector(4 downto 0) := "0" & X"8";
     TL_FEATURE_ENABLE_FC_SCALING : string := "FALSE";
     TL_PF_ENABLE_REG : std_logic_vector(1 downto 0) := "00";
     TL_POSTED_RAM_SIZE : bit := '0';
     TL_RX_COMPLETION_FROM_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_COMPLETION_TO_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_COMPLETION_TO_RAM_WRITE_PIPELINE : string := "FALSE";
     TL_RX_POSTED_FROM_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_POSTED_TO_RAM_READ_PIPELINE : string := "FALSE";
     TL_RX_POSTED_TO_RAM_WRITE_PIPELINE : string := "FALSE";
     TL_TX_MUX_STRICT_PRIORITY : string := "TRUE";
     TL_TX_TLP_STRADDLE_ENABLE : string := "FALSE";
     TL_TX_TLP_TERMINATE_PARITY : string := "FALSE";
     TL_USER_SPARE : std_logic_vector(15 downto 0) := X"0000";
     TPH_FROM_RAM_PIPELINE : string := "FALSE";
     TPH_TO_RAM_PIPELINE : string := "FALSE";
     VF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"80";
     VFG0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG0_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_ATS_CAP_ON : string := "FALSE";
     VFG0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG0_MSIX_CAP_PBA_BIR : integer := 0;
     VFG0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG0_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG0_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG1_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_ATS_CAP_ON : string := "FALSE";
     VFG1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG1_MSIX_CAP_PBA_BIR : integer := 0;
     VFG1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG1_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG1_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG2_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_ATS_CAP_ON : string := "FALSE";
     VFG2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG2_MSIX_CAP_PBA_BIR : integer := 0;
     VFG2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG2_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG2_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VFG3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_ATS_CAP_INV_QUEUE_DEPTH : std_logic_vector(4 downto 0) := "0" & X"0";
     VFG3_ATS_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_ATS_CAP_ON : string := "FALSE";
     VFG3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG3_MSIX_CAP_PBA_BIR : integer := 0;
     VFG3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VFG3_MSIX_CAP_TABLE_BIR : integer := 0;
     VFG3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VFG3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VFG3_PCIE_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VFG3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VFG3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000"
  );
  port (
     AXIUSEROUT : out std_logic_vector(7 downto 0);
     CCIXTXCREDIT : out std_ulogic;
     CFGBUSNUMBER : out std_logic_vector(7 downto 0);
     CFGCURRENTSPEED : out std_logic_vector(1 downto 0);
     CFGERRCOROUT : out std_ulogic;
     CFGERRFATALOUT : out std_ulogic;
     CFGERRNONFATALOUT : out std_ulogic;
     CFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     CFGEXTREADRECEIVED : out std_ulogic;
     CFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     CFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGEXTWRITERECEIVED : out std_ulogic;
     CFGFCCPLD : out std_logic_vector(11 downto 0);
     CFGFCCPLH : out std_logic_vector(7 downto 0);
     CFGFCNPD : out std_logic_vector(11 downto 0);
     CFGFCNPH : out std_logic_vector(7 downto 0);
     CFGFCPD : out std_logic_vector(11 downto 0);
     CFGFCPH : out std_logic_vector(7 downto 0);
     CFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     CFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     CFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     CFGHOTRESETOUT : out std_ulogic;
     CFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIFAIL : out std_ulogic;
     CFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     CFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     CFGINTERRUPTMSISENT : out std_ulogic;
     CFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXVECPENDINGSTATUS : out std_ulogic;
     CFGINTERRUPTSENT : out std_ulogic;
     CFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGLOCALERROROUT : out std_logic_vector(4 downto 0);
     CFGLOCALERRORVALID : out std_ulogic;
     CFGLTRENABLE : out std_ulogic;
     CFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     CFGMAXPAYLOAD : out std_logic_vector(1 downto 0);
     CFGMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     CFGMGMTREADWRITEDONE : out std_ulogic;
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     CFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     CFGMSGTRANSMITDONE : out std_ulogic;
     CFGMSIXRAMADDRESS : out std_logic_vector(12 downto 0);
     CFGMSIXRAMREADENABLE : out std_ulogic;
     CFGMSIXRAMWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGMSIXRAMWRITEDATA : out std_logic_vector(35 downto 0);
     CFGNEGOTIATEDWIDTH : out std_logic_vector(2 downto 0);
     CFGOBFFENABLE : out std_logic_vector(1 downto 0);
     CFGPHYLINKDOWN : out std_ulogic;
     CFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     CFGPLSTATUSCHANGE : out std_ulogic;
     CFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     CFGRCBSTATUS : out std_logic_vector(3 downto 0);
     CFGRXPMSTATE : out std_logic_vector(1 downto 0);
     CFGTPHRAMADDRESS : out std_logic_vector(11 downto 0);
     CFGTPHRAMREADENABLE : out std_ulogic;
     CFGTPHRAMWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGTPHRAMWRITEDATA : out std_logic_vector(35 downto 0);
     CFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     CFGTPHSTMODE : out std_logic_vector(11 downto 0);
     CFGTXPMSTATE : out std_logic_vector(1 downto 0);
     CFGVC1ENABLE : out std_ulogic;
     CFGVC1NEGOTIATIONPENDING : out std_ulogic;
     CONFMCAPDESIGNSWITCH : out std_ulogic;
     CONFMCAPEOS : out std_ulogic;
     CONFMCAPINUSEBYPCIE : out std_ulogic;
     CONFREQREADY : out std_ulogic;
     CONFRESPRDATA : out std_logic_vector(31 downto 0);
     CONFRESPVALID : out std_ulogic;
     DBGCCIXOUT : out std_logic_vector(129 downto 0);
     DBGCTRL0OUT : out std_logic_vector(31 downto 0);
     DBGCTRL1OUT : out std_logic_vector(31 downto 0);
     DBGDATA0OUT : out std_logic_vector(255 downto 0);
     DBGDATA1OUT : out std_logic_vector(255 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     MAXISCCIXRXTUSER : out std_logic_vector(45 downto 0);
     MAXISCCIXRXTVALID : out std_ulogic;
     MAXISCQTDATA : out std_logic_vector(255 downto 0);
     MAXISCQTKEEP : out std_logic_vector(7 downto 0);
     MAXISCQTLAST : out std_ulogic;
     MAXISCQTUSER : out std_logic_vector(87 downto 0);
     MAXISCQTVALID : out std_ulogic;
     MAXISRCTDATA : out std_logic_vector(255 downto 0);
     MAXISRCTKEEP : out std_logic_vector(7 downto 0);
     MAXISRCTLAST : out std_ulogic;
     MAXISRCTUSER : out std_logic_vector(74 downto 0);
     MAXISRCTVALID : out std_ulogic;
     MIREPLAYRAMADDRESS0 : out std_logic_vector(8 downto 0);
     MIREPLAYRAMADDRESS1 : out std_logic_vector(8 downto 0);
     MIREPLAYRAMREADENABLE0 : out std_ulogic;
     MIREPLAYRAMREADENABLE1 : out std_ulogic;
     MIREPLAYRAMWRITEDATA0 : out std_logic_vector(127 downto 0);
     MIREPLAYRAMWRITEDATA1 : out std_logic_vector(127 downto 0);
     MIREPLAYRAMWRITEENABLE0 : out std_ulogic;
     MIREPLAYRAMWRITEENABLE1 : out std_ulogic;
     MIRXCOMPLETIONRAMREADADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMREADADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMREADENABLE0 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMREADENABLE1 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMWRITEADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMWRITEADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXCOMPLETIONRAMWRITEDATA0 : out std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMWRITEDATA1 : out std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMWRITEENABLE0 : out std_logic_vector(1 downto 0);
     MIRXCOMPLETIONRAMWRITEENABLE1 : out std_logic_vector(1 downto 0);
     MIRXPOSTEDREQUESTRAMREADADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMREADADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMREADENABLE0 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMREADENABLE1 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMWRITEADDRESS0 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEADDRESS1 : out std_logic_vector(8 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEDATA0 : out std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEDATA1 : out std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMWRITEENABLE0 : out std_ulogic;
     MIRXPOSTEDREQUESTRAMWRITEENABLE1 : out std_ulogic;
     PCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     PCIEPERST0B : out std_ulogic;
     PCIEPERST1B : out std_ulogic;
     PCIERQSEQNUM0 : out std_logic_vector(5 downto 0);
     PCIERQSEQNUM1 : out std_logic_vector(5 downto 0);
     PCIERQSEQNUMVLD0 : out std_ulogic;
     PCIERQSEQNUMVLD1 : out std_ulogic;
     PCIERQTAG0 : out std_logic_vector(7 downto 0);
     PCIERQTAG1 : out std_logic_vector(7 downto 0);
     PCIERQTAGAV : out std_logic_vector(3 downto 0);
     PCIERQTAGVLD0 : out std_ulogic;
     PCIERQTAGVLD1 : out std_ulogic;
     PCIETFCNPDAV : out std_logic_vector(3 downto 0);
     PCIETFCNPHAV : out std_logic_vector(3 downto 0);
     PIPERX00EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX00POLARITY : out std_ulogic;
     PIPERX01EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX01POLARITY : out std_ulogic;
     PIPERX02EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX02POLARITY : out std_ulogic;
     PIPERX03EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX03POLARITY : out std_ulogic;
     PIPERX04EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX04POLARITY : out std_ulogic;
     PIPERX05EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX05POLARITY : out std_ulogic;
     PIPERX06EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX06POLARITY : out std_ulogic;
     PIPERX07EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX07POLARITY : out std_ulogic;
     PIPERX08EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX08POLARITY : out std_ulogic;
     PIPERX09EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX09POLARITY : out std_ulogic;
     PIPERX10EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX10POLARITY : out std_ulogic;
     PIPERX11EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX11POLARITY : out std_ulogic;
     PIPERX12EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX12POLARITY : out std_ulogic;
     PIPERX13EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX13POLARITY : out std_ulogic;
     PIPERX14EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX14POLARITY : out std_ulogic;
     PIPERX15EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX15POLARITY : out std_ulogic;
     PIPERXEQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERXEQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPETX00CHARISK : out std_logic_vector(1 downto 0);
     PIPETX00COMPLIANCE : out std_ulogic;
     PIPETX00DATA : out std_logic_vector(31 downto 0);
     PIPETX00DATAVALID : out std_ulogic;
     PIPETX00ELECIDLE : out std_ulogic;
     PIPETX00EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX00EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX00POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX00STARTBLOCK : out std_ulogic;
     PIPETX00SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX01CHARISK : out std_logic_vector(1 downto 0);
     PIPETX01COMPLIANCE : out std_ulogic;
     PIPETX01DATA : out std_logic_vector(31 downto 0);
     PIPETX01DATAVALID : out std_ulogic;
     PIPETX01ELECIDLE : out std_ulogic;
     PIPETX01EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX01EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX01POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX01STARTBLOCK : out std_ulogic;
     PIPETX01SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX02CHARISK : out std_logic_vector(1 downto 0);
     PIPETX02COMPLIANCE : out std_ulogic;
     PIPETX02DATA : out std_logic_vector(31 downto 0);
     PIPETX02DATAVALID : out std_ulogic;
     PIPETX02ELECIDLE : out std_ulogic;
     PIPETX02EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX02EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX02POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX02STARTBLOCK : out std_ulogic;
     PIPETX02SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX03CHARISK : out std_logic_vector(1 downto 0);
     PIPETX03COMPLIANCE : out std_ulogic;
     PIPETX03DATA : out std_logic_vector(31 downto 0);
     PIPETX03DATAVALID : out std_ulogic;
     PIPETX03ELECIDLE : out std_ulogic;
     PIPETX03EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX03EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX03POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX03STARTBLOCK : out std_ulogic;
     PIPETX03SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX04CHARISK : out std_logic_vector(1 downto 0);
     PIPETX04COMPLIANCE : out std_ulogic;
     PIPETX04DATA : out std_logic_vector(31 downto 0);
     PIPETX04DATAVALID : out std_ulogic;
     PIPETX04ELECIDLE : out std_ulogic;
     PIPETX04EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX04EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX04POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX04STARTBLOCK : out std_ulogic;
     PIPETX04SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX05CHARISK : out std_logic_vector(1 downto 0);
     PIPETX05COMPLIANCE : out std_ulogic;
     PIPETX05DATA : out std_logic_vector(31 downto 0);
     PIPETX05DATAVALID : out std_ulogic;
     PIPETX05ELECIDLE : out std_ulogic;
     PIPETX05EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX05EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX05POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX05STARTBLOCK : out std_ulogic;
     PIPETX05SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX06CHARISK : out std_logic_vector(1 downto 0);
     PIPETX06COMPLIANCE : out std_ulogic;
     PIPETX06DATA : out std_logic_vector(31 downto 0);
     PIPETX06DATAVALID : out std_ulogic;
     PIPETX06ELECIDLE : out std_ulogic;
     PIPETX06EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX06EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX06POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX06STARTBLOCK : out std_ulogic;
     PIPETX06SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX07CHARISK : out std_logic_vector(1 downto 0);
     PIPETX07COMPLIANCE : out std_ulogic;
     PIPETX07DATA : out std_logic_vector(31 downto 0);
     PIPETX07DATAVALID : out std_ulogic;
     PIPETX07ELECIDLE : out std_ulogic;
     PIPETX07EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX07EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX07POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX07STARTBLOCK : out std_ulogic;
     PIPETX07SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX08CHARISK : out std_logic_vector(1 downto 0);
     PIPETX08COMPLIANCE : out std_ulogic;
     PIPETX08DATA : out std_logic_vector(31 downto 0);
     PIPETX08DATAVALID : out std_ulogic;
     PIPETX08ELECIDLE : out std_ulogic;
     PIPETX08EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX08EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX08POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX08STARTBLOCK : out std_ulogic;
     PIPETX08SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX09CHARISK : out std_logic_vector(1 downto 0);
     PIPETX09COMPLIANCE : out std_ulogic;
     PIPETX09DATA : out std_logic_vector(31 downto 0);
     PIPETX09DATAVALID : out std_ulogic;
     PIPETX09ELECIDLE : out std_ulogic;
     PIPETX09EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX09EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX09POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX09STARTBLOCK : out std_ulogic;
     PIPETX09SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX10CHARISK : out std_logic_vector(1 downto 0);
     PIPETX10COMPLIANCE : out std_ulogic;
     PIPETX10DATA : out std_logic_vector(31 downto 0);
     PIPETX10DATAVALID : out std_ulogic;
     PIPETX10ELECIDLE : out std_ulogic;
     PIPETX10EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX10EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX10POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX10STARTBLOCK : out std_ulogic;
     PIPETX10SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX11CHARISK : out std_logic_vector(1 downto 0);
     PIPETX11COMPLIANCE : out std_ulogic;
     PIPETX11DATA : out std_logic_vector(31 downto 0);
     PIPETX11DATAVALID : out std_ulogic;
     PIPETX11ELECIDLE : out std_ulogic;
     PIPETX11EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX11EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX11POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX11STARTBLOCK : out std_ulogic;
     PIPETX11SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX12CHARISK : out std_logic_vector(1 downto 0);
     PIPETX12COMPLIANCE : out std_ulogic;
     PIPETX12DATA : out std_logic_vector(31 downto 0);
     PIPETX12DATAVALID : out std_ulogic;
     PIPETX12ELECIDLE : out std_ulogic;
     PIPETX12EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX12EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX12POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX12STARTBLOCK : out std_ulogic;
     PIPETX12SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX13CHARISK : out std_logic_vector(1 downto 0);
     PIPETX13COMPLIANCE : out std_ulogic;
     PIPETX13DATA : out std_logic_vector(31 downto 0);
     PIPETX13DATAVALID : out std_ulogic;
     PIPETX13ELECIDLE : out std_ulogic;
     PIPETX13EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX13EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX13POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX13STARTBLOCK : out std_ulogic;
     PIPETX13SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX14CHARISK : out std_logic_vector(1 downto 0);
     PIPETX14COMPLIANCE : out std_ulogic;
     PIPETX14DATA : out std_logic_vector(31 downto 0);
     PIPETX14DATAVALID : out std_ulogic;
     PIPETX14ELECIDLE : out std_ulogic;
     PIPETX14EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX14EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX14POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX14STARTBLOCK : out std_ulogic;
     PIPETX14SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX15CHARISK : out std_logic_vector(1 downto 0);
     PIPETX15COMPLIANCE : out std_ulogic;
     PIPETX15DATA : out std_logic_vector(31 downto 0);
     PIPETX15DATAVALID : out std_ulogic;
     PIPETX15ELECIDLE : out std_ulogic;
     PIPETX15EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX15EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX15POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX15STARTBLOCK : out std_ulogic;
     PIPETX15SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETXDEEMPH : out std_ulogic;
     PIPETXMARGIN : out std_logic_vector(2 downto 0);
     PIPETXRATE : out std_logic_vector(1 downto 0);
     PIPETXRCVRDET : out std_ulogic;
     PIPETXRESET : out std_ulogic;
     PIPETXSWING : out std_ulogic;
     PLEQINPROGRESS : out std_ulogic;
     PLEQPHASE : out std_logic_vector(1 downto 0);
     PLGEN34EQMISMATCH : out std_ulogic;
     SAXISCCTREADY : out std_logic_vector(3 downto 0);
     SAXISRQTREADY : out std_logic_vector(3 downto 0);
     USERSPAREOUT : out std_logic_vector(23 downto 0);
     AXIUSERIN : in std_logic_vector(7 downto 0);
     CCIXOPTIMIZEDTLPTXANDRXENABLE : in std_ulogic;
     CCIXRXCORRECTABLEERRORDETECTED : in std_ulogic;
     CCIXRXFIFOOVERFLOW : in std_ulogic;
     CCIXRXTLPFORWARDED0 : in std_ulogic;
     CCIXRXTLPFORWARDED1 : in std_ulogic;
     CCIXRXTLPFORWARDEDLENGTH0 : in std_logic_vector(5 downto 0);
     CCIXRXTLPFORWARDEDLENGTH1 : in std_logic_vector(5 downto 0);
     CCIXRXUNCORRECTABLEERRORDETECTED : in std_ulogic;
     CFGCONFIGSPACEENABLE : in std_ulogic;
     CFGDEVIDPF0 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF1 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF2 : in std_logic_vector(15 downto 0);
     CFGDEVIDPF3 : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGDSPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGERRCORIN : in std_ulogic;
     CFGERRUNCORIN : in std_ulogic;
     CFGEXTREADDATA : in std_logic_vector(31 downto 0);
     CFGEXTREADDATAVALID : in std_ulogic;
     CFGFCSEL : in std_logic_vector(2 downto 0);
     CFGFCVCSEL : in std_ulogic;
     CFGFLRDONE : in std_logic_vector(3 downto 0);
     CFGHOTRESETIN : in std_ulogic;
     CFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     CFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     CFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSISELECT : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     CFGINTERRUPTMSITPHSTTAG : in std_logic_vector(7 downto 0);
     CFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIXINT : in std_ulogic;
     CFGINTERRUPTMSIXVECPENDING : in std_logic_vector(1 downto 0);
     CFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     CFGLINKTRAININGENABLE : in std_ulogic;
     CFGMGMTADDR : in std_logic_vector(9 downto 0);
     CFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     CFGMGMTDEBUGACCESS : in std_ulogic;
     CFGMGMTFUNCTIONNUMBER : in std_logic_vector(7 downto 0);
     CFGMGMTREAD : in std_ulogic;
     CFGMGMTWRITE : in std_ulogic;
     CFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMIT : in std_ulogic;
     CFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     CFGMSIXRAMREADDATA : in std_logic_vector(35 downto 0);
     CFGPMASPML1ENTRYREJECT : in std_ulogic;
     CFGPMASPMTXL0SENTRYDISABLE : in std_ulogic;
     CFGPOWERSTATECHANGEACK : in std_ulogic;
     CFGREQPMTRANSITIONL23READY : in std_ulogic;
     CFGREVIDPF0 : in std_logic_vector(7 downto 0);
     CFGREVIDPF1 : in std_logic_vector(7 downto 0);
     CFGREVIDPF2 : in std_logic_vector(7 downto 0);
     CFGREVIDPF3 : in std_logic_vector(7 downto 0);
     CFGSUBSYSIDPF0 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF1 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF2 : in std_logic_vector(15 downto 0);
     CFGSUBSYSIDPF3 : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTPHRAMREADDATA : in std_logic_vector(35 downto 0);
     CFGVENDID : in std_logic_vector(15 downto 0);
     CFGVFFLRDONE : in std_ulogic;
     CFGVFFLRFUNCNUM : in std_logic_vector(7 downto 0);
     CONFMCAPREQUESTBYCONF : in std_ulogic;
     CONFREQDATA : in std_logic_vector(31 downto 0);
     CONFREQREGNUM : in std_logic_vector(3 downto 0);
     CONFREQTYPE : in std_logic_vector(1 downto 0);
     CONFREQVALID : in std_ulogic;
     CORECLK : in std_ulogic;
     CORECLKCCIX : in std_ulogic;
     CORECLKMIREPLAYRAM0 : in std_ulogic;
     CORECLKMIREPLAYRAM1 : in std_ulogic;
     CORECLKMIRXCOMPLETIONRAM0 : in std_ulogic;
     CORECLKMIRXCOMPLETIONRAM1 : in std_ulogic;
     CORECLKMIRXPOSTEDREQUESTRAM0 : in std_ulogic;
     CORECLKMIRXPOSTEDREQUESTRAM1 : in std_ulogic;
     DBGSEL0 : in std_logic_vector(5 downto 0);
     DBGSEL1 : in std_logic_vector(5 downto 0);
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     MAXISCQTREADY : in std_logic_vector(21 downto 0);
     MAXISRCTREADY : in std_logic_vector(21 downto 0);
     MCAPCLK : in std_ulogic;
     MCAPPERST0B : in std_ulogic;
     MCAPPERST1B : in std_ulogic;
     MGMTRESETN : in std_ulogic;
     MGMTSTICKYRESETN : in std_ulogic;
     MIREPLAYRAMERRCOR : in std_logic_vector(5 downto 0);
     MIREPLAYRAMERRUNCOR : in std_logic_vector(5 downto 0);
     MIREPLAYRAMREADDATA0 : in std_logic_vector(127 downto 0);
     MIREPLAYRAMREADDATA1 : in std_logic_vector(127 downto 0);
     MIRXCOMPLETIONRAMERRCOR : in std_logic_vector(11 downto 0);
     MIRXCOMPLETIONRAMERRUNCOR : in std_logic_vector(11 downto 0);
     MIRXCOMPLETIONRAMREADDATA0 : in std_logic_vector(143 downto 0);
     MIRXCOMPLETIONRAMREADDATA1 : in std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMERRCOR : in std_logic_vector(5 downto 0);
     MIRXPOSTEDREQUESTRAMERRUNCOR : in std_logic_vector(5 downto 0);
     MIRXPOSTEDREQUESTRAMREADDATA0 : in std_logic_vector(143 downto 0);
     MIRXPOSTEDREQUESTRAMREADDATA1 : in std_logic_vector(143 downto 0);
     PCIECOMPLDELIVERED : in std_logic_vector(1 downto 0);
     PCIECOMPLDELIVEREDTAG0 : in std_logic_vector(7 downto 0);
     PCIECOMPLDELIVEREDTAG1 : in std_logic_vector(7 downto 0);
     PCIECQNPREQ : in std_logic_vector(1 downto 0);
     PCIECQNPUSERCREDITRCVD : in std_ulogic;
     PCIECQPIPELINEEMPTY : in std_ulogic;
     PCIEPOSTEDREQDELIVERED : in std_ulogic;
     PIPECLK : in std_ulogic;
     PIPECLKEN : in std_ulogic;
     PIPEEQFS : in std_logic_vector(5 downto 0);
     PIPEEQLF : in std_logic_vector(5 downto 0);
     PIPERESETN : in std_ulogic;
     PIPERX00CHARISK : in std_logic_vector(1 downto 0);
     PIPERX00DATA : in std_logic_vector(31 downto 0);
     PIPERX00DATAVALID : in std_ulogic;
     PIPERX00ELECIDLE : in std_ulogic;
     PIPERX00EQDONE : in std_ulogic;
     PIPERX00EQLPADAPTDONE : in std_ulogic;
     PIPERX00EQLPLFFSSEL : in std_ulogic;
     PIPERX00EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX00PHYSTATUS : in std_ulogic;
     PIPERX00STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX00STATUS : in std_logic_vector(2 downto 0);
     PIPERX00SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX00VALID : in std_ulogic;
     PIPERX01CHARISK : in std_logic_vector(1 downto 0);
     PIPERX01DATA : in std_logic_vector(31 downto 0);
     PIPERX01DATAVALID : in std_ulogic;
     PIPERX01ELECIDLE : in std_ulogic;
     PIPERX01EQDONE : in std_ulogic;
     PIPERX01EQLPADAPTDONE : in std_ulogic;
     PIPERX01EQLPLFFSSEL : in std_ulogic;
     PIPERX01EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX01PHYSTATUS : in std_ulogic;
     PIPERX01STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX01STATUS : in std_logic_vector(2 downto 0);
     PIPERX01SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX01VALID : in std_ulogic;
     PIPERX02CHARISK : in std_logic_vector(1 downto 0);
     PIPERX02DATA : in std_logic_vector(31 downto 0);
     PIPERX02DATAVALID : in std_ulogic;
     PIPERX02ELECIDLE : in std_ulogic;
     PIPERX02EQDONE : in std_ulogic;
     PIPERX02EQLPADAPTDONE : in std_ulogic;
     PIPERX02EQLPLFFSSEL : in std_ulogic;
     PIPERX02EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX02PHYSTATUS : in std_ulogic;
     PIPERX02STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX02STATUS : in std_logic_vector(2 downto 0);
     PIPERX02SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX02VALID : in std_ulogic;
     PIPERX03CHARISK : in std_logic_vector(1 downto 0);
     PIPERX03DATA : in std_logic_vector(31 downto 0);
     PIPERX03DATAVALID : in std_ulogic;
     PIPERX03ELECIDLE : in std_ulogic;
     PIPERX03EQDONE : in std_ulogic;
     PIPERX03EQLPADAPTDONE : in std_ulogic;
     PIPERX03EQLPLFFSSEL : in std_ulogic;
     PIPERX03EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX03PHYSTATUS : in std_ulogic;
     PIPERX03STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX03STATUS : in std_logic_vector(2 downto 0);
     PIPERX03SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX03VALID : in std_ulogic;
     PIPERX04CHARISK : in std_logic_vector(1 downto 0);
     PIPERX04DATA : in std_logic_vector(31 downto 0);
     PIPERX04DATAVALID : in std_ulogic;
     PIPERX04ELECIDLE : in std_ulogic;
     PIPERX04EQDONE : in std_ulogic;
     PIPERX04EQLPADAPTDONE : in std_ulogic;
     PIPERX04EQLPLFFSSEL : in std_ulogic;
     PIPERX04EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX04PHYSTATUS : in std_ulogic;
     PIPERX04STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX04STATUS : in std_logic_vector(2 downto 0);
     PIPERX04SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX04VALID : in std_ulogic;
     PIPERX05CHARISK : in std_logic_vector(1 downto 0);
     PIPERX05DATA : in std_logic_vector(31 downto 0);
     PIPERX05DATAVALID : in std_ulogic;
     PIPERX05ELECIDLE : in std_ulogic;
     PIPERX05EQDONE : in std_ulogic;
     PIPERX05EQLPADAPTDONE : in std_ulogic;
     PIPERX05EQLPLFFSSEL : in std_ulogic;
     PIPERX05EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX05PHYSTATUS : in std_ulogic;
     PIPERX05STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX05STATUS : in std_logic_vector(2 downto 0);
     PIPERX05SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX05VALID : in std_ulogic;
     PIPERX06CHARISK : in std_logic_vector(1 downto 0);
     PIPERX06DATA : in std_logic_vector(31 downto 0);
     PIPERX06DATAVALID : in std_ulogic;
     PIPERX06ELECIDLE : in std_ulogic;
     PIPERX06EQDONE : in std_ulogic;
     PIPERX06EQLPADAPTDONE : in std_ulogic;
     PIPERX06EQLPLFFSSEL : in std_ulogic;
     PIPERX06EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX06PHYSTATUS : in std_ulogic;
     PIPERX06STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX06STATUS : in std_logic_vector(2 downto 0);
     PIPERX06SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX06VALID : in std_ulogic;
     PIPERX07CHARISK : in std_logic_vector(1 downto 0);
     PIPERX07DATA : in std_logic_vector(31 downto 0);
     PIPERX07DATAVALID : in std_ulogic;
     PIPERX07ELECIDLE : in std_ulogic;
     PIPERX07EQDONE : in std_ulogic;
     PIPERX07EQLPADAPTDONE : in std_ulogic;
     PIPERX07EQLPLFFSSEL : in std_ulogic;
     PIPERX07EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX07PHYSTATUS : in std_ulogic;
     PIPERX07STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX07STATUS : in std_logic_vector(2 downto 0);
     PIPERX07SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX07VALID : in std_ulogic;
     PIPERX08CHARISK : in std_logic_vector(1 downto 0);
     PIPERX08DATA : in std_logic_vector(31 downto 0);
     PIPERX08DATAVALID : in std_ulogic;
     PIPERX08ELECIDLE : in std_ulogic;
     PIPERX08EQDONE : in std_ulogic;
     PIPERX08EQLPADAPTDONE : in std_ulogic;
     PIPERX08EQLPLFFSSEL : in std_ulogic;
     PIPERX08EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX08PHYSTATUS : in std_ulogic;
     PIPERX08STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX08STATUS : in std_logic_vector(2 downto 0);
     PIPERX08SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX08VALID : in std_ulogic;
     PIPERX09CHARISK : in std_logic_vector(1 downto 0);
     PIPERX09DATA : in std_logic_vector(31 downto 0);
     PIPERX09DATAVALID : in std_ulogic;
     PIPERX09ELECIDLE : in std_ulogic;
     PIPERX09EQDONE : in std_ulogic;
     PIPERX09EQLPADAPTDONE : in std_ulogic;
     PIPERX09EQLPLFFSSEL : in std_ulogic;
     PIPERX09EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX09PHYSTATUS : in std_ulogic;
     PIPERX09STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX09STATUS : in std_logic_vector(2 downto 0);
     PIPERX09SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX09VALID : in std_ulogic;
     PIPERX10CHARISK : in std_logic_vector(1 downto 0);
     PIPERX10DATA : in std_logic_vector(31 downto 0);
     PIPERX10DATAVALID : in std_ulogic;
     PIPERX10ELECIDLE : in std_ulogic;
     PIPERX10EQDONE : in std_ulogic;
     PIPERX10EQLPADAPTDONE : in std_ulogic;
     PIPERX10EQLPLFFSSEL : in std_ulogic;
     PIPERX10EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX10PHYSTATUS : in std_ulogic;
     PIPERX10STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX10STATUS : in std_logic_vector(2 downto 0);
     PIPERX10SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX10VALID : in std_ulogic;
     PIPERX11CHARISK : in std_logic_vector(1 downto 0);
     PIPERX11DATA : in std_logic_vector(31 downto 0);
     PIPERX11DATAVALID : in std_ulogic;
     PIPERX11ELECIDLE : in std_ulogic;
     PIPERX11EQDONE : in std_ulogic;
     PIPERX11EQLPADAPTDONE : in std_ulogic;
     PIPERX11EQLPLFFSSEL : in std_ulogic;
     PIPERX11EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX11PHYSTATUS : in std_ulogic;
     PIPERX11STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX11STATUS : in std_logic_vector(2 downto 0);
     PIPERX11SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX11VALID : in std_ulogic;
     PIPERX12CHARISK : in std_logic_vector(1 downto 0);
     PIPERX12DATA : in std_logic_vector(31 downto 0);
     PIPERX12DATAVALID : in std_ulogic;
     PIPERX12ELECIDLE : in std_ulogic;
     PIPERX12EQDONE : in std_ulogic;
     PIPERX12EQLPADAPTDONE : in std_ulogic;
     PIPERX12EQLPLFFSSEL : in std_ulogic;
     PIPERX12EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX12PHYSTATUS : in std_ulogic;
     PIPERX12STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX12STATUS : in std_logic_vector(2 downto 0);
     PIPERX12SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX12VALID : in std_ulogic;
     PIPERX13CHARISK : in std_logic_vector(1 downto 0);
     PIPERX13DATA : in std_logic_vector(31 downto 0);
     PIPERX13DATAVALID : in std_ulogic;
     PIPERX13ELECIDLE : in std_ulogic;
     PIPERX13EQDONE : in std_ulogic;
     PIPERX13EQLPADAPTDONE : in std_ulogic;
     PIPERX13EQLPLFFSSEL : in std_ulogic;
     PIPERX13EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX13PHYSTATUS : in std_ulogic;
     PIPERX13STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX13STATUS : in std_logic_vector(2 downto 0);
     PIPERX13SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX13VALID : in std_ulogic;
     PIPERX14CHARISK : in std_logic_vector(1 downto 0);
     PIPERX14DATA : in std_logic_vector(31 downto 0);
     PIPERX14DATAVALID : in std_ulogic;
     PIPERX14ELECIDLE : in std_ulogic;
     PIPERX14EQDONE : in std_ulogic;
     PIPERX14EQLPADAPTDONE : in std_ulogic;
     PIPERX14EQLPLFFSSEL : in std_ulogic;
     PIPERX14EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX14PHYSTATUS : in std_ulogic;
     PIPERX14STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX14STATUS : in std_logic_vector(2 downto 0);
     PIPERX14SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX14VALID : in std_ulogic;
     PIPERX15CHARISK : in std_logic_vector(1 downto 0);
     PIPERX15DATA : in std_logic_vector(31 downto 0);
     PIPERX15DATAVALID : in std_ulogic;
     PIPERX15ELECIDLE : in std_ulogic;
     PIPERX15EQDONE : in std_ulogic;
     PIPERX15EQLPADAPTDONE : in std_ulogic;
     PIPERX15EQLPLFFSSEL : in std_ulogic;
     PIPERX15EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX15PHYSTATUS : in std_ulogic;
     PIPERX15STARTBLOCK : in std_logic_vector(1 downto 0);
     PIPERX15STATUS : in std_logic_vector(2 downto 0);
     PIPERX15SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX15VALID : in std_ulogic;
     PIPETX00EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX00EQDONE : in std_ulogic;
     PIPETX01EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX01EQDONE : in std_ulogic;
     PIPETX02EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX02EQDONE : in std_ulogic;
     PIPETX03EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX03EQDONE : in std_ulogic;
     PIPETX04EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX04EQDONE : in std_ulogic;
     PIPETX05EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX05EQDONE : in std_ulogic;
     PIPETX06EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX06EQDONE : in std_ulogic;
     PIPETX07EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX07EQDONE : in std_ulogic;
     PIPETX08EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX08EQDONE : in std_ulogic;
     PIPETX09EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX09EQDONE : in std_ulogic;
     PIPETX10EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX10EQDONE : in std_ulogic;
     PIPETX11EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX11EQDONE : in std_ulogic;
     PIPETX12EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX12EQDONE : in std_ulogic;
     PIPETX13EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX13EQDONE : in std_ulogic;
     PIPETX14EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX14EQDONE : in std_ulogic;
     PIPETX15EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX15EQDONE : in std_ulogic;
     PLEQRESETEIEOSCOUNT : in std_ulogic;
     PLGEN2UPSTREAMPREFERDEEMPH : in std_ulogic;
     PLGEN34REDOEQSPEED : in std_ulogic;
     PLGEN34REDOEQUALIZATION : in std_ulogic;
     RESETN : in std_ulogic;
     SAXISCCIXTXTDATA : in std_logic_vector(255 downto 0);
     SAXISCCIXTXTUSER : in std_logic_vector(45 downto 0);
     SAXISCCIXTXTVALID : in std_ulogic;
     SAXISCCTDATA : in std_logic_vector(255 downto 0);
     SAXISCCTKEEP : in std_logic_vector(7 downto 0);
     SAXISCCTLAST : in std_ulogic;
     SAXISCCTUSER : in std_logic_vector(32 downto 0);
     SAXISCCTVALID : in std_ulogic;
     SAXISRQTDATA : in std_logic_vector(255 downto 0);
     SAXISRQTKEEP : in std_logic_vector(7 downto 0);
     SAXISRQTLAST : in std_ulogic;
     SAXISRQTUSER : in std_logic_vector(61 downto 0);
     SAXISRQTVALID : in std_ulogic;
     USERCLK : in std_ulogic;
     USERCLK2 : in std_ulogic;
     USERCLKEN : in std_ulogic;
     USERSPAREIN : in std_logic_vector(31 downto 0)
  );
end component;
attribute BOX_TYPE of
  PCIE4CE4 : component is "PRIMITIVE";

----- component PCIE_2_1 -----
component PCIE_2_1
  generic (
     AER_BASE_PTR : bit_vector := X"140";
     AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     AER_CAP_ID : bit_vector := X"0001";
     AER_CAP_MULTIHEADER : string := "FALSE";
     AER_CAP_NEXTPTR : bit_vector := X"178";
     AER_CAP_ON : string := "FALSE";
     AER_CAP_OPTIONAL_ERR_SUPPORT : bit_vector := X"000000";
     AER_CAP_PERMIT_ROOTERR_UPDATE : string := "TRUE";
     AER_CAP_VERSION : bit_vector := X"2";
     ALLOW_X8_GEN2 : string := "FALSE";
     BAR0 : bit_vector := X"FFFFFF00";
     BAR1 : bit_vector := X"FFFF0000";
     BAR2 : bit_vector := X"FFFF000C";
     BAR3 : bit_vector := X"FFFFFFFF";
     BAR4 : bit_vector := X"00000000";
     BAR5 : bit_vector := X"00000000";
     CAPABILITIES_PTR : bit_vector := X"40";
     CARDBUS_CIS_POINTER : bit_vector := X"00000000";
     CFG_ECRC_ERR_CPLSTAT : integer := 0;
     CLASS_CODE : bit_vector := X"000000";
     CMD_INTX_IMPLEMENTED : string := "TRUE";
     CPL_TIMEOUT_DISABLE_SUPPORTED : string := "FALSE";
     CPL_TIMEOUT_RANGES_SUPPORTED : bit_vector := X"0";
     CRM_MODULE_RSTS : bit_vector := X"00";
     DEV_CAP2_ARI_FORWARDING_SUPPORTED : string := "FALSE";
     DEV_CAP2_ATOMICOP32_COMPLETER_SUPPORTED : string := "FALSE";
     DEV_CAP2_ATOMICOP64_COMPLETER_SUPPORTED : string := "FALSE";
     DEV_CAP2_ATOMICOP_ROUTING_SUPPORTED : string := "FALSE";
     DEV_CAP2_CAS128_COMPLETER_SUPPORTED : string := "FALSE";
     DEV_CAP2_ENDEND_TLP_PREFIX_SUPPORTED : string := "FALSE";
     DEV_CAP2_EXTENDED_FMT_FIELD_SUPPORTED : string := "FALSE";
     DEV_CAP2_LTR_MECHANISM_SUPPORTED : string := "FALSE";
     DEV_CAP2_MAX_ENDEND_TLP_PREFIXES : bit_vector := X"0";
     DEV_CAP2_NO_RO_ENABLED_PRPR_PASSING : string := "FALSE";
     DEV_CAP2_TPH_COMPLETER_SUPPORTED : bit_vector := X"0";
     DEV_CAP_ENABLE_SLOT_PWR_LIMIT_SCALE : string := "TRUE";
     DEV_CAP_ENABLE_SLOT_PWR_LIMIT_VALUE : string := "TRUE";
     DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "FALSE";
     DEV_CAP_MAX_PAYLOAD_SUPPORTED : integer := 2;
     DEV_CAP_PHANTOM_FUNCTIONS_SUPPORT : integer := 0;
     DEV_CAP_ROLE_BASED_ERROR : string := "TRUE";
     DEV_CAP_RSVD_14_12 : integer := 0;
     DEV_CAP_RSVD_17_16 : integer := 0;
     DEV_CAP_RSVD_31_29 : integer := 0;
     DEV_CONTROL_AUX_POWER_SUPPORTED : string := "FALSE";
     DEV_CONTROL_EXT_TAG_DEFAULT : string := "FALSE";
     DISABLE_ASPM_L1_TIMER : string := "FALSE";
     DISABLE_BAR_FILTERING : string := "FALSE";
     DISABLE_ERR_MSG : string := "FALSE";
     DISABLE_ID_CHECK : string := "FALSE";
     DISABLE_LANE_REVERSAL : string := "FALSE";
     DISABLE_LOCKED_FILTER : string := "FALSE";
     DISABLE_PPM_FILTER : string := "FALSE";
     DISABLE_RX_POISONED_RESP : string := "FALSE";
     DISABLE_RX_TC_FILTER : string := "FALSE";
     DISABLE_SCRAMBLING : string := "FALSE";
     DNSTREAM_LINK_NUM : bit_vector := X"00";
     DSN_BASE_PTR : bit_vector := X"100";
     DSN_CAP_ID : bit_vector := X"0003";
     DSN_CAP_NEXTPTR : bit_vector := X"10C";
     DSN_CAP_ON : string := "TRUE";
     DSN_CAP_VERSION : bit_vector := X"1";
     ENABLE_MSG_ROUTE : bit_vector := X"000";
     ENABLE_RX_TD_ECRC_TRIM : string := "FALSE";
     ENDEND_TLP_PREFIX_FORWARDING_SUPPORTED : string := "FALSE";
     ENTER_RVRY_EI_L0 : string := "TRUE";
     EXIT_LOOPBACK_ON_EI : string := "TRUE";
     EXPANSION_ROM : bit_vector := X"FFFFF001";
     EXT_CFG_CAP_PTR : bit_vector := X"3F";
     EXT_CFG_XP_CAP_PTR : bit_vector := X"3FF";
     HEADER_TYPE : bit_vector := X"00";
     INFER_EI : bit_vector := X"00";
     INTERRUPT_PIN : bit_vector := X"01";
     INTERRUPT_STAT_AUTO : string := "TRUE";
     IS_SWITCH : string := "FALSE";
     LAST_CONFIG_DWORD : bit_vector := X"3FF";
     LINK_CAP_ASPM_OPTIONALITY : string := "TRUE";
     LINK_CAP_ASPM_SUPPORT : integer := 1;
     LINK_CAP_CLOCK_POWER_MANAGEMENT : string := "FALSE";
     LINK_CAP_DLL_LINK_ACTIVE_REPORTING_CAP : string := "FALSE";
     LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     LINK_CAP_LINK_BANDWIDTH_NOTIFICATION_CAP : string := "FALSE";
     LINK_CAP_MAX_LINK_SPEED : bit_vector := X"1";
     LINK_CAP_MAX_LINK_WIDTH : bit_vector := X"08";
     LINK_CAP_RSVD_23 : integer := 0;
     LINK_CAP_SURPRISE_DOWN_ERROR_CAPABLE : string := "FALSE";
     LINK_CONTROL_RCB : integer := 0;
     LINK_CTRL2_DEEMPHASIS : string := "FALSE";
     LINK_CTRL2_HW_AUTONOMOUS_SPEED_DISABLE : string := "FALSE";
     LINK_CTRL2_TARGET_LINK_SPEED : bit_vector := X"2";
     LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     LL_ACK_TIMEOUT : bit_vector := X"0000";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_REPLAY_TIMEOUT : bit_vector := X"0000";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LTSSM_MAX_LINK_WIDTH : bit_vector := X"01";
     MPS_FORCE : string := "FALSE";
     MSIX_BASE_PTR : bit_vector := X"9C";
     MSIX_CAP_ID : bit_vector := X"11";
     MSIX_CAP_NEXTPTR : bit_vector := X"00";
     MSIX_CAP_ON : string := "FALSE";
     MSIX_CAP_PBA_BIR : integer := 0;
     MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     MSIX_CAP_TABLE_BIR : integer := 0;
     MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     MSI_BASE_PTR : bit_vector := X"48";
     MSI_CAP_64_BIT_ADDR_CAPABLE : string := "TRUE";
     MSI_CAP_ID : bit_vector := X"05";
     MSI_CAP_MULTIMSGCAP : integer := 0;
     MSI_CAP_MULTIMSG_EXTENSION : integer := 0;
     MSI_CAP_NEXTPTR : bit_vector := X"60";
     MSI_CAP_ON : string := "FALSE";
     MSI_CAP_PER_VECTOR_MASKING_CAPABLE : string := "TRUE";
     N_FTS_COMCLK_GEN1 : integer := 255;
     N_FTS_COMCLK_GEN2 : integer := 255;
     N_FTS_GEN1 : integer := 255;
     N_FTS_GEN2 : integer := 255;
     PCIE_BASE_PTR : bit_vector := X"60";
     PCIE_CAP_CAPABILITY_ID : bit_vector := X"10";
     PCIE_CAP_CAPABILITY_VERSION : bit_vector := X"2";
     PCIE_CAP_DEVICE_PORT_TYPE : bit_vector := X"0";
     PCIE_CAP_NEXTPTR : bit_vector := X"9C";
     PCIE_CAP_ON : string := "TRUE";
     PCIE_CAP_RSVD_15_14 : integer := 0;
     PCIE_CAP_SLOT_IMPLEMENTED : string := "FALSE";
     PCIE_REVISION : integer := 2;
     PL_AUTO_CONFIG : integer := 0;
     PL_FAST_TRAIN : string := "FALSE";
     PM_ASPML0S_TIMEOUT : bit_vector := X"0000";
     PM_ASPML0S_TIMEOUT_EN : string := "FALSE";
     PM_ASPML0S_TIMEOUT_FUNC : integer := 0;
     PM_ASPM_FASTEXIT : string := "FALSE";
     PM_BASE_PTR : bit_vector := X"40";
     PM_CAP_AUXCURRENT : integer := 0;
     PM_CAP_D1SUPPORT : string := "TRUE";
     PM_CAP_D2SUPPORT : string := "TRUE";
     PM_CAP_DSI : string := "FALSE";
     PM_CAP_ID : bit_vector := X"01";
     PM_CAP_NEXTPTR : bit_vector := X"48";
     PM_CAP_ON : string := "TRUE";
     PM_CAP_PMESUPPORT : bit_vector := X"0F";
     PM_CAP_PME_CLOCK : string := "FALSE";
     PM_CAP_RSVD_04 : integer := 0;
     PM_CAP_VERSION : integer := 3;
     PM_CSR_B2B3 : string := "FALSE";
     PM_CSR_BPCCEN : string := "FALSE";
     PM_CSR_NOSOFTRST : string := "TRUE";
     PM_DATA0 : bit_vector := X"01";
     PM_DATA1 : bit_vector := X"01";
     PM_DATA2 : bit_vector := X"01";
     PM_DATA3 : bit_vector := X"01";
     PM_DATA4 : bit_vector := X"01";
     PM_DATA5 : bit_vector := X"01";
     PM_DATA6 : bit_vector := X"01";
     PM_DATA7 : bit_vector := X"01";
     PM_DATA_SCALE0 : bit_vector := X"1";
     PM_DATA_SCALE1 : bit_vector := X"1";
     PM_DATA_SCALE2 : bit_vector := X"1";
     PM_DATA_SCALE3 : bit_vector := X"1";
     PM_DATA_SCALE4 : bit_vector := X"1";
     PM_DATA_SCALE5 : bit_vector := X"1";
     PM_DATA_SCALE6 : bit_vector := X"1";
     PM_DATA_SCALE7 : bit_vector := X"1";
     PM_MF : string := "FALSE";
     RBAR_BASE_PTR : bit_vector := X"178";
     RBAR_CAP_CONTROL_ENCODEDBAR0 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR1 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR2 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR3 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR4 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR5 : bit_vector := X"00";
     RBAR_CAP_ID : bit_vector := X"0015";
     RBAR_CAP_INDEX0 : bit_vector := X"0";
     RBAR_CAP_INDEX1 : bit_vector := X"0";
     RBAR_CAP_INDEX2 : bit_vector := X"0";
     RBAR_CAP_INDEX3 : bit_vector := X"0";
     RBAR_CAP_INDEX4 : bit_vector := X"0";
     RBAR_CAP_INDEX5 : bit_vector := X"0";
     RBAR_CAP_NEXTPTR : bit_vector := X"000";
     RBAR_CAP_ON : string := "FALSE";
     RBAR_CAP_SUP0 : bit_vector := X"00000000";
     RBAR_CAP_SUP1 : bit_vector := X"00000000";
     RBAR_CAP_SUP2 : bit_vector := X"00000000";
     RBAR_CAP_SUP3 : bit_vector := X"00000000";
     RBAR_CAP_SUP4 : bit_vector := X"00000000";
     RBAR_CAP_SUP5 : bit_vector := X"00000000";
     RBAR_CAP_VERSION : bit_vector := X"1";
     RBAR_NUM : bit_vector := X"1";
     RECRC_CHK : integer := 0;
     RECRC_CHK_TRIM : string := "FALSE";
     ROOT_CAP_CRS_SW_VISIBILITY : string := "FALSE";
     RP_AUTO_SPD : bit_vector := X"1";
     RP_AUTO_SPD_LOOPCNT : bit_vector := X"1F";
     SELECT_DLL_IF : string := "FALSE";
     SIM_VERSION : string := "1.0";
     SLOT_CAP_ATT_BUTTON_PRESENT : string := "FALSE";
     SLOT_CAP_ATT_INDICATOR_PRESENT : string := "FALSE";
     SLOT_CAP_ELEC_INTERLOCK_PRESENT : string := "FALSE";
     SLOT_CAP_HOTPLUG_CAPABLE : string := "FALSE";
     SLOT_CAP_HOTPLUG_SURPRISE : string := "FALSE";
     SLOT_CAP_MRL_SENSOR_PRESENT : string := "FALSE";
     SLOT_CAP_NO_CMD_COMPLETED_SUPPORT : string := "FALSE";
     SLOT_CAP_PHYSICAL_SLOT_NUM : bit_vector := X"0000";
     SLOT_CAP_POWER_CONTROLLER_PRESENT : string := "FALSE";
     SLOT_CAP_POWER_INDICATOR_PRESENT : string := "FALSE";
     SLOT_CAP_SLOT_POWER_LIMIT_SCALE : integer := 0;
     SLOT_CAP_SLOT_POWER_LIMIT_VALUE : bit_vector := X"00";
     SPARE_BIT0 : integer := 0;
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : integer := 0;
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : bit_vector := X"00";
     SPARE_BYTE1 : bit_vector := X"00";
     SPARE_BYTE2 : bit_vector := X"00";
     SPARE_BYTE3 : bit_vector := X"00";
     SPARE_WORD0 : bit_vector := X"00000000";
     SPARE_WORD1 : bit_vector := X"00000000";
     SPARE_WORD2 : bit_vector := X"00000000";
     SPARE_WORD3 : bit_vector := X"00000000";
     SSL_MESSAGE_AUTO : string := "FALSE";
     TECRC_EP_INV : string := "FALSE";
     TL_RBYPASS : string := "FALSE";
     TL_RX_RAM_RADDR_LATENCY : integer := 0;
     TL_RX_RAM_RDATA_LATENCY : integer := 2;
     TL_RX_RAM_WRITE_LATENCY : integer := 0;
     TL_TFC_DISABLE : string := "FALSE";
     TL_TX_CHECKS_DISABLE : string := "FALSE";
     TL_TX_RAM_RADDR_LATENCY : integer := 0;
     TL_TX_RAM_RDATA_LATENCY : integer := 2;
     TL_TX_RAM_WRITE_LATENCY : integer := 0;
     TRN_DW : string := "FALSE";
     TRN_NP_FC : string := "FALSE";
     UPCONFIG_CAPABLE : string := "TRUE";
     UPSTREAM_FACING : string := "TRUE";
     UR_ATOMIC : string := "TRUE";
     UR_CFG1 : string := "TRUE";
     UR_INV_REQ : string := "TRUE";
     UR_PRS_RESPONSE : string := "TRUE";
     USER_CLK2_DIV2 : string := "FALSE";
     USER_CLK_FREQ : integer := 3;
     USE_RID_PINS : string := "FALSE";
     VC0_CPL_INFINITE : string := "TRUE";
     VC0_RX_RAM_LIMIT : bit_vector := X"03FF";
     VC0_TOTAL_CREDITS_CD : integer := 127;
     VC0_TOTAL_CREDITS_CH : integer := 31;
     VC0_TOTAL_CREDITS_NPD : integer := 24;
     VC0_TOTAL_CREDITS_NPH : integer := 12;
     VC0_TOTAL_CREDITS_PD : integer := 288;
     VC0_TOTAL_CREDITS_PH : integer := 32;
     VC0_TX_LASTPACKET : integer := 31;
     VC_BASE_PTR : bit_vector := X"10C";
     VC_CAP_ID : bit_vector := X"0002";
     VC_CAP_NEXTPTR : bit_vector := X"000";
     VC_CAP_ON : string := "FALSE";
     VC_CAP_REJECT_SNOOP_TRANSACTIONS : string := "FALSE";
     VC_CAP_VERSION : bit_vector := X"1";
     VSEC_BASE_PTR : bit_vector := X"128";
     VSEC_CAP_HDR_ID : bit_vector := X"1234";
     VSEC_CAP_HDR_LENGTH : bit_vector := X"018";
     VSEC_CAP_HDR_REVISION : bit_vector := X"1";
     VSEC_CAP_ID : bit_vector := X"000B";
     VSEC_CAP_IS_LINK_VISIBLE : string := "TRUE";
     VSEC_CAP_NEXTPTR : bit_vector := X"140";
     VSEC_CAP_ON : string := "FALSE";
     VSEC_CAP_VERSION : bit_vector := X"1"
  );
  port (
     CFGAERECRCCHECKEN : out std_ulogic;
     CFGAERECRCGENEN : out std_ulogic;
     CFGAERROOTERRCORRERRRECEIVED : out std_ulogic;
     CFGAERROOTERRCORRERRREPORTINGEN : out std_ulogic;
     CFGAERROOTERRFATALERRRECEIVED : out std_ulogic;
     CFGAERROOTERRFATALERRREPORTINGEN : out std_ulogic;
     CFGAERROOTERRNONFATALERRRECEIVED : out std_ulogic;
     CFGAERROOTERRNONFATALERRREPORTINGEN : out std_ulogic;
     CFGBRIDGESERREN : out std_ulogic;
     CFGCOMMANDBUSMASTERENABLE : out std_ulogic;
     CFGCOMMANDINTERRUPTDISABLE : out std_ulogic;
     CFGCOMMANDIOENABLE : out std_ulogic;
     CFGCOMMANDMEMENABLE : out std_ulogic;
     CFGCOMMANDSERREN : out std_ulogic;
     CFGDEVCONTROL2ARIFORWARDEN : out std_ulogic;
     CFGDEVCONTROL2ATOMICEGRESSBLOCK : out std_ulogic;
     CFGDEVCONTROL2ATOMICREQUESTEREN : out std_ulogic;
     CFGDEVCONTROL2CPLTIMEOUTDIS : out std_ulogic;
     CFGDEVCONTROL2CPLTIMEOUTVAL : out std_logic_vector(3 downto 0);
     CFGDEVCONTROL2IDOCPLEN : out std_ulogic;
     CFGDEVCONTROL2IDOREQEN : out std_ulogic;
     CFGDEVCONTROL2LTREN : out std_ulogic;
     CFGDEVCONTROL2TLPPREFIXBLOCK : out std_ulogic;
     CFGDEVCONTROLAUXPOWEREN : out std_ulogic;
     CFGDEVCONTROLCORRERRREPORTINGEN : out std_ulogic;
     CFGDEVCONTROLENABLERO : out std_ulogic;
     CFGDEVCONTROLEXTTAGEN : out std_ulogic;
     CFGDEVCONTROLFATALERRREPORTINGEN : out std_ulogic;
     CFGDEVCONTROLMAXPAYLOAD : out std_logic_vector(2 downto 0);
     CFGDEVCONTROLMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGDEVCONTROLNONFATALREPORTINGEN : out std_ulogic;
     CFGDEVCONTROLNOSNOOPEN : out std_ulogic;
     CFGDEVCONTROLPHANTOMEN : out std_ulogic;
     CFGDEVCONTROLURERRREPORTINGEN : out std_ulogic;
     CFGDEVSTATUSCORRERRDETECTED : out std_ulogic;
     CFGDEVSTATUSFATALERRDETECTED : out std_ulogic;
     CFGDEVSTATUSNONFATALERRDETECTED : out std_ulogic;
     CFGDEVSTATUSURDETECTED : out std_ulogic;
     CFGERRAERHEADERLOGSETN : out std_ulogic;
     CFGERRCPLRDYN : out std_ulogic;
     CFGINTERRUPTDO : out std_logic_vector(7 downto 0);
     CFGINTERRUPTMMENABLE : out std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIENABLE : out std_ulogic;
     CFGINTERRUPTMSIXENABLE : out std_ulogic;
     CFGINTERRUPTMSIXFM : out std_ulogic;
     CFGINTERRUPTRDYN : out std_ulogic;
     CFGLINKCONTROLASPMCONTROL : out std_logic_vector(1 downto 0);
     CFGLINKCONTROLAUTOBANDWIDTHINTEN : out std_ulogic;
     CFGLINKCONTROLBANDWIDTHINTEN : out std_ulogic;
     CFGLINKCONTROLCLOCKPMEN : out std_ulogic;
     CFGLINKCONTROLCOMMONCLOCK : out std_ulogic;
     CFGLINKCONTROLEXTENDEDSYNC : out std_ulogic;
     CFGLINKCONTROLHWAUTOWIDTHDIS : out std_ulogic;
     CFGLINKCONTROLLINKDISABLE : out std_ulogic;
     CFGLINKCONTROLRCB : out std_ulogic;
     CFGLINKCONTROLRETRAINLINK : out std_ulogic;
     CFGLINKSTATUSAUTOBANDWIDTHSTATUS : out std_ulogic;
     CFGLINKSTATUSBANDWIDTHSTATUS : out std_ulogic;
     CFGLINKSTATUSCURRENTSPEED : out std_logic_vector(1 downto 0);
     CFGLINKSTATUSDLLACTIVE : out std_ulogic;
     CFGLINKSTATUSLINKTRAINING : out std_ulogic;
     CFGLINKSTATUSNEGOTIATEDWIDTH : out std_logic_vector(3 downto 0);
     CFGMGMTDO : out std_logic_vector(31 downto 0);
     CFGMGMTRDWRDONEN : out std_ulogic;
     CFGMSGDATA : out std_logic_vector(15 downto 0);
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTA : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTB : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTC : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTD : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTA : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTB : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTC : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTD : out std_ulogic;
     CFGMSGRECEIVEDERRCOR : out std_ulogic;
     CFGMSGRECEIVEDERRFATAL : out std_ulogic;
     CFGMSGRECEIVEDERRNONFATAL : out std_ulogic;
     CFGMSGRECEIVEDPMASNAK : out std_ulogic;
     CFGMSGRECEIVEDPMETO : out std_ulogic;
     CFGMSGRECEIVEDPMETOACK : out std_ulogic;
     CFGMSGRECEIVEDPMPME : out std_ulogic;
     CFGMSGRECEIVEDSETSLOTPOWERLIMIT : out std_ulogic;
     CFGMSGRECEIVEDUNLOCK : out std_ulogic;
     CFGPCIELINKSTATE : out std_logic_vector(2 downto 0);
     CFGPMCSRPMEEN : out std_ulogic;
     CFGPMCSRPMESTATUS : out std_ulogic;
     CFGPMCSRPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGPMRCVASREQL1N : out std_ulogic;
     CFGPMRCVENTERL1N : out std_ulogic;
     CFGPMRCVENTERL23N : out std_ulogic;
     CFGPMRCVREQACKN : out std_ulogic;
     CFGROOTCONTROLPMEINTEN : out std_ulogic;
     CFGROOTCONTROLSYSERRCORRERREN : out std_ulogic;
     CFGROOTCONTROLSYSERRFATALERREN : out std_ulogic;
     CFGROOTCONTROLSYSERRNONFATALERREN : out std_ulogic;
     CFGSLOTCONTROLELECTROMECHILCTLPULSE : out std_ulogic;
     CFGTRANSACTION : out std_ulogic;
     CFGTRANSACTIONADDR : out std_logic_vector(6 downto 0);
     CFGTRANSACTIONTYPE : out std_ulogic;
     CFGVCTCVCMAP : out std_logic_vector(6 downto 0);
     DBGSCLRA : out std_ulogic;
     DBGSCLRB : out std_ulogic;
     DBGSCLRC : out std_ulogic;
     DBGSCLRD : out std_ulogic;
     DBGSCLRE : out std_ulogic;
     DBGSCLRF : out std_ulogic;
     DBGSCLRG : out std_ulogic;
     DBGSCLRH : out std_ulogic;
     DBGSCLRI : out std_ulogic;
     DBGSCLRJ : out std_ulogic;
     DBGSCLRK : out std_ulogic;
     DBGVECA : out std_logic_vector(63 downto 0);
     DBGVECB : out std_logic_vector(63 downto 0);
     DBGVECC : out std_logic_vector(11 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     LL2BADDLLPERR : out std_ulogic;
     LL2BADTLPERR : out std_ulogic;
     LL2LINKSTATUS : out std_logic_vector(4 downto 0);
     LL2PROTOCOLERR : out std_ulogic;
     LL2RECEIVERERR : out std_ulogic;
     LL2REPLAYROERR : out std_ulogic;
     LL2REPLAYTOERR : out std_ulogic;
     LL2SUSPENDOK : out std_ulogic;
     LL2TFCINIT1SEQ : out std_ulogic;
     LL2TFCINIT2SEQ : out std_ulogic;
     LL2TXIDLE : out std_ulogic;
     LNKCLKEN : out std_ulogic;
     MIMRXRADDR : out std_logic_vector(12 downto 0);
     MIMRXREN : out std_ulogic;
     MIMRXWADDR : out std_logic_vector(12 downto 0);
     MIMRXWDATA : out std_logic_vector(67 downto 0);
     MIMRXWEN : out std_ulogic;
     MIMTXRADDR : out std_logic_vector(12 downto 0);
     MIMTXREN : out std_ulogic;
     MIMTXWADDR : out std_logic_vector(12 downto 0);
     MIMTXWDATA : out std_logic_vector(68 downto 0);
     MIMTXWEN : out std_ulogic;
     PIPERX0POLARITY : out std_ulogic;
     PIPERX1POLARITY : out std_ulogic;
     PIPERX2POLARITY : out std_ulogic;
     PIPERX3POLARITY : out std_ulogic;
     PIPERX4POLARITY : out std_ulogic;
     PIPERX5POLARITY : out std_ulogic;
     PIPERX6POLARITY : out std_ulogic;
     PIPERX7POLARITY : out std_ulogic;
     PIPETX0CHARISK : out std_logic_vector(1 downto 0);
     PIPETX0COMPLIANCE : out std_ulogic;
     PIPETX0DATA : out std_logic_vector(15 downto 0);
     PIPETX0ELECIDLE : out std_ulogic;
     PIPETX0POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX1CHARISK : out std_logic_vector(1 downto 0);
     PIPETX1COMPLIANCE : out std_ulogic;
     PIPETX1DATA : out std_logic_vector(15 downto 0);
     PIPETX1ELECIDLE : out std_ulogic;
     PIPETX1POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX2CHARISK : out std_logic_vector(1 downto 0);
     PIPETX2COMPLIANCE : out std_ulogic;
     PIPETX2DATA : out std_logic_vector(15 downto 0);
     PIPETX2ELECIDLE : out std_ulogic;
     PIPETX2POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX3CHARISK : out std_logic_vector(1 downto 0);
     PIPETX3COMPLIANCE : out std_ulogic;
     PIPETX3DATA : out std_logic_vector(15 downto 0);
     PIPETX3ELECIDLE : out std_ulogic;
     PIPETX3POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX4CHARISK : out std_logic_vector(1 downto 0);
     PIPETX4COMPLIANCE : out std_ulogic;
     PIPETX4DATA : out std_logic_vector(15 downto 0);
     PIPETX4ELECIDLE : out std_ulogic;
     PIPETX4POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX5CHARISK : out std_logic_vector(1 downto 0);
     PIPETX5COMPLIANCE : out std_ulogic;
     PIPETX5DATA : out std_logic_vector(15 downto 0);
     PIPETX5ELECIDLE : out std_ulogic;
     PIPETX5POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX6CHARISK : out std_logic_vector(1 downto 0);
     PIPETX6COMPLIANCE : out std_ulogic;
     PIPETX6DATA : out std_logic_vector(15 downto 0);
     PIPETX6ELECIDLE : out std_ulogic;
     PIPETX6POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX7CHARISK : out std_logic_vector(1 downto 0);
     PIPETX7COMPLIANCE : out std_ulogic;
     PIPETX7DATA : out std_logic_vector(15 downto 0);
     PIPETX7ELECIDLE : out std_ulogic;
     PIPETX7POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETXDEEMPH : out std_ulogic;
     PIPETXMARGIN : out std_logic_vector(2 downto 0);
     PIPETXRATE : out std_ulogic;
     PIPETXRCVRDET : out std_ulogic;
     PIPETXRESET : out std_ulogic;
     PL2L0REQ : out std_ulogic;
     PL2LINKUP : out std_ulogic;
     PL2RECEIVERERR : out std_ulogic;
     PL2RECOVERY : out std_ulogic;
     PL2RXELECIDLE : out std_ulogic;
     PL2RXPMSTATE : out std_logic_vector(1 downto 0);
     PL2SUSPENDOK : out std_ulogic;
     PLDBGVEC : out std_logic_vector(11 downto 0);
     PLDIRECTEDCHANGEDONE : out std_ulogic;
     PLINITIALLINKWIDTH : out std_logic_vector(2 downto 0);
     PLLANEREVERSALMODE : out std_logic_vector(1 downto 0);
     PLLINKGEN2CAP : out std_ulogic;
     PLLINKPARTNERGEN2SUPPORTED : out std_ulogic;
     PLLINKUPCFGCAP : out std_ulogic;
     PLLTSSMSTATE : out std_logic_vector(5 downto 0);
     PLPHYLNKUPN : out std_ulogic;
     PLRECEIVEDHOTRST : out std_ulogic;
     PLRXPMSTATE : out std_logic_vector(1 downto 0);
     PLSELLNKRATE : out std_ulogic;
     PLSELLNKWIDTH : out std_logic_vector(1 downto 0);
     PLTXPMSTATE : out std_logic_vector(2 downto 0);
     RECEIVEDFUNCLVLRSTN : out std_ulogic;
     TL2ASPMSUSPENDCREDITCHECKOK : out std_ulogic;
     TL2ASPMSUSPENDREQ : out std_ulogic;
     TL2ERRFCPE : out std_ulogic;
     TL2ERRHDR : out std_logic_vector(63 downto 0);
     TL2ERRMALFORMED : out std_ulogic;
     TL2ERRRXOVERFLOW : out std_ulogic;
     TL2PPMSUSPENDOK : out std_ulogic;
     TRNFCCPLD : out std_logic_vector(11 downto 0);
     TRNFCCPLH : out std_logic_vector(7 downto 0);
     TRNFCNPD : out std_logic_vector(11 downto 0);
     TRNFCNPH : out std_logic_vector(7 downto 0);
     TRNFCPD : out std_logic_vector(11 downto 0);
     TRNFCPH : out std_logic_vector(7 downto 0);
     TRNLNKUP : out std_ulogic;
     TRNRBARHIT : out std_logic_vector(7 downto 0);
     TRNRD : out std_logic_vector(127 downto 0);
     TRNRDLLPDATA : out std_logic_vector(63 downto 0);
     TRNRDLLPSRCRDY : out std_logic_vector(1 downto 0);
     TRNRECRCERR : out std_ulogic;
     TRNREOF : out std_ulogic;
     TRNRERRFWD : out std_ulogic;
     TRNRREM : out std_logic_vector(1 downto 0);
     TRNRSOF : out std_ulogic;
     TRNRSRCDSC : out std_ulogic;
     TRNRSRCRDY : out std_ulogic;
     TRNTBUFAV : out std_logic_vector(5 downto 0);
     TRNTCFGREQ : out std_ulogic;
     TRNTDLLPDSTRDY : out std_ulogic;
     TRNTDSTRDY : out std_logic_vector(3 downto 0);
     TRNTERRDROP : out std_ulogic;
     USERRSTN : out std_ulogic;
     CFGAERINTERRUPTMSGNUM : in std_logic_vector(4 downto 0);
     CFGDEVID : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGERRACSN : in std_ulogic;
     CFGERRAERHEADERLOG : in std_logic_vector(127 downto 0);
     CFGERRATOMICEGRESSBLOCKEDN : in std_ulogic;
     CFGERRCORN : in std_ulogic;
     CFGERRCPLABORTN : in std_ulogic;
     CFGERRCPLTIMEOUTN : in std_ulogic;
     CFGERRCPLUNEXPECTN : in std_ulogic;
     CFGERRECRCN : in std_ulogic;
     CFGERRINTERNALCORN : in std_ulogic;
     CFGERRINTERNALUNCORN : in std_ulogic;
     CFGERRLOCKEDN : in std_ulogic;
     CFGERRMALFORMEDN : in std_ulogic;
     CFGERRMCBLOCKEDN : in std_ulogic;
     CFGERRNORECOVERYN : in std_ulogic;
     CFGERRPOISONEDN : in std_ulogic;
     CFGERRPOSTEDN : in std_ulogic;
     CFGERRTLPCPLHEADER : in std_logic_vector(47 downto 0);
     CFGERRURN : in std_ulogic;
     CFGFORCECOMMONCLOCKOFF : in std_ulogic;
     CFGFORCEEXTENDEDSYNCON : in std_ulogic;
     CFGFORCEMPS : in std_logic_vector(2 downto 0);
     CFGINTERRUPTASSERTN : in std_ulogic;
     CFGINTERRUPTDI : in std_logic_vector(7 downto 0);
     CFGINTERRUPTN : in std_ulogic;
     CFGINTERRUPTSTATN : in std_ulogic;
     CFGMGMTBYTEENN : in std_logic_vector(3 downto 0);
     CFGMGMTDI : in std_logic_vector(31 downto 0);
     CFGMGMTDWADDR : in std_logic_vector(9 downto 0);
     CFGMGMTRDENN : in std_ulogic;
     CFGMGMTWRENN : in std_ulogic;
     CFGMGMTWRREADONLYN : in std_ulogic;
     CFGMGMTWRRW1CASRWN : in std_ulogic;
     CFGPCIECAPINTERRUPTMSGNUM : in std_logic_vector(4 downto 0);
     CFGPMFORCESTATE : in std_logic_vector(1 downto 0);
     CFGPMFORCESTATEENN : in std_ulogic;
     CFGPMHALTASPML0SN : in std_ulogic;
     CFGPMHALTASPML1N : in std_ulogic;
     CFGPMSENDPMETON : in std_ulogic;
     CFGPMTURNOFFOKN : in std_ulogic;
     CFGPMWAKEN : in std_ulogic;
     CFGPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGREVID : in std_logic_vector(7 downto 0);
     CFGSUBSYSID : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTRNPENDINGN : in std_ulogic;
     CFGVENDID : in std_logic_vector(15 downto 0);
     CMRSTN : in std_ulogic;
     CMSTICKYRSTN : in std_ulogic;
     DBGMODE : in std_logic_vector(1 downto 0);
     DBGSUBMODE : in std_ulogic;
     DLRSTN : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     FUNCLVLRSTN : in std_ulogic;
     LL2SENDASREQL1 : in std_ulogic;
     LL2SENDENTERL1 : in std_ulogic;
     LL2SENDENTERL23 : in std_ulogic;
     LL2SENDPMACK : in std_ulogic;
     LL2SUSPENDNOW : in std_ulogic;
     LL2TLPRCV : in std_ulogic;
     MIMRXRDATA : in std_logic_vector(67 downto 0);
     MIMTXRDATA : in std_logic_vector(68 downto 0);
     PIPECLK : in std_ulogic;
     PIPERX0CHANISALIGNED : in std_ulogic;
     PIPERX0CHARISK : in std_logic_vector(1 downto 0);
     PIPERX0DATA : in std_logic_vector(15 downto 0);
     PIPERX0ELECIDLE : in std_ulogic;
     PIPERX0PHYSTATUS : in std_ulogic;
     PIPERX0STATUS : in std_logic_vector(2 downto 0);
     PIPERX0VALID : in std_ulogic;
     PIPERX1CHANISALIGNED : in std_ulogic;
     PIPERX1CHARISK : in std_logic_vector(1 downto 0);
     PIPERX1DATA : in std_logic_vector(15 downto 0);
     PIPERX1ELECIDLE : in std_ulogic;
     PIPERX1PHYSTATUS : in std_ulogic;
     PIPERX1STATUS : in std_logic_vector(2 downto 0);
     PIPERX1VALID : in std_ulogic;
     PIPERX2CHANISALIGNED : in std_ulogic;
     PIPERX2CHARISK : in std_logic_vector(1 downto 0);
     PIPERX2DATA : in std_logic_vector(15 downto 0);
     PIPERX2ELECIDLE : in std_ulogic;
     PIPERX2PHYSTATUS : in std_ulogic;
     PIPERX2STATUS : in std_logic_vector(2 downto 0);
     PIPERX2VALID : in std_ulogic;
     PIPERX3CHANISALIGNED : in std_ulogic;
     PIPERX3CHARISK : in std_logic_vector(1 downto 0);
     PIPERX3DATA : in std_logic_vector(15 downto 0);
     PIPERX3ELECIDLE : in std_ulogic;
     PIPERX3PHYSTATUS : in std_ulogic;
     PIPERX3STATUS : in std_logic_vector(2 downto 0);
     PIPERX3VALID : in std_ulogic;
     PIPERX4CHANISALIGNED : in std_ulogic;
     PIPERX4CHARISK : in std_logic_vector(1 downto 0);
     PIPERX4DATA : in std_logic_vector(15 downto 0);
     PIPERX4ELECIDLE : in std_ulogic;
     PIPERX4PHYSTATUS : in std_ulogic;
     PIPERX4STATUS : in std_logic_vector(2 downto 0);
     PIPERX4VALID : in std_ulogic;
     PIPERX5CHANISALIGNED : in std_ulogic;
     PIPERX5CHARISK : in std_logic_vector(1 downto 0);
     PIPERX5DATA : in std_logic_vector(15 downto 0);
     PIPERX5ELECIDLE : in std_ulogic;
     PIPERX5PHYSTATUS : in std_ulogic;
     PIPERX5STATUS : in std_logic_vector(2 downto 0);
     PIPERX5VALID : in std_ulogic;
     PIPERX6CHANISALIGNED : in std_ulogic;
     PIPERX6CHARISK : in std_logic_vector(1 downto 0);
     PIPERX6DATA : in std_logic_vector(15 downto 0);
     PIPERX6ELECIDLE : in std_ulogic;
     PIPERX6PHYSTATUS : in std_ulogic;
     PIPERX6STATUS : in std_logic_vector(2 downto 0);
     PIPERX6VALID : in std_ulogic;
     PIPERX7CHANISALIGNED : in std_ulogic;
     PIPERX7CHARISK : in std_logic_vector(1 downto 0);
     PIPERX7DATA : in std_logic_vector(15 downto 0);
     PIPERX7ELECIDLE : in std_ulogic;
     PIPERX7PHYSTATUS : in std_ulogic;
     PIPERX7STATUS : in std_logic_vector(2 downto 0);
     PIPERX7VALID : in std_ulogic;
     PL2DIRECTEDLSTATE : in std_logic_vector(4 downto 0);
     PLDBGMODE : in std_logic_vector(2 downto 0);
     PLDIRECTEDLINKAUTON : in std_ulogic;
     PLDIRECTEDLINKCHANGE : in std_logic_vector(1 downto 0);
     PLDIRECTEDLINKSPEED : in std_ulogic;
     PLDIRECTEDLINKWIDTH : in std_logic_vector(1 downto 0);
     PLDIRECTEDLTSSMNEW : in std_logic_vector(5 downto 0);
     PLDIRECTEDLTSSMNEWVLD : in std_ulogic;
     PLDIRECTEDLTSSMSTALL : in std_ulogic;
     PLDOWNSTREAMDEEMPHSOURCE : in std_ulogic;
     PLRSTN : in std_ulogic;
     PLTRANSMITHOTRST : in std_ulogic;
     PLUPSTREAMPREFERDEEMPH : in std_ulogic;
     SYSRSTN : in std_ulogic;
     TL2ASPMSUSPENDCREDITCHECK : in std_ulogic;
     TL2PPMSUSPENDREQ : in std_ulogic;
     TLRSTN : in std_ulogic;
     TRNFCSEL : in std_logic_vector(2 downto 0);
     TRNRDSTRDY : in std_ulogic;
     TRNRFCPRET : in std_ulogic;
     TRNRNPOK : in std_ulogic;
     TRNRNPREQ : in std_ulogic;
     TRNTCFGGNT : in std_ulogic;
     TRNTD : in std_logic_vector(127 downto 0);
     TRNTDLLPDATA : in std_logic_vector(31 downto 0);
     TRNTDLLPSRCRDY : in std_ulogic;
     TRNTECRCGEN : in std_ulogic;
     TRNTEOF : in std_ulogic;
     TRNTERRFWD : in std_ulogic;
     TRNTREM : in std_logic_vector(1 downto 0);
     TRNTSOF : in std_ulogic;
     TRNTSRCDSC : in std_ulogic;
     TRNTSRCRDY : in std_ulogic;
     TRNTSTR : in std_ulogic;
     USERCLK : in std_ulogic;
     USERCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PCIE_2_1 : component is "PRIMITIVE";

----- component PCIE_3_0 -----
component PCIE_3_0
  generic (
     ARI_CAP_ENABLE : string := "FALSE";
     AXISTEN_IF_CC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_CC_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_CQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_ENABLE_CLIENT_TAG : string := "FALSE";
     AXISTEN_IF_ENABLE_MSG_ROUTE : bit_vector := X"00000";
     AXISTEN_IF_ENABLE_RX_MSG_INTFC : string := "FALSE";
     AXISTEN_IF_RC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_RQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RQ_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_WIDTH : bit_vector := X"2";
     CRM_CORE_CLK_FREQ_500 : string := "TRUE";
     CRM_USER_CLK_FREQ : bit_vector := X"2";
     DNSTREAM_LINK_NUM : bit_vector := X"00";
     GEN3_PCS_AUTO_REALIGN : bit_vector := X"1";
     GEN3_PCS_RX_ELECIDLE_INTERNAL : string := "TRUE";
     LL_ACK_TIMEOUT : bit_vector := X"000";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_CPL_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_CPL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_NP_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_NP_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_P_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_P_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_REPLAY_TIMEOUT : bit_vector := X"000";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LTR_TX_MESSAGE_MINIMUM_INTERVAL : bit_vector := X"0FA";
     LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE : string := "FALSE";
     LTR_TX_MESSAGE_ON_LTR_ENABLE : string := "FALSE";
     PF0_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF0_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF0_AER_CAP_NEXTPTR : bit_vector := X"000";
     PF0_ARI_CAP_NEXTPTR : bit_vector := X"000";
     PF0_ARI_CAP_NEXT_FUNC : bit_vector := X"00";
     PF0_ARI_CAP_VER : bit_vector := X"1";
     PF0_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR0_CONTROL : bit_vector := X"4";
     PF0_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF0_BAR1_CONTROL : bit_vector := X"0";
     PF0_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR2_CONTROL : bit_vector := X"4";
     PF0_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR3_CONTROL : bit_vector := X"0";
     PF0_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR4_CONTROL : bit_vector := X"4";
     PF0_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR5_CONTROL : bit_vector := X"0";
     PF0_BIST_REGISTER : bit_vector := X"00";
     PF0_CAPABILITY_POINTER : bit_vector := X"50";
     PF0_CLASS_CODE : bit_vector := X"000000";
     PF0_DEVICE_ID : bit_vector := X"0000";
     PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE : string := "TRUE";
     PF0_DEV_CAP2_LTR_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_OBFF_SUPPORT : bit_vector := X"0";
     PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT : string := "FALSE";
     PF0_DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     PF0_DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     PF0_DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "TRUE";
     PF0_DEV_CAP_MAX_PAYLOAD_SIZE : bit_vector := X"3";
     PF0_DPA_CAP_NEXTPTR : bit_vector := X"000";
     PF0_DPA_CAP_SUB_STATE_CONTROL : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : bit_vector := X"00";
     PF0_DPA_CAP_VER : bit_vector := X"1";
     PF0_DSN_CAP_NEXTPTR : bit_vector := X"10C";
     PF0_EXPANSION_ROM_APERTURE_SIZE : bit_vector := X"03";
     PF0_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF0_INTERRUPT_LINE : bit_vector := X"00";
     PF0_INTERRUPT_PIN : bit_vector := X"1";
     PF0_LINK_CAP_ASPM_SUPPORT : integer := 0;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     PF0_LTR_CAP_MAX_NOSNOOP_LAT : bit_vector := X"000";
     PF0_LTR_CAP_MAX_SNOOP_LAT : bit_vector := X"000";
     PF0_LTR_CAP_NEXTPTR : bit_vector := X"000";
     PF0_LTR_CAP_VER : bit_vector := X"1";
     PF0_MSIX_CAP_NEXTPTR : bit_vector := X"00";
     PF0_MSIX_CAP_PBA_BIR : integer := 0;
     PF0_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     PF0_MSIX_CAP_TABLE_BIR : integer := 0;
     PF0_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     PF0_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     PF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF0_MSI_CAP_NEXTPTR : bit_vector := X"00";
     PF0_PB_CAP_NEXTPTR : bit_vector := X"000";
     PF0_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF0_PB_CAP_VER : bit_vector := X"1";
     PF0_PM_CAP_ID : bit_vector := X"01";
     PF0_PM_CAP_NEXTPTR : bit_vector := X"00";
     PF0_PM_CAP_PMESUPPORT_D0 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D1 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3HOT : string := "TRUE";
     PF0_PM_CAP_SUPP_D1_STATE : string := "TRUE";
     PF0_PM_CAP_VER_ID : bit_vector := X"3";
     PF0_PM_CSR_NOSOFTRESET : string := "TRUE";
     PF0_RBAR_CAP_ENABLE : string := "FALSE";
     PF0_RBAR_CAP_INDEX0 : bit_vector := X"0";
     PF0_RBAR_CAP_INDEX1 : bit_vector := X"0";
     PF0_RBAR_CAP_INDEX2 : bit_vector := X"0";
     PF0_RBAR_CAP_NEXTPTR : bit_vector := X"000";
     PF0_RBAR_CAP_SIZE0 : bit_vector := X"00000";
     PF0_RBAR_CAP_SIZE1 : bit_vector := X"00000";
     PF0_RBAR_CAP_SIZE2 : bit_vector := X"00000";
     PF0_RBAR_CAP_VER : bit_vector := X"1";
     PF0_RBAR_NUM : bit_vector := X"1";
     PF0_REVISION_ID : bit_vector := X"00";
     PF0_SRIOV_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR0_CONTROL : bit_vector := X"4";
     PF0_SRIOV_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF0_SRIOV_BAR1_CONTROL : bit_vector := X"0";
     PF0_SRIOV_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR2_CONTROL : bit_vector := X"4";
     PF0_SRIOV_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR3_CONTROL : bit_vector := X"0";
     PF0_SRIOV_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR4_CONTROL : bit_vector := X"4";
     PF0_SRIOV_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR5_CONTROL : bit_vector := X"0";
     PF0_SRIOV_CAP_INITIAL_VF : bit_vector := X"0000";
     PF0_SRIOV_CAP_NEXTPTR : bit_vector := X"000";
     PF0_SRIOV_CAP_TOTAL_VF : bit_vector := X"0000";
     PF0_SRIOV_CAP_VER : bit_vector := X"1";
     PF0_SRIOV_FIRST_VF_OFFSET : bit_vector := X"0000";
     PF0_SRIOV_FUNC_DEP_LINK : bit_vector := X"0000";
     PF0_SRIOV_SUPPORTED_PAGE_SIZE : bit_vector := X"00000000";
     PF0_SRIOV_VF_DEVICE_ID : bit_vector := X"0000";
     PF0_SUBSYSTEM_ID : bit_vector := X"0000";
     PF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF0_TPHR_CAP_ENABLE : string := "FALSE";
     PF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF0_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     PF0_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     PF0_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     PF0_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     PF0_TPHR_CAP_VER : bit_vector := X"1";
     PF0_VC_CAP_NEXTPTR : bit_vector := X"000";
     PF0_VC_CAP_VER : bit_vector := X"1";
     PF1_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF1_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF1_AER_CAP_NEXTPTR : bit_vector := X"000";
     PF1_ARI_CAP_NEXTPTR : bit_vector := X"000";
     PF1_ARI_CAP_NEXT_FUNC : bit_vector := X"00";
     PF1_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR0_CONTROL : bit_vector := X"4";
     PF1_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF1_BAR1_CONTROL : bit_vector := X"0";
     PF1_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR2_CONTROL : bit_vector := X"4";
     PF1_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR3_CONTROL : bit_vector := X"0";
     PF1_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR4_CONTROL : bit_vector := X"4";
     PF1_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR5_CONTROL : bit_vector := X"0";
     PF1_BIST_REGISTER : bit_vector := X"00";
     PF1_CAPABILITY_POINTER : bit_vector := X"50";
     PF1_CLASS_CODE : bit_vector := X"000000";
     PF1_DEVICE_ID : bit_vector := X"0000";
     PF1_DEV_CAP_MAX_PAYLOAD_SIZE : bit_vector := X"3";
     PF1_DPA_CAP_NEXTPTR : bit_vector := X"000";
     PF1_DPA_CAP_SUB_STATE_CONTROL : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : bit_vector := X"00";
     PF1_DPA_CAP_VER : bit_vector := X"1";
     PF1_DSN_CAP_NEXTPTR : bit_vector := X"10C";
     PF1_EXPANSION_ROM_APERTURE_SIZE : bit_vector := X"03";
     PF1_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF1_INTERRUPT_LINE : bit_vector := X"00";
     PF1_INTERRUPT_PIN : bit_vector := X"1";
     PF1_MSIX_CAP_NEXTPTR : bit_vector := X"00";
     PF1_MSIX_CAP_PBA_BIR : integer := 0;
     PF1_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     PF1_MSIX_CAP_TABLE_BIR : integer := 0;
     PF1_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     PF1_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     PF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF1_MSI_CAP_NEXTPTR : bit_vector := X"00";
     PF1_PB_CAP_NEXTPTR : bit_vector := X"000";
     PF1_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF1_PB_CAP_VER : bit_vector := X"1";
     PF1_PM_CAP_ID : bit_vector := X"01";
     PF1_PM_CAP_NEXTPTR : bit_vector := X"00";
     PF1_PM_CAP_VER_ID : bit_vector := X"3";
     PF1_RBAR_CAP_ENABLE : string := "FALSE";
     PF1_RBAR_CAP_INDEX0 : bit_vector := X"0";
     PF1_RBAR_CAP_INDEX1 : bit_vector := X"0";
     PF1_RBAR_CAP_INDEX2 : bit_vector := X"0";
     PF1_RBAR_CAP_NEXTPTR : bit_vector := X"000";
     PF1_RBAR_CAP_SIZE0 : bit_vector := X"00000";
     PF1_RBAR_CAP_SIZE1 : bit_vector := X"00000";
     PF1_RBAR_CAP_SIZE2 : bit_vector := X"00000";
     PF1_RBAR_CAP_VER : bit_vector := X"1";
     PF1_RBAR_NUM : bit_vector := X"1";
     PF1_REVISION_ID : bit_vector := X"00";
     PF1_SRIOV_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR0_CONTROL : bit_vector := X"4";
     PF1_SRIOV_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF1_SRIOV_BAR1_CONTROL : bit_vector := X"0";
     PF1_SRIOV_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR2_CONTROL : bit_vector := X"4";
     PF1_SRIOV_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR3_CONTROL : bit_vector := X"0";
     PF1_SRIOV_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR4_CONTROL : bit_vector := X"4";
     PF1_SRIOV_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR5_CONTROL : bit_vector := X"0";
     PF1_SRIOV_CAP_INITIAL_VF : bit_vector := X"0000";
     PF1_SRIOV_CAP_NEXTPTR : bit_vector := X"000";
     PF1_SRIOV_CAP_TOTAL_VF : bit_vector := X"0000";
     PF1_SRIOV_CAP_VER : bit_vector := X"1";
     PF1_SRIOV_FIRST_VF_OFFSET : bit_vector := X"0000";
     PF1_SRIOV_FUNC_DEP_LINK : bit_vector := X"0000";
     PF1_SRIOV_SUPPORTED_PAGE_SIZE : bit_vector := X"00000000";
     PF1_SRIOV_VF_DEVICE_ID : bit_vector := X"0000";
     PF1_SUBSYSTEM_ID : bit_vector := X"0000";
     PF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF1_TPHR_CAP_ENABLE : string := "FALSE";
     PF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF1_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     PF1_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     PF1_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     PF1_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     PF1_TPHR_CAP_VER : bit_vector := X"1";
     PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     PL_DISABLE_GEN3_DC_BALANCE : string := "FALSE";
     PL_DISABLE_SCRAMBLING : string := "FALSE";
     PL_DISABLE_UPCONFIG_CAPABLE : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_COEFF_CHECK : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_PRESET_CHECK : string := "FALSE";
     PL_EQ_ADAPT_ITER_COUNT : bit_vector := X"02";
     PL_EQ_ADAPT_REJECT_RETRY_COUNT : bit_vector := X"1";
     PL_EQ_BYPASS_PHASE23 : string := "FALSE";
     PL_EQ_SHORT_ADAPT_PHASE : string := "FALSE";
     PL_LANE0_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE1_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE2_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE3_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE4_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE5_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE6_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE7_EQ_CONTROL : bit_vector := X"3F00";
     PL_LINK_CAP_MAX_LINK_SPEED : bit_vector := X"4";
     PL_LINK_CAP_MAX_LINK_WIDTH : bit_vector := X"8";
     PL_N_FTS_COMCLK_GEN1 : integer := 255;
     PL_N_FTS_COMCLK_GEN2 : integer := 255;
     PL_N_FTS_COMCLK_GEN3 : integer := 255;
     PL_N_FTS_GEN1 : integer := 255;
     PL_N_FTS_GEN2 : integer := 255;
     PL_N_FTS_GEN3 : integer := 255;
     PL_SIM_FAST_LINK_TRAINING : string := "FALSE";
     PL_UPSTREAM_FACING : string := "TRUE";
     PM_ASPML0S_TIMEOUT : bit_vector := X"05DC";
     PM_ASPML1_ENTRY_DELAY : bit_vector := X"00000";
     PM_ENABLE_SLOT_POWER_CAPTURE : string := "TRUE";
     PM_L1_REENTRY_DELAY : bit_vector := X"00000000";
     PM_PME_SERVICE_TIMEOUT_DELAY : bit_vector := X"186A0";
     PM_PME_TURNOFF_ACK_DELAY : bit_vector := X"0064";
     SIM_VERSION : string := "1.0";
     SPARE_BIT0 : integer := 0;
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : integer := 0;
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : bit_vector := X"00";
     SPARE_BYTE1 : bit_vector := X"00";
     SPARE_BYTE2 : bit_vector := X"00";
     SPARE_BYTE3 : bit_vector := X"00";
     SPARE_WORD0 : bit_vector := X"00000000";
     SPARE_WORD1 : bit_vector := X"00000000";
     SPARE_WORD2 : bit_vector := X"00000000";
     SPARE_WORD3 : bit_vector := X"00000000";
     SRIOV_CAP_ENABLE : string := "FALSE";
     TL_COMPL_TIMEOUT_REG0 : bit_vector := X"BEBC20";
     TL_COMPL_TIMEOUT_REG1 : bit_vector := X"0000000";
     TL_CREDITS_CD : bit_vector := X"3E0";
     TL_CREDITS_CH : bit_vector := X"20";
     TL_CREDITS_NPD : bit_vector := X"028";
     TL_CREDITS_NPH : bit_vector := X"20";
     TL_CREDITS_PD : bit_vector := X"198";
     TL_CREDITS_PH : bit_vector := X"20";
     TL_ENABLE_MESSAGE_RID_CHECK_ENABLE : string := "TRUE";
     TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_MODE_ENABLE : string := "FALSE";
     TL_PF_ENABLE_REG : string := "FALSE";
     TL_TAG_MGMT_ENABLE : string := "TRUE";
     VF0_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF0_CAPABILITY_POINTER : bit_vector := X"50";
     VF0_MSIX_CAP_PBA_BIR : integer := 0;
     VF0_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF0_MSIX_CAP_TABLE_BIR : integer := 0;
     VF0_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF0_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF0_PM_CAP_ID : bit_vector := X"01";
     VF0_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF0_PM_CAP_VER_ID : bit_vector := X"3";
     VF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF0_TPHR_CAP_ENABLE : string := "FALSE";
     VF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF0_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF0_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF0_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF0_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF0_TPHR_CAP_VER : bit_vector := X"1";
     VF1_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF1_MSIX_CAP_PBA_BIR : integer := 0;
     VF1_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF1_MSIX_CAP_TABLE_BIR : integer := 0;
     VF1_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF1_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF1_PM_CAP_ID : bit_vector := X"01";
     VF1_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF1_PM_CAP_VER_ID : bit_vector := X"3";
     VF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF1_TPHR_CAP_ENABLE : string := "FALSE";
     VF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF1_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF1_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF1_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF1_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF1_TPHR_CAP_VER : bit_vector := X"1";
     VF2_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF2_MSIX_CAP_PBA_BIR : integer := 0;
     VF2_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF2_MSIX_CAP_TABLE_BIR : integer := 0;
     VF2_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF2_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF2_PM_CAP_ID : bit_vector := X"01";
     VF2_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF2_PM_CAP_VER_ID : bit_vector := X"3";
     VF2_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF2_TPHR_CAP_ENABLE : string := "FALSE";
     VF2_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF2_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF2_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF2_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF2_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF2_TPHR_CAP_VER : bit_vector := X"1";
     VF3_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF3_MSIX_CAP_PBA_BIR : integer := 0;
     VF3_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF3_MSIX_CAP_TABLE_BIR : integer := 0;
     VF3_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF3_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF3_PM_CAP_ID : bit_vector := X"01";
     VF3_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF3_PM_CAP_VER_ID : bit_vector := X"3";
     VF3_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF3_TPHR_CAP_ENABLE : string := "FALSE";
     VF3_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF3_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF3_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF3_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF3_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF3_TPHR_CAP_VER : bit_vector := X"1";
     VF4_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF4_MSIX_CAP_PBA_BIR : integer := 0;
     VF4_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF4_MSIX_CAP_TABLE_BIR : integer := 0;
     VF4_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF4_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF4_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF4_PM_CAP_ID : bit_vector := X"01";
     VF4_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF4_PM_CAP_VER_ID : bit_vector := X"3";
     VF4_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF4_TPHR_CAP_ENABLE : string := "FALSE";
     VF4_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF4_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF4_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF4_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF4_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF4_TPHR_CAP_VER : bit_vector := X"1";
     VF5_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF5_MSIX_CAP_PBA_BIR : integer := 0;
     VF5_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF5_MSIX_CAP_TABLE_BIR : integer := 0;
     VF5_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF5_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF5_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF5_PM_CAP_ID : bit_vector := X"01";
     VF5_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF5_PM_CAP_VER_ID : bit_vector := X"3";
     VF5_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF5_TPHR_CAP_ENABLE : string := "FALSE";
     VF5_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF5_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF5_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF5_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF5_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF5_TPHR_CAP_VER : bit_vector := X"1"
  );
  port (
     CFGCURRENTSPEED : out std_logic_vector(2 downto 0);
     CFGDPASUBSTATECHANGE : out std_logic_vector(1 downto 0);
     CFGERRCOROUT : out std_ulogic;
     CFGERRFATALOUT : out std_ulogic;
     CFGERRNONFATALOUT : out std_ulogic;
     CFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     CFGEXTREADRECEIVED : out std_ulogic;
     CFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     CFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGEXTWRITERECEIVED : out std_ulogic;
     CFGFCCPLD : out std_logic_vector(11 downto 0);
     CFGFCCPLH : out std_logic_vector(7 downto 0);
     CFGFCNPD : out std_logic_vector(11 downto 0);
     CFGFCNPH : out std_logic_vector(7 downto 0);
     CFGFCPD : out std_logic_vector(11 downto 0);
     CFGFCPH : out std_logic_vector(7 downto 0);
     CFGFLRINPROCESS : out std_logic_vector(1 downto 0);
     CFGFUNCTIONPOWERSTATE : out std_logic_vector(5 downto 0);
     CFGFUNCTIONSTATUS : out std_logic_vector(7 downto 0);
     CFGHOTRESETOUT : out std_ulogic;
     CFGINPUTUPDATEDONE : out std_ulogic;
     CFGINTERRUPTAOUTPUT : out std_ulogic;
     CFGINTERRUPTBOUTPUT : out std_ulogic;
     CFGINTERRUPTCOUTPUT : out std_ulogic;
     CFGINTERRUPTDOUTPUT : out std_ulogic;
     CFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIENABLE : out std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIFAIL : out std_ulogic;
     CFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     CFGINTERRUPTMSIMMENABLE : out std_logic_vector(5 downto 0);
     CFGINTERRUPTMSISENT : out std_ulogic;
     CFGINTERRUPTMSIVFENABLE : out std_logic_vector(5 downto 0);
     CFGINTERRUPTMSIXENABLE : out std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXFAIL : out std_ulogic;
     CFGINTERRUPTMSIXMASK : out std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXSENT : out std_ulogic;
     CFGINTERRUPTMSIXVFENABLE : out std_logic_vector(5 downto 0);
     CFGINTERRUPTMSIXVFMASK : out std_logic_vector(5 downto 0);
     CFGINTERRUPTSENT : out std_ulogic;
     CFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGLOCALERROR : out std_ulogic;
     CFGLTRENABLE : out std_ulogic;
     CFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     CFGMAXPAYLOAD : out std_logic_vector(2 downto 0);
     CFGMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGMCUPDATEDONE : out std_ulogic;
     CFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     CFGMGMTREADWRITEDONE : out std_ulogic;
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     CFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     CFGMSGTRANSMITDONE : out std_ulogic;
     CFGNEGOTIATEDWIDTH : out std_logic_vector(3 downto 0);
     CFGOBFFENABLE : out std_logic_vector(1 downto 0);
     CFGPERFUNCSTATUSDATA : out std_logic_vector(15 downto 0);
     CFGPERFUNCTIONUPDATEDONE : out std_ulogic;
     CFGPHYLINKDOWN : out std_ulogic;
     CFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     CFGPLSTATUSCHANGE : out std_ulogic;
     CFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     CFGRCBSTATUS : out std_logic_vector(1 downto 0);
     CFGTPHFUNCTIONNUM : out std_logic_vector(2 downto 0);
     CFGTPHREQUESTERENABLE : out std_logic_vector(1 downto 0);
     CFGTPHSTMODE : out std_logic_vector(5 downto 0);
     CFGTPHSTTADDRESS : out std_logic_vector(4 downto 0);
     CFGTPHSTTREADENABLE : out std_ulogic;
     CFGTPHSTTWRITEBYTEVALID : out std_logic_vector(3 downto 0);
     CFGTPHSTTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGTPHSTTWRITEENABLE : out std_ulogic;
     CFGVFFLRINPROCESS : out std_logic_vector(5 downto 0);
     CFGVFPOWERSTATE : out std_logic_vector(17 downto 0);
     CFGVFSTATUS : out std_logic_vector(11 downto 0);
     CFGVFTPHREQUESTERENABLE : out std_logic_vector(5 downto 0);
     CFGVFTPHSTMODE : out std_logic_vector(17 downto 0);
     DBGDATAOUT : out std_logic_vector(15 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     MAXISCQTDATA : out std_logic_vector(255 downto 0);
     MAXISCQTKEEP : out std_logic_vector(7 downto 0);
     MAXISCQTLAST : out std_ulogic;
     MAXISCQTUSER : out std_logic_vector(84 downto 0);
     MAXISCQTVALID : out std_ulogic;
     MAXISRCTDATA : out std_logic_vector(255 downto 0);
     MAXISRCTKEEP : out std_logic_vector(7 downto 0);
     MAXISRCTLAST : out std_ulogic;
     MAXISRCTUSER : out std_logic_vector(74 downto 0);
     MAXISRCTVALID : out std_ulogic;
     MICOMPLETIONRAMREADADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMREADENABLEU : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEDATAL : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEDATAU : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEENABLEU : out std_logic_vector(3 downto 0);
     MIREPLAYRAMADDRESS : out std_logic_vector(8 downto 0);
     MIREPLAYRAMREADENABLE : out std_logic_vector(1 downto 0);
     MIREPLAYRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREPLAYRAMWRITEENABLE : out std_logic_vector(1 downto 0);
     MIREQUESTRAMREADADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADENABLE : out std_logic_vector(3 downto 0);
     MIREQUESTRAMWRITEADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREQUESTRAMWRITEENABLE : out std_logic_vector(3 downto 0);
     PCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     PCIERQSEQNUM : out std_logic_vector(3 downto 0);
     PCIERQSEQNUMVLD : out std_ulogic;
     PCIERQTAG : out std_logic_vector(5 downto 0);
     PCIERQTAGAV : out std_logic_vector(1 downto 0);
     PCIERQTAGVLD : out std_ulogic;
     PCIETFCNPDAV : out std_logic_vector(1 downto 0);
     PCIETFCNPHAV : out std_logic_vector(1 downto 0);
     PIPERX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX0EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX0EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX0EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX0POLARITY : out std_ulogic;
     PIPERX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX1EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX1EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX1EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX1POLARITY : out std_ulogic;
     PIPERX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX2EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX2EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX2EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX2POLARITY : out std_ulogic;
     PIPERX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX3EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX3EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX3EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX3POLARITY : out std_ulogic;
     PIPERX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX4EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX4EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX4EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX4POLARITY : out std_ulogic;
     PIPERX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX5EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX5EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX5EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX5POLARITY : out std_ulogic;
     PIPERX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX6EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX6EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX6EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX6POLARITY : out std_ulogic;
     PIPERX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX7EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX7EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX7EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX7POLARITY : out std_ulogic;
     PIPETX0CHARISK : out std_logic_vector(1 downto 0);
     PIPETX0COMPLIANCE : out std_ulogic;
     PIPETX0DATA : out std_logic_vector(31 downto 0);
     PIPETX0DATAVALID : out std_ulogic;
     PIPETX0ELECIDLE : out std_ulogic;
     PIPETX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX0EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX0EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX0POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX0STARTBLOCK : out std_ulogic;
     PIPETX0SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX1CHARISK : out std_logic_vector(1 downto 0);
     PIPETX1COMPLIANCE : out std_ulogic;
     PIPETX1DATA : out std_logic_vector(31 downto 0);
     PIPETX1DATAVALID : out std_ulogic;
     PIPETX1ELECIDLE : out std_ulogic;
     PIPETX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX1EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX1EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX1POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX1STARTBLOCK : out std_ulogic;
     PIPETX1SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX2CHARISK : out std_logic_vector(1 downto 0);
     PIPETX2COMPLIANCE : out std_ulogic;
     PIPETX2DATA : out std_logic_vector(31 downto 0);
     PIPETX2DATAVALID : out std_ulogic;
     PIPETX2ELECIDLE : out std_ulogic;
     PIPETX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX2EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX2EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX2POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX2STARTBLOCK : out std_ulogic;
     PIPETX2SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX3CHARISK : out std_logic_vector(1 downto 0);
     PIPETX3COMPLIANCE : out std_ulogic;
     PIPETX3DATA : out std_logic_vector(31 downto 0);
     PIPETX3DATAVALID : out std_ulogic;
     PIPETX3ELECIDLE : out std_ulogic;
     PIPETX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX3EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX3EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX3POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX3STARTBLOCK : out std_ulogic;
     PIPETX3SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX4CHARISK : out std_logic_vector(1 downto 0);
     PIPETX4COMPLIANCE : out std_ulogic;
     PIPETX4DATA : out std_logic_vector(31 downto 0);
     PIPETX4DATAVALID : out std_ulogic;
     PIPETX4ELECIDLE : out std_ulogic;
     PIPETX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX4EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX4EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX4POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX4STARTBLOCK : out std_ulogic;
     PIPETX4SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX5CHARISK : out std_logic_vector(1 downto 0);
     PIPETX5COMPLIANCE : out std_ulogic;
     PIPETX5DATA : out std_logic_vector(31 downto 0);
     PIPETX5DATAVALID : out std_ulogic;
     PIPETX5ELECIDLE : out std_ulogic;
     PIPETX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX5EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX5EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX5POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX5STARTBLOCK : out std_ulogic;
     PIPETX5SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX6CHARISK : out std_logic_vector(1 downto 0);
     PIPETX6COMPLIANCE : out std_ulogic;
     PIPETX6DATA : out std_logic_vector(31 downto 0);
     PIPETX6DATAVALID : out std_ulogic;
     PIPETX6ELECIDLE : out std_ulogic;
     PIPETX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX6EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX6EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX6POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX6STARTBLOCK : out std_ulogic;
     PIPETX6SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX7CHARISK : out std_logic_vector(1 downto 0);
     PIPETX7COMPLIANCE : out std_ulogic;
     PIPETX7DATA : out std_logic_vector(31 downto 0);
     PIPETX7DATAVALID : out std_ulogic;
     PIPETX7ELECIDLE : out std_ulogic;
     PIPETX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX7EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX7EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX7POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX7STARTBLOCK : out std_ulogic;
     PIPETX7SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETXDEEMPH : out std_ulogic;
     PIPETXMARGIN : out std_logic_vector(2 downto 0);
     PIPETXRATE : out std_logic_vector(1 downto 0);
     PIPETXRCVRDET : out std_ulogic;
     PIPETXRESET : out std_ulogic;
     PIPETXSWING : out std_ulogic;
     PLEQINPROGRESS : out std_ulogic;
     PLEQPHASE : out std_logic_vector(1 downto 0);
     PLGEN3PCSRXSLIDE : out std_logic_vector(7 downto 0);
     SAXISCCTREADY : out std_logic_vector(3 downto 0);
     SAXISRQTREADY : out std_logic_vector(3 downto 0);
     CFGCONFIGSPACEENABLE : in std_ulogic;
     CFGDEVID : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGDSPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGERRCORIN : in std_ulogic;
     CFGERRUNCORIN : in std_ulogic;
     CFGEXTREADDATA : in std_logic_vector(31 downto 0);
     CFGEXTREADDATAVALID : in std_ulogic;
     CFGFCSEL : in std_logic_vector(2 downto 0);
     CFGFLRDONE : in std_logic_vector(1 downto 0);
     CFGHOTRESETIN : in std_ulogic;
     CFGINPUTUPDATEREQUEST : in std_ulogic;
     CFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSISELECT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     CFGINTERRUPTMSITPHSTTAG : in std_logic_vector(8 downto 0);
     CFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIXINT : in std_ulogic;
     CFGINTERRUPTPENDING : in std_logic_vector(1 downto 0);
     CFGLINKTRAININGENABLE : in std_ulogic;
     CFGMCUPDATEREQUEST : in std_ulogic;
     CFGMGMTADDR : in std_logic_vector(18 downto 0);
     CFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     CFGMGMTREAD : in std_ulogic;
     CFGMGMTTYPE1CFGREGACCESS : in std_ulogic;
     CFGMGMTWRITE : in std_ulogic;
     CFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMIT : in std_ulogic;
     CFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     CFGPERFUNCSTATUSCONTROL : in std_logic_vector(2 downto 0);
     CFGPERFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGPERFUNCTIONOUTPUTREQUEST : in std_ulogic;
     CFGPOWERSTATECHANGEACK : in std_ulogic;
     CFGREQPMTRANSITIONL23READY : in std_ulogic;
     CFGREVID : in std_logic_vector(7 downto 0);
     CFGSUBSYSID : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTPHSTTREADDATA : in std_logic_vector(31 downto 0);
     CFGTPHSTTREADDATAVALID : in std_ulogic;
     CFGVENDID : in std_logic_vector(15 downto 0);
     CFGVFFLRDONE : in std_logic_vector(5 downto 0);
     CORECLK : in std_ulogic;
     CORECLKMICOMPLETIONRAML : in std_ulogic;
     CORECLKMICOMPLETIONRAMU : in std_ulogic;
     CORECLKMIREPLAYRAM : in std_ulogic;
     CORECLKMIREQUESTRAM : in std_ulogic;
     DRPADDR : in std_logic_vector(10 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     MAXISCQTREADY : in std_logic_vector(21 downto 0);
     MAXISRCTREADY : in std_logic_vector(21 downto 0);
     MGMTRESETN : in std_ulogic;
     MGMTSTICKYRESETN : in std_ulogic;
     MICOMPLETIONRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREPLAYRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREQUESTRAMREADDATA : in std_logic_vector(143 downto 0);
     PCIECQNPREQ : in std_ulogic;
     PIPECLK : in std_ulogic;
     PIPEEQFS : in std_logic_vector(5 downto 0);
     PIPEEQLF : in std_logic_vector(5 downto 0);
     PIPERESETN : in std_ulogic;
     PIPERX0CHARISK : in std_logic_vector(1 downto 0);
     PIPERX0DATA : in std_logic_vector(31 downto 0);
     PIPERX0DATAVALID : in std_ulogic;
     PIPERX0ELECIDLE : in std_ulogic;
     PIPERX0EQDONE : in std_ulogic;
     PIPERX0EQLPADAPTDONE : in std_ulogic;
     PIPERX0EQLPLFFSSEL : in std_ulogic;
     PIPERX0EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX0PHYSTATUS : in std_ulogic;
     PIPERX0STARTBLOCK : in std_ulogic;
     PIPERX0STATUS : in std_logic_vector(2 downto 0);
     PIPERX0SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX0VALID : in std_ulogic;
     PIPERX1CHARISK : in std_logic_vector(1 downto 0);
     PIPERX1DATA : in std_logic_vector(31 downto 0);
     PIPERX1DATAVALID : in std_ulogic;
     PIPERX1ELECIDLE : in std_ulogic;
     PIPERX1EQDONE : in std_ulogic;
     PIPERX1EQLPADAPTDONE : in std_ulogic;
     PIPERX1EQLPLFFSSEL : in std_ulogic;
     PIPERX1EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX1PHYSTATUS : in std_ulogic;
     PIPERX1STARTBLOCK : in std_ulogic;
     PIPERX1STATUS : in std_logic_vector(2 downto 0);
     PIPERX1SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX1VALID : in std_ulogic;
     PIPERX2CHARISK : in std_logic_vector(1 downto 0);
     PIPERX2DATA : in std_logic_vector(31 downto 0);
     PIPERX2DATAVALID : in std_ulogic;
     PIPERX2ELECIDLE : in std_ulogic;
     PIPERX2EQDONE : in std_ulogic;
     PIPERX2EQLPADAPTDONE : in std_ulogic;
     PIPERX2EQLPLFFSSEL : in std_ulogic;
     PIPERX2EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX2PHYSTATUS : in std_ulogic;
     PIPERX2STARTBLOCK : in std_ulogic;
     PIPERX2STATUS : in std_logic_vector(2 downto 0);
     PIPERX2SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX2VALID : in std_ulogic;
     PIPERX3CHARISK : in std_logic_vector(1 downto 0);
     PIPERX3DATA : in std_logic_vector(31 downto 0);
     PIPERX3DATAVALID : in std_ulogic;
     PIPERX3ELECIDLE : in std_ulogic;
     PIPERX3EQDONE : in std_ulogic;
     PIPERX3EQLPADAPTDONE : in std_ulogic;
     PIPERX3EQLPLFFSSEL : in std_ulogic;
     PIPERX3EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX3PHYSTATUS : in std_ulogic;
     PIPERX3STARTBLOCK : in std_ulogic;
     PIPERX3STATUS : in std_logic_vector(2 downto 0);
     PIPERX3SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX3VALID : in std_ulogic;
     PIPERX4CHARISK : in std_logic_vector(1 downto 0);
     PIPERX4DATA : in std_logic_vector(31 downto 0);
     PIPERX4DATAVALID : in std_ulogic;
     PIPERX4ELECIDLE : in std_ulogic;
     PIPERX4EQDONE : in std_ulogic;
     PIPERX4EQLPADAPTDONE : in std_ulogic;
     PIPERX4EQLPLFFSSEL : in std_ulogic;
     PIPERX4EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX4PHYSTATUS : in std_ulogic;
     PIPERX4STARTBLOCK : in std_ulogic;
     PIPERX4STATUS : in std_logic_vector(2 downto 0);
     PIPERX4SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX4VALID : in std_ulogic;
     PIPERX5CHARISK : in std_logic_vector(1 downto 0);
     PIPERX5DATA : in std_logic_vector(31 downto 0);
     PIPERX5DATAVALID : in std_ulogic;
     PIPERX5ELECIDLE : in std_ulogic;
     PIPERX5EQDONE : in std_ulogic;
     PIPERX5EQLPADAPTDONE : in std_ulogic;
     PIPERX5EQLPLFFSSEL : in std_ulogic;
     PIPERX5EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX5PHYSTATUS : in std_ulogic;
     PIPERX5STARTBLOCK : in std_ulogic;
     PIPERX5STATUS : in std_logic_vector(2 downto 0);
     PIPERX5SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX5VALID : in std_ulogic;
     PIPERX6CHARISK : in std_logic_vector(1 downto 0);
     PIPERX6DATA : in std_logic_vector(31 downto 0);
     PIPERX6DATAVALID : in std_ulogic;
     PIPERX6ELECIDLE : in std_ulogic;
     PIPERX6EQDONE : in std_ulogic;
     PIPERX6EQLPADAPTDONE : in std_ulogic;
     PIPERX6EQLPLFFSSEL : in std_ulogic;
     PIPERX6EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX6PHYSTATUS : in std_ulogic;
     PIPERX6STARTBLOCK : in std_ulogic;
     PIPERX6STATUS : in std_logic_vector(2 downto 0);
     PIPERX6SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX6VALID : in std_ulogic;
     PIPERX7CHARISK : in std_logic_vector(1 downto 0);
     PIPERX7DATA : in std_logic_vector(31 downto 0);
     PIPERX7DATAVALID : in std_ulogic;
     PIPERX7ELECIDLE : in std_ulogic;
     PIPERX7EQDONE : in std_ulogic;
     PIPERX7EQLPADAPTDONE : in std_ulogic;
     PIPERX7EQLPLFFSSEL : in std_ulogic;
     PIPERX7EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX7PHYSTATUS : in std_ulogic;
     PIPERX7STARTBLOCK : in std_ulogic;
     PIPERX7STATUS : in std_logic_vector(2 downto 0);
     PIPERX7SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX7VALID : in std_ulogic;
     PIPETX0EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX0EQDONE : in std_ulogic;
     PIPETX1EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX1EQDONE : in std_ulogic;
     PIPETX2EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX2EQDONE : in std_ulogic;
     PIPETX3EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX3EQDONE : in std_ulogic;
     PIPETX4EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX4EQDONE : in std_ulogic;
     PIPETX5EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX5EQDONE : in std_ulogic;
     PIPETX6EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX6EQDONE : in std_ulogic;
     PIPETX7EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX7EQDONE : in std_ulogic;
     PLDISABLESCRAMBLER : in std_ulogic;
     PLEQRESETEIEOSCOUNT : in std_ulogic;
     PLGEN3PCSDISABLE : in std_ulogic;
     PLGEN3PCSRXSYNCDONE : in std_logic_vector(7 downto 0);
     RECCLK : in std_ulogic;
     RESETN : in std_ulogic;
     SAXISCCTDATA : in std_logic_vector(255 downto 0);
     SAXISCCTKEEP : in std_logic_vector(7 downto 0);
     SAXISCCTLAST : in std_ulogic;
     SAXISCCTUSER : in std_logic_vector(32 downto 0);
     SAXISCCTVALID : in std_ulogic;
     SAXISRQTDATA : in std_logic_vector(255 downto 0);
     SAXISRQTKEEP : in std_logic_vector(7 downto 0);
     SAXISRQTLAST : in std_ulogic;
     SAXISRQTUSER : in std_logic_vector(59 downto 0);
     SAXISRQTVALID : in std_ulogic;
     USERCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PCIE_3_0 : component is "PRIMITIVE";

----- component PCIE_3_1 -----
component PCIE_3_1
  generic (
     ARI_CAP_ENABLE : string := "FALSE";
     AXISTEN_IF_CC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_CC_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_CQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_ENABLE_CLIENT_TAG : string := "FALSE";
     AXISTEN_IF_ENABLE_MSG_ROUTE : std_logic_vector(17 downto 0) := "00" & X"0000";
     AXISTEN_IF_ENABLE_RX_MSG_INTFC : string := "FALSE";
     AXISTEN_IF_RC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_RQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RQ_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_WIDTH : std_logic_vector(1 downto 0) := "10";
     CRM_CORE_CLK_FREQ_500 : string := "TRUE";
     CRM_USER_CLK_FREQ : std_logic_vector(1 downto 0) := "10";
     DEBUG_CFG_LOCAL_MGMT_REG_ACCESS_OVERRIDE : string := "FALSE";
     DEBUG_PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     DEBUG_TL_DISABLE_RX_TLP_ORDER_CHECKS : string := "FALSE";
     DNSTREAM_LINK_NUM : std_logic_vector(7 downto 0) := X"00";
     LL_ACK_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_CPL_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_CPL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_NP_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_NP_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_P_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_P_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_REPLAY_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LTR_TX_MESSAGE_MINIMUM_INTERVAL : std_logic_vector(9 downto 0) := "00" & X"FA";
     LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE : string := "FALSE";
     LTR_TX_MESSAGE_ON_LTR_ENABLE : string := "FALSE";
     MCAP_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     MCAP_CONFIGURE_OVERRIDE : string := "FALSE";
     MCAP_ENABLE : string := "FALSE";
     MCAP_EOS_DESIGN_SWITCH : string := "FALSE";
     MCAP_FPGA_BITSTREAM_VERSION : std_logic_vector(31 downto 0) := X"00000000";
     MCAP_GATE_IO_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_GATE_MEM_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INPUT_GATE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_EOS : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_ERROR : string := "FALSE";
     MCAP_VSEC_ID : std_logic_vector(15 downto 0) := X"0000";
     MCAP_VSEC_LEN : std_logic_vector(11 downto 0) := X"02C";
     MCAP_VSEC_REV : std_logic_vector(3 downto 0) := X"0";
     PF0_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF0_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF0_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF0_ARI_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF0_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF0_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF0_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF0_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_ARI_FORWARD_ENABLE : string := "FALSE";
     PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE : string := "TRUE";
     PF0_DEV_CAP2_LTR_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_OBFF_SUPPORT : std_logic_vector(1 downto 0) := "00";
     PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT : string := "FALSE";
     PF0_DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     PF0_DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     PF0_DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "TRUE";
     PF0_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF0_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF0_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF0_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF0_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF0_LINK_CAP_ASPM_SUPPORT : integer := 0;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     PF0_LTR_CAP_MAX_NOSNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_MAX_SNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_LTR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSIX_CAP_PBA_BIR : integer := 0;
     PF0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF0_MSIX_CAP_TABLE_BIR : integer := 0;
     PF0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF0_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF0_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF0_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF0_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PM_CAP_PMESUPPORT_D0 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D1 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3HOT : string := "TRUE";
     PF0_PM_CAP_SUPP_D1_STATE : string := "TRUE";
     PF0_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF0_PM_CSR_NOSOFTRESET : string := "TRUE";
     PF0_RBAR_CAP_ENABLE : string := "FALSE";
     PF0_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF0_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF0_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF0_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF0_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF0_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF0_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF0_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF0_SECONDARY_PCIE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF0_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF0_TPHR_CAP_ENABLE : string := "FALSE";
     PF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF0_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF0_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_VC_CAP_ENABLE : string := "FALSE";
     PF0_VC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_VC_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF1_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF1_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF1_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF1_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF1_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF1_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF1_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF1_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF1_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF1_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF1_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF1_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSIX_CAP_PBA_BIR : integer := 0;
     PF1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF1_MSIX_CAP_TABLE_BIR : integer := 0;
     PF1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF1_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF1_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF1_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF1_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF1_RBAR_CAP_ENABLE : string := "FALSE";
     PF1_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF1_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF1_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF1_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF1_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF1_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF1_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF1_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF1_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF1_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF1_TPHR_CAP_ENABLE : string := "FALSE";
     PF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF1_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF1_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF1_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF2_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF2_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF2_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF2_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF2_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF2_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF2_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF2_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF2_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF2_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF2_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF2_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSIX_CAP_PBA_BIR : integer := 0;
     PF2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF2_MSIX_CAP_TABLE_BIR : integer := 0;
     PF2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF2_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF2_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF2_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF2_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF2_RBAR_CAP_ENABLE : string := "FALSE";
     PF2_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF2_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF2_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF2_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF2_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF2_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF2_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF2_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF2_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF2_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF2_TPHR_CAP_ENABLE : string := "FALSE";
     PF2_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF2_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF2_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF2_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF3_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF3_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF3_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF3_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF3_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF3_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF3_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF3_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF3_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF3_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF3_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF3_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSIX_CAP_PBA_BIR : integer := 0;
     PF3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF3_MSIX_CAP_TABLE_BIR : integer := 0;
     PF3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF3_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF3_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF3_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF3_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF3_RBAR_CAP_ENABLE : string := "FALSE";
     PF3_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF3_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF3_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF3_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF3_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF3_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF3_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF3_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF3_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF3_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF3_TPHR_CAP_ENABLE : string := "FALSE";
     PF3_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF3_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF3_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF3_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN3 : string := "FALSE";
     PL_DISABLE_AUTO_SPEED_CHANGE_TO_GEN2 : string := "FALSE";
     PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     PL_DISABLE_GEN3_DC_BALANCE : string := "FALSE";
     PL_DISABLE_GEN3_LFSR_UPDATE_ON_SKP : string := "TRUE";
     PL_DISABLE_RETRAIN_ON_FRAMING_ERROR : string := "FALSE";
     PL_DISABLE_SCRAMBLING : string := "FALSE";
     PL_DISABLE_SYNC_HEADER_FRAMING_ERROR : string := "FALSE";
     PL_DISABLE_UPCONFIG_CAPABLE : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_COEFF_CHECK : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_PRESET_CHECK : string := "FALSE";
     PL_EQ_ADAPT_ITER_COUNT : std_logic_vector(4 downto 0) := "0" & X"2";
     PL_EQ_ADAPT_REJECT_RETRY_COUNT : std_logic_vector(1 downto 0) := "01";
     PL_EQ_BYPASS_PHASE23 : string := "FALSE";
     PL_EQ_DEFAULT_GEN3_RX_PRESET_HINT : std_logic_vector(2 downto 0) := "011";
     PL_EQ_DEFAULT_GEN3_TX_PRESET : std_logic_vector(3 downto 0) := X"4";
     PL_EQ_PHASE01_RX_ADAPT : string := "FALSE";
     PL_EQ_SHORT_ADAPT_PHASE : string := "FALSE";
     PL_LANE0_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE1_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE2_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE3_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE4_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE5_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE6_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE7_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LINK_CAP_MAX_LINK_SPEED : std_logic_vector(2 downto 0) := "100";
     PL_LINK_CAP_MAX_LINK_WIDTH : std_logic_vector(3 downto 0) := X"8";
     PL_N_FTS_COMCLK_GEN1 : integer := 255;
     PL_N_FTS_COMCLK_GEN2 : integer := 255;
     PL_N_FTS_COMCLK_GEN3 : integer := 255;
     PL_N_FTS_GEN1 : integer := 255;
     PL_N_FTS_GEN2 : integer := 255;
     PL_N_FTS_GEN3 : integer := 255;
     PL_REPORT_ALL_PHY_ERRORS : string := "TRUE";
     PL_SIM_FAST_LINK_TRAINING : string := "FALSE";
     PL_UPSTREAM_FACING : string := "TRUE";
     PM_ASPML0S_TIMEOUT : std_logic_vector(15 downto 0) := X"05DC";
     PM_ASPML1_ENTRY_DELAY : std_logic_vector(19 downto 0) := X"00000";
     PM_ENABLE_L23_ENTRY : string := "FALSE";
     PM_ENABLE_SLOT_POWER_CAPTURE : string := "TRUE";
     PM_L1_REENTRY_DELAY : std_logic_vector(31 downto 0) := X"00000000";
     PM_PME_SERVICE_TIMEOUT_DELAY : std_logic_vector(19 downto 0) := X"186A0";
     PM_PME_TURNOFF_ACK_DELAY : std_logic_vector(15 downto 0) := X"0064";
     SIM_JTAG_IDCODE : std_logic_vector(31 downto 0) := X"00000000";
     SIM_VERSION : string := "1.0";
     SPARE_BIT0 : integer := 0;
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : integer := 0;
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE1 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE2 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE3 : std_logic_vector(7 downto 0) := X"00";
     SPARE_WORD0 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD1 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD2 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD3 : std_logic_vector(31 downto 0) := X"00000000";
     SRIOV_CAP_ENABLE : string := "FALSE";
     TL_COMPLETION_RAM_SIZE_16K : string := "TRUE";
     TL_COMPL_TIMEOUT_REG0 : std_logic_vector(23 downto 0) := X"BEBC20";
     TL_COMPL_TIMEOUT_REG1 : std_logic_vector(27 downto 0) := X"2FAF080";
     TL_CREDITS_CD : std_logic_vector(11 downto 0) := X"3E0";
     TL_CREDITS_CH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_NPD : std_logic_vector(11 downto 0) := X"028";
     TL_CREDITS_NPH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_PD : std_logic_vector(11 downto 0) := X"198";
     TL_CREDITS_PH : std_logic_vector(7 downto 0) := X"20";
     TL_ENABLE_MESSAGE_RID_CHECK_ENABLE : string := "TRUE";
     TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_MODE_ENABLE : string := "FALSE";
     TL_PF_ENABLE_REG : std_logic_vector(1 downto 0) := "00";
     TL_TX_MUX_STRICT_PRIORITY : string := "TRUE";
     TWO_LAYER_MODE_DLCMSM_ENABLE : string := "TRUE";
     TWO_LAYER_MODE_ENABLE : string := "FALSE";
     TWO_LAYER_MODE_WIDTH_256 : string := "TRUE";
     VF0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     VF0_MSIX_CAP_PBA_BIR : integer := 0;
     VF0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF0_MSIX_CAP_TABLE_BIR : integer := 0;
     VF0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF0_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF0_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF0_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF0_TPHR_CAP_ENABLE : string := "FALSE";
     VF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF0_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF0_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF0_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF1_MSIX_CAP_PBA_BIR : integer := 0;
     VF1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF1_MSIX_CAP_TABLE_BIR : integer := 0;
     VF1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF1_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF1_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF1_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF1_TPHR_CAP_ENABLE : string := "FALSE";
     VF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF1_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF1_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF1_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF2_MSIX_CAP_PBA_BIR : integer := 0;
     VF2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF2_MSIX_CAP_TABLE_BIR : integer := 0;
     VF2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF2_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF2_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF2_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF2_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF2_TPHR_CAP_ENABLE : string := "FALSE";
     VF2_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF2_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF2_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF2_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF3_MSIX_CAP_PBA_BIR : integer := 0;
     VF3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF3_MSIX_CAP_TABLE_BIR : integer := 0;
     VF3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF3_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF3_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF3_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF3_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF3_TPHR_CAP_ENABLE : string := "FALSE";
     VF3_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF3_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF3_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF3_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF4_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF4_MSIX_CAP_PBA_BIR : integer := 0;
     VF4_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF4_MSIX_CAP_TABLE_BIR : integer := 0;
     VF4_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF4_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF4_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF4_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF4_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF4_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF4_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF4_TPHR_CAP_ENABLE : string := "FALSE";
     VF4_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF4_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF4_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF4_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF4_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF4_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF5_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF5_MSIX_CAP_PBA_BIR : integer := 0;
     VF5_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF5_MSIX_CAP_TABLE_BIR : integer := 0;
     VF5_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF5_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF5_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF5_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF5_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF5_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF5_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF5_TPHR_CAP_ENABLE : string := "FALSE";
     VF5_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF5_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF5_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF5_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF5_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF5_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF6_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF6_MSIX_CAP_PBA_BIR : integer := 0;
     VF6_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF6_MSIX_CAP_TABLE_BIR : integer := 0;
     VF6_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF6_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF6_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF6_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF6_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF6_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF6_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF6_TPHR_CAP_ENABLE : string := "FALSE";
     VF6_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF6_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF6_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF6_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF6_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF6_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF7_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF7_MSIX_CAP_PBA_BIR : integer := 0;
     VF7_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF7_MSIX_CAP_TABLE_BIR : integer := 0;
     VF7_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF7_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF7_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF7_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF7_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF7_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF7_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF7_TPHR_CAP_ENABLE : string := "FALSE";
     VF7_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF7_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF7_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF7_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF7_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF7_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1"
  );
  port (
     CFGCURRENTSPEED : out std_logic_vector(2 downto 0);
     CFGDPASUBSTATECHANGE : out std_logic_vector(3 downto 0);
     CFGERRCOROUT : out std_ulogic;
     CFGERRFATALOUT : out std_ulogic;
     CFGERRNONFATALOUT : out std_ulogic;
     CFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     CFGEXTREADRECEIVED : out std_ulogic;
     CFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     CFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGEXTWRITERECEIVED : out std_ulogic;
     CFGFCCPLD : out std_logic_vector(11 downto 0);
     CFGFCCPLH : out std_logic_vector(7 downto 0);
     CFGFCNPD : out std_logic_vector(11 downto 0);
     CFGFCNPH : out std_logic_vector(7 downto 0);
     CFGFCPD : out std_logic_vector(11 downto 0);
     CFGFCPH : out std_logic_vector(7 downto 0);
     CFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     CFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     CFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     CFGHOTRESETOUT : out std_ulogic;
     CFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIFAIL : out std_ulogic;
     CFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     CFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     CFGINTERRUPTMSISENT : out std_ulogic;
     CFGINTERRUPTMSIVFENABLE : out std_logic_vector(7 downto 0);
     CFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXFAIL : out std_ulogic;
     CFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXSENT : out std_ulogic;
     CFGINTERRUPTMSIXVFENABLE : out std_logic_vector(7 downto 0);
     CFGINTERRUPTMSIXVFMASK : out std_logic_vector(7 downto 0);
     CFGINTERRUPTSENT : out std_ulogic;
     CFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGLOCALERROR : out std_ulogic;
     CFGLTRENABLE : out std_ulogic;
     CFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     CFGMAXPAYLOAD : out std_logic_vector(2 downto 0);
     CFGMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     CFGMGMTREADWRITEDONE : out std_ulogic;
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     CFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     CFGMSGTRANSMITDONE : out std_ulogic;
     CFGNEGOTIATEDWIDTH : out std_logic_vector(3 downto 0);
     CFGOBFFENABLE : out std_logic_vector(1 downto 0);
     CFGPERFUNCSTATUSDATA : out std_logic_vector(15 downto 0);
     CFGPERFUNCTIONUPDATEDONE : out std_ulogic;
     CFGPHYLINKDOWN : out std_ulogic;
     CFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     CFGPLSTATUSCHANGE : out std_ulogic;
     CFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     CFGRCBSTATUS : out std_logic_vector(3 downto 0);
     CFGTPHFUNCTIONNUM : out std_logic_vector(3 downto 0);
     CFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     CFGTPHSTMODE : out std_logic_vector(11 downto 0);
     CFGTPHSTTADDRESS : out std_logic_vector(4 downto 0);
     CFGTPHSTTREADENABLE : out std_ulogic;
     CFGTPHSTTWRITEBYTEVALID : out std_logic_vector(3 downto 0);
     CFGTPHSTTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGTPHSTTWRITEENABLE : out std_ulogic;
     CFGVFFLRINPROCESS : out std_logic_vector(7 downto 0);
     CFGVFPOWERSTATE : out std_logic_vector(23 downto 0);
     CFGVFSTATUS : out std_logic_vector(15 downto 0);
     CFGVFTPHREQUESTERENABLE : out std_logic_vector(7 downto 0);
     CFGVFTPHSTMODE : out std_logic_vector(23 downto 0);
     CONFMCAPDESIGNSWITCH : out std_ulogic;
     CONFMCAPEOS : out std_ulogic;
     CONFMCAPINUSEBYPCIE : out std_ulogic;
     CONFREQREADY : out std_ulogic;
     CONFRESPRDATA : out std_logic_vector(31 downto 0);
     CONFRESPVALID : out std_ulogic;
     DBGDATAOUT : out std_logic_vector(15 downto 0);
     DBGMCAPCSB : out std_ulogic;
     DBGMCAPDATA : out std_logic_vector(31 downto 0);
     DBGMCAPEOS : out std_ulogic;
     DBGMCAPERROR : out std_ulogic;
     DBGMCAPMODE : out std_ulogic;
     DBGMCAPRDATAVALID : out std_ulogic;
     DBGMCAPRDWRB : out std_ulogic;
     DBGMCAPRESET : out std_ulogic;
     DBGPLDATABLOCKRECEIVEDAFTEREDS : out std_ulogic;
     DBGPLGEN3FRAMINGERRORDETECTED : out std_ulogic;
     DBGPLGEN3SYNCHEADERERRORDETECTED : out std_ulogic;
     DBGPLINFERREDRXELECTRICALIDLE : out std_logic_vector(7 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     LL2LMMASTERTLPSENT0 : out std_ulogic;
     LL2LMMASTERTLPSENT1 : out std_ulogic;
     LL2LMMASTERTLPSENTTLPID0 : out std_logic_vector(3 downto 0);
     LL2LMMASTERTLPSENTTLPID1 : out std_logic_vector(3 downto 0);
     LL2LMMAXISRXTDATA : out std_logic_vector(255 downto 0);
     LL2LMMAXISRXTUSER : out std_logic_vector(17 downto 0);
     LL2LMMAXISRXTVALID : out std_logic_vector(7 downto 0);
     LL2LMSAXISTXTREADY : out std_logic_vector(7 downto 0);
     MAXISCQTDATA : out std_logic_vector(255 downto 0);
     MAXISCQTKEEP : out std_logic_vector(7 downto 0);
     MAXISCQTLAST : out std_ulogic;
     MAXISCQTUSER : out std_logic_vector(84 downto 0);
     MAXISCQTVALID : out std_ulogic;
     MAXISRCTDATA : out std_logic_vector(255 downto 0);
     MAXISRCTKEEP : out std_logic_vector(7 downto 0);
     MAXISRCTLAST : out std_ulogic;
     MAXISRCTUSER : out std_logic_vector(74 downto 0);
     MAXISRCTVALID : out std_ulogic;
     MICOMPLETIONRAMREADADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMREADENABLEU : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEDATAL : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEDATAU : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEENABLEU : out std_logic_vector(3 downto 0);
     MIREPLAYRAMADDRESS : out std_logic_vector(8 downto 0);
     MIREPLAYRAMREADENABLE : out std_logic_vector(1 downto 0);
     MIREPLAYRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREPLAYRAMWRITEENABLE : out std_logic_vector(1 downto 0);
     MIREQUESTRAMREADADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADENABLE : out std_logic_vector(3 downto 0);
     MIREQUESTRAMWRITEADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREQUESTRAMWRITEENABLE : out std_logic_vector(3 downto 0);
     PCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     PCIEPERST0B : out std_ulogic;
     PCIEPERST1B : out std_ulogic;
     PCIERQSEQNUM : out std_logic_vector(3 downto 0);
     PCIERQSEQNUMVLD : out std_ulogic;
     PCIERQTAG : out std_logic_vector(5 downto 0);
     PCIERQTAGAV : out std_logic_vector(1 downto 0);
     PCIERQTAGVLD : out std_ulogic;
     PCIETFCNPDAV : out std_logic_vector(1 downto 0);
     PCIETFCNPHAV : out std_logic_vector(1 downto 0);
     PIPERX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX0EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX0EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX0EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX0POLARITY : out std_ulogic;
     PIPERX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX1EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX1EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX1EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX1POLARITY : out std_ulogic;
     PIPERX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX2EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX2EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX2EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX2POLARITY : out std_ulogic;
     PIPERX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX3EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX3EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX3EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX3POLARITY : out std_ulogic;
     PIPERX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX4EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX4EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX4EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX4POLARITY : out std_ulogic;
     PIPERX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX5EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX5EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX5EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX5POLARITY : out std_ulogic;
     PIPERX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX6EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX6EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX6EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX6POLARITY : out std_ulogic;
     PIPERX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX7EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX7EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX7EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX7POLARITY : out std_ulogic;
     PIPETX0CHARISK : out std_logic_vector(1 downto 0);
     PIPETX0COMPLIANCE : out std_ulogic;
     PIPETX0DATA : out std_logic_vector(31 downto 0);
     PIPETX0DATAVALID : out std_ulogic;
     PIPETX0DEEMPH : out std_ulogic;
     PIPETX0ELECIDLE : out std_ulogic;
     PIPETX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX0EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX0EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX0MARGIN : out std_logic_vector(2 downto 0);
     PIPETX0POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX0RATE : out std_logic_vector(1 downto 0);
     PIPETX0RCVRDET : out std_ulogic;
     PIPETX0RESET : out std_ulogic;
     PIPETX0STARTBLOCK : out std_ulogic;
     PIPETX0SWING : out std_ulogic;
     PIPETX0SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX1CHARISK : out std_logic_vector(1 downto 0);
     PIPETX1COMPLIANCE : out std_ulogic;
     PIPETX1DATA : out std_logic_vector(31 downto 0);
     PIPETX1DATAVALID : out std_ulogic;
     PIPETX1DEEMPH : out std_ulogic;
     PIPETX1ELECIDLE : out std_ulogic;
     PIPETX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX1EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX1EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX1MARGIN : out std_logic_vector(2 downto 0);
     PIPETX1POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX1RATE : out std_logic_vector(1 downto 0);
     PIPETX1RCVRDET : out std_ulogic;
     PIPETX1RESET : out std_ulogic;
     PIPETX1STARTBLOCK : out std_ulogic;
     PIPETX1SWING : out std_ulogic;
     PIPETX1SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX2CHARISK : out std_logic_vector(1 downto 0);
     PIPETX2COMPLIANCE : out std_ulogic;
     PIPETX2DATA : out std_logic_vector(31 downto 0);
     PIPETX2DATAVALID : out std_ulogic;
     PIPETX2DEEMPH : out std_ulogic;
     PIPETX2ELECIDLE : out std_ulogic;
     PIPETX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX2EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX2EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX2MARGIN : out std_logic_vector(2 downto 0);
     PIPETX2POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX2RATE : out std_logic_vector(1 downto 0);
     PIPETX2RCVRDET : out std_ulogic;
     PIPETX2RESET : out std_ulogic;
     PIPETX2STARTBLOCK : out std_ulogic;
     PIPETX2SWING : out std_ulogic;
     PIPETX2SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX3CHARISK : out std_logic_vector(1 downto 0);
     PIPETX3COMPLIANCE : out std_ulogic;
     PIPETX3DATA : out std_logic_vector(31 downto 0);
     PIPETX3DATAVALID : out std_ulogic;
     PIPETX3DEEMPH : out std_ulogic;
     PIPETX3ELECIDLE : out std_ulogic;
     PIPETX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX3EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX3EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX3MARGIN : out std_logic_vector(2 downto 0);
     PIPETX3POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX3RATE : out std_logic_vector(1 downto 0);
     PIPETX3RCVRDET : out std_ulogic;
     PIPETX3RESET : out std_ulogic;
     PIPETX3STARTBLOCK : out std_ulogic;
     PIPETX3SWING : out std_ulogic;
     PIPETX3SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX4CHARISK : out std_logic_vector(1 downto 0);
     PIPETX4COMPLIANCE : out std_ulogic;
     PIPETX4DATA : out std_logic_vector(31 downto 0);
     PIPETX4DATAVALID : out std_ulogic;
     PIPETX4DEEMPH : out std_ulogic;
     PIPETX4ELECIDLE : out std_ulogic;
     PIPETX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX4EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX4EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX4MARGIN : out std_logic_vector(2 downto 0);
     PIPETX4POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX4RATE : out std_logic_vector(1 downto 0);
     PIPETX4RCVRDET : out std_ulogic;
     PIPETX4RESET : out std_ulogic;
     PIPETX4STARTBLOCK : out std_ulogic;
     PIPETX4SWING : out std_ulogic;
     PIPETX4SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX5CHARISK : out std_logic_vector(1 downto 0);
     PIPETX5COMPLIANCE : out std_ulogic;
     PIPETX5DATA : out std_logic_vector(31 downto 0);
     PIPETX5DATAVALID : out std_ulogic;
     PIPETX5DEEMPH : out std_ulogic;
     PIPETX5ELECIDLE : out std_ulogic;
     PIPETX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX5EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX5EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX5MARGIN : out std_logic_vector(2 downto 0);
     PIPETX5POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX5RATE : out std_logic_vector(1 downto 0);
     PIPETX5RCVRDET : out std_ulogic;
     PIPETX5RESET : out std_ulogic;
     PIPETX5STARTBLOCK : out std_ulogic;
     PIPETX5SWING : out std_ulogic;
     PIPETX5SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX6CHARISK : out std_logic_vector(1 downto 0);
     PIPETX6COMPLIANCE : out std_ulogic;
     PIPETX6DATA : out std_logic_vector(31 downto 0);
     PIPETX6DATAVALID : out std_ulogic;
     PIPETX6DEEMPH : out std_ulogic;
     PIPETX6ELECIDLE : out std_ulogic;
     PIPETX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX6EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX6EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX6MARGIN : out std_logic_vector(2 downto 0);
     PIPETX6POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX6RATE : out std_logic_vector(1 downto 0);
     PIPETX6RCVRDET : out std_ulogic;
     PIPETX6RESET : out std_ulogic;
     PIPETX6STARTBLOCK : out std_ulogic;
     PIPETX6SWING : out std_ulogic;
     PIPETX6SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX7CHARISK : out std_logic_vector(1 downto 0);
     PIPETX7COMPLIANCE : out std_ulogic;
     PIPETX7DATA : out std_logic_vector(31 downto 0);
     PIPETX7DATAVALID : out std_ulogic;
     PIPETX7DEEMPH : out std_ulogic;
     PIPETX7ELECIDLE : out std_ulogic;
     PIPETX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX7EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX7EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX7MARGIN : out std_logic_vector(2 downto 0);
     PIPETX7POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX7RATE : out std_logic_vector(1 downto 0);
     PIPETX7RCVRDET : out std_ulogic;
     PIPETX7RESET : out std_ulogic;
     PIPETX7STARTBLOCK : out std_ulogic;
     PIPETX7SWING : out std_ulogic;
     PIPETX7SYNCHEADER : out std_logic_vector(1 downto 0);
     PLEQINPROGRESS : out std_ulogic;
     PLEQPHASE : out std_logic_vector(1 downto 0);
     SAXISCCTREADY : out std_logic_vector(3 downto 0);
     SAXISRQTREADY : out std_logic_vector(3 downto 0);
     SPAREOUT : out std_logic_vector(31 downto 0);
     CFGCONFIGSPACEENABLE : in std_ulogic;
     CFGDEVID : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGDSPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGERRCORIN : in std_ulogic;
     CFGERRUNCORIN : in std_ulogic;
     CFGEXTREADDATA : in std_logic_vector(31 downto 0);
     CFGEXTREADDATAVALID : in std_ulogic;
     CFGFCSEL : in std_logic_vector(2 downto 0);
     CFGFLRDONE : in std_logic_vector(3 downto 0);
     CFGHOTRESETIN : in std_ulogic;
     CFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     CFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSISELECT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     CFGINTERRUPTMSITPHSTTAG : in std_logic_vector(8 downto 0);
     CFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIXINT : in std_ulogic;
     CFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     CFGLINKTRAININGENABLE : in std_ulogic;
     CFGMGMTADDR : in std_logic_vector(18 downto 0);
     CFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     CFGMGMTREAD : in std_ulogic;
     CFGMGMTTYPE1CFGREGACCESS : in std_ulogic;
     CFGMGMTWRITE : in std_ulogic;
     CFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMIT : in std_ulogic;
     CFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     CFGPERFUNCSTATUSCONTROL : in std_logic_vector(2 downto 0);
     CFGPERFUNCTIONNUMBER : in std_logic_vector(3 downto 0);
     CFGPERFUNCTIONOUTPUTREQUEST : in std_ulogic;
     CFGPOWERSTATECHANGEACK : in std_ulogic;
     CFGREQPMTRANSITIONL23READY : in std_ulogic;
     CFGREVID : in std_logic_vector(7 downto 0);
     CFGSUBSYSID : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTPHSTTREADDATA : in std_logic_vector(31 downto 0);
     CFGTPHSTTREADDATAVALID : in std_ulogic;
     CFGVENDID : in std_logic_vector(15 downto 0);
     CFGVFFLRDONE : in std_logic_vector(7 downto 0);
     CONFMCAPREQUESTBYCONF : in std_ulogic;
     CONFREQDATA : in std_logic_vector(31 downto 0);
     CONFREQREGNUM : in std_logic_vector(3 downto 0);
     CONFREQTYPE : in std_logic_vector(1 downto 0);
     CONFREQVALID : in std_ulogic;
     CORECLK : in std_ulogic;
     CORECLKMICOMPLETIONRAML : in std_ulogic;
     CORECLKMICOMPLETIONRAMU : in std_ulogic;
     CORECLKMIREPLAYRAM : in std_ulogic;
     CORECLKMIREQUESTRAM : in std_ulogic;
     DBGCFGLOCALMGMTREGOVERRIDE : in std_ulogic;
     DBGDATASEL : in std_logic_vector(3 downto 0);
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     LL2LMSAXISTXTUSER : in std_logic_vector(13 downto 0);
     LL2LMSAXISTXTVALID : in std_ulogic;
     LL2LMTXTLPID0 : in std_logic_vector(3 downto 0);
     LL2LMTXTLPID1 : in std_logic_vector(3 downto 0);
     MAXISCQTREADY : in std_logic_vector(21 downto 0);
     MAXISRCTREADY : in std_logic_vector(21 downto 0);
     MCAPCLK : in std_ulogic;
     MCAPPERST0B : in std_ulogic;
     MCAPPERST1B : in std_ulogic;
     MGMTRESETN : in std_ulogic;
     MGMTSTICKYRESETN : in std_ulogic;
     MICOMPLETIONRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREPLAYRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREQUESTRAMREADDATA : in std_logic_vector(143 downto 0);
     PCIECQNPREQ : in std_ulogic;
     PIPECLK : in std_ulogic;
     PIPEEQFS : in std_logic_vector(5 downto 0);
     PIPEEQLF : in std_logic_vector(5 downto 0);
     PIPERESETN : in std_ulogic;
     PIPERX0CHARISK : in std_logic_vector(1 downto 0);
     PIPERX0DATA : in std_logic_vector(31 downto 0);
     PIPERX0DATAVALID : in std_ulogic;
     PIPERX0ELECIDLE : in std_ulogic;
     PIPERX0EQDONE : in std_ulogic;
     PIPERX0EQLPADAPTDONE : in std_ulogic;
     PIPERX0EQLPLFFSSEL : in std_ulogic;
     PIPERX0EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX0PHYSTATUS : in std_ulogic;
     PIPERX0STARTBLOCK : in std_ulogic;
     PIPERX0STATUS : in std_logic_vector(2 downto 0);
     PIPERX0SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX0VALID : in std_ulogic;
     PIPERX1CHARISK : in std_logic_vector(1 downto 0);
     PIPERX1DATA : in std_logic_vector(31 downto 0);
     PIPERX1DATAVALID : in std_ulogic;
     PIPERX1ELECIDLE : in std_ulogic;
     PIPERX1EQDONE : in std_ulogic;
     PIPERX1EQLPADAPTDONE : in std_ulogic;
     PIPERX1EQLPLFFSSEL : in std_ulogic;
     PIPERX1EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX1PHYSTATUS : in std_ulogic;
     PIPERX1STARTBLOCK : in std_ulogic;
     PIPERX1STATUS : in std_logic_vector(2 downto 0);
     PIPERX1SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX1VALID : in std_ulogic;
     PIPERX2CHARISK : in std_logic_vector(1 downto 0);
     PIPERX2DATA : in std_logic_vector(31 downto 0);
     PIPERX2DATAVALID : in std_ulogic;
     PIPERX2ELECIDLE : in std_ulogic;
     PIPERX2EQDONE : in std_ulogic;
     PIPERX2EQLPADAPTDONE : in std_ulogic;
     PIPERX2EQLPLFFSSEL : in std_ulogic;
     PIPERX2EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX2PHYSTATUS : in std_ulogic;
     PIPERX2STARTBLOCK : in std_ulogic;
     PIPERX2STATUS : in std_logic_vector(2 downto 0);
     PIPERX2SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX2VALID : in std_ulogic;
     PIPERX3CHARISK : in std_logic_vector(1 downto 0);
     PIPERX3DATA : in std_logic_vector(31 downto 0);
     PIPERX3DATAVALID : in std_ulogic;
     PIPERX3ELECIDLE : in std_ulogic;
     PIPERX3EQDONE : in std_ulogic;
     PIPERX3EQLPADAPTDONE : in std_ulogic;
     PIPERX3EQLPLFFSSEL : in std_ulogic;
     PIPERX3EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX3PHYSTATUS : in std_ulogic;
     PIPERX3STARTBLOCK : in std_ulogic;
     PIPERX3STATUS : in std_logic_vector(2 downto 0);
     PIPERX3SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX3VALID : in std_ulogic;
     PIPERX4CHARISK : in std_logic_vector(1 downto 0);
     PIPERX4DATA : in std_logic_vector(31 downto 0);
     PIPERX4DATAVALID : in std_ulogic;
     PIPERX4ELECIDLE : in std_ulogic;
     PIPERX4EQDONE : in std_ulogic;
     PIPERX4EQLPADAPTDONE : in std_ulogic;
     PIPERX4EQLPLFFSSEL : in std_ulogic;
     PIPERX4EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX4PHYSTATUS : in std_ulogic;
     PIPERX4STARTBLOCK : in std_ulogic;
     PIPERX4STATUS : in std_logic_vector(2 downto 0);
     PIPERX4SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX4VALID : in std_ulogic;
     PIPERX5CHARISK : in std_logic_vector(1 downto 0);
     PIPERX5DATA : in std_logic_vector(31 downto 0);
     PIPERX5DATAVALID : in std_ulogic;
     PIPERX5ELECIDLE : in std_ulogic;
     PIPERX5EQDONE : in std_ulogic;
     PIPERX5EQLPADAPTDONE : in std_ulogic;
     PIPERX5EQLPLFFSSEL : in std_ulogic;
     PIPERX5EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX5PHYSTATUS : in std_ulogic;
     PIPERX5STARTBLOCK : in std_ulogic;
     PIPERX5STATUS : in std_logic_vector(2 downto 0);
     PIPERX5SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX5VALID : in std_ulogic;
     PIPERX6CHARISK : in std_logic_vector(1 downto 0);
     PIPERX6DATA : in std_logic_vector(31 downto 0);
     PIPERX6DATAVALID : in std_ulogic;
     PIPERX6ELECIDLE : in std_ulogic;
     PIPERX6EQDONE : in std_ulogic;
     PIPERX6EQLPADAPTDONE : in std_ulogic;
     PIPERX6EQLPLFFSSEL : in std_ulogic;
     PIPERX6EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX6PHYSTATUS : in std_ulogic;
     PIPERX6STARTBLOCK : in std_ulogic;
     PIPERX6STATUS : in std_logic_vector(2 downto 0);
     PIPERX6SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX6VALID : in std_ulogic;
     PIPERX7CHARISK : in std_logic_vector(1 downto 0);
     PIPERX7DATA : in std_logic_vector(31 downto 0);
     PIPERX7DATAVALID : in std_ulogic;
     PIPERX7ELECIDLE : in std_ulogic;
     PIPERX7EQDONE : in std_ulogic;
     PIPERX7EQLPADAPTDONE : in std_ulogic;
     PIPERX7EQLPLFFSSEL : in std_ulogic;
     PIPERX7EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX7PHYSTATUS : in std_ulogic;
     PIPERX7STARTBLOCK : in std_ulogic;
     PIPERX7STATUS : in std_logic_vector(2 downto 0);
     PIPERX7SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX7VALID : in std_ulogic;
     PIPETX0EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX0EQDONE : in std_ulogic;
     PIPETX1EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX1EQDONE : in std_ulogic;
     PIPETX2EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX2EQDONE : in std_ulogic;
     PIPETX3EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX3EQDONE : in std_ulogic;
     PIPETX4EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX4EQDONE : in std_ulogic;
     PIPETX5EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX5EQDONE : in std_ulogic;
     PIPETX6EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX6EQDONE : in std_ulogic;
     PIPETX7EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX7EQDONE : in std_ulogic;
     PLEQRESETEIEOSCOUNT : in std_ulogic;
     PLGEN2UPSTREAMPREFERDEEMPH : in std_ulogic;
     RESETN : in std_ulogic;
     SAXISCCTDATA : in std_logic_vector(255 downto 0);
     SAXISCCTKEEP : in std_logic_vector(7 downto 0);
     SAXISCCTLAST : in std_ulogic;
     SAXISCCTUSER : in std_logic_vector(32 downto 0);
     SAXISCCTVALID : in std_ulogic;
     SAXISRQTDATA : in std_logic_vector(255 downto 0);
     SAXISRQTKEEP : in std_logic_vector(7 downto 0);
     SAXISRQTLAST : in std_ulogic;
     SAXISRQTUSER : in std_logic_vector(59 downto 0);
     SAXISRQTVALID : in std_ulogic;
     SPAREIN : in std_logic_vector(31 downto 0);
     USERCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PCIE_3_1 : component is "PRIMITIVE";

----- component PHASER_IN -----
component PHASER_IN
  generic (
     CLKOUT_DIV : integer := 4;
     DQS_BIAS_MODE : string := "FALSE";
     EN_ISERDES_RST : string := "FALSE";
     FINE_DELAY : integer := 0;
     FREQ_REF_DIV : string := "NONE";
     IS_RST_INVERTED : bit := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     REFCLK_PERIOD : real := 0.000;
     SEL_CLK_OFFSET : integer := 5;
     SYNC_IN_DIV_RST : string := "FALSE"
  );
  port (
     COUNTERREADVAL : out std_logic_vector(5 downto 0);
     FINEOVERFLOW : out std_ulogic;
     ICLK : out std_ulogic;
     ICLKDIV : out std_ulogic;
     ISERDESRST : out std_ulogic;
     RCLK : out std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(5 downto 0);
     COUNTERREADEN : in std_ulogic;
     DIVIDERST : in std_ulogic;
     EDGEADV : in std_ulogic;
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RANKSEL : in std_logic_vector(1 downto 0);
     RST : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_IN : component is "PRIMITIVE";

----- component PHASER_IN_PHY -----
component PHASER_IN_PHY
  generic (
     BURST_MODE : string := "FALSE";
     CLKOUT_DIV : integer := 4;
     DQS_AUTO_RECAL : bit := '1';
     DQS_BIAS_MODE : string := "FALSE";
     DQS_FIND_PATTERN : bit_vector := "001";
     FINE_DELAY : integer := 0;
     FREQ_REF_DIV : string := "NONE";
     IS_RST_INVERTED : bit := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     REFCLK_PERIOD : real := 0.000;
     SEL_CLK_OFFSET : integer := 5;
     SYNC_IN_DIV_RST : string := "FALSE";
     WR_CYCLES : string := "FALSE"
  );
  port (
     COUNTERREADVAL : out std_logic_vector(5 downto 0);
     DQSFOUND : out std_ulogic;
     DQSOUTOFRANGE : out std_ulogic;
     FINEOVERFLOW : out std_ulogic;
     ICLK : out std_ulogic;
     ICLKDIV : out std_ulogic;
     ISERDESRST : out std_ulogic;
     PHASELOCKED : out std_ulogic;
     RCLK : out std_ulogic;
     WRENABLE : out std_ulogic;
     BURSTPENDINGPHY : in std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(5 downto 0);
     COUNTERREADEN : in std_ulogic;
     ENCALIBPHY : in std_logic_vector(1 downto 0);
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RANKSELPHY : in std_logic_vector(1 downto 0);
     RST : in std_ulogic;
     RSTDQSFIND : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_IN_PHY : component is "PRIMITIVE";

----- component PHASER_OUT -----
component PHASER_OUT
  generic (
     CLKOUT_DIV : integer := 4;
     COARSE_BYPASS : string := "FALSE";
     COARSE_DELAY : integer := 0;
     EN_OSERDES_RST : string := "FALSE";
     FINE_DELAY : integer := 0;
     IS_RST_INVERTED : bit := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OCLKDELAY_INV : string := "FALSE";
     OCLK_DELAY : integer := 0;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     PO : bit_vector := "000";
     REFCLK_PERIOD : real := 0.000;
     SYNC_IN_DIV_RST : string := "FALSE"
  );
  port (
     COARSEOVERFLOW : out std_ulogic;
     COUNTERREADVAL : out std_logic_vector(8 downto 0);
     FINEOVERFLOW : out std_ulogic;
     OCLK : out std_ulogic;
     OCLKDELAYED : out std_ulogic;
     OCLKDIV : out std_ulogic;
     OSERDESRST : out std_ulogic;
     COARSEENABLE : in std_ulogic;
     COARSEINC : in std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(8 downto 0);
     COUNTERREADEN : in std_ulogic;
     DIVIDERST : in std_ulogic;
     EDGEADV : in std_ulogic;
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RST : in std_ulogic;
     SELFINEOCLKDELAY : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_OUT : component is "PRIMITIVE";

----- component PHASER_OUT_PHY -----
component PHASER_OUT_PHY
  generic (
     CLKOUT_DIV : integer := 4;
     COARSE_BYPASS : string := "FALSE";
     COARSE_DELAY : integer := 0;
     DATA_CTL_N : string := "FALSE";
     DATA_RD_CYCLES : string := "FALSE";
     FINE_DELAY : integer := 0;
     IS_RST_INVERTED : bit := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OCLKDELAY_INV : string := "FALSE";
     OCLK_DELAY : integer := 0;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     PO : bit_vector := "000";
     REFCLK_PERIOD : real := 0.000;
     SYNC_IN_DIV_RST : string := "FALSE"
  );
  port (
     COARSEOVERFLOW : out std_ulogic;
     COUNTERREADVAL : out std_logic_vector(8 downto 0);
     CTSBUS : out std_logic_vector(1 downto 0);
     DQSBUS : out std_logic_vector(1 downto 0);
     DTSBUS : out std_logic_vector(1 downto 0);
     FINEOVERFLOW : out std_ulogic;
     OCLK : out std_ulogic;
     OCLKDELAYED : out std_ulogic;
     OCLKDIV : out std_ulogic;
     OSERDESRST : out std_ulogic;
     RDENABLE : out std_ulogic;
     BURSTPENDINGPHY : in std_ulogic;
     COARSEENABLE : in std_ulogic;
     COARSEINC : in std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(8 downto 0);
     COUNTERREADEN : in std_ulogic;
     ENCALIBPHY : in std_logic_vector(1 downto 0);
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RST : in std_ulogic;
     SELFINEOCLKDELAY : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_OUT_PHY : component is "PRIMITIVE";

----- component PHASER_REF -----
component PHASER_REF
  generic (
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0'
  );
  port (
     LOCKED : out std_ulogic;
     CLKIN : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_REF : component is "PRIMITIVE";

----- component PHY_CONTROL -----
component PHY_CONTROL
  generic (
     AO_TOGGLE : integer := 0;
     AO_WRLVL_EN : bit_vector := "0000";
     BURST_MODE : string := "FALSE";
     CLK_RATIO : integer := 1;
     CMD_OFFSET : integer := 0;
     CO_DURATION : integer := 0;
     DATA_CTL_A_N : string := "FALSE";
     DATA_CTL_B_N : string := "FALSE";
     DATA_CTL_C_N : string := "FALSE";
     DATA_CTL_D_N : string := "FALSE";
     DISABLE_SEQ_MATCH : string := "TRUE";
     DI_DURATION : integer := 0;
     DO_DURATION : integer := 0;
     EVENTS_DELAY : integer := 63;
     FOUR_WINDOW_CLOCKS : integer := 63;
     MULTI_REGION : string := "FALSE";
     PHY_COUNT_ENABLE : string := "FALSE";
     RD_CMD_OFFSET_0 : integer := 0;
     RD_CMD_OFFSET_1 : integer := 00;
     RD_CMD_OFFSET_2 : integer := 0;
     RD_CMD_OFFSET_3 : integer := 0;
     RD_DURATION_0 : integer := 0;
     RD_DURATION_1 : integer := 0;
     RD_DURATION_2 : integer := 0;
     RD_DURATION_3 : integer := 0;
     SYNC_MODE : string := "FALSE";
     WR_CMD_OFFSET_0 : integer := 0;
     WR_CMD_OFFSET_1 : integer := 0;
     WR_CMD_OFFSET_2 : integer := 0;
     WR_CMD_OFFSET_3 : integer := 0;
     WR_DURATION_0 : integer := 0;
     WR_DURATION_1 : integer := 0;
     WR_DURATION_2 : integer := 0;
     WR_DURATION_3 : integer := 0
  );
  port (
     AUXOUTPUT : out std_logic_vector(3 downto 0);
     INBURSTPENDING : out std_logic_vector(3 downto 0);
     INRANKA : out std_logic_vector(1 downto 0);
     INRANKB : out std_logic_vector(1 downto 0);
     INRANKC : out std_logic_vector(1 downto 0);
     INRANKD : out std_logic_vector(1 downto 0);
     OUTBURSTPENDING : out std_logic_vector(3 downto 0);
     PCENABLECALIB : out std_logic_vector(1 downto 0);
     PHYCTLALMOSTFULL : out std_ulogic;
     PHYCTLEMPTY : out std_ulogic;
     PHYCTLFULL : out std_ulogic;
     PHYCTLREADY : out std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHYCLK : in std_ulogic;
     PHYCTLMSTREMPTY : in std_ulogic;
     PHYCTLWD : in std_logic_vector(31 downto 0);
     PHYCTLWRENABLE : in std_ulogic;
     PLLLOCK : in std_ulogic;
     READCALIBENABLE : in std_ulogic;
     REFDLLLOCK : in std_ulogic;
     RESET : in std_ulogic;
     SYNCIN : in std_ulogic;
     WRITECALIBENABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHY_CONTROL : component is "PRIMITIVE";

----- component PLLE2_ADV -----
component PLLE2_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.0;
     CLKIN1_PERIOD : real := 0.0;
     CLKIN2_PERIOD : real := 0.0;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.5;
     CLKOUT0_PHASE : real := 0.0;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.5;
     CLKOUT1_PHASE : real := 0.0;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.5;
     CLKOUT2_PHASE : real := 0.0;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.5;
     CLKOUT3_PHASE : real := 0.0;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.5;
     CLKOUT4_PHASE : real := 0.0;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.5;
     CLKOUT5_PHASE : real := 0.0;
     COMPENSATION : string := "ZHOLD";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKINSEL_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER1 : real := 0.0;
     REF_JITTER2 : real := 0.0;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic := '0';
     CLKOUT0 : out std_ulogic := '0';
     CLKOUT1 : out std_ulogic := '0';
     CLKOUT2 : out std_ulogic := '0';
     CLKOUT3 : out std_ulogic := '0';
     CLKOUT4 : out std_ulogic := '0';
     CLKOUT5 : out std_ulogic := '0';
     DO : out std_logic_vector (15 downto 0);
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE2_ADV : component is "PRIMITIVE";

----- component PLLE2_BASE -----
component PLLE2_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     DIVCLK_DIVIDE : integer := 1;
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE2_BASE : component is "PRIMITIVE";

----- component PLLE3_ADV -----
component PLLE3_ADV
  generic (
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUTPHY_MODE : string := "VCO_2X";
     COMPENSATION : string := "AUTO";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUTPHY : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKOUTPHYEN : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE3_ADV : component is "PRIMITIVE";

----- component PLLE3_BASE -----
component PLLE3_BASE
  generic (
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUTPHY_MODE : string := "VCO_2X";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUTPHY : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKOUTPHYEN : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE3_BASE : component is "PRIMITIVE";

----- component PLLE4_ADV -----
component PLLE4_ADV
  generic (
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUTPHY_MODE : string := "VCO_2X";
     COMPENSATION : string := "AUTO";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUTPHY : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKOUTPHYEN : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE4_ADV : component is "PRIMITIVE";

----- component PLLE4_BASE -----
component PLLE4_BASE
  generic (
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUTPHY_MODE : string := "VCO_2X";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : bit := '0';
     IS_CLKIN_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUTPHY : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKOUTPHYEN : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE4_BASE : component is "PRIMITIVE";

----- component PS7 -----
component PS7
  port (
     DMA0DATYPE : out std_logic_vector(1 downto 0);
     DMA0DAVALID : out std_ulogic;
     DMA0DRREADY : out std_ulogic;
     DMA0RSTN : out std_ulogic;
     DMA1DATYPE : out std_logic_vector(1 downto 0);
     DMA1DAVALID : out std_ulogic;
     DMA1DRREADY : out std_ulogic;
     DMA1RSTN : out std_ulogic;
     DMA2DATYPE : out std_logic_vector(1 downto 0);
     DMA2DAVALID : out std_ulogic;
     DMA2DRREADY : out std_ulogic;
     DMA2RSTN : out std_ulogic;
     DMA3DATYPE : out std_logic_vector(1 downto 0);
     DMA3DAVALID : out std_ulogic;
     DMA3DRREADY : out std_ulogic;
     DMA3RSTN : out std_ulogic;
     EMIOCAN0PHYTX : out std_ulogic;
     EMIOCAN1PHYTX : out std_ulogic;
     EMIOENET0GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET0GMIITXEN : out std_ulogic;
     EMIOENET0GMIITXER : out std_ulogic;
     EMIOENET0MDIOMDC : out std_ulogic;
     EMIOENET0MDIOO : out std_ulogic;
     EMIOENET0MDIOTN : out std_ulogic;
     EMIOENET0PTPDELAYREQRX : out std_ulogic;
     EMIOENET0PTPDELAYREQTX : out std_ulogic;
     EMIOENET0PTPPDELAYREQRX : out std_ulogic;
     EMIOENET0PTPPDELAYREQTX : out std_ulogic;
     EMIOENET0PTPPDELAYRESPRX : out std_ulogic;
     EMIOENET0PTPPDELAYRESPTX : out std_ulogic;
     EMIOENET0PTPSYNCFRAMERX : out std_ulogic;
     EMIOENET0PTPSYNCFRAMETX : out std_ulogic;
     EMIOENET0SOFRX : out std_ulogic;
     EMIOENET0SOFTX : out std_ulogic;
     EMIOENET1GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET1GMIITXEN : out std_ulogic;
     EMIOENET1GMIITXER : out std_ulogic;
     EMIOENET1MDIOMDC : out std_ulogic;
     EMIOENET1MDIOO : out std_ulogic;
     EMIOENET1MDIOTN : out std_ulogic;
     EMIOENET1PTPDELAYREQRX : out std_ulogic;
     EMIOENET1PTPDELAYREQTX : out std_ulogic;
     EMIOENET1PTPPDELAYREQRX : out std_ulogic;
     EMIOENET1PTPPDELAYREQTX : out std_ulogic;
     EMIOENET1PTPPDELAYRESPRX : out std_ulogic;
     EMIOENET1PTPPDELAYRESPTX : out std_ulogic;
     EMIOENET1PTPSYNCFRAMERX : out std_ulogic;
     EMIOENET1PTPSYNCFRAMETX : out std_ulogic;
     EMIOENET1SOFRX : out std_ulogic;
     EMIOENET1SOFTX : out std_ulogic;
     EMIOGPIOO : out std_logic_vector(63 downto 0);
     EMIOGPIOTN : out std_logic_vector(63 downto 0);
     EMIOI2C0SCLO : out std_ulogic;
     EMIOI2C0SCLTN : out std_ulogic;
     EMIOI2C0SDAO : out std_ulogic;
     EMIOI2C0SDATN : out std_ulogic;
     EMIOI2C1SCLO : out std_ulogic;
     EMIOI2C1SCLTN : out std_ulogic;
     EMIOI2C1SDAO : out std_ulogic;
     EMIOI2C1SDATN : out std_ulogic;
     EMIOPJTAGTDO : out std_ulogic;
     EMIOPJTAGTDTN : out std_ulogic;
     EMIOSDIO0BUSPOW : out std_ulogic;
     EMIOSDIO0BUSVOLT : out std_logic_vector(2 downto 0);
     EMIOSDIO0CLK : out std_ulogic;
     EMIOSDIO0CMDO : out std_ulogic;
     EMIOSDIO0CMDTN : out std_ulogic;
     EMIOSDIO0DATAO : out std_logic_vector(3 downto 0);
     EMIOSDIO0DATATN : out std_logic_vector(3 downto 0);
     EMIOSDIO0LED : out std_ulogic;
     EMIOSDIO1BUSPOW : out std_ulogic;
     EMIOSDIO1BUSVOLT : out std_logic_vector(2 downto 0);
     EMIOSDIO1CLK : out std_ulogic;
     EMIOSDIO1CMDO : out std_ulogic;
     EMIOSDIO1CMDTN : out std_ulogic;
     EMIOSDIO1DATAO : out std_logic_vector(3 downto 0);
     EMIOSDIO1DATATN : out std_logic_vector(3 downto 0);
     EMIOSDIO1LED : out std_ulogic;
     EMIOSPI0MO : out std_ulogic;
     EMIOSPI0MOTN : out std_ulogic;
     EMIOSPI0SCLKO : out std_ulogic;
     EMIOSPI0SCLKTN : out std_ulogic;
     EMIOSPI0SO : out std_ulogic;
     EMIOSPI0SSNTN : out std_ulogic;
     EMIOSPI0SSON : out std_logic_vector(2 downto 0);
     EMIOSPI0STN : out std_ulogic;
     EMIOSPI1MO : out std_ulogic;
     EMIOSPI1MOTN : out std_ulogic;
     EMIOSPI1SCLKO : out std_ulogic;
     EMIOSPI1SCLKTN : out std_ulogic;
     EMIOSPI1SO : out std_ulogic;
     EMIOSPI1SSNTN : out std_ulogic;
     EMIOSPI1SSON : out std_logic_vector(2 downto 0);
     EMIOSPI1STN : out std_ulogic;
     EMIOTRACECTL : out std_ulogic;
     EMIOTRACEDATA : out std_logic_vector(31 downto 0);
     EMIOTTC0WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC1WAVEO : out std_logic_vector(2 downto 0);
     EMIOUART0DTRN : out std_ulogic;
     EMIOUART0RTSN : out std_ulogic;
     EMIOUART0TX : out std_ulogic;
     EMIOUART1DTRN : out std_ulogic;
     EMIOUART1RTSN : out std_ulogic;
     EMIOUART1TX : out std_ulogic;
     EMIOUSB0PORTINDCTL : out std_logic_vector(1 downto 0);
     EMIOUSB0VBUSPWRSELECT : out std_ulogic;
     EMIOUSB1PORTINDCTL : out std_logic_vector(1 downto 0);
     EMIOUSB1VBUSPWRSELECT : out std_ulogic;
     EMIOWDTRSTO : out std_ulogic;
     EVENTEVENTO : out std_ulogic;
     EVENTSTANDBYWFE : out std_logic_vector(1 downto 0);
     EVENTSTANDBYWFI : out std_logic_vector(1 downto 0);
     FCLKCLK : out std_logic_vector(3 downto 0);
     FCLKRESETN : out std_logic_vector(3 downto 0);
     FTMTF2PTRIGACK : out std_logic_vector(3 downto 0);
     FTMTP2FDEBUG : out std_logic_vector(31 downto 0);
     FTMTP2FTRIG : out std_logic_vector(3 downto 0);
     IRQP2F : out std_logic_vector(28 downto 0);
     MAXIGP0ARADDR : out std_logic_vector(31 downto 0);
     MAXIGP0ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP0ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0ARESETN : out std_ulogic;
     MAXIGP0ARID : out std_logic_vector(11 downto 0);
     MAXIGP0ARLEN : out std_logic_vector(3 downto 0);
     MAXIGP0ARLOCK : out std_logic_vector(1 downto 0);
     MAXIGP0ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP0ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP0ARSIZE : out std_logic_vector(1 downto 0);
     MAXIGP0ARVALID : out std_ulogic;
     MAXIGP0AWADDR : out std_logic_vector(31 downto 0);
     MAXIGP0AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP0AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0AWID : out std_logic_vector(11 downto 0);
     MAXIGP0AWLEN : out std_logic_vector(3 downto 0);
     MAXIGP0AWLOCK : out std_logic_vector(1 downto 0);
     MAXIGP0AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP0AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP0AWSIZE : out std_logic_vector(1 downto 0);
     MAXIGP0AWVALID : out std_ulogic;
     MAXIGP0BREADY : out std_ulogic;
     MAXIGP0RREADY : out std_ulogic;
     MAXIGP0WDATA : out std_logic_vector(31 downto 0);
     MAXIGP0WID : out std_logic_vector(11 downto 0);
     MAXIGP0WLAST : out std_ulogic;
     MAXIGP0WSTRB : out std_logic_vector(3 downto 0);
     MAXIGP0WVALID : out std_ulogic;
     MAXIGP1ARADDR : out std_logic_vector(31 downto 0);
     MAXIGP1ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP1ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP1ARESETN : out std_ulogic;
     MAXIGP1ARID : out std_logic_vector(11 downto 0);
     MAXIGP1ARLEN : out std_logic_vector(3 downto 0);
     MAXIGP1ARLOCK : out std_logic_vector(1 downto 0);
     MAXIGP1ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP1ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP1ARSIZE : out std_logic_vector(1 downto 0);
     MAXIGP1ARVALID : out std_ulogic;
     MAXIGP1AWADDR : out std_logic_vector(31 downto 0);
     MAXIGP1AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP1AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP1AWID : out std_logic_vector(11 downto 0);
     MAXIGP1AWLEN : out std_logic_vector(3 downto 0);
     MAXIGP1AWLOCK : out std_logic_vector(1 downto 0);
     MAXIGP1AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP1AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP1AWSIZE : out std_logic_vector(1 downto 0);
     MAXIGP1AWVALID : out std_ulogic;
     MAXIGP1BREADY : out std_ulogic;
     MAXIGP1RREADY : out std_ulogic;
     MAXIGP1WDATA : out std_logic_vector(31 downto 0);
     MAXIGP1WID : out std_logic_vector(11 downto 0);
     MAXIGP1WLAST : out std_ulogic;
     MAXIGP1WSTRB : out std_logic_vector(3 downto 0);
     MAXIGP1WVALID : out std_ulogic;
     SAXIACPARESETN : out std_ulogic;
     SAXIACPARREADY : out std_ulogic;
     SAXIACPAWREADY : out std_ulogic;
     SAXIACPBID : out std_logic_vector(2 downto 0);
     SAXIACPBRESP : out std_logic_vector(1 downto 0);
     SAXIACPBVALID : out std_ulogic;
     SAXIACPRDATA : out std_logic_vector(63 downto 0);
     SAXIACPRID : out std_logic_vector(2 downto 0);
     SAXIACPRLAST : out std_ulogic;
     SAXIACPRRESP : out std_logic_vector(1 downto 0);
     SAXIACPRVALID : out std_ulogic;
     SAXIACPWREADY : out std_ulogic;
     SAXIGP0ARESETN : out std_ulogic;
     SAXIGP0ARREADY : out std_ulogic;
     SAXIGP0AWREADY : out std_ulogic;
     SAXIGP0BID : out std_logic_vector(5 downto 0);
     SAXIGP0BRESP : out std_logic_vector(1 downto 0);
     SAXIGP0BVALID : out std_ulogic;
     SAXIGP0RDATA : out std_logic_vector(31 downto 0);
     SAXIGP0RID : out std_logic_vector(5 downto 0);
     SAXIGP0RLAST : out std_ulogic;
     SAXIGP0RRESP : out std_logic_vector(1 downto 0);
     SAXIGP0RVALID : out std_ulogic;
     SAXIGP0WREADY : out std_ulogic;
     SAXIGP1ARESETN : out std_ulogic;
     SAXIGP1ARREADY : out std_ulogic;
     SAXIGP1AWREADY : out std_ulogic;
     SAXIGP1BID : out std_logic_vector(5 downto 0);
     SAXIGP1BRESP : out std_logic_vector(1 downto 0);
     SAXIGP1BVALID : out std_ulogic;
     SAXIGP1RDATA : out std_logic_vector(31 downto 0);
     SAXIGP1RID : out std_logic_vector(5 downto 0);
     SAXIGP1RLAST : out std_ulogic;
     SAXIGP1RRESP : out std_logic_vector(1 downto 0);
     SAXIGP1RVALID : out std_ulogic;
     SAXIGP1WREADY : out std_ulogic;
     SAXIHP0ARESETN : out std_ulogic;
     SAXIHP0ARREADY : out std_ulogic;
     SAXIHP0AWREADY : out std_ulogic;
     SAXIHP0BID : out std_logic_vector(5 downto 0);
     SAXIHP0BRESP : out std_logic_vector(1 downto 0);
     SAXIHP0BVALID : out std_ulogic;
     SAXIHP0RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP0RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP0RDATA : out std_logic_vector(63 downto 0);
     SAXIHP0RID : out std_logic_vector(5 downto 0);
     SAXIHP0RLAST : out std_ulogic;
     SAXIHP0RRESP : out std_logic_vector(1 downto 0);
     SAXIHP0RVALID : out std_ulogic;
     SAXIHP0WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP0WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP0WREADY : out std_ulogic;
     SAXIHP1ARESETN : out std_ulogic;
     SAXIHP1ARREADY : out std_ulogic;
     SAXIHP1AWREADY : out std_ulogic;
     SAXIHP1BID : out std_logic_vector(5 downto 0);
     SAXIHP1BRESP : out std_logic_vector(1 downto 0);
     SAXIHP1BVALID : out std_ulogic;
     SAXIHP1RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP1RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP1RDATA : out std_logic_vector(63 downto 0);
     SAXIHP1RID : out std_logic_vector(5 downto 0);
     SAXIHP1RLAST : out std_ulogic;
     SAXIHP1RRESP : out std_logic_vector(1 downto 0);
     SAXIHP1RVALID : out std_ulogic;
     SAXIHP1WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP1WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP1WREADY : out std_ulogic;
     SAXIHP2ARESETN : out std_ulogic;
     SAXIHP2ARREADY : out std_ulogic;
     SAXIHP2AWREADY : out std_ulogic;
     SAXIHP2BID : out std_logic_vector(5 downto 0);
     SAXIHP2BRESP : out std_logic_vector(1 downto 0);
     SAXIHP2BVALID : out std_ulogic;
     SAXIHP2RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP2RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP2RDATA : out std_logic_vector(63 downto 0);
     SAXIHP2RID : out std_logic_vector(5 downto 0);
     SAXIHP2RLAST : out std_ulogic;
     SAXIHP2RRESP : out std_logic_vector(1 downto 0);
     SAXIHP2RVALID : out std_ulogic;
     SAXIHP2WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP2WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP2WREADY : out std_ulogic;
     SAXIHP3ARESETN : out std_ulogic;
     SAXIHP3ARREADY : out std_ulogic;
     SAXIHP3AWREADY : out std_ulogic;
     SAXIHP3BID : out std_logic_vector(5 downto 0);
     SAXIHP3BRESP : out std_logic_vector(1 downto 0);
     SAXIHP3BVALID : out std_ulogic;
     SAXIHP3RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP3RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP3RDATA : out std_logic_vector(63 downto 0);
     SAXIHP3RID : out std_logic_vector(5 downto 0);
     SAXIHP3RLAST : out std_ulogic;
     SAXIHP3RRESP : out std_logic_vector(1 downto 0);
     SAXIHP3RVALID : out std_ulogic;
     SAXIHP3WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP3WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP3WREADY : out std_ulogic;
     DDRA : inout std_logic_vector(14 downto 0);
     DDRBA : inout std_logic_vector(2 downto 0);
     DDRCASB : inout std_ulogic;
     DDRCKE : inout std_ulogic;
     DDRCKN : inout std_ulogic;
     DDRCKP : inout std_ulogic;
     DDRCSB : inout std_ulogic;
     DDRDM : inout std_logic_vector(3 downto 0);
     DDRDQ : inout std_logic_vector(31 downto 0);
     DDRDQSN : inout std_logic_vector(3 downto 0);
     DDRDQSP : inout std_logic_vector(3 downto 0);
     DDRDRSTB : inout std_ulogic;
     DDRODT : inout std_ulogic;
     DDRRASB : inout std_ulogic;
     DDRVRN : inout std_ulogic;
     DDRVRP : inout std_ulogic;
     DDRWEB : inout std_ulogic;
     MIO : inout std_logic_vector(53 downto 0);
     PSCLK : inout std_ulogic;
     PSPORB : inout std_ulogic;
     PSSRSTB : inout std_ulogic;
     DDRARB : in std_logic_vector(3 downto 0);
     DMA0ACLK : in std_ulogic;
     DMA0DAREADY : in std_ulogic;
     DMA0DRLAST : in std_ulogic;
     DMA0DRTYPE : in std_logic_vector(1 downto 0);
     DMA0DRVALID : in std_ulogic;
     DMA1ACLK : in std_ulogic;
     DMA1DAREADY : in std_ulogic;
     DMA1DRLAST : in std_ulogic;
     DMA1DRTYPE : in std_logic_vector(1 downto 0);
     DMA1DRVALID : in std_ulogic;
     DMA2ACLK : in std_ulogic;
     DMA2DAREADY : in std_ulogic;
     DMA2DRLAST : in std_ulogic;
     DMA2DRTYPE : in std_logic_vector(1 downto 0);
     DMA2DRVALID : in std_ulogic;
     DMA3ACLK : in std_ulogic;
     DMA3DAREADY : in std_ulogic;
     DMA3DRLAST : in std_ulogic;
     DMA3DRTYPE : in std_logic_vector(1 downto 0);
     DMA3DRVALID : in std_ulogic;
     EMIOCAN0PHYRX : in std_ulogic;
     EMIOCAN1PHYRX : in std_ulogic;
     EMIOENET0EXTINTIN : in std_ulogic;
     EMIOENET0GMIICOL : in std_ulogic;
     EMIOENET0GMIICRS : in std_ulogic;
     EMIOENET0GMIIRXCLK : in std_ulogic;
     EMIOENET0GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET0GMIIRXDV : in std_ulogic;
     EMIOENET0GMIIRXER : in std_ulogic;
     EMIOENET0GMIITXCLK : in std_ulogic;
     EMIOENET0MDIOI : in std_ulogic;
     EMIOENET1EXTINTIN : in std_ulogic;
     EMIOENET1GMIICOL : in std_ulogic;
     EMIOENET1GMIICRS : in std_ulogic;
     EMIOENET1GMIIRXCLK : in std_ulogic;
     EMIOENET1GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET1GMIIRXDV : in std_ulogic;
     EMIOENET1GMIIRXER : in std_ulogic;
     EMIOENET1GMIITXCLK : in std_ulogic;
     EMIOENET1MDIOI : in std_ulogic;
     EMIOGPIOI : in std_logic_vector(63 downto 0);
     EMIOI2C0SCLI : in std_ulogic;
     EMIOI2C0SDAI : in std_ulogic;
     EMIOI2C1SCLI : in std_ulogic;
     EMIOI2C1SDAI : in std_ulogic;
     EMIOPJTAGTCK : in std_ulogic;
     EMIOPJTAGTDI : in std_ulogic;
     EMIOPJTAGTMS : in std_ulogic;
     EMIOSDIO0CDN : in std_ulogic;
     EMIOSDIO0CLKFB : in std_ulogic;
     EMIOSDIO0CMDI : in std_ulogic;
     EMIOSDIO0DATAI : in std_logic_vector(3 downto 0);
     EMIOSDIO0WP : in std_ulogic;
     EMIOSDIO1CDN : in std_ulogic;
     EMIOSDIO1CLKFB : in std_ulogic;
     EMIOSDIO1CMDI : in std_ulogic;
     EMIOSDIO1DATAI : in std_logic_vector(3 downto 0);
     EMIOSDIO1WP : in std_ulogic;
     EMIOSPI0MI : in std_ulogic;
     EMIOSPI0SCLKI : in std_ulogic;
     EMIOSPI0SI : in std_ulogic;
     EMIOSPI0SSIN : in std_ulogic;
     EMIOSPI1MI : in std_ulogic;
     EMIOSPI1SCLKI : in std_ulogic;
     EMIOSPI1SI : in std_ulogic;
     EMIOSPI1SSIN : in std_ulogic;
     EMIOSRAMINTIN : in std_ulogic;
     EMIOTRACECLK : in std_ulogic;
     EMIOTTC0CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC1CLKI : in std_logic_vector(2 downto 0);
     EMIOUART0CTSN : in std_ulogic;
     EMIOUART0DCDN : in std_ulogic;
     EMIOUART0DSRN : in std_ulogic;
     EMIOUART0RIN : in std_ulogic;
     EMIOUART0RX : in std_ulogic;
     EMIOUART1CTSN : in std_ulogic;
     EMIOUART1DCDN : in std_ulogic;
     EMIOUART1DSRN : in std_ulogic;
     EMIOUART1RIN : in std_ulogic;
     EMIOUART1RX : in std_ulogic;
     EMIOUSB0VBUSPWRFAULT : in std_ulogic;
     EMIOUSB1VBUSPWRFAULT : in std_ulogic;
     EMIOWDTCLKI : in std_ulogic;
     EVENTEVENTI : in std_ulogic;
     FCLKCLKTRIGN : in std_logic_vector(3 downto 0);
     FPGAIDLEN : in std_ulogic;
     FTMDTRACEINATID : in std_logic_vector(3 downto 0);
     FTMDTRACEINCLOCK : in std_ulogic;
     FTMDTRACEINDATA : in std_logic_vector(31 downto 0);
     FTMDTRACEINVALID : in std_ulogic;
     FTMTF2PDEBUG : in std_logic_vector(31 downto 0);
     FTMTF2PTRIG : in std_logic_vector(3 downto 0);
     FTMTP2FTRIGACK : in std_logic_vector(3 downto 0);
     IRQF2P : in std_logic_vector(19 downto 0);
     MAXIGP0ACLK : in std_ulogic;
     MAXIGP0ARREADY : in std_ulogic;
     MAXIGP0AWREADY : in std_ulogic;
     MAXIGP0BID : in std_logic_vector(11 downto 0);
     MAXIGP0BRESP : in std_logic_vector(1 downto 0);
     MAXIGP0BVALID : in std_ulogic;
     MAXIGP0RDATA : in std_logic_vector(31 downto 0);
     MAXIGP0RID : in std_logic_vector(11 downto 0);
     MAXIGP0RLAST : in std_ulogic;
     MAXIGP0RRESP : in std_logic_vector(1 downto 0);
     MAXIGP0RVALID : in std_ulogic;
     MAXIGP0WREADY : in std_ulogic;
     MAXIGP1ACLK : in std_ulogic;
     MAXIGP1ARREADY : in std_ulogic;
     MAXIGP1AWREADY : in std_ulogic;
     MAXIGP1BID : in std_logic_vector(11 downto 0);
     MAXIGP1BRESP : in std_logic_vector(1 downto 0);
     MAXIGP1BVALID : in std_ulogic;
     MAXIGP1RDATA : in std_logic_vector(31 downto 0);
     MAXIGP1RID : in std_logic_vector(11 downto 0);
     MAXIGP1RLAST : in std_ulogic;
     MAXIGP1RRESP : in std_logic_vector(1 downto 0);
     MAXIGP1RVALID : in std_ulogic;
     MAXIGP1WREADY : in std_ulogic;
     SAXIACPACLK : in std_ulogic;
     SAXIACPARADDR : in std_logic_vector(31 downto 0);
     SAXIACPARBURST : in std_logic_vector(1 downto 0);
     SAXIACPARCACHE : in std_logic_vector(3 downto 0);
     SAXIACPARID : in std_logic_vector(2 downto 0);
     SAXIACPARLEN : in std_logic_vector(3 downto 0);
     SAXIACPARLOCK : in std_logic_vector(1 downto 0);
     SAXIACPARPROT : in std_logic_vector(2 downto 0);
     SAXIACPARQOS : in std_logic_vector(3 downto 0);
     SAXIACPARSIZE : in std_logic_vector(1 downto 0);
     SAXIACPARUSER : in std_logic_vector(4 downto 0);
     SAXIACPARVALID : in std_ulogic;
     SAXIACPAWADDR : in std_logic_vector(31 downto 0);
     SAXIACPAWBURST : in std_logic_vector(1 downto 0);
     SAXIACPAWCACHE : in std_logic_vector(3 downto 0);
     SAXIACPAWID : in std_logic_vector(2 downto 0);
     SAXIACPAWLEN : in std_logic_vector(3 downto 0);
     SAXIACPAWLOCK : in std_logic_vector(1 downto 0);
     SAXIACPAWPROT : in std_logic_vector(2 downto 0);
     SAXIACPAWQOS : in std_logic_vector(3 downto 0);
     SAXIACPAWSIZE : in std_logic_vector(1 downto 0);
     SAXIACPAWUSER : in std_logic_vector(4 downto 0);
     SAXIACPAWVALID : in std_ulogic;
     SAXIACPBREADY : in std_ulogic;
     SAXIACPRREADY : in std_ulogic;
     SAXIACPWDATA : in std_logic_vector(63 downto 0);
     SAXIACPWID : in std_logic_vector(2 downto 0);
     SAXIACPWLAST : in std_ulogic;
     SAXIACPWSTRB : in std_logic_vector(7 downto 0);
     SAXIACPWVALID : in std_ulogic;
     SAXIGP0ACLK : in std_ulogic;
     SAXIGP0ARADDR : in std_logic_vector(31 downto 0);
     SAXIGP0ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP0ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0ARID : in std_logic_vector(5 downto 0);
     SAXIGP0ARLEN : in std_logic_vector(3 downto 0);
     SAXIGP0ARLOCK : in std_logic_vector(1 downto 0);
     SAXIGP0ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP0ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP0ARSIZE : in std_logic_vector(1 downto 0);
     SAXIGP0ARVALID : in std_ulogic;
     SAXIGP0AWADDR : in std_logic_vector(31 downto 0);
     SAXIGP0AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP0AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0AWID : in std_logic_vector(5 downto 0);
     SAXIGP0AWLEN : in std_logic_vector(3 downto 0);
     SAXIGP0AWLOCK : in std_logic_vector(1 downto 0);
     SAXIGP0AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP0AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP0AWSIZE : in std_logic_vector(1 downto 0);
     SAXIGP0AWVALID : in std_ulogic;
     SAXIGP0BREADY : in std_ulogic;
     SAXIGP0RREADY : in std_ulogic;
     SAXIGP0WDATA : in std_logic_vector(31 downto 0);
     SAXIGP0WID : in std_logic_vector(5 downto 0);
     SAXIGP0WLAST : in std_ulogic;
     SAXIGP0WSTRB : in std_logic_vector(3 downto 0);
     SAXIGP0WVALID : in std_ulogic;
     SAXIGP1ACLK : in std_ulogic;
     SAXIGP1ARADDR : in std_logic_vector(31 downto 0);
     SAXIGP1ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP1ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP1ARID : in std_logic_vector(5 downto 0);
     SAXIGP1ARLEN : in std_logic_vector(3 downto 0);
     SAXIGP1ARLOCK : in std_logic_vector(1 downto 0);
     SAXIGP1ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP1ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP1ARSIZE : in std_logic_vector(1 downto 0);
     SAXIGP1ARVALID : in std_ulogic;
     SAXIGP1AWADDR : in std_logic_vector(31 downto 0);
     SAXIGP1AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP1AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP1AWID : in std_logic_vector(5 downto 0);
     SAXIGP1AWLEN : in std_logic_vector(3 downto 0);
     SAXIGP1AWLOCK : in std_logic_vector(1 downto 0);
     SAXIGP1AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP1AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP1AWSIZE : in std_logic_vector(1 downto 0);
     SAXIGP1AWVALID : in std_ulogic;
     SAXIGP1BREADY : in std_ulogic;
     SAXIGP1RREADY : in std_ulogic;
     SAXIGP1WDATA : in std_logic_vector(31 downto 0);
     SAXIGP1WID : in std_logic_vector(5 downto 0);
     SAXIGP1WLAST : in std_ulogic;
     SAXIGP1WSTRB : in std_logic_vector(3 downto 0);
     SAXIGP1WVALID : in std_ulogic;
     SAXIHP0ACLK : in std_ulogic;
     SAXIHP0ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP0ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP0ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP0ARID : in std_logic_vector(5 downto 0);
     SAXIHP0ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP0ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP0ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP0ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP0ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP0ARVALID : in std_ulogic;
     SAXIHP0AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP0AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP0AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP0AWID : in std_logic_vector(5 downto 0);
     SAXIHP0AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP0AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP0AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP0AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP0AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP0AWVALID : in std_ulogic;
     SAXIHP0BREADY : in std_ulogic;
     SAXIHP0RDISSUECAP1EN : in std_ulogic;
     SAXIHP0RREADY : in std_ulogic;
     SAXIHP0WDATA : in std_logic_vector(63 downto 0);
     SAXIHP0WID : in std_logic_vector(5 downto 0);
     SAXIHP0WLAST : in std_ulogic;
     SAXIHP0WRISSUECAP1EN : in std_ulogic;
     SAXIHP0WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP0WVALID : in std_ulogic;
     SAXIHP1ACLK : in std_ulogic;
     SAXIHP1ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP1ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP1ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP1ARID : in std_logic_vector(5 downto 0);
     SAXIHP1ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP1ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP1ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP1ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP1ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP1ARVALID : in std_ulogic;
     SAXIHP1AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP1AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP1AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP1AWID : in std_logic_vector(5 downto 0);
     SAXIHP1AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP1AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP1AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP1AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP1AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP1AWVALID : in std_ulogic;
     SAXIHP1BREADY : in std_ulogic;
     SAXIHP1RDISSUECAP1EN : in std_ulogic;
     SAXIHP1RREADY : in std_ulogic;
     SAXIHP1WDATA : in std_logic_vector(63 downto 0);
     SAXIHP1WID : in std_logic_vector(5 downto 0);
     SAXIHP1WLAST : in std_ulogic;
     SAXIHP1WRISSUECAP1EN : in std_ulogic;
     SAXIHP1WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP1WVALID : in std_ulogic;
     SAXIHP2ACLK : in std_ulogic;
     SAXIHP2ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP2ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP2ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP2ARID : in std_logic_vector(5 downto 0);
     SAXIHP2ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP2ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP2ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP2ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP2ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP2ARVALID : in std_ulogic;
     SAXIHP2AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP2AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP2AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP2AWID : in std_logic_vector(5 downto 0);
     SAXIHP2AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP2AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP2AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP2AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP2AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP2AWVALID : in std_ulogic;
     SAXIHP2BREADY : in std_ulogic;
     SAXIHP2RDISSUECAP1EN : in std_ulogic;
     SAXIHP2RREADY : in std_ulogic;
     SAXIHP2WDATA : in std_logic_vector(63 downto 0);
     SAXIHP2WID : in std_logic_vector(5 downto 0);
     SAXIHP2WLAST : in std_ulogic;
     SAXIHP2WRISSUECAP1EN : in std_ulogic;
     SAXIHP2WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP2WVALID : in std_ulogic;
     SAXIHP3ACLK : in std_ulogic;
     SAXIHP3ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP3ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP3ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP3ARID : in std_logic_vector(5 downto 0);
     SAXIHP3ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP3ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP3ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP3ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP3ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP3ARVALID : in std_ulogic;
     SAXIHP3AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP3AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP3AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP3AWID : in std_logic_vector(5 downto 0);
     SAXIHP3AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP3AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP3AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP3AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP3AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP3AWVALID : in std_ulogic;
     SAXIHP3BREADY : in std_ulogic;
     SAXIHP3RDISSUECAP1EN : in std_ulogic;
     SAXIHP3RREADY : in std_ulogic;
     SAXIHP3WDATA : in std_logic_vector(63 downto 0);
     SAXIHP3WID : in std_logic_vector(5 downto 0);
     SAXIHP3WLAST : in std_ulogic;
     SAXIHP3WRISSUECAP1EN : in std_ulogic;
     SAXIHP3WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP3WVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PS7 : component is "PRIMITIVE";

----- component PS8 -----
component PS8
  port (
     ADMA2PLCACK : out std_logic_vector(7 downto 0);
     ADMA2PLTVLD : out std_logic_vector(7 downto 0);
     DPAUDIOREFCLK : out std_ulogic;
     DPAUXDATAOEN : out std_ulogic;
     DPAUXDATAOUT : out std_ulogic;
     DPLIVEVIDEODEOUT : out std_ulogic;
     DPMAXISMIXEDAUDIOTDATA : out std_logic_vector(31 downto 0);
     DPMAXISMIXEDAUDIOTID : out std_ulogic;
     DPMAXISMIXEDAUDIOTVALID : out std_ulogic;
     DPSAXISAUDIOTREADY : out std_ulogic;
     DPVIDEOOUTHSYNC : out std_ulogic;
     DPVIDEOOUTPIXEL1 : out std_logic_vector(35 downto 0);
     DPVIDEOOUTVSYNC : out std_ulogic;
     DPVIDEOREFCLK : out std_ulogic;
     EMIOCAN0PHYTX : out std_ulogic;
     EMIOCAN1PHYTX : out std_ulogic;
     EMIOENET0DMABUSWIDTH : out std_logic_vector(1 downto 0);
     EMIOENET0DMATXENDTOG : out std_ulogic;
     EMIOENET0GEMTSUTIMERCNT : out std_logic_vector(93 downto 0);
     EMIOENET0GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET0GMIITXEN : out std_ulogic;
     EMIOENET0GMIITXER : out std_ulogic;
     EMIOENET0MDIOMDC : out std_ulogic;
     EMIOENET0MDIOO : out std_ulogic;
     EMIOENET0MDIOTN : out std_ulogic;
     EMIOENET0RXWDATA : out std_logic_vector(7 downto 0);
     EMIOENET0RXWEOP : out std_ulogic;
     EMIOENET0RXWERR : out std_ulogic;
     EMIOENET0RXWFLUSH : out std_ulogic;
     EMIOENET0RXWSOP : out std_ulogic;
     EMIOENET0RXWSTATUS : out std_logic_vector(44 downto 0);
     EMIOENET0RXWWR : out std_ulogic;
     EMIOENET0SPEEDMODE : out std_logic_vector(2 downto 0);
     EMIOENET0TXRRD : out std_ulogic;
     EMIOENET0TXRSTATUS : out std_logic_vector(3 downto 0);
     EMIOENET1DMABUSWIDTH : out std_logic_vector(1 downto 0);
     EMIOENET1DMATXENDTOG : out std_ulogic;
     EMIOENET1GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET1GMIITXEN : out std_ulogic;
     EMIOENET1GMIITXER : out std_ulogic;
     EMIOENET1MDIOMDC : out std_ulogic;
     EMIOENET1MDIOO : out std_ulogic;
     EMIOENET1MDIOTN : out std_ulogic;
     EMIOENET1RXWDATA : out std_logic_vector(7 downto 0);
     EMIOENET1RXWEOP : out std_ulogic;
     EMIOENET1RXWERR : out std_ulogic;
     EMIOENET1RXWFLUSH : out std_ulogic;
     EMIOENET1RXWSOP : out std_ulogic;
     EMIOENET1RXWSTATUS : out std_logic_vector(44 downto 0);
     EMIOENET1RXWWR : out std_ulogic;
     EMIOENET1SPEEDMODE : out std_logic_vector(2 downto 0);
     EMIOENET1TXRRD : out std_ulogic;
     EMIOENET1TXRSTATUS : out std_logic_vector(3 downto 0);
     EMIOENET2DMABUSWIDTH : out std_logic_vector(1 downto 0);
     EMIOENET2DMATXENDTOG : out std_ulogic;
     EMIOENET2GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET2GMIITXEN : out std_ulogic;
     EMIOENET2GMIITXER : out std_ulogic;
     EMIOENET2MDIOMDC : out std_ulogic;
     EMIOENET2MDIOO : out std_ulogic;
     EMIOENET2MDIOTN : out std_ulogic;
     EMIOENET2RXWDATA : out std_logic_vector(7 downto 0);
     EMIOENET2RXWEOP : out std_ulogic;
     EMIOENET2RXWERR : out std_ulogic;
     EMIOENET2RXWFLUSH : out std_ulogic;
     EMIOENET2RXWSOP : out std_ulogic;
     EMIOENET2RXWSTATUS : out std_logic_vector(44 downto 0);
     EMIOENET2RXWWR : out std_ulogic;
     EMIOENET2SPEEDMODE : out std_logic_vector(2 downto 0);
     EMIOENET2TXRRD : out std_ulogic;
     EMIOENET2TXRSTATUS : out std_logic_vector(3 downto 0);
     EMIOENET3DMABUSWIDTH : out std_logic_vector(1 downto 0);
     EMIOENET3DMATXENDTOG : out std_ulogic;
     EMIOENET3GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET3GMIITXEN : out std_ulogic;
     EMIOENET3GMIITXER : out std_ulogic;
     EMIOENET3MDIOMDC : out std_ulogic;
     EMIOENET3MDIOO : out std_ulogic;
     EMIOENET3MDIOTN : out std_ulogic;
     EMIOENET3RXWDATA : out std_logic_vector(7 downto 0);
     EMIOENET3RXWEOP : out std_ulogic;
     EMIOENET3RXWERR : out std_ulogic;
     EMIOENET3RXWFLUSH : out std_ulogic;
     EMIOENET3RXWSOP : out std_ulogic;
     EMIOENET3RXWSTATUS : out std_logic_vector(44 downto 0);
     EMIOENET3RXWWR : out std_ulogic;
     EMIOENET3SPEEDMODE : out std_logic_vector(2 downto 0);
     EMIOENET3TXRRD : out std_ulogic;
     EMIOENET3TXRSTATUS : out std_logic_vector(3 downto 0);
     EMIOGEM0DELAYREQRX : out std_ulogic;
     EMIOGEM0DELAYREQTX : out std_ulogic;
     EMIOGEM0PDELAYREQRX : out std_ulogic;
     EMIOGEM0PDELAYREQTX : out std_ulogic;
     EMIOGEM0PDELAYRESPRX : out std_ulogic;
     EMIOGEM0PDELAYRESPTX : out std_ulogic;
     EMIOGEM0RXSOF : out std_ulogic;
     EMIOGEM0SYNCFRAMERX : out std_ulogic;
     EMIOGEM0SYNCFRAMETX : out std_ulogic;
     EMIOGEM0TSUTIMERCMPVAL : out std_ulogic;
     EMIOGEM0TXRFIXEDLAT : out std_ulogic;
     EMIOGEM0TXSOF : out std_ulogic;
     EMIOGEM1DELAYREQRX : out std_ulogic;
     EMIOGEM1DELAYREQTX : out std_ulogic;
     EMIOGEM1PDELAYREQRX : out std_ulogic;
     EMIOGEM1PDELAYREQTX : out std_ulogic;
     EMIOGEM1PDELAYRESPRX : out std_ulogic;
     EMIOGEM1PDELAYRESPTX : out std_ulogic;
     EMIOGEM1RXSOF : out std_ulogic;
     EMIOGEM1SYNCFRAMERX : out std_ulogic;
     EMIOGEM1SYNCFRAMETX : out std_ulogic;
     EMIOGEM1TSUTIMERCMPVAL : out std_ulogic;
     EMIOGEM1TXRFIXEDLAT : out std_ulogic;
     EMIOGEM1TXSOF : out std_ulogic;
     EMIOGEM2DELAYREQRX : out std_ulogic;
     EMIOGEM2DELAYREQTX : out std_ulogic;
     EMIOGEM2PDELAYREQRX : out std_ulogic;
     EMIOGEM2PDELAYREQTX : out std_ulogic;
     EMIOGEM2PDELAYRESPRX : out std_ulogic;
     EMIOGEM2PDELAYRESPTX : out std_ulogic;
     EMIOGEM2RXSOF : out std_ulogic;
     EMIOGEM2SYNCFRAMERX : out std_ulogic;
     EMIOGEM2SYNCFRAMETX : out std_ulogic;
     EMIOGEM2TSUTIMERCMPVAL : out std_ulogic;
     EMIOGEM2TXRFIXEDLAT : out std_ulogic;
     EMIOGEM2TXSOF : out std_ulogic;
     EMIOGEM3DELAYREQRX : out std_ulogic;
     EMIOGEM3DELAYREQTX : out std_ulogic;
     EMIOGEM3PDELAYREQRX : out std_ulogic;
     EMIOGEM3PDELAYREQTX : out std_ulogic;
     EMIOGEM3PDELAYRESPRX : out std_ulogic;
     EMIOGEM3PDELAYRESPTX : out std_ulogic;
     EMIOGEM3RXSOF : out std_ulogic;
     EMIOGEM3SYNCFRAMERX : out std_ulogic;
     EMIOGEM3SYNCFRAMETX : out std_ulogic;
     EMIOGEM3TSUTIMERCMPVAL : out std_ulogic;
     EMIOGEM3TXRFIXEDLAT : out std_ulogic;
     EMIOGEM3TXSOF : out std_ulogic;
     EMIOGPIOO : out std_logic_vector(95 downto 0);
     EMIOGPIOTN : out std_logic_vector(95 downto 0);
     EMIOI2C0SCLO : out std_ulogic;
     EMIOI2C0SCLTN : out std_ulogic;
     EMIOI2C0SDAO : out std_ulogic;
     EMIOI2C0SDATN : out std_ulogic;
     EMIOI2C1SCLO : out std_ulogic;
     EMIOI2C1SCLTN : out std_ulogic;
     EMIOI2C1SDAO : out std_ulogic;
     EMIOI2C1SDATN : out std_ulogic;
     EMIOSDIO0BUSPOWER : out std_ulogic;
     EMIOSDIO0BUSVOLT : out std_logic_vector(2 downto 0);
     EMIOSDIO0CLKOUT : out std_ulogic;
     EMIOSDIO0CMDENA : out std_ulogic;
     EMIOSDIO0CMDOUT : out std_ulogic;
     EMIOSDIO0DATAENA : out std_logic_vector(7 downto 0);
     EMIOSDIO0DATAOUT : out std_logic_vector(7 downto 0);
     EMIOSDIO0LEDCONTROL : out std_ulogic;
     EMIOSDIO1BUSPOWER : out std_ulogic;
     EMIOSDIO1BUSVOLT : out std_logic_vector(2 downto 0);
     EMIOSDIO1CLKOUT : out std_ulogic;
     EMIOSDIO1CMDENA : out std_ulogic;
     EMIOSDIO1CMDOUT : out std_ulogic;
     EMIOSDIO1DATAENA : out std_logic_vector(7 downto 0);
     EMIOSDIO1DATAOUT : out std_logic_vector(7 downto 0);
     EMIOSDIO1LEDCONTROL : out std_ulogic;
     EMIOSPI0MO : out std_ulogic;
     EMIOSPI0MOTN : out std_ulogic;
     EMIOSPI0SCLKO : out std_ulogic;
     EMIOSPI0SCLKTN : out std_ulogic;
     EMIOSPI0SO : out std_ulogic;
     EMIOSPI0SSNTN : out std_ulogic;
     EMIOSPI0SSON : out std_logic_vector(2 downto 0);
     EMIOSPI0STN : out std_ulogic;
     EMIOSPI1MO : out std_ulogic;
     EMIOSPI1MOTN : out std_ulogic;
     EMIOSPI1SCLKO : out std_ulogic;
     EMIOSPI1SCLKTN : out std_ulogic;
     EMIOSPI1SO : out std_ulogic;
     EMIOSPI1SSNTN : out std_ulogic;
     EMIOSPI1SSON : out std_logic_vector(2 downto 0);
     EMIOSPI1STN : out std_ulogic;
     EMIOTTC0WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC1WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC2WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC3WAVEO : out std_logic_vector(2 downto 0);
     EMIOU2DSPORTVBUSCTRLUSB30 : out std_ulogic;
     EMIOU2DSPORTVBUSCTRLUSB31 : out std_ulogic;
     EMIOU3DSPORTVBUSCTRLUSB30 : out std_ulogic;
     EMIOU3DSPORTVBUSCTRLUSB31 : out std_ulogic;
     EMIOUART0DTRN : out std_ulogic;
     EMIOUART0RTSN : out std_ulogic;
     EMIOUART0TX : out std_ulogic;
     EMIOUART1DTRN : out std_ulogic;
     EMIOUART1RTSN : out std_ulogic;
     EMIOUART1TX : out std_ulogic;
     EMIOWDT0RSTO : out std_ulogic;
     EMIOWDT1RSTO : out std_ulogic;
     FMIOGEM0FIFORXCLKTOPLBUFG : out std_ulogic;
     FMIOGEM0FIFOTXCLKTOPLBUFG : out std_ulogic;
     FMIOGEM1FIFORXCLKTOPLBUFG : out std_ulogic;
     FMIOGEM1FIFOTXCLKTOPLBUFG : out std_ulogic;
     FMIOGEM2FIFORXCLKTOPLBUFG : out std_ulogic;
     FMIOGEM2FIFOTXCLKTOPLBUFG : out std_ulogic;
     FMIOGEM3FIFORXCLKTOPLBUFG : out std_ulogic;
     FMIOGEM3FIFOTXCLKTOPLBUFG : out std_ulogic;
     FMIOGEMTSUCLKTOPLBUFG : out std_ulogic;
     FTMGPO : out std_logic_vector(31 downto 0);
     GDMA2PLCACK : out std_logic_vector(7 downto 0);
     GDMA2PLTVLD : out std_logic_vector(7 downto 0);
     MAXIGP0ARADDR : out std_logic_vector(39 downto 0);
     MAXIGP0ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP0ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0ARID : out std_logic_vector(15 downto 0);
     MAXIGP0ARLEN : out std_logic_vector(7 downto 0);
     MAXIGP0ARLOCK : out std_ulogic;
     MAXIGP0ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP0ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP0ARSIZE : out std_logic_vector(2 downto 0);
     MAXIGP0ARUSER : out std_logic_vector(15 downto 0);
     MAXIGP0ARVALID : out std_ulogic;
     MAXIGP0AWADDR : out std_logic_vector(39 downto 0);
     MAXIGP0AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP0AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0AWID : out std_logic_vector(15 downto 0);
     MAXIGP0AWLEN : out std_logic_vector(7 downto 0);
     MAXIGP0AWLOCK : out std_ulogic;
     MAXIGP0AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP0AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP0AWSIZE : out std_logic_vector(2 downto 0);
     MAXIGP0AWUSER : out std_logic_vector(15 downto 0);
     MAXIGP0AWVALID : out std_ulogic;
     MAXIGP0BREADY : out std_ulogic;
     MAXIGP0RREADY : out std_ulogic;
     MAXIGP0WDATA : out std_logic_vector(127 downto 0);
     MAXIGP0WLAST : out std_ulogic;
     MAXIGP0WSTRB : out std_logic_vector(15 downto 0);
     MAXIGP0WVALID : out std_ulogic;
     MAXIGP1ARADDR : out std_logic_vector(39 downto 0);
     MAXIGP1ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP1ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP1ARID : out std_logic_vector(15 downto 0);
     MAXIGP1ARLEN : out std_logic_vector(7 downto 0);
     MAXIGP1ARLOCK : out std_ulogic;
     MAXIGP1ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP1ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP1ARSIZE : out std_logic_vector(2 downto 0);
     MAXIGP1ARUSER : out std_logic_vector(15 downto 0);
     MAXIGP1ARVALID : out std_ulogic;
     MAXIGP1AWADDR : out std_logic_vector(39 downto 0);
     MAXIGP1AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP1AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP1AWID : out std_logic_vector(15 downto 0);
     MAXIGP1AWLEN : out std_logic_vector(7 downto 0);
     MAXIGP1AWLOCK : out std_ulogic;
     MAXIGP1AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP1AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP1AWSIZE : out std_logic_vector(2 downto 0);
     MAXIGP1AWUSER : out std_logic_vector(15 downto 0);
     MAXIGP1AWVALID : out std_ulogic;
     MAXIGP1BREADY : out std_ulogic;
     MAXIGP1RREADY : out std_ulogic;
     MAXIGP1WDATA : out std_logic_vector(127 downto 0);
     MAXIGP1WLAST : out std_ulogic;
     MAXIGP1WSTRB : out std_logic_vector(15 downto 0);
     MAXIGP1WVALID : out std_ulogic;
     MAXIGP2ARADDR : out std_logic_vector(39 downto 0);
     MAXIGP2ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP2ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP2ARID : out std_logic_vector(15 downto 0);
     MAXIGP2ARLEN : out std_logic_vector(7 downto 0);
     MAXIGP2ARLOCK : out std_ulogic;
     MAXIGP2ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP2ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP2ARSIZE : out std_logic_vector(2 downto 0);
     MAXIGP2ARUSER : out std_logic_vector(15 downto 0);
     MAXIGP2ARVALID : out std_ulogic;
     MAXIGP2AWADDR : out std_logic_vector(39 downto 0);
     MAXIGP2AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP2AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP2AWID : out std_logic_vector(15 downto 0);
     MAXIGP2AWLEN : out std_logic_vector(7 downto 0);
     MAXIGP2AWLOCK : out std_ulogic;
     MAXIGP2AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP2AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP2AWSIZE : out std_logic_vector(2 downto 0);
     MAXIGP2AWUSER : out std_logic_vector(15 downto 0);
     MAXIGP2AWVALID : out std_ulogic;
     MAXIGP2BREADY : out std_ulogic;
     MAXIGP2RREADY : out std_ulogic;
     MAXIGP2WDATA : out std_logic_vector(127 downto 0);
     MAXIGP2WLAST : out std_ulogic;
     MAXIGP2WSTRB : out std_logic_vector(15 downto 0);
     MAXIGP2WVALID : out std_ulogic;
     OSCRTCCLK : out std_ulogic;
     PLCLK : out std_logic_vector(3 downto 0);
     PMUAIBAFIFMFPDREQ : out std_ulogic;
     PMUAIBAFIFMLPDREQ : out std_ulogic;
     PMUERRORTOPL : out std_logic_vector(46 downto 0);
     PMUPLGPO : out std_logic_vector(31 downto 0);
     PSPLEVENTO : out std_ulogic;
     PSPLIRQFPD : out std_logic_vector(63 downto 0);
     PSPLIRQLPD : out std_logic_vector(99 downto 0);
     PSPLSTANDBYWFE : out std_logic_vector(3 downto 0);
     PSPLSTANDBYWFI : out std_logic_vector(3 downto 0);
     PSPLTRACECTL : out std_ulogic;
     PSPLTRACEDATA : out std_logic_vector(31 downto 0);
     PSPLTRIGACK : out std_logic_vector(3 downto 0);
     PSPLTRIGGER : out std_logic_vector(3 downto 0);
     PSS_ALTO_CORE_PAD_MGTTXN0OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_MGTTXN1OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_MGTTXN2OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_MGTTXN3OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_MGTTXP0OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_MGTTXP1OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_MGTTXP2OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_MGTTXP3OUT : out std_ulogic;
     PSS_ALTO_CORE_PAD_PADO : out std_ulogic;
     RPUEVENTO0 : out std_ulogic;
     RPUEVENTO1 : out std_ulogic;
     SACEFPDACADDR : out std_logic_vector(43 downto 0);
     SACEFPDACPROT : out std_logic_vector(2 downto 0);
     SACEFPDACSNOOP : out std_logic_vector(3 downto 0);
     SACEFPDACVALID : out std_ulogic;
     SACEFPDARREADY : out std_ulogic;
     SACEFPDAWREADY : out std_ulogic;
     SACEFPDBID : out std_logic_vector(5 downto 0);
     SACEFPDBRESP : out std_logic_vector(1 downto 0);
     SACEFPDBUSER : out std_ulogic;
     SACEFPDBVALID : out std_ulogic;
     SACEFPDCDREADY : out std_ulogic;
     SACEFPDCRREADY : out std_ulogic;
     SACEFPDRDATA : out std_logic_vector(127 downto 0);
     SACEFPDRID : out std_logic_vector(5 downto 0);
     SACEFPDRLAST : out std_ulogic;
     SACEFPDRRESP : out std_logic_vector(3 downto 0);
     SACEFPDRUSER : out std_ulogic;
     SACEFPDRVALID : out std_ulogic;
     SACEFPDWREADY : out std_ulogic;
     SAXIACPARREADY : out std_ulogic;
     SAXIACPAWREADY : out std_ulogic;
     SAXIACPBID : out std_logic_vector(4 downto 0);
     SAXIACPBRESP : out std_logic_vector(1 downto 0);
     SAXIACPBVALID : out std_ulogic;
     SAXIACPRDATA : out std_logic_vector(127 downto 0);
     SAXIACPRID : out std_logic_vector(4 downto 0);
     SAXIACPRLAST : out std_ulogic;
     SAXIACPRRESP : out std_logic_vector(1 downto 0);
     SAXIACPRVALID : out std_ulogic;
     SAXIACPWREADY : out std_ulogic;
     SAXIGP0ARREADY : out std_ulogic;
     SAXIGP0AWREADY : out std_ulogic;
     SAXIGP0BID : out std_logic_vector(5 downto 0);
     SAXIGP0BRESP : out std_logic_vector(1 downto 0);
     SAXIGP0BVALID : out std_ulogic;
     SAXIGP0RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP0RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP0RDATA : out std_logic_vector(127 downto 0);
     SAXIGP0RID : out std_logic_vector(5 downto 0);
     SAXIGP0RLAST : out std_ulogic;
     SAXIGP0RRESP : out std_logic_vector(1 downto 0);
     SAXIGP0RVALID : out std_ulogic;
     SAXIGP0WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP0WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP0WREADY : out std_ulogic;
     SAXIGP1ARREADY : out std_ulogic;
     SAXIGP1AWREADY : out std_ulogic;
     SAXIGP1BID : out std_logic_vector(5 downto 0);
     SAXIGP1BRESP : out std_logic_vector(1 downto 0);
     SAXIGP1BVALID : out std_ulogic;
     SAXIGP1RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP1RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP1RDATA : out std_logic_vector(127 downto 0);
     SAXIGP1RID : out std_logic_vector(5 downto 0);
     SAXIGP1RLAST : out std_ulogic;
     SAXIGP1RRESP : out std_logic_vector(1 downto 0);
     SAXIGP1RVALID : out std_ulogic;
     SAXIGP1WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP1WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP1WREADY : out std_ulogic;
     SAXIGP2ARREADY : out std_ulogic;
     SAXIGP2AWREADY : out std_ulogic;
     SAXIGP2BID : out std_logic_vector(5 downto 0);
     SAXIGP2BRESP : out std_logic_vector(1 downto 0);
     SAXIGP2BVALID : out std_ulogic;
     SAXIGP2RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP2RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP2RDATA : out std_logic_vector(127 downto 0);
     SAXIGP2RID : out std_logic_vector(5 downto 0);
     SAXIGP2RLAST : out std_ulogic;
     SAXIGP2RRESP : out std_logic_vector(1 downto 0);
     SAXIGP2RVALID : out std_ulogic;
     SAXIGP2WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP2WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP2WREADY : out std_ulogic;
     SAXIGP3ARREADY : out std_ulogic;
     SAXIGP3AWREADY : out std_ulogic;
     SAXIGP3BID : out std_logic_vector(5 downto 0);
     SAXIGP3BRESP : out std_logic_vector(1 downto 0);
     SAXIGP3BVALID : out std_ulogic;
     SAXIGP3RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP3RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP3RDATA : out std_logic_vector(127 downto 0);
     SAXIGP3RID : out std_logic_vector(5 downto 0);
     SAXIGP3RLAST : out std_ulogic;
     SAXIGP3RRESP : out std_logic_vector(1 downto 0);
     SAXIGP3RVALID : out std_ulogic;
     SAXIGP3WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP3WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP3WREADY : out std_ulogic;
     SAXIGP4ARREADY : out std_ulogic;
     SAXIGP4AWREADY : out std_ulogic;
     SAXIGP4BID : out std_logic_vector(5 downto 0);
     SAXIGP4BRESP : out std_logic_vector(1 downto 0);
     SAXIGP4BVALID : out std_ulogic;
     SAXIGP4RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP4RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP4RDATA : out std_logic_vector(127 downto 0);
     SAXIGP4RID : out std_logic_vector(5 downto 0);
     SAXIGP4RLAST : out std_ulogic;
     SAXIGP4RRESP : out std_logic_vector(1 downto 0);
     SAXIGP4RVALID : out std_ulogic;
     SAXIGP4WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP4WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP4WREADY : out std_ulogic;
     SAXIGP5ARREADY : out std_ulogic;
     SAXIGP5AWREADY : out std_ulogic;
     SAXIGP5BID : out std_logic_vector(5 downto 0);
     SAXIGP5BRESP : out std_logic_vector(1 downto 0);
     SAXIGP5BVALID : out std_ulogic;
     SAXIGP5RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP5RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP5RDATA : out std_logic_vector(127 downto 0);
     SAXIGP5RID : out std_logic_vector(5 downto 0);
     SAXIGP5RLAST : out std_ulogic;
     SAXIGP5RRESP : out std_logic_vector(1 downto 0);
     SAXIGP5RVALID : out std_ulogic;
     SAXIGP5WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP5WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP5WREADY : out std_ulogic;
     SAXIGP6ARREADY : out std_ulogic;
     SAXIGP6AWREADY : out std_ulogic;
     SAXIGP6BID : out std_logic_vector(5 downto 0);
     SAXIGP6BRESP : out std_logic_vector(1 downto 0);
     SAXIGP6BVALID : out std_ulogic;
     SAXIGP6RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP6RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP6RDATA : out std_logic_vector(127 downto 0);
     SAXIGP6RID : out std_logic_vector(5 downto 0);
     SAXIGP6RLAST : out std_ulogic;
     SAXIGP6RRESP : out std_logic_vector(1 downto 0);
     SAXIGP6RVALID : out std_ulogic;
     SAXIGP6WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP6WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP6WREADY : out std_ulogic;
     PSS_ALTO_CORE_PAD_BOOTMODE : inout std_logic_vector(3 downto 0);
     PSS_ALTO_CORE_PAD_CLK : inout std_ulogic;
     PSS_ALTO_CORE_PAD_DONEB : inout std_ulogic;
     PSS_ALTO_CORE_PAD_DRAMA : inout std_logic_vector(17 downto 0);
     PSS_ALTO_CORE_PAD_DRAMACTN : inout std_ulogic;
     PSS_ALTO_CORE_PAD_DRAMALERTN : inout std_ulogic;
     PSS_ALTO_CORE_PAD_DRAMBA : inout std_logic_vector(1 downto 0);
     PSS_ALTO_CORE_PAD_DRAMBG : inout std_logic_vector(1 downto 0);
     PSS_ALTO_CORE_PAD_DRAMCK : inout std_logic_vector(1 downto 0);
     PSS_ALTO_CORE_PAD_DRAMCKE : inout std_logic_vector(1 downto 0);
     PSS_ALTO_CORE_PAD_DRAMCKN : inout std_logic_vector(1 downto 0);
     PSS_ALTO_CORE_PAD_DRAMCSN : inout std_logic_vector(1 downto 0);
     PSS_ALTO_CORE_PAD_DRAMDM : inout std_logic_vector(8 downto 0);
     PSS_ALTO_CORE_PAD_DRAMDQ : inout std_logic_vector(71 downto 0);
     PSS_ALTO_CORE_PAD_DRAMDQS : inout std_logic_vector(8 downto 0);
     PSS_ALTO_CORE_PAD_DRAMDQSN : inout std_logic_vector(8 downto 0);
     PSS_ALTO_CORE_PAD_DRAMODT : inout std_logic_vector(1 downto 0);
     PSS_ALTO_CORE_PAD_DRAMPARITY : inout std_ulogic;
     PSS_ALTO_CORE_PAD_DRAMRAMRSTN : inout std_ulogic;
     PSS_ALTO_CORE_PAD_ERROROUT : inout std_ulogic;
     PSS_ALTO_CORE_PAD_ERRORSTATUS : inout std_ulogic;
     PSS_ALTO_CORE_PAD_INITB : inout std_ulogic;
     PSS_ALTO_CORE_PAD_JTAGTCK : inout std_ulogic;
     PSS_ALTO_CORE_PAD_JTAGTDI : inout std_ulogic;
     PSS_ALTO_CORE_PAD_JTAGTDO : inout std_ulogic;
     PSS_ALTO_CORE_PAD_JTAGTMS : inout std_ulogic;
     PSS_ALTO_CORE_PAD_MIO : inout std_logic_vector(77 downto 0);
     PSS_ALTO_CORE_PAD_PORB : inout std_ulogic;
     PSS_ALTO_CORE_PAD_PROGB : inout std_ulogic;
     PSS_ALTO_CORE_PAD_RCALIBINOUT : inout std_ulogic;
     PSS_ALTO_CORE_PAD_SRSTB : inout std_ulogic;
     PSS_ALTO_CORE_PAD_ZQ : inout std_ulogic;
     ADMAFCICLK : in std_logic_vector(7 downto 0);
     AIBPMUAFIFMFPDACK : in std_ulogic;
     AIBPMUAFIFMLPDACK : in std_ulogic;
     DDRCEXTREFRESHRANK0REQ : in std_ulogic;
     DDRCEXTREFRESHRANK1REQ : in std_ulogic;
     DDRCREFRESHPLCLK : in std_ulogic;
     DPAUXDATAIN : in std_ulogic;
     DPEXTERNALCUSTOMEVENT1 : in std_ulogic;
     DPEXTERNALCUSTOMEVENT2 : in std_ulogic;
     DPEXTERNALVSYNCEVENT : in std_ulogic;
     DPHOTPLUGDETECT : in std_ulogic;
     DPLIVEGFXALPHAIN : in std_logic_vector(7 downto 0);
     DPLIVEGFXPIXEL1IN : in std_logic_vector(35 downto 0);
     DPLIVEVIDEOINDE : in std_ulogic;
     DPLIVEVIDEOINHSYNC : in std_ulogic;
     DPLIVEVIDEOINPIXEL1 : in std_logic_vector(35 downto 0);
     DPLIVEVIDEOINVSYNC : in std_ulogic;
     DPMAXISMIXEDAUDIOTREADY : in std_ulogic;
     DPSAXISAUDIOCLK : in std_ulogic;
     DPSAXISAUDIOTDATA : in std_logic_vector(31 downto 0);
     DPSAXISAUDIOTID : in std_ulogic;
     DPSAXISAUDIOTVALID : in std_ulogic;
     DPVIDEOINCLK : in std_ulogic;
     EMIOCAN0PHYRX : in std_ulogic;
     EMIOCAN1PHYRX : in std_ulogic;
     EMIOENET0DMATXSTATUSTOG : in std_ulogic;
     EMIOENET0EXTINTIN : in std_ulogic;
     EMIOENET0GMIICOL : in std_ulogic;
     EMIOENET0GMIICRS : in std_ulogic;
     EMIOENET0GMIIRXCLK : in std_ulogic;
     EMIOENET0GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET0GMIIRXDV : in std_ulogic;
     EMIOENET0GMIIRXER : in std_ulogic;
     EMIOENET0GMIITXCLK : in std_ulogic;
     EMIOENET0MDIOI : in std_ulogic;
     EMIOENET0RXWOVERFLOW : in std_ulogic;
     EMIOENET0TXRCONTROL : in std_ulogic;
     EMIOENET0TXRDATA : in std_logic_vector(7 downto 0);
     EMIOENET0TXRDATARDY : in std_ulogic;
     EMIOENET0TXREOP : in std_ulogic;
     EMIOENET0TXRERR : in std_ulogic;
     EMIOENET0TXRFLUSHED : in std_ulogic;
     EMIOENET0TXRSOP : in std_ulogic;
     EMIOENET0TXRUNDERFLOW : in std_ulogic;
     EMIOENET0TXRVALID : in std_ulogic;
     EMIOENET1DMATXSTATUSTOG : in std_ulogic;
     EMIOENET1EXTINTIN : in std_ulogic;
     EMIOENET1GMIICOL : in std_ulogic;
     EMIOENET1GMIICRS : in std_ulogic;
     EMIOENET1GMIIRXCLK : in std_ulogic;
     EMIOENET1GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET1GMIIRXDV : in std_ulogic;
     EMIOENET1GMIIRXER : in std_ulogic;
     EMIOENET1GMIITXCLK : in std_ulogic;
     EMIOENET1MDIOI : in std_ulogic;
     EMIOENET1RXWOVERFLOW : in std_ulogic;
     EMIOENET1TXRCONTROL : in std_ulogic;
     EMIOENET1TXRDATA : in std_logic_vector(7 downto 0);
     EMIOENET1TXRDATARDY : in std_ulogic;
     EMIOENET1TXREOP : in std_ulogic;
     EMIOENET1TXRERR : in std_ulogic;
     EMIOENET1TXRFLUSHED : in std_ulogic;
     EMIOENET1TXRSOP : in std_ulogic;
     EMIOENET1TXRUNDERFLOW : in std_ulogic;
     EMIOENET1TXRVALID : in std_ulogic;
     EMIOENET2DMATXSTATUSTOG : in std_ulogic;
     EMIOENET2EXTINTIN : in std_ulogic;
     EMIOENET2GMIICOL : in std_ulogic;
     EMIOENET2GMIICRS : in std_ulogic;
     EMIOENET2GMIIRXCLK : in std_ulogic;
     EMIOENET2GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET2GMIIRXDV : in std_ulogic;
     EMIOENET2GMIIRXER : in std_ulogic;
     EMIOENET2GMIITXCLK : in std_ulogic;
     EMIOENET2MDIOI : in std_ulogic;
     EMIOENET2RXWOVERFLOW : in std_ulogic;
     EMIOENET2TXRCONTROL : in std_ulogic;
     EMIOENET2TXRDATA : in std_logic_vector(7 downto 0);
     EMIOENET2TXRDATARDY : in std_ulogic;
     EMIOENET2TXREOP : in std_ulogic;
     EMIOENET2TXRERR : in std_ulogic;
     EMIOENET2TXRFLUSHED : in std_ulogic;
     EMIOENET2TXRSOP : in std_ulogic;
     EMIOENET2TXRUNDERFLOW : in std_ulogic;
     EMIOENET2TXRVALID : in std_ulogic;
     EMIOENET3DMATXSTATUSTOG : in std_ulogic;
     EMIOENET3EXTINTIN : in std_ulogic;
     EMIOENET3GMIICOL : in std_ulogic;
     EMIOENET3GMIICRS : in std_ulogic;
     EMIOENET3GMIIRXCLK : in std_ulogic;
     EMIOENET3GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET3GMIIRXDV : in std_ulogic;
     EMIOENET3GMIIRXER : in std_ulogic;
     EMIOENET3GMIITXCLK : in std_ulogic;
     EMIOENET3MDIOI : in std_ulogic;
     EMIOENET3RXWOVERFLOW : in std_ulogic;
     EMIOENET3TXRCONTROL : in std_ulogic;
     EMIOENET3TXRDATA : in std_logic_vector(7 downto 0);
     EMIOENET3TXRDATARDY : in std_ulogic;
     EMIOENET3TXREOP : in std_ulogic;
     EMIOENET3TXRERR : in std_ulogic;
     EMIOENET3TXRFLUSHED : in std_ulogic;
     EMIOENET3TXRSOP : in std_ulogic;
     EMIOENET3TXRUNDERFLOW : in std_ulogic;
     EMIOENET3TXRVALID : in std_ulogic;
     EMIOENETTSUCLK : in std_ulogic;
     EMIOGEM0TSUINCCTRL : in std_logic_vector(1 downto 0);
     EMIOGEM1TSUINCCTRL : in std_logic_vector(1 downto 0);
     EMIOGEM2TSUINCCTRL : in std_logic_vector(1 downto 0);
     EMIOGEM3TSUINCCTRL : in std_logic_vector(1 downto 0);
     EMIOGPIOI : in std_logic_vector(95 downto 0);
     EMIOHUBPORTOVERCRNTUSB20 : in std_ulogic;
     EMIOHUBPORTOVERCRNTUSB21 : in std_ulogic;
     EMIOHUBPORTOVERCRNTUSB30 : in std_ulogic;
     EMIOHUBPORTOVERCRNTUSB31 : in std_ulogic;
     EMIOI2C0SCLI : in std_ulogic;
     EMIOI2C0SDAI : in std_ulogic;
     EMIOI2C1SCLI : in std_ulogic;
     EMIOI2C1SDAI : in std_ulogic;
     EMIOSDIO0CDN : in std_ulogic;
     EMIOSDIO0CMDIN : in std_ulogic;
     EMIOSDIO0DATAIN : in std_logic_vector(7 downto 0);
     EMIOSDIO0FBCLKIN : in std_ulogic;
     EMIOSDIO0WP : in std_ulogic;
     EMIOSDIO1CDN : in std_ulogic;
     EMIOSDIO1CMDIN : in std_ulogic;
     EMIOSDIO1DATAIN : in std_logic_vector(7 downto 0);
     EMIOSDIO1FBCLKIN : in std_ulogic;
     EMIOSDIO1WP : in std_ulogic;
     EMIOSPI0MI : in std_ulogic;
     EMIOSPI0SCLKI : in std_ulogic;
     EMIOSPI0SI : in std_ulogic;
     EMIOSPI0SSIN : in std_ulogic;
     EMIOSPI1MI : in std_ulogic;
     EMIOSPI1SCLKI : in std_ulogic;
     EMIOSPI1SI : in std_ulogic;
     EMIOSPI1SSIN : in std_ulogic;
     EMIOTTC0CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC1CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC2CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC3CLKI : in std_logic_vector(2 downto 0);
     EMIOUART0CTSN : in std_ulogic;
     EMIOUART0DCDN : in std_ulogic;
     EMIOUART0DSRN : in std_ulogic;
     EMIOUART0RIN : in std_ulogic;
     EMIOUART0RX : in std_ulogic;
     EMIOUART1CTSN : in std_ulogic;
     EMIOUART1DCDN : in std_ulogic;
     EMIOUART1DSRN : in std_ulogic;
     EMIOUART1RIN : in std_ulogic;
     EMIOUART1RX : in std_ulogic;
     EMIOWDT0CLKI : in std_ulogic;
     EMIOWDT1CLKI : in std_ulogic;
     FMIOGEM0FIFORXCLKFROMPL : in std_ulogic;
     FMIOGEM0FIFOTXCLKFROMPL : in std_ulogic;
     FMIOGEM0SIGNALDETECT : in std_ulogic;
     FMIOGEM1FIFORXCLKFROMPL : in std_ulogic;
     FMIOGEM1FIFOTXCLKFROMPL : in std_ulogic;
     FMIOGEM1SIGNALDETECT : in std_ulogic;
     FMIOGEM2FIFORXCLKFROMPL : in std_ulogic;
     FMIOGEM2FIFOTXCLKFROMPL : in std_ulogic;
     FMIOGEM2SIGNALDETECT : in std_ulogic;
     FMIOGEM3FIFORXCLKFROMPL : in std_ulogic;
     FMIOGEM3FIFOTXCLKFROMPL : in std_ulogic;
     FMIOGEM3SIGNALDETECT : in std_ulogic;
     FMIOGEMTSUCLKFROMPL : in std_ulogic;
     FTMGPI : in std_logic_vector(31 downto 0);
     GDMAFCICLK : in std_logic_vector(7 downto 0);
     MAXIGP0ACLK : in std_ulogic;
     MAXIGP0ARREADY : in std_ulogic;
     MAXIGP0AWREADY : in std_ulogic;
     MAXIGP0BID : in std_logic_vector(15 downto 0);
     MAXIGP0BRESP : in std_logic_vector(1 downto 0);
     MAXIGP0BVALID : in std_ulogic;
     MAXIGP0RDATA : in std_logic_vector(127 downto 0);
     MAXIGP0RID : in std_logic_vector(15 downto 0);
     MAXIGP0RLAST : in std_ulogic;
     MAXIGP0RRESP : in std_logic_vector(1 downto 0);
     MAXIGP0RVALID : in std_ulogic;
     MAXIGP0WREADY : in std_ulogic;
     MAXIGP1ACLK : in std_ulogic;
     MAXIGP1ARREADY : in std_ulogic;
     MAXIGP1AWREADY : in std_ulogic;
     MAXIGP1BID : in std_logic_vector(15 downto 0);
     MAXIGP1BRESP : in std_logic_vector(1 downto 0);
     MAXIGP1BVALID : in std_ulogic;
     MAXIGP1RDATA : in std_logic_vector(127 downto 0);
     MAXIGP1RID : in std_logic_vector(15 downto 0);
     MAXIGP1RLAST : in std_ulogic;
     MAXIGP1RRESP : in std_logic_vector(1 downto 0);
     MAXIGP1RVALID : in std_ulogic;
     MAXIGP1WREADY : in std_ulogic;
     MAXIGP2ACLK : in std_ulogic;
     MAXIGP2ARREADY : in std_ulogic;
     MAXIGP2AWREADY : in std_ulogic;
     MAXIGP2BID : in std_logic_vector(15 downto 0);
     MAXIGP2BRESP : in std_logic_vector(1 downto 0);
     MAXIGP2BVALID : in std_ulogic;
     MAXIGP2RDATA : in std_logic_vector(127 downto 0);
     MAXIGP2RID : in std_logic_vector(15 downto 0);
     MAXIGP2RLAST : in std_ulogic;
     MAXIGP2RRESP : in std_logic_vector(1 downto 0);
     MAXIGP2RVALID : in std_ulogic;
     MAXIGP2WREADY : in std_ulogic;
     NFIQ0LPDRPU : in std_ulogic;
     NFIQ1LPDRPU : in std_ulogic;
     NIRQ0LPDRPU : in std_ulogic;
     NIRQ1LPDRPU : in std_ulogic;
     PL2ADMACVLD : in std_logic_vector(7 downto 0);
     PL2ADMATACK : in std_logic_vector(7 downto 0);
     PL2GDMACVLD : in std_logic_vector(7 downto 0);
     PL2GDMATACK : in std_logic_vector(7 downto 0);
     PLACECLK : in std_ulogic;
     PLACPINACT : in std_ulogic;
     PLFPGASTOP : in std_logic_vector(3 downto 0);
     PLLAUXREFCLKFPD : in std_logic_vector(2 downto 0);
     PLLAUXREFCLKLPD : in std_logic_vector(1 downto 0);
     PLPMUGPI : in std_logic_vector(31 downto 0);
     PLPSAPUGICFIQ : in std_logic_vector(3 downto 0);
     PLPSAPUGICIRQ : in std_logic_vector(3 downto 0);
     PLPSEVENTI : in std_ulogic;
     PLPSIRQ0 : in std_logic_vector(7 downto 0);
     PLPSIRQ1 : in std_logic_vector(7 downto 0);
     PLPSTRACECLK : in std_ulogic;
     PLPSTRIGACK : in std_logic_vector(3 downto 0);
     PLPSTRIGGER : in std_logic_vector(3 downto 0);
     PMUERRORFROMPL : in std_logic_vector(3 downto 0);
     PSS_ALTO_CORE_PAD_MGTRXN0IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_MGTRXN1IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_MGTRXN2IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_MGTRXN3IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_MGTRXP0IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_MGTRXP1IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_MGTRXP2IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_MGTRXP3IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_PADI : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFN0IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFN1IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFN2IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFN3IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFP0IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFP1IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFP2IN : in std_ulogic;
     PSS_ALTO_CORE_PAD_REFP3IN : in std_ulogic;
     RPUEVENTI0 : in std_ulogic;
     RPUEVENTI1 : in std_ulogic;
     SACEFPDACREADY : in std_ulogic;
     SACEFPDARADDR : in std_logic_vector(43 downto 0);
     SACEFPDARBAR : in std_logic_vector(1 downto 0);
     SACEFPDARBURST : in std_logic_vector(1 downto 0);
     SACEFPDARCACHE : in std_logic_vector(3 downto 0);
     SACEFPDARDOMAIN : in std_logic_vector(1 downto 0);
     SACEFPDARID : in std_logic_vector(5 downto 0);
     SACEFPDARLEN : in std_logic_vector(7 downto 0);
     SACEFPDARLOCK : in std_ulogic;
     SACEFPDARPROT : in std_logic_vector(2 downto 0);
     SACEFPDARQOS : in std_logic_vector(3 downto 0);
     SACEFPDARREGION : in std_logic_vector(3 downto 0);
     SACEFPDARSIZE : in std_logic_vector(2 downto 0);
     SACEFPDARSNOOP : in std_logic_vector(3 downto 0);
     SACEFPDARUSER : in std_logic_vector(15 downto 0);
     SACEFPDARVALID : in std_ulogic;
     SACEFPDAWADDR : in std_logic_vector(43 downto 0);
     SACEFPDAWBAR : in std_logic_vector(1 downto 0);
     SACEFPDAWBURST : in std_logic_vector(1 downto 0);
     SACEFPDAWCACHE : in std_logic_vector(3 downto 0);
     SACEFPDAWDOMAIN : in std_logic_vector(1 downto 0);
     SACEFPDAWID : in std_logic_vector(5 downto 0);
     SACEFPDAWLEN : in std_logic_vector(7 downto 0);
     SACEFPDAWLOCK : in std_ulogic;
     SACEFPDAWPROT : in std_logic_vector(2 downto 0);
     SACEFPDAWQOS : in std_logic_vector(3 downto 0);
     SACEFPDAWREGION : in std_logic_vector(3 downto 0);
     SACEFPDAWSIZE : in std_logic_vector(2 downto 0);
     SACEFPDAWSNOOP : in std_logic_vector(2 downto 0);
     SACEFPDAWUSER : in std_logic_vector(15 downto 0);
     SACEFPDAWVALID : in std_ulogic;
     SACEFPDBREADY : in std_ulogic;
     SACEFPDCDDATA : in std_logic_vector(127 downto 0);
     SACEFPDCDLAST : in std_ulogic;
     SACEFPDCDVALID : in std_ulogic;
     SACEFPDCRRESP : in std_logic_vector(4 downto 0);
     SACEFPDCRVALID : in std_ulogic;
     SACEFPDRACK : in std_ulogic;
     SACEFPDRREADY : in std_ulogic;
     SACEFPDWACK : in std_ulogic;
     SACEFPDWDATA : in std_logic_vector(127 downto 0);
     SACEFPDWLAST : in std_ulogic;
     SACEFPDWSTRB : in std_logic_vector(15 downto 0);
     SACEFPDWUSER : in std_ulogic;
     SACEFPDWVALID : in std_ulogic;
     SAXIACPACLK : in std_ulogic;
     SAXIACPARADDR : in std_logic_vector(39 downto 0);
     SAXIACPARBURST : in std_logic_vector(1 downto 0);
     SAXIACPARCACHE : in std_logic_vector(3 downto 0);
     SAXIACPARID : in std_logic_vector(4 downto 0);
     SAXIACPARLEN : in std_logic_vector(7 downto 0);
     SAXIACPARLOCK : in std_ulogic;
     SAXIACPARPROT : in std_logic_vector(2 downto 0);
     SAXIACPARQOS : in std_logic_vector(3 downto 0);
     SAXIACPARSIZE : in std_logic_vector(2 downto 0);
     SAXIACPARUSER : in std_logic_vector(1 downto 0);
     SAXIACPARVALID : in std_ulogic;
     SAXIACPAWADDR : in std_logic_vector(39 downto 0);
     SAXIACPAWBURST : in std_logic_vector(1 downto 0);
     SAXIACPAWCACHE : in std_logic_vector(3 downto 0);
     SAXIACPAWID : in std_logic_vector(4 downto 0);
     SAXIACPAWLEN : in std_logic_vector(7 downto 0);
     SAXIACPAWLOCK : in std_ulogic;
     SAXIACPAWPROT : in std_logic_vector(2 downto 0);
     SAXIACPAWQOS : in std_logic_vector(3 downto 0);
     SAXIACPAWSIZE : in std_logic_vector(2 downto 0);
     SAXIACPAWUSER : in std_logic_vector(1 downto 0);
     SAXIACPAWVALID : in std_ulogic;
     SAXIACPBREADY : in std_ulogic;
     SAXIACPRREADY : in std_ulogic;
     SAXIACPWDATA : in std_logic_vector(127 downto 0);
     SAXIACPWLAST : in std_ulogic;
     SAXIACPWSTRB : in std_logic_vector(15 downto 0);
     SAXIACPWVALID : in std_ulogic;
     SAXIGP0ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP0ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP0ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0ARID : in std_logic_vector(5 downto 0);
     SAXIGP0ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP0ARLOCK : in std_ulogic;
     SAXIGP0ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP0ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP0ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP0ARUSER : in std_ulogic;
     SAXIGP0ARVALID : in std_ulogic;
     SAXIGP0AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP0AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP0AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0AWID : in std_logic_vector(5 downto 0);
     SAXIGP0AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP0AWLOCK : in std_ulogic;
     SAXIGP0AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP0AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP0AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP0AWUSER : in std_ulogic;
     SAXIGP0AWVALID : in std_ulogic;
     SAXIGP0BREADY : in std_ulogic;
     SAXIGP0RCLK : in std_ulogic;
     SAXIGP0RREADY : in std_ulogic;
     SAXIGP0WCLK : in std_ulogic;
     SAXIGP0WDATA : in std_logic_vector(127 downto 0);
     SAXIGP0WLAST : in std_ulogic;
     SAXIGP0WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP0WVALID : in std_ulogic;
     SAXIGP1ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP1ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP1ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP1ARID : in std_logic_vector(5 downto 0);
     SAXIGP1ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP1ARLOCK : in std_ulogic;
     SAXIGP1ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP1ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP1ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP1ARUSER : in std_ulogic;
     SAXIGP1ARVALID : in std_ulogic;
     SAXIGP1AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP1AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP1AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP1AWID : in std_logic_vector(5 downto 0);
     SAXIGP1AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP1AWLOCK : in std_ulogic;
     SAXIGP1AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP1AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP1AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP1AWUSER : in std_ulogic;
     SAXIGP1AWVALID : in std_ulogic;
     SAXIGP1BREADY : in std_ulogic;
     SAXIGP1RCLK : in std_ulogic;
     SAXIGP1RREADY : in std_ulogic;
     SAXIGP1WCLK : in std_ulogic;
     SAXIGP1WDATA : in std_logic_vector(127 downto 0);
     SAXIGP1WLAST : in std_ulogic;
     SAXIGP1WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP1WVALID : in std_ulogic;
     SAXIGP2ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP2ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP2ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP2ARID : in std_logic_vector(5 downto 0);
     SAXIGP2ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP2ARLOCK : in std_ulogic;
     SAXIGP2ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP2ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP2ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP2ARUSER : in std_ulogic;
     SAXIGP2ARVALID : in std_ulogic;
     SAXIGP2AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP2AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP2AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP2AWID : in std_logic_vector(5 downto 0);
     SAXIGP2AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP2AWLOCK : in std_ulogic;
     SAXIGP2AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP2AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP2AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP2AWUSER : in std_ulogic;
     SAXIGP2AWVALID : in std_ulogic;
     SAXIGP2BREADY : in std_ulogic;
     SAXIGP2RCLK : in std_ulogic;
     SAXIGP2RREADY : in std_ulogic;
     SAXIGP2WCLK : in std_ulogic;
     SAXIGP2WDATA : in std_logic_vector(127 downto 0);
     SAXIGP2WLAST : in std_ulogic;
     SAXIGP2WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP2WVALID : in std_ulogic;
     SAXIGP3ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP3ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP3ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP3ARID : in std_logic_vector(5 downto 0);
     SAXIGP3ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP3ARLOCK : in std_ulogic;
     SAXIGP3ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP3ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP3ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP3ARUSER : in std_ulogic;
     SAXIGP3ARVALID : in std_ulogic;
     SAXIGP3AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP3AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP3AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP3AWID : in std_logic_vector(5 downto 0);
     SAXIGP3AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP3AWLOCK : in std_ulogic;
     SAXIGP3AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP3AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP3AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP3AWUSER : in std_ulogic;
     SAXIGP3AWVALID : in std_ulogic;
     SAXIGP3BREADY : in std_ulogic;
     SAXIGP3RCLK : in std_ulogic;
     SAXIGP3RREADY : in std_ulogic;
     SAXIGP3WCLK : in std_ulogic;
     SAXIGP3WDATA : in std_logic_vector(127 downto 0);
     SAXIGP3WLAST : in std_ulogic;
     SAXIGP3WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP3WVALID : in std_ulogic;
     SAXIGP4ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP4ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP4ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP4ARID : in std_logic_vector(5 downto 0);
     SAXIGP4ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP4ARLOCK : in std_ulogic;
     SAXIGP4ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP4ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP4ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP4ARUSER : in std_ulogic;
     SAXIGP4ARVALID : in std_ulogic;
     SAXIGP4AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP4AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP4AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP4AWID : in std_logic_vector(5 downto 0);
     SAXIGP4AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP4AWLOCK : in std_ulogic;
     SAXIGP4AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP4AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP4AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP4AWUSER : in std_ulogic;
     SAXIGP4AWVALID : in std_ulogic;
     SAXIGP4BREADY : in std_ulogic;
     SAXIGP4RCLK : in std_ulogic;
     SAXIGP4RREADY : in std_ulogic;
     SAXIGP4WCLK : in std_ulogic;
     SAXIGP4WDATA : in std_logic_vector(127 downto 0);
     SAXIGP4WLAST : in std_ulogic;
     SAXIGP4WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP4WVALID : in std_ulogic;
     SAXIGP5ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP5ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP5ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP5ARID : in std_logic_vector(5 downto 0);
     SAXIGP5ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP5ARLOCK : in std_ulogic;
     SAXIGP5ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP5ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP5ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP5ARUSER : in std_ulogic;
     SAXIGP5ARVALID : in std_ulogic;
     SAXIGP5AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP5AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP5AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP5AWID : in std_logic_vector(5 downto 0);
     SAXIGP5AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP5AWLOCK : in std_ulogic;
     SAXIGP5AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP5AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP5AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP5AWUSER : in std_ulogic;
     SAXIGP5AWVALID : in std_ulogic;
     SAXIGP5BREADY : in std_ulogic;
     SAXIGP5RCLK : in std_ulogic;
     SAXIGP5RREADY : in std_ulogic;
     SAXIGP5WCLK : in std_ulogic;
     SAXIGP5WDATA : in std_logic_vector(127 downto 0);
     SAXIGP5WLAST : in std_ulogic;
     SAXIGP5WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP5WVALID : in std_ulogic;
     SAXIGP6ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP6ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP6ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP6ARID : in std_logic_vector(5 downto 0);
     SAXIGP6ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP6ARLOCK : in std_ulogic;
     SAXIGP6ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP6ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP6ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP6ARUSER : in std_ulogic;
     SAXIGP6ARVALID : in std_ulogic;
     SAXIGP6AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP6AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP6AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP6AWID : in std_logic_vector(5 downto 0);
     SAXIGP6AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP6AWLOCK : in std_ulogic;
     SAXIGP6AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP6AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP6AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP6AWUSER : in std_ulogic;
     SAXIGP6AWVALID : in std_ulogic;
     SAXIGP6BREADY : in std_ulogic;
     SAXIGP6RCLK : in std_ulogic;
     SAXIGP6RREADY : in std_ulogic;
     SAXIGP6WCLK : in std_ulogic;
     SAXIGP6WDATA : in std_logic_vector(127 downto 0);
     SAXIGP6WLAST : in std_ulogic;
     SAXIGP6WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP6WVALID : in std_ulogic;
     STMEVENT : in std_logic_vector(59 downto 0)
  );
end component;
attribute BOX_TYPE of
  PS8 : component is "PRIMITIVE";

----- component PS9 -----
component PS9
  port (
     ADMA2PLCACK : out std_logic_vector(7 downto 0);
     ADMA2PLTVLD : out std_logic_vector(7 downto 0);
     CFUEOS : out std_ulogic;
     CPMOSCCLKDIV2 : out std_ulogic;
     EMIOCAN0PHYTX : out std_ulogic;
     EMIOCAN1PHYTX : out std_ulogic;
     EMIOENET0DMABUSWIDTH : out std_logic_vector(1 downto 0);
     EMIOENET0DMATXENDTOG : out std_ulogic;
     EMIOENET0GEMTSUTIMERCNT : out std_logic_vector(93 downto 0);
     EMIOENET0GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET0GMIITXEN : out std_ulogic;
     EMIOENET0GMIITXER : out std_ulogic;
     EMIOENET0MDIOMDC : out std_ulogic;
     EMIOENET0MDIOO : out std_ulogic;
     EMIOENET0MDIOTN : out std_ulogic;
     EMIOENET0RXWDATA : out std_logic_vector(7 downto 0);
     EMIOENET0RXWEOP : out std_ulogic;
     EMIOENET0RXWERR : out std_ulogic;
     EMIOENET0RXWFLUSH : out std_ulogic;
     EMIOENET0RXWSOP : out std_ulogic;
     EMIOENET0RXWSTATUS : out std_logic_vector(44 downto 0);
     EMIOENET0RXWWR : out std_ulogic;
     EMIOENET0SPEEDMODE : out std_logic_vector(3 downto 0);
     EMIOENET0TXRRD : out std_logic_vector(1 downto 0);
     EMIOENET0TXRSTATUS : out std_logic_vector(3 downto 0);
     EMIOENET1DMABUSWIDTH : out std_logic_vector(1 downto 0);
     EMIOENET1DMATXENDTOG : out std_ulogic;
     EMIOENET1GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET1GMIITXEN : out std_ulogic;
     EMIOENET1GMIITXER : out std_ulogic;
     EMIOENET1MDIOMDC : out std_ulogic;
     EMIOENET1MDIOO : out std_ulogic;
     EMIOENET1MDIOTN : out std_ulogic;
     EMIOENET1RXWDATA : out std_logic_vector(7 downto 0);
     EMIOENET1RXWEOP : out std_ulogic;
     EMIOENET1RXWERR : out std_ulogic;
     EMIOENET1RXWFLUSH : out std_ulogic;
     EMIOENET1RXWSOP : out std_ulogic;
     EMIOENET1RXWSTATUS : out std_logic_vector(44 downto 0);
     EMIOENET1RXWWR : out std_ulogic;
     EMIOENET1SPEEDMODE : out std_logic_vector(3 downto 0);
     EMIOENET1TXRRD : out std_logic_vector(1 downto 0);
     EMIOENET1TXRSTATUS : out std_logic_vector(3 downto 0);
     EMIOGEM0DELAYREQRX : out std_ulogic;
     EMIOGEM0DELAYREQTX : out std_ulogic;
     EMIOGEM0PDELAYREQRX : out std_ulogic;
     EMIOGEM0PDELAYREQTX : out std_ulogic;
     EMIOGEM0PDELAYRESPRX : out std_ulogic;
     EMIOGEM0PDELAYRESPTX : out std_ulogic;
     EMIOGEM0RXSOF : out std_ulogic;
     EMIOGEM0SYNCFRAMERX : out std_ulogic;
     EMIOGEM0SYNCFRAMETX : out std_ulogic;
     EMIOGEM0TSUTIMERCMPVAL : out std_ulogic;
     EMIOGEM0TXRFIXEDLAT : out std_ulogic;
     EMIOGEM0TXSOF : out std_ulogic;
     EMIOGEM1DELAYREQRX : out std_ulogic;
     EMIOGEM1DELAYREQTX : out std_ulogic;
     EMIOGEM1PDELAYREQRX : out std_ulogic;
     EMIOGEM1PDELAYREQTX : out std_ulogic;
     EMIOGEM1PDELAYRESPRX : out std_ulogic;
     EMIOGEM1PDELAYRESPTX : out std_ulogic;
     EMIOGEM1RXSOF : out std_ulogic;
     EMIOGEM1SYNCFRAMERX : out std_ulogic;
     EMIOGEM1SYNCFRAMETX : out std_ulogic;
     EMIOGEM1TSUTIMERCMPVAL : out std_ulogic;
     EMIOGEM1TXRFIXEDLAT : out std_ulogic;
     EMIOGEM1TXSOF : out std_ulogic;
     EMIOGPIO2O : out std_logic_vector(31 downto 0);
     EMIOGPIO2TN : out std_logic_vector(31 downto 0);
     EMIOI2C0SCLO : out std_ulogic;
     EMIOI2C0SCLTN : out std_ulogic;
     EMIOI2C0SDAO : out std_ulogic;
     EMIOI2C0SDATN : out std_ulogic;
     EMIOI2C1SCLO : out std_ulogic;
     EMIOI2C1SCLTN : out std_ulogic;
     EMIOI2C1SDAO : out std_ulogic;
     EMIOI2C1SDATN : out std_ulogic;
     EMIOSPI0MO : out std_ulogic;
     EMIOSPI0MOTN : out std_ulogic;
     EMIOSPI0SCLKO : out std_ulogic;
     EMIOSPI0SCLKTN : out std_ulogic;
     EMIOSPI0SO : out std_ulogic;
     EMIOSPI0SSNTN : out std_ulogic;
     EMIOSPI0SSON : out std_logic_vector(2 downto 0);
     EMIOSPI0STN : out std_ulogic;
     EMIOSPI1MO : out std_ulogic;
     EMIOSPI1MOTN : out std_ulogic;
     EMIOSPI1SCLKO : out std_ulogic;
     EMIOSPI1SCLKTN : out std_ulogic;
     EMIOSPI1SO : out std_ulogic;
     EMIOSPI1SSNTN : out std_ulogic;
     EMIOSPI1SSON : out std_logic_vector(2 downto 0);
     EMIOSPI1STN : out std_ulogic;
     EMIOTTC0WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC1WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC2WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC3WAVEO : out std_logic_vector(2 downto 0);
     EMIOU2DSPORTVBUSCTRLUSB30 : out std_ulogic;
     FMIOFPDGWDTWS0 : out std_ulogic;
     FMIOFPDGWDTWS1 : out std_ulogic;
     FMIOFPDLPDEMIOIN : out std_logic_vector(25 downto 0);
     FMIOFPDWWDTINTERRUPT : out std_ulogic;
     FMIOFPDWWDTRESET : out std_ulogic;
     FMIOFPDWWDTRESETPENDING : out std_ulogic;
     FMIOGEM0ADDMATCHVEC : out std_logic_vector(3 downto 0);
     FMIOGEM0RXDATABUFWRQ0 : out std_ulogic;
     FMIOGEM0RXDATABUFWRQ1 : out std_ulogic;
     FMIOGEM0RXWQUEUE : out std_logic_vector(3 downto 0);
     FMIOGEM0TXRQUEUE : out std_logic_vector(3 downto 0);
     FMIOGEM0TXRTIMESTAMP : out std_logic_vector(77 downto 0);
     FMIOGEM1ADDMATCHVEC : out std_logic_vector(3 downto 0);
     FMIOGEM1RXDATABUFWRQ0 : out std_ulogic;
     FMIOGEM1RXDATABUFWRQ1 : out std_ulogic;
     FMIOGEM1RXWQUEUE : out std_logic_vector(3 downto 0);
     FMIOGEM1TXRQUEUE : out std_logic_vector(3 downto 0);
     FMIOGEM1TXRTIMESTAMP : out std_logic_vector(77 downto 0);
     FMIOGPIOOEN : out std_logic_vector(63 downto 0);
     FMIOGPIOOUT : out std_logic_vector(63 downto 0);
     FMIOGWDTWS0 : out std_ulogic;
     FMIOGWDTWS1 : out std_ulogic;
     FMIOI2CSCLOEN : out std_ulogic;
     FMIOI2CSCLOUT : out std_ulogic;
     FMIOI2CSDAOEN : out std_ulogic;
     FMIOI2CSDAOUT : out std_ulogic;
     FMIOLPDPMCEMIOIN : out std_logic_vector(51 downto 0);
     FMIOSD0BUSPOWEROUT : out std_ulogic;
     FMIOSD0BUSVOLTAGEOUT : out std_logic_vector(2 downto 0);
     FMIOSD0DLLTESTCLK0 : out std_ulogic;
     FMIOSD0DLLTESTCLKRX : out std_ulogic;
     FMIOSD0DLLTESTCLKTX : out std_ulogic;
     FMIOSD0DLLTESTOUT : out std_logic_vector(7 downto 0);
     FMIOSD0LEDCONTROLOUT : out std_ulogic;
     FMIOSD0SDIFCLKOUT : out std_ulogic;
     FMIOSD0SDIFCMDOE : out std_ulogic;
     FMIOSD0SDIFCMDOUT : out std_ulogic;
     FMIOSD0SDIFDATOE : out std_logic_vector(7 downto 0);
     FMIOSD0SDIFDATOUT : out std_logic_vector(7 downto 0);
     FMIOSD1BUSPOWEROUT : out std_ulogic;
     FMIOSD1BUSVOLTAGEOUT : out std_logic_vector(2 downto 0);
     FMIOSD1DLLTESTCLK0 : out std_ulogic;
     FMIOSD1DLLTESTCLKRX : out std_ulogic;
     FMIOSD1DLLTESTCLKTX : out std_ulogic;
     FMIOSD1DLLTESTOUT : out std_logic_vector(7 downto 0);
     FMIOSD1LEDCONTROLOUT : out std_ulogic;
     FMIOSD1SDIFCLKOUT : out std_ulogic;
     FMIOSD1SDIFCMDOE : out std_ulogic;
     FMIOSD1SDIFCMDOUT : out std_ulogic;
     FMIOSD1SDIFDATOE : out std_logic_vector(7 downto 0);
     FMIOSD1SDIFDATOUT : out std_logic_vector(7 downto 0);
     FMIOSYSMONI2CSCLTRIB : out std_ulogic;
     FMIOSYSMONI2CSDATRIB : out std_ulogic;
     FMIOSYSMONI2CSMBALERTTRIB : out std_ulogic;
     FMIOUART0NSIROUT : out std_ulogic;
     FMIOUART0NUARTDTR : out std_ulogic;
     FMIOUART0NUARTOUT1 : out std_ulogic;
     FMIOUART0NUARTOUT2 : out std_ulogic;
     FMIOUART0NUARTRTS : out std_ulogic;
     FMIOUART0TXD : out std_ulogic;
     FMIOUART1NSIROUT : out std_ulogic;
     FMIOUART1NUARTDTR : out std_ulogic;
     FMIOUART1NUARTOUT1 : out std_ulogic;
     FMIOUART1NUARTOUT2 : out std_ulogic;
     FMIOUART1NUARTRTS : out std_ulogic;
     FMIOUART1TXD : out std_ulogic;
     FMIOWWDTINTERRUPT : out std_ulogic;
     FMIOWWDTRESET : out std_ulogic;
     FMIOWWDTRESETPENDING : out std_ulogic;
     IFCPMPSAXI0ARREADY : out std_ulogic;
     IFCPMPSAXI0AWREADY : out std_ulogic;
     IFCPMPSAXI0BID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0BRESP : out std_logic_vector(1 downto 0);
     IFCPMPSAXI0BUSER : out std_logic_vector(0 to 0);
     IFCPMPSAXI0BVALID : out std_ulogic;
     IFCPMPSAXI0RDATA : out std_logic_vector(127 downto 0);
     IFCPMPSAXI0RID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI0RLAST : out std_logic_vector(0 to 0);
     IFCPMPSAXI0RRESP : out std_logic_vector(1 downto 0);
     IFCPMPSAXI0RUSER : out std_logic_vector(17 downto 0);
     IFCPMPSAXI0RVALID : out std_ulogic;
     IFCPMPSAXI0WREADY : out std_ulogic;
     IFCPMPSAXI1ARREADY : out std_ulogic;
     IFCPMPSAXI1AWREADY : out std_ulogic;
     IFCPMPSAXI1BID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1BRESP : out std_logic_vector(1 downto 0);
     IFCPMPSAXI1BUSER : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1BVALID : out std_ulogic;
     IFCPMPSAXI1RDATA : out std_logic_vector(127 downto 0);
     IFCPMPSAXI1RID : out std_logic_vector(15 downto 0);
     IFCPMPSAXI1RLAST : out std_logic_vector(0 to 0);
     IFCPMPSAXI1RRESP : out std_logic_vector(1 downto 0);
     IFCPMPSAXI1RUSER : out std_logic_vector(16 downto 0);
     IFCPMPSAXI1RVALID : out std_ulogic;
     IFCPMPSAXI1WREADY : out std_ulogic;
     IFNOCPMCAXI0ARREADY : out std_ulogic;
     IFNOCPMCAXI0AWREADY : out std_ulogic;
     IFNOCPMCAXI0BID : out std_logic_vector(1 downto 0);
     IFNOCPMCAXI0BRESP : out std_logic_vector(1 downto 0);
     IFNOCPMCAXI0BUSER : out std_logic_vector(15 downto 0);
     IFNOCPMCAXI0BVALID : out std_ulogic;
     IFNOCPMCAXI0RDATA : out std_logic_vector(127 downto 0);
     IFNOCPMCAXI0RID : out std_logic_vector(1 downto 0);
     IFNOCPMCAXI0RLAST : out std_logic_vector(0 to 0);
     IFNOCPMCAXI0RRESP : out std_logic_vector(1 downto 0);
     IFNOCPMCAXI0RUSER : out std_logic_vector(16 downto 0);
     IFNOCPMCAXI0RVALID : out std_ulogic;
     IFNOCPMCAXI0WREADY : out std_ulogic;
     IFNOCPSCCIAXI0ARREADY : out std_ulogic;
     IFNOCPSCCIAXI0AWREADY : out std_ulogic;
     IFNOCPSCCIAXI0BID : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0BRESP : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0BUSER : out std_logic_vector(15 downto 0);
     IFNOCPSCCIAXI0BVALID : out std_ulogic;
     IFNOCPSCCIAXI0RDATA : out std_logic_vector(127 downto 0);
     IFNOCPSCCIAXI0RID : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0RLAST : out std_logic_vector(0 to 0);
     IFNOCPSCCIAXI0RRESP : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0RUSER : out std_logic_vector(16 downto 0);
     IFNOCPSCCIAXI0RVALID : out std_ulogic;
     IFNOCPSCCIAXI0WREADY : out std_ulogic;
     IFNOCPSCCIAXI1ARREADY : out std_ulogic;
     IFNOCPSCCIAXI1AWREADY : out std_ulogic;
     IFNOCPSCCIAXI1BID : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1BRESP : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1BUSER : out std_logic_vector(15 downto 0);
     IFNOCPSCCIAXI1BVALID : out std_ulogic;
     IFNOCPSCCIAXI1RDATA : out std_logic_vector(127 downto 0);
     IFNOCPSCCIAXI1RID : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1RLAST : out std_logic_vector(0 to 0);
     IFNOCPSCCIAXI1RRESP : out std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1RUSER : out std_logic_vector(16 downto 0);
     IFNOCPSCCIAXI1RVALID : out std_ulogic;
     IFNOCPSCCIAXI1WREADY : out std_ulogic;
     IFNOCPSNCIAXI0ARREADY : out std_ulogic;
     IFNOCPSNCIAXI0AWREADY : out std_ulogic;
     IFNOCPSNCIAXI0BID : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0BRESP : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0BUSER : out std_logic_vector(15 downto 0);
     IFNOCPSNCIAXI0BVALID : out std_ulogic;
     IFNOCPSNCIAXI0RDATA : out std_logic_vector(127 downto 0);
     IFNOCPSNCIAXI0RID : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0RLAST : out std_logic_vector(0 to 0);
     IFNOCPSNCIAXI0RRESP : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0RUSER : out std_logic_vector(16 downto 0);
     IFNOCPSNCIAXI0RVALID : out std_ulogic;
     IFNOCPSNCIAXI0WREADY : out std_ulogic;
     IFNOCPSNCIAXI1ARREADY : out std_ulogic;
     IFNOCPSNCIAXI1AWREADY : out std_ulogic;
     IFNOCPSNCIAXI1BID : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1BRESP : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1BUSER : out std_logic_vector(15 downto 0);
     IFNOCPSNCIAXI1BVALID : out std_ulogic;
     IFNOCPSNCIAXI1RDATA : out std_logic_vector(127 downto 0);
     IFNOCPSNCIAXI1RID : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1RLAST : out std_logic_vector(0 to 0);
     IFNOCPSNCIAXI1RRESP : out std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1RUSER : out std_logic_vector(16 downto 0);
     IFNOCPSNCIAXI1RVALID : out std_ulogic;
     IFNOCPSNCIAXI1WREADY : out std_ulogic;
     IFNOCPSPCIAXI0ARREADY : out std_ulogic;
     IFNOCPSPCIAXI0AWREADY : out std_ulogic;
     IFNOCPSPCIAXI0BID : out std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0BRESP : out std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0BUSER : out std_logic_vector(15 downto 0);
     IFNOCPSPCIAXI0BVALID : out std_ulogic;
     IFNOCPSPCIAXI0RDATA : out std_logic_vector(127 downto 0);
     IFNOCPSPCIAXI0RID : out std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0RLAST : out std_logic_vector(0 to 0);
     IFNOCPSPCIAXI0RRESP : out std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0RUSER : out std_logic_vector(16 downto 0);
     IFNOCPSPCIAXI0RVALID : out std_ulogic;
     IFNOCPSPCIAXI0WREADY : out std_ulogic;
     IFPMCCFUSEUCFUSEUCRCERROR : out std_ulogic;
     IFPMCCFUSEUCFUSEUECCERROR : out std_ulogic;
     IFPMCCFUSEUCFUSEUENDOFCALIB : out std_ulogic;
     IFPMCCFUSEUCFUSEUHALTED : out std_ulogic;
     IFPMCCFUSEUCFUSEUHEARTBEAT : out std_ulogic;
     IFPMCNOCAXI0ARADDR : out std_logic_vector(63 downto 0);
     IFPMCNOCAXI0ARBURST : out std_logic_vector(1 downto 0);
     IFPMCNOCAXI0ARCACHE : out std_logic_vector(3 downto 0);
     IFPMCNOCAXI0ARID : out std_logic_vector(15 downto 0);
     IFPMCNOCAXI0ARLEN : out std_logic_vector(7 downto 0);
     IFPMCNOCAXI0ARLOCK : out std_logic_vector(0 to 0);
     IFPMCNOCAXI0ARPROT : out std_logic_vector(2 downto 0);
     IFPMCNOCAXI0ARQOS : out std_logic_vector(3 downto 0);
     IFPMCNOCAXI0ARREGION : out std_logic_vector(3 downto 0);
     IFPMCNOCAXI0ARSIZE : out std_logic_vector(2 downto 0);
     IFPMCNOCAXI0ARUSER : out std_logic_vector(17 downto 0);
     IFPMCNOCAXI0ARVALID : out std_ulogic;
     IFPMCNOCAXI0AWADDR : out std_logic_vector(63 downto 0);
     IFPMCNOCAXI0AWBURST : out std_logic_vector(1 downto 0);
     IFPMCNOCAXI0AWCACHE : out std_logic_vector(3 downto 0);
     IFPMCNOCAXI0AWID : out std_logic_vector(15 downto 0);
     IFPMCNOCAXI0AWLEN : out std_logic_vector(7 downto 0);
     IFPMCNOCAXI0AWLOCK : out std_logic_vector(0 to 0);
     IFPMCNOCAXI0AWPROT : out std_logic_vector(2 downto 0);
     IFPMCNOCAXI0AWQOS : out std_logic_vector(3 downto 0);
     IFPMCNOCAXI0AWREGION : out std_logic_vector(3 downto 0);
     IFPMCNOCAXI0AWSIZE : out std_logic_vector(2 downto 0);
     IFPMCNOCAXI0AWUSER : out std_logic_vector(17 downto 0);
     IFPMCNOCAXI0AWVALID : out std_ulogic;
     IFPMCNOCAXI0BREADY : out std_ulogic;
     IFPMCNOCAXI0RREADY : out std_ulogic;
     IFPMCNOCAXI0WDATA : out std_logic_vector(127 downto 0);
     IFPMCNOCAXI0WID : out std_logic_vector(15 downto 0);
     IFPMCNOCAXI0WLAST : out std_logic_vector(0 to 0);
     IFPMCNOCAXI0WSTRB : out std_logic_vector(15 downto 0);
     IFPMCNOCAXI0WUSER : out std_logic_vector(16 downto 0);
     IFPMCNOCAXI0WVALID : out std_ulogic;
     IFPSCPMCFGAXIARADDR : out std_logic_vector(63 downto 0);
     IFPSCPMCFGAXIARBURST : out std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIARCACHE : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARID : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIARLEN : out std_logic_vector(7 downto 0);
     IFPSCPMCFGAXIARLOCK : out std_logic_vector(0 to 0);
     IFPSCPMCFGAXIARPROT : out std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIARQOS : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARREGION : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIARSIZE : out std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIARUSER : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIARVALID : out std_ulogic;
     IFPSCPMCFGAXIAWADDR : out std_logic_vector(63 downto 0);
     IFPSCPMCFGAXIAWBURST : out std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIAWCACHE : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWID : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIAWLEN : out std_logic_vector(7 downto 0);
     IFPSCPMCFGAXIAWLOCK : out std_logic_vector(0 to 0);
     IFPSCPMCFGAXIAWPROT : out std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIAWQOS : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWREGION : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIAWSIZE : out std_logic_vector(2 downto 0);
     IFPSCPMCFGAXIAWUSER : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIAWVALID : out std_ulogic;
     IFPSCPMCFGAXIBREADY : out std_ulogic;
     IFPSCPMCFGAXIRREADY : out std_ulogic;
     IFPSCPMCFGAXIWDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCFGAXIWID : out std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIWLAST : out std_logic_vector(0 to 0);
     IFPSCPMCFGAXIWSTRB : out std_logic_vector(3 downto 0);
     IFPSCPMCFGAXIWUSER : out std_logic_vector(5 downto 0);
     IFPSCPMCFGAXIWVALID : out std_ulogic;
     IFPSCPMCHANNEL0XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL0XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL0XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL0XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL0XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL0XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL0XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL0XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL10XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL10XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL10XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL10XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL10XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL10XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL10XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL11XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL11XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL11XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL11XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL11XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL11XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL11XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL12XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL12XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL12XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL12XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL12XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL12XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL12XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL13XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL13XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL13XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL13XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL13XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL13XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL13XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL14XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL14XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL14XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL14XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL14XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL14XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL14XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL15XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL15XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL15XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL15XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL15XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL15XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL15XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL1XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL1XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL1XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL1XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL1XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL1XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL1XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL2XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL2XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL2XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL2XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL2XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL2XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL2XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL3XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL3XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL3XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL3XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL3XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL3XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL3XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL4XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL4XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL4XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL4XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL4XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL4XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL4XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL5XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL5XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL5XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL5XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL5XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL5XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL5XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL6XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL6XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL6XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL6XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL6XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL6XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL6XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL7XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL7XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL7XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL7XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL7XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL7XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL7XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL8XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL8XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL8XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL8XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL8XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL8XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL8XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPEPOWERDOWN : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXPOLARITY : out std_ulogic;
     IFPSCPMCHANNEL9XPIPERXTERMINATION : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXCHARISK : out std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPETXCOMPLIANCE : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDATA : out std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL9XPIPETXDATAVALID : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDEEMPH : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXDETECTRXLOOPBACK : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXELECIDLE : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXMAINCURSOR : out std_logic_vector(6 downto 0);
     IFPSCPMCHANNEL9XPIPETXMARGIN : out std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL9XPIPETXPOSTCURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL9XPIPETXPRECURSOR : out std_logic_vector(4 downto 0);
     IFPSCPMCHANNEL9XPIPETXSTARTBLOCK : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXSWING : out std_ulogic;
     IFPSCPMCHANNEL9XPIPETXSYNCHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPERXGEARBOXSLIP : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXPCSRESET : out std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPERXGEARBOXSLIP : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXPCSRESET : out std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPERXGEARBOXSLIP : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXPCSRESET : out std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPETXHEADER : out std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPETXSEQUENCE : out std_logic_vector(6 downto 0);
     IFPSCPMHSDPLINKXPIPEGTRXUSRCLK : out std_ulogic;
     IFPSCPMINTQUADXPIPEPHYREADYFRBOT : out std_ulogic;
     IFPSCPMLINK0XPIPEGTPIPECLK : out std_ulogic;
     IFPSCPMLINK0XPIPEPCIELINKREACHTARGET : out std_ulogic;
     IFPSCPMLINK0XPIPEPCIELTSSMSTATE : out std_logic_vector(5 downto 0);
     IFPSCPMLINK0XPIPEPCIEPERSTN : out std_ulogic;
     IFPSCPMLINK0XPIPEPHYESMADAPTATIONSAVE : out std_ulogic;
     IFPSCPMLINK0XPIPEPIPERATE : out std_logic_vector(2 downto 0);
     IFPSCPMLINK1XPIPEGTPIPECLK : out std_ulogic;
     IFPSCPMLINK1XPIPEPCIELINKREACHTARGET : out std_ulogic;
     IFPSCPMLINK1XPIPEPCIELTSSMSTATE : out std_logic_vector(5 downto 0);
     IFPSCPMLINK1XPIPEPCIEPERSTN : out std_ulogic;
     IFPSCPMLINK1XPIPEPHYESMADAPTATIONSAVE : out std_ulogic;
     IFPSCPMLINK1XPIPEPIPERATE : out std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARADDR : out std_logic_vector(63 downto 0);
     IFPSCPMPCIEAXIARBURST : out std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIARCACHE : out std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARID : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIARLEN : out std_logic_vector(7 downto 0);
     IFPSCPMPCIEAXIARLOCK : out std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIARPROT : out std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARQOS : out std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARREGION : out std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIARSIZE : out std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIARUSER : out std_logic_vector(17 downto 0);
     IFPSCPMPCIEAXIARVALID : out std_ulogic;
     IFPSCPMPCIEAXIAWADDR : out std_logic_vector(63 downto 0);
     IFPSCPMPCIEAXIAWBURST : out std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIAWCACHE : out std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWID : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIAWLEN : out std_logic_vector(7 downto 0);
     IFPSCPMPCIEAXIAWLOCK : out std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIAWPROT : out std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIAWQOS : out std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWREGION : out std_logic_vector(3 downto 0);
     IFPSCPMPCIEAXIAWSIZE : out std_logic_vector(2 downto 0);
     IFPSCPMPCIEAXIAWUSER : out std_logic_vector(17 downto 0);
     IFPSCPMPCIEAXIAWVALID : out std_ulogic;
     IFPSCPMPCIEAXIBREADY : out std_ulogic;
     IFPSCPMPCIEAXIRREADY : out std_ulogic;
     IFPSCPMPCIEAXIWDATA : out std_logic_vector(127 downto 0);
     IFPSCPMPCIEAXIWID : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIWLAST : out std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIWSTRB : out std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIWUSER : out std_logic_vector(16 downto 0);
     IFPSCPMPCIEAXIWVALID : out std_ulogic;
     IFPSCPMPCSRPCRAPBEN : out std_ulogic;
     IFPSCPMPCSRPCRDISNPICLK : out std_ulogic;
     IFPSCPMPCSRPCRFABRICEN : out std_ulogic;
     IFPSCPMPCSRPCRGATEREG : out std_ulogic;
     IFPSCPMPCSRPCRHOLDSTATE : out std_ulogic;
     IFPSCPMPCSRPCRINITSTATE : out std_ulogic;
     IFPSCPMPCSRPCRMEMCLR : out std_ulogic;
     IFPSCPMPCSRPCRODISABLE : out std_logic_vector(3 downto 0);
     IFPSCPMPCSRPCRPCOMPLETE : out std_ulogic;
     IFPSCPMPCSRPCRPWRDN : out std_ulogic;
     IFPSCPMPCSRPCRSCANCLR : out std_ulogic;
     IFPSCPMPCSRPCRSTARTBISR : out std_ulogic;
     IFPSCPMPCSRPCRSTARTCAL : out std_ulogic;
     IFPSCPMPCSRPCRTRISTATE : out std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINREQREQ : out std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINRESACK : out std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINREQREQ : out std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINRESACK : out std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINREQREQ : out std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINRESACK : out std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINREQCMD : out std_logic_vector(3 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQLANENUM : out std_logic_vector(1 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQPAYLOAD : out std_logic_vector(7 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINREQREQ : out std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINRESACK : out std_ulogic;
     IFPSNOCCCIAXI0ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI0ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI0ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI0ARID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI0ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI0ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI0ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI0ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI0ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI0ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI0ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI0ARVALID : out std_ulogic;
     IFPSNOCCCIAXI0AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI0AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI0AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI0AWID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI0AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI0AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI0AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI0AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI0AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI0AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI0AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI0AWVALID : out std_ulogic;
     IFPSNOCCCIAXI0BREADY : out std_ulogic;
     IFPSNOCCCIAXI0RREADY : out std_ulogic;
     IFPSNOCCCIAXI0WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI0WID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI0WLAST : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI0WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI0WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI0WVALID : out std_ulogic;
     IFPSNOCCCIAXI1ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI1ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI1ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI1ARID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI1ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI1ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI1ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI1ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI1ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI1ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI1ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI1ARVALID : out std_ulogic;
     IFPSNOCCCIAXI1AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI1AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI1AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI1AWID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI1AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI1AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI1AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI1AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI1AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI1AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI1AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI1AWVALID : out std_ulogic;
     IFPSNOCCCIAXI1BREADY : out std_ulogic;
     IFPSNOCCCIAXI1RREADY : out std_ulogic;
     IFPSNOCCCIAXI1WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI1WID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI1WLAST : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI1WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI1WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI1WVALID : out std_ulogic;
     IFPSNOCCCIAXI2ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI2ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI2ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI2ARID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI2ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI2ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI2ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI2ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI2ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI2ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI2ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI2ARVALID : out std_ulogic;
     IFPSNOCCCIAXI2AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI2AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI2AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI2AWID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI2AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI2AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI2AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI2AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI2AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI2AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI2AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI2AWVALID : out std_ulogic;
     IFPSNOCCCIAXI2BREADY : out std_ulogic;
     IFPSNOCCCIAXI2RREADY : out std_ulogic;
     IFPSNOCCCIAXI2WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI2WID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI2WLAST : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI2WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI2WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI2WVALID : out std_ulogic;
     IFPSNOCCCIAXI3ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI3ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI3ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI3ARID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI3ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI3ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI3ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI3ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI3ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI3ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI3ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI3ARVALID : out std_ulogic;
     IFPSNOCCCIAXI3AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCCCIAXI3AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI3AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI3AWID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI3AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCCCIAXI3AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI3AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI3AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI3AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCCCIAXI3AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCCCIAXI3AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCCCIAXI3AWVALID : out std_ulogic;
     IFPSNOCCCIAXI3BREADY : out std_ulogic;
     IFPSNOCCCIAXI3RREADY : out std_ulogic;
     IFPSNOCCCIAXI3WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI3WID : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI3WLAST : out std_logic_vector(0 to 0);
     IFPSNOCCCIAXI3WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI3WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI3WVALID : out std_ulogic;
     IFPSNOCNCIAXI0ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCNCIAXI0ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI0ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI0ARID : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI0ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCNCIAXI0ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCNCIAXI0ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI0ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI0ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI0ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI0ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCNCIAXI0ARVALID : out std_ulogic;
     IFPSNOCNCIAXI0AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCNCIAXI0AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI0AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI0AWID : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI0AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCNCIAXI0AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCNCIAXI0AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI0AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI0AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI0AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI0AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCNCIAXI0AWVALID : out std_ulogic;
     IFPSNOCNCIAXI0BREADY : out std_ulogic;
     IFPSNOCNCIAXI0RREADY : out std_ulogic;
     IFPSNOCNCIAXI0WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCNCIAXI0WID : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI0WLAST : out std_logic_vector(0 to 0);
     IFPSNOCNCIAXI0WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI0WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCNCIAXI0WVALID : out std_ulogic;
     IFPSNOCNCIAXI1ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCNCIAXI1ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI1ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI1ARID : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI1ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCNCIAXI1ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCNCIAXI1ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI1ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI1ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI1ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI1ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCNCIAXI1ARVALID : out std_ulogic;
     IFPSNOCNCIAXI1AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCNCIAXI1AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI1AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI1AWID : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI1AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCNCIAXI1AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCNCIAXI1AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI1AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI1AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCNCIAXI1AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCNCIAXI1AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCNCIAXI1AWVALID : out std_ulogic;
     IFPSNOCNCIAXI1BREADY : out std_ulogic;
     IFPSNOCNCIAXI1RREADY : out std_ulogic;
     IFPSNOCNCIAXI1WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCNCIAXI1WID : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI1WLAST : out std_logic_vector(0 to 0);
     IFPSNOCNCIAXI1WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI1WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCNCIAXI1WVALID : out std_ulogic;
     IFPSNOCPCIAXI0ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCPCIAXI0ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI0ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI0ARID : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI0ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCPCIAXI0ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCPCIAXI0ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI0ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI0ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI0ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI0ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCPCIAXI0ARVALID : out std_ulogic;
     IFPSNOCPCIAXI0AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCPCIAXI0AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI0AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI0AWID : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI0AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCPCIAXI0AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCPCIAXI0AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI0AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI0AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI0AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI0AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCPCIAXI0AWVALID : out std_ulogic;
     IFPSNOCPCIAXI0BREADY : out std_ulogic;
     IFPSNOCPCIAXI0RREADY : out std_ulogic;
     IFPSNOCPCIAXI0WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCPCIAXI0WID : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI0WLAST : out std_logic_vector(0 to 0);
     IFPSNOCPCIAXI0WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI0WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCPCIAXI0WVALID : out std_ulogic;
     IFPSNOCPCIAXI1ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCPCIAXI1ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI1ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI1ARID : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI1ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCPCIAXI1ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCPCIAXI1ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI1ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI1ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI1ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI1ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCPCIAXI1ARVALID : out std_ulogic;
     IFPSNOCPCIAXI1AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCPCIAXI1AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI1AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI1AWID : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI1AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCPCIAXI1AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCPCIAXI1AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI1AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI1AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCPCIAXI1AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCPCIAXI1AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCPCIAXI1AWVALID : out std_ulogic;
     IFPSNOCPCIAXI1BREADY : out std_ulogic;
     IFPSNOCPCIAXI1RREADY : out std_ulogic;
     IFPSNOCPCIAXI1WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCPCIAXI1WID : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI1WLAST : out std_logic_vector(0 to 0);
     IFPSNOCPCIAXI1WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI1WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCPCIAXI1WVALID : out std_ulogic;
     IFPSNOCRPUAXI0ARADDR : out std_logic_vector(63 downto 0);
     IFPSNOCRPUAXI0ARBURST : out std_logic_vector(1 downto 0);
     IFPSNOCRPUAXI0ARCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCRPUAXI0ARID : out std_logic_vector(15 downto 0);
     IFPSNOCRPUAXI0ARLEN : out std_logic_vector(7 downto 0);
     IFPSNOCRPUAXI0ARLOCK : out std_logic_vector(0 to 0);
     IFPSNOCRPUAXI0ARPROT : out std_logic_vector(2 downto 0);
     IFPSNOCRPUAXI0ARQOS : out std_logic_vector(3 downto 0);
     IFPSNOCRPUAXI0ARREGION : out std_logic_vector(3 downto 0);
     IFPSNOCRPUAXI0ARSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCRPUAXI0ARUSER : out std_logic_vector(17 downto 0);
     IFPSNOCRPUAXI0ARVALID : out std_ulogic;
     IFPSNOCRPUAXI0AWADDR : out std_logic_vector(63 downto 0);
     IFPSNOCRPUAXI0AWBURST : out std_logic_vector(1 downto 0);
     IFPSNOCRPUAXI0AWCACHE : out std_logic_vector(3 downto 0);
     IFPSNOCRPUAXI0AWID : out std_logic_vector(15 downto 0);
     IFPSNOCRPUAXI0AWLEN : out std_logic_vector(7 downto 0);
     IFPSNOCRPUAXI0AWLOCK : out std_logic_vector(0 to 0);
     IFPSNOCRPUAXI0AWPROT : out std_logic_vector(2 downto 0);
     IFPSNOCRPUAXI0AWQOS : out std_logic_vector(3 downto 0);
     IFPSNOCRPUAXI0AWREGION : out std_logic_vector(3 downto 0);
     IFPSNOCRPUAXI0AWSIZE : out std_logic_vector(2 downto 0);
     IFPSNOCRPUAXI0AWUSER : out std_logic_vector(17 downto 0);
     IFPSNOCRPUAXI0AWVALID : out std_ulogic;
     IFPSNOCRPUAXI0BREADY : out std_ulogic;
     IFPSNOCRPUAXI0RREADY : out std_ulogic;
     IFPSNOCRPUAXI0WDATA : out std_logic_vector(127 downto 0);
     IFPSNOCRPUAXI0WID : out std_logic_vector(15 downto 0);
     IFPSNOCRPUAXI0WLAST : out std_logic_vector(0 to 0);
     IFPSNOCRPUAXI0WSTRB : out std_logic_vector(15 downto 0);
     IFPSNOCRPUAXI0WUSER : out std_logic_vector(16 downto 0);
     IFPSNOCRPUAXI0WVALID : out std_ulogic;
     IFPSOCM2APBPADDR : out std_logic_vector(31 downto 0);
     IFPSOCM2APBPENABLE : out std_ulogic;
     IFPSOCM2APBPPROT : out std_logic_vector(2 downto 0);
     IFPSOCM2APBPSEL : out std_ulogic;
     IFPSOCM2APBPSTRB : out std_logic_vector(3 downto 0);
     IFPSOCM2APBPWDATA : out std_logic_vector(31 downto 0);
     IFPSOCM2APBPWRITE : out std_ulogic;
     LPDCPMINREFCLK : out std_ulogic;
     LPDCPMSWITCHTIMEOUTCNT : out std_ulogic;
     LPDCPMTOPSWCLK : out std_ulogic;
     LPDRCLKCLK : out std_logic_vector(5 downto 0);
     MAXIGP0ARADDR : out std_logic_vector(43 downto 0);
     MAXIGP0ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP0ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0ARID : out std_logic_vector(15 downto 0);
     MAXIGP0ARLEN : out std_logic_vector(7 downto 0);
     MAXIGP0ARLOCK : out std_ulogic;
     MAXIGP0ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP0ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP0ARSIZE : out std_logic_vector(2 downto 0);
     MAXIGP0ARUSER : out std_logic_vector(15 downto 0);
     MAXIGP0ARVALID : out std_ulogic;
     MAXIGP0AWADDR : out std_logic_vector(43 downto 0);
     MAXIGP0AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP0AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0AWID : out std_logic_vector(15 downto 0);
     MAXIGP0AWLEN : out std_logic_vector(7 downto 0);
     MAXIGP0AWLOCK : out std_ulogic;
     MAXIGP0AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP0AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP0AWSIZE : out std_logic_vector(2 downto 0);
     MAXIGP0AWUSER : out std_logic_vector(15 downto 0);
     MAXIGP0AWVALID : out std_ulogic;
     MAXIGP0BREADY : out std_ulogic;
     MAXIGP0RREADY : out std_ulogic;
     MAXIGP0WDATA : out std_logic_vector(127 downto 0);
     MAXIGP0WLAST : out std_ulogic;
     MAXIGP0WSTRB : out std_logic_vector(15 downto 0);
     MAXIGP0WVALID : out std_ulogic;
     MAXIGP2ARADDR : out std_logic_vector(43 downto 0);
     MAXIGP2ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP2ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP2ARID : out std_logic_vector(15 downto 0);
     MAXIGP2ARLEN : out std_logic_vector(7 downto 0);
     MAXIGP2ARLOCK : out std_ulogic;
     MAXIGP2ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP2ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP2ARSIZE : out std_logic_vector(2 downto 0);
     MAXIGP2ARUSER : out std_logic_vector(15 downto 0);
     MAXIGP2ARVALID : out std_ulogic;
     MAXIGP2AWADDR : out std_logic_vector(43 downto 0);
     MAXIGP2AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP2AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP2AWID : out std_logic_vector(15 downto 0);
     MAXIGP2AWLEN : out std_logic_vector(7 downto 0);
     MAXIGP2AWLOCK : out std_ulogic;
     MAXIGP2AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP2AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP2AWSIZE : out std_logic_vector(2 downto 0);
     MAXIGP2AWUSER : out std_logic_vector(15 downto 0);
     MAXIGP2AWVALID : out std_ulogic;
     MAXIGP2BREADY : out std_ulogic;
     MAXIGP2RREADY : out std_ulogic;
     MAXIGP2WDATA : out std_logic_vector(127 downto 0);
     MAXIGP2WLAST : out std_ulogic;
     MAXIGP2WSTRB : out std_logic_vector(15 downto 0);
     MAXIGP2WVALID : out std_ulogic;
     MJTAGTDO : out std_ulogic;
     NPICLK : out std_ulogic;
     NPIRSTN : out std_ulogic;
     OSCRTCCLK : out std_ulogic;
     PERST0N : out std_ulogic;
     PERST1N : out std_ulogic;
     PLHSDPEGRESSTDATA : out std_logic_vector(63 downto 0);
     PLHSDPEGRESSTKEEP : out std_logic_vector(7 downto 0);
     PLHSDPEGRESSTLAST : out std_ulogic;
     PLHSDPEGRESSTUSER : out std_logic_vector(11 downto 0);
     PLHSDPEGRESSTVALID : out std_ulogic;
     PLHSDPINGRESSTREADY : out std_ulogic;
     PLPSSMMUARREADY : out std_ulogic;
     PLPSSMMUAWREADY : out std_ulogic;
     PLPSSMMUCOMPRDREADY : out std_ulogic;
     PLPSSMMUCOMPWRREADY : out std_ulogic;
     PLREFCLKMUXMONITOR : out std_ulogic;
     PLRST0N : out std_ulogic;
     PLRST1N : out std_ulogic;
     PLRST2N : out std_ulogic;
     PLRST3N : out std_ulogic;
     PMCERRORTOPL : out std_logic_vector(63 downto 0);
     PMCPLGPO : out std_logic_vector(31 downto 0);
     PMCPLSYSMONROOTALARM : out std_logic_vector(9 downto 0);
     PMCPLSYSMONROOTNEWDATA : out std_logic_vector(3 downto 0);
     PMCRCLKCLK : out std_logic_vector(5 downto 0);
     PMUAIBAFIFMFPDREQ : out std_ulogic;
     PMUAIBAFIFMLPDREQ : out std_ulogic;
     PMUERRORTOPL : out std_logic_vector(46 downto 0);
     PSMERRORTOPL : out std_logic_vector(63 downto 0);
     PSNOCPMCAXI0CLK : out std_ulogic;
     PSNOCPSCCIAXI0CLK : out std_ulogic;
     PSNOCPSCCIAXI1CLK : out std_ulogic;
     PSNOCPSNCIAXI0CLK : out std_ulogic;
     PSNOCPSNCIAXI1CLK : out std_ulogic;
     PSNOCPSPCIAXI0CLK : out std_ulogic;
     PSPLAFVALID : out std_ulogic;
     PSPLATREADY : out std_ulogic;
     PSPLEVENTO : out std_ulogic;
     PSPLIRQFPD : out std_logic_vector(31 downto 0);
     PSPLIRQLPD : out std_logic_vector(99 downto 0);
     PSPLIRQPMC : out std_logic_vector(63 downto 0);
     PSPLSTANDBYWFE : out std_logic_vector(1 downto 0);
     PSPLSTANDBYWFI : out std_logic_vector(1 downto 0);
     PSPLSYNCREQ : out std_ulogic;
     PSPLTRACECTL : out std_ulogic;
     PSPLTRACEDATA : out std_logic_vector(31 downto 0);
     PSPLTRIGACK : out std_logic_vector(3 downto 0);
     PSPLTRIGGER : out std_logic_vector(3 downto 0);
     PSPMCNOCAXI0CLK : out std_ulogic;
     PSPSNOCCCIAXI0CLK : out std_ulogic;
     PSPSNOCCCIAXI1CLK : out std_ulogic;
     PSPSNOCCCIAXI2CLK : out std_ulogic;
     PSPSNOCCCIAXI3CLK : out std_ulogic;
     PSPSNOCNCIAXI0CLK : out std_ulogic;
     PSPSNOCNCIAXI1CLK : out std_ulogic;
     PSPSNOCPCIAXI0CLK : out std_ulogic;
     PSPSNOCPCIAXI1CLK : out std_ulogic;
     PSPSNOCRPUAXI0CLK : out std_ulogic;
     PSSMMUPLARADDR : out std_logic_vector(47 downto 0);
     PSSMMUPLARCACHE : out std_logic_vector(3 downto 0);
     PSSMMUPLARID : out std_logic_vector(7 downto 0);
     PSSMMUPLARVALID : out std_ulogic;
     PSSMMUPLAWADDR : out std_logic_vector(47 downto 0);
     PSSMMUPLAWCACHE : out std_logic_vector(3 downto 0);
     PSSMMUPLAWID : out std_logic_vector(7 downto 0);
     PSSMMUPLAWVALID : out std_ulogic;
     PSSMMUPLBID : out std_logic_vector(7 downto 0);
     PSSMMUPLBRESP : out std_logic_vector(1 downto 0);
     PSSMMUPLBVALID : out std_ulogic;
     PSSMMUPLRERR : out std_ulogic;
     PSSMMUPLRID : out std_logic_vector(7 downto 0);
     PSSMMUPLRNS : out std_ulogic;
     PSSMMUPLRRESP : out std_logic_vector(1 downto 0);
     PSSMMUPLRVALID : out std_ulogic;
     PSSMMUPLWERR : out std_ulogic;
     PSSMMUPLWNS : out std_ulogic;
     PSS_PAD_RTCPADO : out std_ulogic;
     RPUEVENTO0 : out std_ulogic;
     RPUEVENTO1 : out std_ulogic;
     RTCPADO : out std_ulogic;
     SACEFPDACADDR : out std_logic_vector(43 downto 0);
     SACEFPDACPROT : out std_logic_vector(2 downto 0);
     SACEFPDACSNOOP : out std_logic_vector(3 downto 0);
     SACEFPDACVALID : out std_ulogic;
     SACEFPDARREADY : out std_ulogic;
     SACEFPDAWREADY : out std_ulogic;
     SACEFPDBID : out std_logic_vector(5 downto 0);
     SACEFPDBRESP : out std_logic_vector(1 downto 0);
     SACEFPDBUSER : out std_ulogic;
     SACEFPDBVALID : out std_ulogic;
     SACEFPDCDREADY : out std_ulogic;
     SACEFPDCRREADY : out std_ulogic;
     SACEFPDRDATA : out std_logic_vector(127 downto 0);
     SACEFPDRID : out std_logic_vector(5 downto 0);
     SACEFPDRLAST : out std_ulogic;
     SACEFPDRRESP : out std_logic_vector(3 downto 0);
     SACEFPDRUSER : out std_ulogic;
     SACEFPDRVALID : out std_ulogic;
     SACEFPDWREADY : out std_ulogic;
     SAXIACPARREADY : out std_ulogic;
     SAXIACPAWREADY : out std_ulogic;
     SAXIACPBID : out std_logic_vector(4 downto 0);
     SAXIACPBRESP : out std_logic_vector(1 downto 0);
     SAXIACPBVALID : out std_ulogic;
     SAXIACPRDATA : out std_logic_vector(127 downto 0);
     SAXIACPRID : out std_logic_vector(4 downto 0);
     SAXIACPRLAST : out std_ulogic;
     SAXIACPRRESP : out std_logic_vector(1 downto 0);
     SAXIACPRVALID : out std_ulogic;
     SAXIACPWREADY : out std_ulogic;
     SAXIGP0ARREADY : out std_ulogic;
     SAXIGP0AWREADY : out std_ulogic;
     SAXIGP0BID : out std_logic_vector(5 downto 0);
     SAXIGP0BRESP : out std_logic_vector(1 downto 0);
     SAXIGP0BVALID : out std_ulogic;
     SAXIGP0RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP0RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP0RDATA : out std_logic_vector(127 downto 0);
     SAXIGP0RID : out std_logic_vector(5 downto 0);
     SAXIGP0RLAST : out std_ulogic;
     SAXIGP0RRESP : out std_logic_vector(1 downto 0);
     SAXIGP0RVALID : out std_ulogic;
     SAXIGP0WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP0WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP0WREADY : out std_ulogic;
     SAXIGP2ARREADY : out std_ulogic;
     SAXIGP2AWREADY : out std_ulogic;
     SAXIGP2BID : out std_logic_vector(5 downto 0);
     SAXIGP2BRESP : out std_logic_vector(1 downto 0);
     SAXIGP2BVALID : out std_ulogic;
     SAXIGP2RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP2RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP2RDATA : out std_logic_vector(127 downto 0);
     SAXIGP2RID : out std_logic_vector(5 downto 0);
     SAXIGP2RLAST : out std_ulogic;
     SAXIGP2RRESP : out std_logic_vector(1 downto 0);
     SAXIGP2RVALID : out std_ulogic;
     SAXIGP2WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP2WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP2WREADY : out std_ulogic;
     SAXIGP4ARREADY : out std_ulogic;
     SAXIGP4AWREADY : out std_ulogic;
     SAXIGP4BID : out std_logic_vector(5 downto 0);
     SAXIGP4BRESP : out std_logic_vector(1 downto 0);
     SAXIGP4BVALID : out std_ulogic;
     SAXIGP4RACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP4RCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP4RDATA : out std_logic_vector(127 downto 0);
     SAXIGP4RID : out std_logic_vector(5 downto 0);
     SAXIGP4RLAST : out std_ulogic;
     SAXIGP4RRESP : out std_logic_vector(1 downto 0);
     SAXIGP4RVALID : out std_ulogic;
     SAXIGP4WACOUNT : out std_logic_vector(3 downto 0);
     SAXIGP4WCOUNT : out std_logic_vector(7 downto 0);
     SAXIGP4WREADY : out std_ulogic;
     SCANCHNLSPAREOUTEXTCCI : out std_logic_vector(7 downto 0);
     USRCAPTURE : out std_logic_vector(3 downto 0);
     USRDRCK : out std_logic_vector(3 downto 0);
     USRRESET : out std_logic_vector(3 downto 0);
     USRRUNTEST : out std_logic_vector(3 downto 0);
     USRSEL : out std_logic_vector(3 downto 0);
     USRSHIFT : out std_logic_vector(3 downto 0);
     USRTCK : out std_logic_vector(3 downto 0);
     USRTDI : out std_logic_vector(3 downto 0);
     USRTMS : out std_logic_vector(3 downto 0);
     USRUPDATE : out std_logic_vector(3 downto 0);
     PSS_PAD_DONE : inout std_ulogic;
     PSS_PAD_ERROROUT : inout std_ulogic;
     PSS_PAD_JTAGTCK : inout std_ulogic;
     PSS_PAD_JTAGTDI : inout std_ulogic;
     PSS_PAD_JTAGTDO : inout std_ulogic;
     PSS_PAD_JTAGTMS : inout std_ulogic;
     PSS_PAD_LPDMIO : inout std_logic_vector(25 downto 0);
     PSS_PAD_MODE : inout std_logic_vector(3 downto 0);
     PSS_PAD_PMCMIO : inout std_logic_vector(51 downto 0);
     PSS_PAD_PUDCB : inout std_ulogic;
     PSS_PAD_REFCLK : inout std_ulogic;
     ADMAFCICLK : in std_logic_vector(7 downto 0);
     AIBPMUAFIFMFPDACK : in std_ulogic;
     AIBPMUAFIFMLPDACK : in std_ulogic;
     AXDS4COHDISABLE : in std_ulogic;
     CFUGCAPB : in std_ulogic;
     CFUUSRGSRB : in std_ulogic;
     CFUUSRGTSB : in std_ulogic;
     EMIOCAN0PHYRX : in std_ulogic;
     EMIOCAN1PHYRX : in std_ulogic;
     EMIOENET0DMATXSTATUSTOG : in std_ulogic;
     EMIOENET0EXTINTIN : in std_ulogic;
     EMIOENET0GMIICOL : in std_ulogic;
     EMIOENET0GMIICRS : in std_ulogic;
     EMIOENET0GMIIRXCLK : in std_ulogic;
     EMIOENET0GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET0GMIIRXDV : in std_ulogic;
     EMIOENET0GMIIRXER : in std_ulogic;
     EMIOENET0GMIITXCLK : in std_ulogic;
     EMIOENET0MDIOI : in std_ulogic;
     EMIOENET0RXWOVERFLOW : in std_ulogic;
     EMIOENET0TXRCONTROL : in std_ulogic;
     EMIOENET0TXRDATA : in std_logic_vector(7 downto 0);
     EMIOENET0TXRDATARDY : in std_logic_vector(1 downto 0);
     EMIOENET0TXREOP : in std_ulogic;
     EMIOENET0TXRERR : in std_ulogic;
     EMIOENET0TXRFLUSHED : in std_ulogic;
     EMIOENET0TXRSOP : in std_ulogic;
     EMIOENET0TXRUNDERFLOW : in std_ulogic;
     EMIOENET0TXRVALID : in std_ulogic;
     EMIOENET1DMATXSTATUSTOG : in std_ulogic;
     EMIOENET1EXTINTIN : in std_ulogic;
     EMIOENET1GMIICOL : in std_ulogic;
     EMIOENET1GMIICRS : in std_ulogic;
     EMIOENET1GMIIRXCLK : in std_ulogic;
     EMIOENET1GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET1GMIIRXDV : in std_ulogic;
     EMIOENET1GMIIRXER : in std_ulogic;
     EMIOENET1GMIITXCLK : in std_ulogic;
     EMIOENET1MDIOI : in std_ulogic;
     EMIOENET1RXWOVERFLOW : in std_ulogic;
     EMIOENET1TXRCONTROL : in std_ulogic;
     EMIOENET1TXRDATA : in std_logic_vector(7 downto 0);
     EMIOENET1TXRDATARDY : in std_logic_vector(1 downto 0);
     EMIOENET1TXREOP : in std_ulogic;
     EMIOENET1TXRERR : in std_ulogic;
     EMIOENET1TXRFLUSHED : in std_ulogic;
     EMIOENET1TXRSOP : in std_ulogic;
     EMIOENET1TXRUNDERFLOW : in std_ulogic;
     EMIOENET1TXRVALID : in std_ulogic;
     EMIOENETTSUCLK : in std_ulogic;
     EMIOGEM0TSUINCCTRL : in std_logic_vector(1 downto 0);
     EMIOGEM1TSUINCCTRL : in std_logic_vector(1 downto 0);
     EMIOGPIO2I : in std_logic_vector(31 downto 0);
     EMIOHUBPORTOVERCRNTUSB20 : in std_ulogic;
     EMIOI2C0SCLI : in std_ulogic;
     EMIOI2C0SDAI : in std_ulogic;
     EMIOI2C1SCLI : in std_ulogic;
     EMIOI2C1SDAI : in std_ulogic;
     EMIOSPI0MI : in std_ulogic;
     EMIOSPI0SCLKI : in std_ulogic;
     EMIOSPI0SI : in std_ulogic;
     EMIOSPI0SSIN : in std_ulogic;
     EMIOSPI1MI : in std_ulogic;
     EMIOSPI1SCLKI : in std_ulogic;
     EMIOSPI1SI : in std_ulogic;
     EMIOSPI1SSIN : in std_ulogic;
     EMIOTTC0CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC1CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC2CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC3CLKI : in std_logic_vector(2 downto 0);
     FMIOCHARAFIFSFPDTESTINPUT : in std_ulogic;
     FMIOCHARAFIFSFPDTESTSELECTN : in std_ulogic;
     FMIOCHARAFIFSLPDTESTINPUT : in std_ulogic;
     FMIOCHARAFIFSLPDTESTSELECTN : in std_ulogic;
     FMIOCHARGEMSELECTION : in std_ulogic;
     FMIOCHARGEMTESTINPUT : in std_ulogic;
     FMIOCHARGEMTESTSELECTN : in std_ulogic;
     FMIOCHARSDSELECTION : in std_ulogic;
     FMIOCHARSDTESTINPUT : in std_ulogic;
     FMIOCHARSDTESTSELECTN : in std_ulogic;
     FMIOCHARSPISELECTION : in std_ulogic;
     FMIOCHARSPITESTINPUT : in std_ulogic;
     FMIOCHARSPITESTSELECTN : in std_ulogic;
     FMIOFPDLPDEMIOOE : in std_logic_vector(25 downto 0);
     FMIOFPDLPDEMIOOUT : in std_logic_vector(25 downto 0);
     FMIOFPDWWDTCLKIN : in std_ulogic;
     FMIOGEM0FIFORXCLKFROMPL : in std_ulogic;
     FMIOGEM0FIFOTXCLKFROMPL : in std_ulogic;
     FMIOGEM1FIFORXCLKFROMPL : in std_ulogic;
     FMIOGEM1FIFOTXCLKFROMPL : in std_ulogic;
     FMIOGEMTSUCLKFROMPL : in std_ulogic;
     FMIOGPIOIN : in std_logic_vector(63 downto 0);
     FMIOI2CSCLIN : in std_ulogic;
     FMIOI2CSDAIN : in std_ulogic;
     FMIOLPDPMCEMIOOE : in std_logic_vector(51 downto 0);
     FMIOLPDPMCEMIOOUT : in std_logic_vector(51 downto 0);
     FMIOSD0DLLTESTIN : in std_logic_vector(3 downto 0);
     FMIOSD0SDIFCDNIN : in std_ulogic;
     FMIOSD0SDIFCMDIN : in std_ulogic;
     FMIOSD0SDIFDATIN : in std_logic_vector(7 downto 0);
     FMIOSD0SDIFWPIN : in std_ulogic;
     FMIOSD1DLLTESTIN : in std_logic_vector(3 downto 0);
     FMIOSD1SDIFCDNIN : in std_ulogic;
     FMIOSD1SDIFCMDIN : in std_ulogic;
     FMIOSD1SDIFDATIN : in std_logic_vector(7 downto 0);
     FMIOSD1SDIFWPIN : in std_ulogic;
     FMIOSDIO0RXCLKIN : in std_ulogic;
     FMIOSDIO1RXCLKIN : in std_ulogic;
     FMIOSYSMONI2CSCLINPUT : in std_ulogic;
     FMIOSYSMONI2CSDAINPUT : in std_ulogic;
     FMIOUART0NUARTCTS : in std_ulogic;
     FMIOUART0NUARTDCD : in std_ulogic;
     FMIOUART0NUARTDSR : in std_ulogic;
     FMIOUART0NUARTRI : in std_ulogic;
     FMIOUART0RXD : in std_ulogic;
     FMIOUART0SIRIN : in std_ulogic;
     FMIOUART1NUARTCTS : in std_ulogic;
     FMIOUART1NUARTDCD : in std_ulogic;
     FMIOUART1NUARTDSR : in std_ulogic;
     FMIOUART1NUARTRI : in std_ulogic;
     FMIOUART1RXD : in std_ulogic;
     FMIOUART1SIRIN : in std_ulogic;
     FMIOWWDTCLKIN : in std_ulogic;
     FTMGPI : in std_logic_vector(31 downto 0);
     GCAPCLK : in std_ulogic;
     GDFABRICGL : in std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARADDR : in std_logic_vector(63 downto 0);
     IFCPMPSAXI0ARBURST : in std_logic_vector(1 downto 0);
     IFCPMPSAXI0ARCACHE : in std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0ARLEN : in std_logic_vector(7 downto 0);
     IFCPMPSAXI0ARLOCK : in std_logic_vector(0 to 0);
     IFCPMPSAXI0ARPROT : in std_logic_vector(2 downto 0);
     IFCPMPSAXI0ARQOS : in std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARREGION : in std_logic_vector(3 downto 0);
     IFCPMPSAXI0ARSIZE : in std_logic_vector(2 downto 0);
     IFCPMPSAXI0ARUSER : in std_logic_vector(31 downto 0);
     IFCPMPSAXI0ARVALID : in std_ulogic;
     IFCPMPSAXI0AWADDR : in std_logic_vector(63 downto 0);
     IFCPMPSAXI0AWBURST : in std_logic_vector(1 downto 0);
     IFCPMPSAXI0AWCACHE : in std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0AWLEN : in std_logic_vector(7 downto 0);
     IFCPMPSAXI0AWLOCK : in std_logic_vector(0 to 0);
     IFCPMPSAXI0AWPROT : in std_logic_vector(2 downto 0);
     IFCPMPSAXI0AWQOS : in std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWREGION : in std_logic_vector(3 downto 0);
     IFCPMPSAXI0AWSIZE : in std_logic_vector(2 downto 0);
     IFCPMPSAXI0AWUSER : in std_logic_vector(31 downto 0);
     IFCPMPSAXI0AWVALID : in std_ulogic;
     IFCPMPSAXI0BREADY : in std_ulogic;
     IFCPMPSAXI0RREADY : in std_ulogic;
     IFCPMPSAXI0WDATA : in std_logic_vector(127 downto 0);
     IFCPMPSAXI0WID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0WLAST : in std_logic_vector(0 to 0);
     IFCPMPSAXI0WSTRB : in std_logic_vector(15 downto 0);
     IFCPMPSAXI0WUSER : in std_logic_vector(17 downto 0);
     IFCPMPSAXI0WVALID : in std_ulogic;
     IFCPMPSAXI1ARADDR : in std_logic_vector(63 downto 0);
     IFCPMPSAXI1ARBURST : in std_logic_vector(1 downto 0);
     IFCPMPSAXI1ARCACHE : in std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1ARLEN : in std_logic_vector(7 downto 0);
     IFCPMPSAXI1ARLOCK : in std_logic_vector(0 to 0);
     IFCPMPSAXI1ARPROT : in std_logic_vector(2 downto 0);
     IFCPMPSAXI1ARQOS : in std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARREGION : in std_logic_vector(3 downto 0);
     IFCPMPSAXI1ARSIZE : in std_logic_vector(2 downto 0);
     IFCPMPSAXI1ARUSER : in std_logic_vector(17 downto 0);
     IFCPMPSAXI1ARVALID : in std_ulogic;
     IFCPMPSAXI1AWADDR : in std_logic_vector(63 downto 0);
     IFCPMPSAXI1AWBURST : in std_logic_vector(1 downto 0);
     IFCPMPSAXI1AWCACHE : in std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1AWLEN : in std_logic_vector(7 downto 0);
     IFCPMPSAXI1AWLOCK : in std_logic_vector(0 to 0);
     IFCPMPSAXI1AWPROT : in std_logic_vector(2 downto 0);
     IFCPMPSAXI1AWQOS : in std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWREGION : in std_logic_vector(3 downto 0);
     IFCPMPSAXI1AWSIZE : in std_logic_vector(2 downto 0);
     IFCPMPSAXI1AWUSER : in std_logic_vector(17 downto 0);
     IFCPMPSAXI1AWVALID : in std_ulogic;
     IFCPMPSAXI1BREADY : in std_ulogic;
     IFCPMPSAXI1RREADY : in std_ulogic;
     IFCPMPSAXI1WDATA : in std_logic_vector(127 downto 0);
     IFCPMPSAXI1WID : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1WLAST : in std_logic_vector(0 to 0);
     IFCPMPSAXI1WSTRB : in std_logic_vector(15 downto 0);
     IFCPMPSAXI1WUSER : in std_logic_vector(16 downto 0);
     IFCPMPSAXI1WVALID : in std_ulogic;
     IFCPMPSISRCORREVENT : in std_ulogic;
     IFCPMPSISRMISCEVENT : in std_ulogic;
     IFCPMPSISRUNCORREVENT : in std_ulogic;
     IFFPDSYSMONSATTESTFABRICCLK : in std_ulogic;
     IFFPDSYSMONSATTESTTESTADCIN : in std_logic_vector(14 downto 0);
     IFFPDSYSMONSATTESTTESTADCINCLK : in std_ulogic;
     IFLPDSYSMONSATTESTFABRICCLK : in std_ulogic;
     IFLPDSYSMONSATTESTTESTADCIN : in std_logic_vector(14 downto 0);
     IFLPDSYSMONSATTESTTESTADCINCLK : in std_ulogic;
     IFNOCPMCAXI0ARADDR : in std_logic_vector(63 downto 0);
     IFNOCPMCAXI0ARBURST : in std_logic_vector(1 downto 0);
     IFNOCPMCAXI0ARCACHE : in std_logic_vector(3 downto 0);
     IFNOCPMCAXI0ARID : in std_logic_vector(1 downto 0);
     IFNOCPMCAXI0ARLEN : in std_logic_vector(7 downto 0);
     IFNOCPMCAXI0ARLOCK : in std_logic_vector(0 to 0);
     IFNOCPMCAXI0ARPROT : in std_logic_vector(2 downto 0);
     IFNOCPMCAXI0ARQOS : in std_logic_vector(3 downto 0);
     IFNOCPMCAXI0ARREGION : in std_logic_vector(3 downto 0);
     IFNOCPMCAXI0ARSIZE : in std_logic_vector(2 downto 0);
     IFNOCPMCAXI0ARUSER : in std_logic_vector(17 downto 0);
     IFNOCPMCAXI0ARVALID : in std_ulogic;
     IFNOCPMCAXI0AWADDR : in std_logic_vector(63 downto 0);
     IFNOCPMCAXI0AWBURST : in std_logic_vector(1 downto 0);
     IFNOCPMCAXI0AWCACHE : in std_logic_vector(3 downto 0);
     IFNOCPMCAXI0AWID : in std_logic_vector(1 downto 0);
     IFNOCPMCAXI0AWLEN : in std_logic_vector(7 downto 0);
     IFNOCPMCAXI0AWLOCK : in std_logic_vector(0 to 0);
     IFNOCPMCAXI0AWPROT : in std_logic_vector(2 downto 0);
     IFNOCPMCAXI0AWQOS : in std_logic_vector(3 downto 0);
     IFNOCPMCAXI0AWREGION : in std_logic_vector(3 downto 0);
     IFNOCPMCAXI0AWSIZE : in std_logic_vector(2 downto 0);
     IFNOCPMCAXI0AWUSER : in std_logic_vector(17 downto 0);
     IFNOCPMCAXI0AWVALID : in std_ulogic;
     IFNOCPMCAXI0BREADY : in std_ulogic;
     IFNOCPMCAXI0RREADY : in std_ulogic;
     IFNOCPMCAXI0WDATA : in std_logic_vector(127 downto 0);
     IFNOCPMCAXI0WID : in std_logic_vector(3 downto 0);
     IFNOCPMCAXI0WLAST : in std_logic_vector(0 to 0);
     IFNOCPMCAXI0WSTRB : in std_logic_vector(15 downto 0);
     IFNOCPMCAXI0WUSER : in std_logic_vector(16 downto 0);
     IFNOCPMCAXI0WVALID : in std_ulogic;
     IFNOCPSCCIAXI0ARADDR : in std_logic_vector(63 downto 0);
     IFNOCPSCCIAXI0ARBURST : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0ARCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI0ARID : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0ARLEN : in std_logic_vector(7 downto 0);
     IFNOCPSCCIAXI0ARLOCK : in std_logic_vector(0 to 0);
     IFNOCPSCCIAXI0ARPROT : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI0ARQOS : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI0ARREGION : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI0ARSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI0ARUSER : in std_logic_vector(17 downto 0);
     IFNOCPSCCIAXI0ARVALID : in std_ulogic;
     IFNOCPSCCIAXI0AWADDR : in std_logic_vector(63 downto 0);
     IFNOCPSCCIAXI0AWBURST : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0AWCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI0AWID : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI0AWLEN : in std_logic_vector(7 downto 0);
     IFNOCPSCCIAXI0AWLOCK : in std_logic_vector(0 to 0);
     IFNOCPSCCIAXI0AWPROT : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI0AWQOS : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI0AWREGION : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI0AWSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI0AWUSER : in std_logic_vector(17 downto 0);
     IFNOCPSCCIAXI0AWVALID : in std_ulogic;
     IFNOCPSCCIAXI0BREADY : in std_ulogic;
     IFNOCPSCCIAXI0RREADY : in std_ulogic;
     IFNOCPSCCIAXI0WDATA : in std_logic_vector(127 downto 0);
     IFNOCPSCCIAXI0WID : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI0WLAST : in std_logic_vector(0 to 0);
     IFNOCPSCCIAXI0WSTRB : in std_logic_vector(15 downto 0);
     IFNOCPSCCIAXI0WUSER : in std_logic_vector(16 downto 0);
     IFNOCPSCCIAXI0WVALID : in std_ulogic;
     IFNOCPSCCIAXI1ARADDR : in std_logic_vector(63 downto 0);
     IFNOCPSCCIAXI1ARBURST : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1ARCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI1ARID : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1ARLEN : in std_logic_vector(7 downto 0);
     IFNOCPSCCIAXI1ARLOCK : in std_logic_vector(0 to 0);
     IFNOCPSCCIAXI1ARPROT : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI1ARQOS : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI1ARREGION : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI1ARSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI1ARUSER : in std_logic_vector(17 downto 0);
     IFNOCPSCCIAXI1ARVALID : in std_ulogic;
     IFNOCPSCCIAXI1AWADDR : in std_logic_vector(63 downto 0);
     IFNOCPSCCIAXI1AWBURST : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1AWCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI1AWID : in std_logic_vector(1 downto 0);
     IFNOCPSCCIAXI1AWLEN : in std_logic_vector(7 downto 0);
     IFNOCPSCCIAXI1AWLOCK : in std_logic_vector(0 to 0);
     IFNOCPSCCIAXI1AWPROT : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI1AWQOS : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI1AWREGION : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI1AWSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSCCIAXI1AWUSER : in std_logic_vector(17 downto 0);
     IFNOCPSCCIAXI1AWVALID : in std_ulogic;
     IFNOCPSCCIAXI1BREADY : in std_ulogic;
     IFNOCPSCCIAXI1RREADY : in std_ulogic;
     IFNOCPSCCIAXI1WDATA : in std_logic_vector(127 downto 0);
     IFNOCPSCCIAXI1WID : in std_logic_vector(3 downto 0);
     IFNOCPSCCIAXI1WLAST : in std_logic_vector(0 to 0);
     IFNOCPSCCIAXI1WSTRB : in std_logic_vector(15 downto 0);
     IFNOCPSCCIAXI1WUSER : in std_logic_vector(16 downto 0);
     IFNOCPSCCIAXI1WVALID : in std_ulogic;
     IFNOCPSNCIAXI0ARADDR : in std_logic_vector(63 downto 0);
     IFNOCPSNCIAXI0ARBURST : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0ARCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI0ARID : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0ARLEN : in std_logic_vector(7 downto 0);
     IFNOCPSNCIAXI0ARLOCK : in std_logic_vector(0 to 0);
     IFNOCPSNCIAXI0ARPROT : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI0ARQOS : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI0ARREGION : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI0ARSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI0ARUSER : in std_logic_vector(17 downto 0);
     IFNOCPSNCIAXI0ARVALID : in std_ulogic;
     IFNOCPSNCIAXI0AWADDR : in std_logic_vector(63 downto 0);
     IFNOCPSNCIAXI0AWBURST : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0AWCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI0AWID : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI0AWLEN : in std_logic_vector(7 downto 0);
     IFNOCPSNCIAXI0AWLOCK : in std_logic_vector(0 to 0);
     IFNOCPSNCIAXI0AWPROT : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI0AWQOS : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI0AWREGION : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI0AWSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI0AWUSER : in std_logic_vector(17 downto 0);
     IFNOCPSNCIAXI0AWVALID : in std_ulogic;
     IFNOCPSNCIAXI0BREADY : in std_ulogic;
     IFNOCPSNCIAXI0RREADY : in std_ulogic;
     IFNOCPSNCIAXI0WDATA : in std_logic_vector(127 downto 0);
     IFNOCPSNCIAXI0WID : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI0WLAST : in std_logic_vector(0 to 0);
     IFNOCPSNCIAXI0WSTRB : in std_logic_vector(15 downto 0);
     IFNOCPSNCIAXI0WUSER : in std_logic_vector(16 downto 0);
     IFNOCPSNCIAXI0WVALID : in std_ulogic;
     IFNOCPSNCIAXI1ARADDR : in std_logic_vector(63 downto 0);
     IFNOCPSNCIAXI1ARBURST : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1ARCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI1ARID : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1ARLEN : in std_logic_vector(7 downto 0);
     IFNOCPSNCIAXI1ARLOCK : in std_logic_vector(0 to 0);
     IFNOCPSNCIAXI1ARPROT : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI1ARQOS : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI1ARREGION : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI1ARSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI1ARUSER : in std_logic_vector(17 downto 0);
     IFNOCPSNCIAXI1ARVALID : in std_ulogic;
     IFNOCPSNCIAXI1AWADDR : in std_logic_vector(63 downto 0);
     IFNOCPSNCIAXI1AWBURST : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1AWCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI1AWID : in std_logic_vector(1 downto 0);
     IFNOCPSNCIAXI1AWLEN : in std_logic_vector(7 downto 0);
     IFNOCPSNCIAXI1AWLOCK : in std_logic_vector(0 to 0);
     IFNOCPSNCIAXI1AWPROT : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI1AWQOS : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI1AWREGION : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI1AWSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSNCIAXI1AWUSER : in std_logic_vector(17 downto 0);
     IFNOCPSNCIAXI1AWVALID : in std_ulogic;
     IFNOCPSNCIAXI1BREADY : in std_ulogic;
     IFNOCPSNCIAXI1RREADY : in std_ulogic;
     IFNOCPSNCIAXI1WDATA : in std_logic_vector(127 downto 0);
     IFNOCPSNCIAXI1WID : in std_logic_vector(3 downto 0);
     IFNOCPSNCIAXI1WLAST : in std_logic_vector(0 to 0);
     IFNOCPSNCIAXI1WSTRB : in std_logic_vector(15 downto 0);
     IFNOCPSNCIAXI1WUSER : in std_logic_vector(16 downto 0);
     IFNOCPSNCIAXI1WVALID : in std_ulogic;
     IFNOCPSPCIAXI0ARADDR : in std_logic_vector(63 downto 0);
     IFNOCPSPCIAXI0ARBURST : in std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0ARCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSPCIAXI0ARID : in std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0ARLEN : in std_logic_vector(7 downto 0);
     IFNOCPSPCIAXI0ARLOCK : in std_logic_vector(0 to 0);
     IFNOCPSPCIAXI0ARPROT : in std_logic_vector(2 downto 0);
     IFNOCPSPCIAXI0ARQOS : in std_logic_vector(3 downto 0);
     IFNOCPSPCIAXI0ARREGION : in std_logic_vector(3 downto 0);
     IFNOCPSPCIAXI0ARSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSPCIAXI0ARUSER : in std_logic_vector(17 downto 0);
     IFNOCPSPCIAXI0ARVALID : in std_ulogic;
     IFNOCPSPCIAXI0AWADDR : in std_logic_vector(63 downto 0);
     IFNOCPSPCIAXI0AWBURST : in std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0AWCACHE : in std_logic_vector(3 downto 0);
     IFNOCPSPCIAXI0AWID : in std_logic_vector(1 downto 0);
     IFNOCPSPCIAXI0AWLEN : in std_logic_vector(7 downto 0);
     IFNOCPSPCIAXI0AWLOCK : in std_logic_vector(0 to 0);
     IFNOCPSPCIAXI0AWPROT : in std_logic_vector(2 downto 0);
     IFNOCPSPCIAXI0AWQOS : in std_logic_vector(3 downto 0);
     IFNOCPSPCIAXI0AWREGION : in std_logic_vector(3 downto 0);
     IFNOCPSPCIAXI0AWSIZE : in std_logic_vector(2 downto 0);
     IFNOCPSPCIAXI0AWUSER : in std_logic_vector(17 downto 0);
     IFNOCPSPCIAXI0AWVALID : in std_ulogic;
     IFNOCPSPCIAXI0BREADY : in std_ulogic;
     IFNOCPSPCIAXI0RREADY : in std_ulogic;
     IFNOCPSPCIAXI0WDATA : in std_logic_vector(127 downto 0);
     IFNOCPSPCIAXI0WID : in std_logic_vector(3 downto 0);
     IFNOCPSPCIAXI0WLAST : in std_logic_vector(0 to 0);
     IFNOCPSPCIAXI0WSTRB : in std_logic_vector(15 downto 0);
     IFNOCPSPCIAXI0WUSER : in std_logic_vector(16 downto 0);
     IFNOCPSPCIAXI0WVALID : in std_ulogic;
     IFPMCNOCAXI0ARREADY : in std_ulogic;
     IFPMCNOCAXI0AWREADY : in std_ulogic;
     IFPMCNOCAXI0BID : in std_logic_vector(15 downto 0);
     IFPMCNOCAXI0BRESP : in std_logic_vector(1 downto 0);
     IFPMCNOCAXI0BUSER : in std_logic_vector(15 downto 0);
     IFPMCNOCAXI0BVALID : in std_ulogic;
     IFPMCNOCAXI0RDATA : in std_logic_vector(127 downto 0);
     IFPMCNOCAXI0RID : in std_logic_vector(15 downto 0);
     IFPMCNOCAXI0RLAST : in std_logic_vector(0 to 0);
     IFPMCNOCAXI0RRESP : in std_logic_vector(1 downto 0);
     IFPMCNOCAXI0RUSER : in std_logic_vector(16 downto 0);
     IFPMCNOCAXI0RVALID : in std_ulogic;
     IFPMCNOCAXI0WREADY : in std_ulogic;
     IFPSCPMCFGAXIARREADY : in std_ulogic;
     IFPSCPMCFGAXIAWREADY : in std_ulogic;
     IFPSCPMCFGAXIBID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIBRESP : in std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIBUSER : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIBVALID : in std_ulogic;
     IFPSCPMCFGAXIRDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCFGAXIRID : in std_logic_vector(15 downto 0);
     IFPSCPMCFGAXIRLAST : in std_logic_vector(0 to 0);
     IFPSCPMCFGAXIRRESP : in std_logic_vector(1 downto 0);
     IFPSCPMCFGAXIRUSER : in std_logic_vector(5 downto 0);
     IFPSCPMCFGAXIRVALID : in std_ulogic;
     IFPSCPMCFGAXIWREADY : in std_ulogic;
     IFPSCPMCHANNEL0XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL0XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL0XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL0XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL0XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL0XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL0XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL0XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL10XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL10XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL10XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL10XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL10XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL10XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL10XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL10XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL11XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL11XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL11XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL11XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL11XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL11XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL11XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL11XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL12XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL12XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL12XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL12XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL12XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL12XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL12XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL12XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL13XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL13XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL13XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL13XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL13XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL13XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL13XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL13XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL14XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL14XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL14XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL14XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL14XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL14XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL14XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL14XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL15XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL15XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL15XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL15XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL15XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL15XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL15XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL15XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL1XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL1XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL1XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL1XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL1XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL1XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL1XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL1XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL2XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL2XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL2XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL2XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL2XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL2XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL2XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL2XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL3XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL3XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL3XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL3XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL3XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL3XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL3XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL3XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL4XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL4XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL4XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL4XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL4XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL4XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL4XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL4XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL5XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL5XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL5XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL5XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL5XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL5XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL5XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL5XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL6XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL6XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL6XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL6XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL6XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL6XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL6XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL6XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL7XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL7XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL7XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL7XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL7XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL7XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL7XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL7XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL8XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL8XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL8XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL8XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL8XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL8XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL8XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL8XPIPERXVALID : in std_ulogic;
     IFPSCPMCHANNEL9XPIPEPHYSTATUS : in std_ulogic;
     IFPSCPMCHANNEL9XPIPERXCHARISK : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXDATA : in std_logic_vector(31 downto 0);
     IFPSCPMCHANNEL9XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMCHANNEL9XPIPERXELECIDLE : in std_ulogic;
     IFPSCPMCHANNEL9XPIPERXSTARTBLOCK : in std_ulogic;
     IFPSCPMCHANNEL9XPIPERXSTATUS : in std_logic_vector(2 downto 0);
     IFPSCPMCHANNEL9XPIPERXSYNCHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMCHANNEL9XPIPERXVALID : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL0XPIPERXHEADERVALID : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPERXRESETDONE : in std_ulogic;
     IFPSCPMHSDPCHANNEL0XPIPETXRESETDONE : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL1XPIPERXHEADERVALID : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPERXRESETDONE : in std_ulogic;
     IFPSCPMHSDPCHANNEL1XPIPETXRESETDONE : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXDATAVALID : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXHEADER : in std_logic_vector(1 downto 0);
     IFPSCPMHSDPCHANNEL2XPIPERXHEADERVALID : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPERXRESETDONE : in std_ulogic;
     IFPSCPMHSDPCHANNEL2XPIPETXRESETDONE : in std_ulogic;
     IFPSCPMHSDPLINKXPIPEGTRXOUTCLK : in std_ulogic;
     IFPSCPMINTQUADXPIPEPHYREADYTOBOT : in std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTCE : in std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTCEMASK : in std_logic_vector(3 downto 0);
     IFPSCPMLINK0XPIPEBUFGTDIV : in std_logic_vector(11 downto 0);
     IFPSCPMLINK0XPIPEBUFGTRST : in std_ulogic;
     IFPSCPMLINK0XPIPEBUFGTRSTMASK : in std_logic_vector(3 downto 0);
     IFPSCPMLINK0XPIPEGTOUTCLK : in std_ulogic;
     IFPSCPMLINK0XPIPEPHYREADY : in std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTCE : in std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTCEMASK : in std_logic_vector(3 downto 0);
     IFPSCPMLINK1XPIPEBUFGTDIV : in std_logic_vector(11 downto 0);
     IFPSCPMLINK1XPIPEBUFGTRST : in std_ulogic;
     IFPSCPMLINK1XPIPEBUFGTRSTMASK : in std_logic_vector(3 downto 0);
     IFPSCPMLINK1XPIPEGTOUTCLK : in std_ulogic;
     IFPSCPMLINK1XPIPEPHYREADY : in std_ulogic;
     IFPSCPMPCIEAXIARREADY : in std_ulogic;
     IFPSCPMPCIEAXIAWREADY : in std_ulogic;
     IFPSCPMPCIEAXIBID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIBRESP : in std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIBUSER : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIBVALID : in std_ulogic;
     IFPSCPMPCIEAXIRDATA : in std_logic_vector(127 downto 0);
     IFPSCPMPCIEAXIRID : in std_logic_vector(15 downto 0);
     IFPSCPMPCIEAXIRLAST : in std_logic_vector(0 to 0);
     IFPSCPMPCIEAXIRRESP : in std_logic_vector(1 downto 0);
     IFPSCPMPCIEAXIRUSER : in std_logic_vector(16 downto 0);
     IFPSCPMPCIEAXIRVALID : in std_ulogic;
     IFPSCPMPCIEAXIWREADY : in std_ulogic;
     IFPSCPMPCSRPSRBISRDONE : in std_ulogic;
     IFPSCPMPCSRPSRBISRERR : in std_ulogic;
     IFPSCPMPCSRPSRCALDONE : in std_ulogic;
     IFPSCPMPCSRPSRCALERROR : in std_ulogic;
     IFPSCPMPCSRPSRINCAL : in std_ulogic;
     IFPSCPMPCSRPSRMEMCLRDONE : in std_ulogic;
     IFPSCPMPCSRPSRMEMCLRPASS : in std_ulogic;
     IFPSCPMPCSRPSRSCANCLRDONE : in std_ulogic;
     IFPSCPMPCSRPSRSCANCLRPASS : in std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINREQACK : in std_ulogic;
     IFPSCPMQUAD0XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD0XPIPERXMARGINRESREQ : in std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINREQACK : in std_ulogic;
     IFPSCPMQUAD1XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD1XPIPERXMARGINRESREQ : in std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINREQACK : in std_ulogic;
     IFPSCPMQUAD2XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD2XPIPERXMARGINRESREQ : in std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINREQACK : in std_ulogic;
     IFPSCPMQUAD3XPIPERXMARGINRESCMD : in std_logic_vector(3 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESLANENUM : in std_logic_vector(1 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESPAYLOAD : in std_logic_vector(7 downto 0);
     IFPSCPMQUAD3XPIPERXMARGINRESREQ : in std_ulogic;
     IFPSNOCCCIAXI0ARREADY : in std_ulogic;
     IFPSNOCCCIAXI0AWREADY : in std_ulogic;
     IFPSNOCCCIAXI0BID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI0BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI0BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI0BVALID : in std_ulogic;
     IFPSNOCCCIAXI0RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI0RID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI0RLAST : in std_logic_vector(0 to 0);
     IFPSNOCCCIAXI0RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI0RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI0RVALID : in std_ulogic;
     IFPSNOCCCIAXI0WREADY : in std_ulogic;
     IFPSNOCCCIAXI1ARREADY : in std_ulogic;
     IFPSNOCCCIAXI1AWREADY : in std_ulogic;
     IFPSNOCCCIAXI1BID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI1BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI1BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI1BVALID : in std_ulogic;
     IFPSNOCCCIAXI1RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI1RID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI1RLAST : in std_logic_vector(0 to 0);
     IFPSNOCCCIAXI1RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI1RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI1RVALID : in std_ulogic;
     IFPSNOCCCIAXI1WREADY : in std_ulogic;
     IFPSNOCCCIAXI2ARREADY : in std_ulogic;
     IFPSNOCCCIAXI2AWREADY : in std_ulogic;
     IFPSNOCCCIAXI2BID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI2BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI2BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI2BVALID : in std_ulogic;
     IFPSNOCCCIAXI2RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI2RID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI2RLAST : in std_logic_vector(0 to 0);
     IFPSNOCCCIAXI2RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI2RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI2RVALID : in std_ulogic;
     IFPSNOCCCIAXI2WREADY : in std_ulogic;
     IFPSNOCCCIAXI3ARREADY : in std_ulogic;
     IFPSNOCCCIAXI3AWREADY : in std_ulogic;
     IFPSNOCCCIAXI3BID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI3BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI3BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI3BVALID : in std_ulogic;
     IFPSNOCCCIAXI3RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCCCIAXI3RID : in std_logic_vector(15 downto 0);
     IFPSNOCCCIAXI3RLAST : in std_logic_vector(0 to 0);
     IFPSNOCCCIAXI3RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCCCIAXI3RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCCCIAXI3RVALID : in std_ulogic;
     IFPSNOCCCIAXI3WREADY : in std_ulogic;
     IFPSNOCNCIAXI0ARREADY : in std_ulogic;
     IFPSNOCNCIAXI0AWREADY : in std_ulogic;
     IFPSNOCNCIAXI0BID : in std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI0BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI0BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI0BVALID : in std_ulogic;
     IFPSNOCNCIAXI0RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCNCIAXI0RID : in std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI0RLAST : in std_logic_vector(0 to 0);
     IFPSNOCNCIAXI0RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI0RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCNCIAXI0RVALID : in std_ulogic;
     IFPSNOCNCIAXI0WREADY : in std_ulogic;
     IFPSNOCNCIAXI1ARREADY : in std_ulogic;
     IFPSNOCNCIAXI1AWREADY : in std_ulogic;
     IFPSNOCNCIAXI1BID : in std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI1BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI1BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI1BVALID : in std_ulogic;
     IFPSNOCNCIAXI1RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCNCIAXI1RID : in std_logic_vector(15 downto 0);
     IFPSNOCNCIAXI1RLAST : in std_logic_vector(0 to 0);
     IFPSNOCNCIAXI1RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCNCIAXI1RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCNCIAXI1RVALID : in std_ulogic;
     IFPSNOCNCIAXI1WREADY : in std_ulogic;
     IFPSNOCPCIAXI0ARREADY : in std_ulogic;
     IFPSNOCPCIAXI0AWREADY : in std_ulogic;
     IFPSNOCPCIAXI0BID : in std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI0BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI0BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI0BVALID : in std_ulogic;
     IFPSNOCPCIAXI0RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCPCIAXI0RID : in std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI0RLAST : in std_logic_vector(0 to 0);
     IFPSNOCPCIAXI0RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI0RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCPCIAXI0RVALID : in std_ulogic;
     IFPSNOCPCIAXI0WREADY : in std_ulogic;
     IFPSNOCPCIAXI1ARREADY : in std_ulogic;
     IFPSNOCPCIAXI1AWREADY : in std_ulogic;
     IFPSNOCPCIAXI1BID : in std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI1BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI1BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI1BVALID : in std_ulogic;
     IFPSNOCPCIAXI1RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCPCIAXI1RID : in std_logic_vector(15 downto 0);
     IFPSNOCPCIAXI1RLAST : in std_logic_vector(0 to 0);
     IFPSNOCPCIAXI1RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCPCIAXI1RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCPCIAXI1RVALID : in std_ulogic;
     IFPSNOCPCIAXI1WREADY : in std_ulogic;
     IFPSNOCRPUAXI0ARREADY : in std_ulogic;
     IFPSNOCRPUAXI0AWREADY : in std_ulogic;
     IFPSNOCRPUAXI0BID : in std_logic_vector(15 downto 0);
     IFPSNOCRPUAXI0BRESP : in std_logic_vector(1 downto 0);
     IFPSNOCRPUAXI0BUSER : in std_logic_vector(15 downto 0);
     IFPSNOCRPUAXI0BVALID : in std_ulogic;
     IFPSNOCRPUAXI0RDATA : in std_logic_vector(127 downto 0);
     IFPSNOCRPUAXI0RID : in std_logic_vector(15 downto 0);
     IFPSNOCRPUAXI0RLAST : in std_logic_vector(0 to 0);
     IFPSNOCRPUAXI0RRESP : in std_logic_vector(1 downto 0);
     IFPSNOCRPUAXI0RUSER : in std_logic_vector(16 downto 0);
     IFPSNOCRPUAXI0RVALID : in std_ulogic;
     IFPSNOCRPUAXI0WREADY : in std_ulogic;
     IFPSOCM2APBPRDATA : in std_logic_vector(31 downto 0);
     IFPSOCM2APBPREADY : in std_ulogic;
     IFPSOCM2APBPSLVERR : in std_ulogic;
     IFSYSMONROOTTESTFABRICCLK : in std_ulogic;
     IFSYSMONROOTTESTTESTADCIN : in std_logic_vector(14 downto 0);
     IFSYSMONROOTTESTTESTADCINCLK : in std_ulogic;
     MAXIGP0ACLK : in std_ulogic;
     MAXIGP0ARREADY : in std_ulogic;
     MAXIGP0AWREADY : in std_ulogic;
     MAXIGP0BID : in std_logic_vector(15 downto 0);
     MAXIGP0BRESP : in std_logic_vector(1 downto 0);
     MAXIGP0BVALID : in std_ulogic;
     MAXIGP0RDATA : in std_logic_vector(127 downto 0);
     MAXIGP0RID : in std_logic_vector(15 downto 0);
     MAXIGP0RLAST : in std_ulogic;
     MAXIGP0RRESP : in std_logic_vector(1 downto 0);
     MAXIGP0RVALID : in std_ulogic;
     MAXIGP0WREADY : in std_ulogic;
     MAXIGP2ACLK : in std_ulogic;
     MAXIGP2ARREADY : in std_ulogic;
     MAXIGP2AWREADY : in std_ulogic;
     MAXIGP2BID : in std_logic_vector(15 downto 0);
     MAXIGP2BRESP : in std_logic_vector(1 downto 0);
     MAXIGP2BVALID : in std_ulogic;
     MAXIGP2RDATA : in std_logic_vector(127 downto 0);
     MAXIGP2RID : in std_logic_vector(15 downto 0);
     MAXIGP2RLAST : in std_ulogic;
     MAXIGP2RRESP : in std_logic_vector(1 downto 0);
     MAXIGP2RVALID : in std_ulogic;
     MAXIGP2WREADY : in std_ulogic;
     MJTAGTCK : in std_ulogic;
     MJTAGTDI : in std_ulogic;
     MJTAGTMS : in std_ulogic;
     NFIQ0LPDRPU : in std_ulogic;
     NFIQ1LPDRPU : in std_ulogic;
     NIRQ0LPDRPU : in std_ulogic;
     NIRQ1LPDRPU : in std_ulogic;
     NPIINTERRUPTOUT : in std_logic_vector(23 downto 0);
     PL2ADMACVLD : in std_logic_vector(7 downto 0);
     PL2ADMATACK : in std_logic_vector(7 downto 0);
     PLACECLK : in std_ulogic;
     PLACPINACT : in std_ulogic;
     PLATTESTSELN : in std_ulogic;
     PLCONFIGDONE : in std_ulogic;
     PLFPDAUXREFCLK : in std_ulogic;
     PLFPDSPARE0IN : in std_ulogic;
     PLFPDSPARE1IN : in std_ulogic;
     PLHSDPCLK : in std_ulogic;
     PLHSDPEGRESSTREADY : in std_ulogic;
     PLHSDPINGRESSTDATA : in std_logic_vector(63 downto 0);
     PLHSDPINGRESSTKEEP : in std_logic_vector(7 downto 0);
     PLHSDPINGRESSTLAST : in std_ulogic;
     PLHSDPINGRESSTVALID : in std_ulogic;
     PLLPDAUXREFCLK : in std_ulogic;
     PLLPDPLLTESTOUTSEL : in std_ulogic;
     PLLPDSPARE0IN : in std_ulogic;
     PLLPDSPARE1IN : in std_ulogic;
     PLLPDSPARE2IN : in std_ulogic;
     PLLPDSPARE3IN : in std_ulogic;
     PLLPDSPARE4IN : in std_ulogic;
     PLPMCAUXREFCLK : in std_ulogic;
     PLPMCCSSDTRIG : in std_ulogic;
     PLPMCCSSDTRIGGERN : in std_ulogic;
     PLPMCCTRLTESTAAG : in std_ulogic;
     PLPMCEDTUPDATEN : in std_ulogic;
     PLPMCFPGACLOCKSTOP : in std_logic_vector(3 downto 0);
     PLPMCNTIBUSIN : in std_logic_vector(15 downto 0);
     PLPMCNTISCANCLOCK : in std_ulogic;
     PLPMCNTITESTEN : in std_logic_vector(2 downto 0);
     PLPMCPLLTESTOUTSEL : in std_ulogic;
     PLPMCSCANENN : in std_ulogic;
     PLPMCSCANRESETN : in std_ulogic;
     PLPMCSCANSYNCBYP : in std_ulogic;
     PLPSAFREADY : in std_ulogic;
     PLPSAPUGICFIQ : in std_logic_vector(1 downto 0);
     PLPSAPUGICIRQ : in std_logic_vector(1 downto 0);
     PLPSATBCLK : in std_ulogic;
     PLPSATBYTES : in std_logic_vector(1 downto 0);
     PLPSATDATA : in std_logic_vector(31 downto 0);
     PLPSATID : in std_logic_vector(6 downto 0);
     PLPSATVALID : in std_ulogic;
     PLPSEVENTI : in std_ulogic;
     PLPSIRQ0 : in std_logic_vector(7 downto 0);
     PLPSIRQ1 : in std_logic_vector(7 downto 0);
     PLPSSMMUARADDR : in std_logic_vector(48 downto 0);
     PLPSSMMUARCACHE : in std_logic_vector(3 downto 0);
     PLPSSMMUARID : in std_logic_vector(7 downto 0);
     PLPSSMMUARVALID : in std_ulogic;
     PLPSSMMUAWADDR : in std_logic_vector(48 downto 0);
     PLPSSMMUAWCACHE : in std_logic_vector(3 downto 0);
     PLPSSMMUAWID : in std_logic_vector(7 downto 0);
     PLPSSMMUAWVALID : in std_ulogic;
     PLPSSMMUCLOCK : in std_ulogic;
     PLPSSMMUCOMPRDID : in std_logic_vector(7 downto 0);
     PLPSSMMUCOMPRDVAL : in std_ulogic;
     PLPSSMMUCOMPWRID : in std_logic_vector(7 downto 0);
     PLPSSMMUCOMPWRVAL : in std_ulogic;
     PLPSSMMURNS : in std_ulogic;
     PLPSSMMURSMID : in std_logic_vector(9 downto 0);
     PLPSSMMUWNS : in std_ulogic;
     PLPSSMMUWSMID : in std_logic_vector(9 downto 0);
     PLPSTRACECLK : in std_ulogic;
     PLPSTRIGACK : in std_logic_vector(3 downto 0);
     PLPSTRIGGER : in std_logic_vector(3 downto 0);
     PLSMMUTESTINPUT : in std_ulogic;
     PMCPLGPI : in std_logic_vector(31 downto 0);
     PMCPLIRQ : in std_logic_vector(7 downto 0);
     PMCTPPLCLK : in std_logic_vector(3 downto 0);
     PMCTPPLOEN : in std_logic_vector(37 downto 0);
     PMCTPPLOUT : in std_logic_vector(37 downto 0);
     PMUERRORFROMPL : in std_logic_vector(3 downto 0);
     PMVCAPTURECLKINTIP : in std_ulogic;
     PMVDATAININTIP : in std_ulogic;
     PMVEN1INTIP : in std_ulogic;
     PMVFFCLKINTIP : in std_ulogic;
     PMVIMUXININT : in std_logic_vector(4 downto 0);
     PMVRESETINTIP : in std_ulogic;
     PMVSPAREIN1INTIP : in std_logic_vector(5 downto 0);
     PMVSYNCENBINTIP : in std_ulogic;
     PPU1PLTRIGACKOUT : in std_ulogic;
     PPU1PLTRIGIN : in std_ulogic;
     PSSMMUPLARREADY : in std_ulogic;
     PSSMMUPLAWREADY : in std_ulogic;
     PSSMMUPLBREADY : in std_ulogic;
     PSSMMUPLRREADY : in std_ulogic;
     PSS_PAD_RTCPADI : in std_ulogic;
     RPUEVENTI0 : in std_ulogic;
     RPUEVENTI1 : in std_ulogic;
     RTCPADI : in std_ulogic;
     SACEFPDACREADY : in std_ulogic;
     SACEFPDARADDR : in std_logic_vector(43 downto 0);
     SACEFPDARBAR : in std_logic_vector(1 downto 0);
     SACEFPDARBURST : in std_logic_vector(1 downto 0);
     SACEFPDARCACHE : in std_logic_vector(3 downto 0);
     SACEFPDARDOMAIN : in std_logic_vector(1 downto 0);
     SACEFPDARID : in std_logic_vector(5 downto 0);
     SACEFPDARLEN : in std_logic_vector(7 downto 0);
     SACEFPDARLOCK : in std_ulogic;
     SACEFPDARPROT : in std_logic_vector(2 downto 0);
     SACEFPDARQOS : in std_logic_vector(3 downto 0);
     SACEFPDARREGION : in std_logic_vector(3 downto 0);
     SACEFPDARSIZE : in std_logic_vector(2 downto 0);
     SACEFPDARSNOOP : in std_logic_vector(3 downto 0);
     SACEFPDARUSER : in std_logic_vector(15 downto 0);
     SACEFPDARVALID : in std_ulogic;
     SACEFPDAWADDR : in std_logic_vector(43 downto 0);
     SACEFPDAWBAR : in std_logic_vector(1 downto 0);
     SACEFPDAWBURST : in std_logic_vector(1 downto 0);
     SACEFPDAWCACHE : in std_logic_vector(3 downto 0);
     SACEFPDAWDOMAIN : in std_logic_vector(1 downto 0);
     SACEFPDAWID : in std_logic_vector(5 downto 0);
     SACEFPDAWLEN : in std_logic_vector(7 downto 0);
     SACEFPDAWLOCK : in std_ulogic;
     SACEFPDAWPROT : in std_logic_vector(2 downto 0);
     SACEFPDAWQOS : in std_logic_vector(3 downto 0);
     SACEFPDAWREGION : in std_logic_vector(3 downto 0);
     SACEFPDAWSIZE : in std_logic_vector(2 downto 0);
     SACEFPDAWSNOOP : in std_logic_vector(2 downto 0);
     SACEFPDAWUSER : in std_logic_vector(15 downto 0);
     SACEFPDAWVALID : in std_ulogic;
     SACEFPDBREADY : in std_ulogic;
     SACEFPDCDDATA : in std_logic_vector(127 downto 0);
     SACEFPDCDLAST : in std_ulogic;
     SACEFPDCDVALID : in std_ulogic;
     SACEFPDCRRESP : in std_logic_vector(4 downto 0);
     SACEFPDCRVALID : in std_ulogic;
     SACEFPDRACK : in std_ulogic;
     SACEFPDRREADY : in std_ulogic;
     SACEFPDWACK : in std_ulogic;
     SACEFPDWDATA : in std_logic_vector(127 downto 0);
     SACEFPDWLAST : in std_ulogic;
     SACEFPDWSTRB : in std_logic_vector(15 downto 0);
     SACEFPDWUSER : in std_ulogic;
     SACEFPDWVALID : in std_ulogic;
     SAXIACPACLK : in std_ulogic;
     SAXIACPARADDR : in std_logic_vector(43 downto 0);
     SAXIACPARCACHE : in std_logic_vector(3 downto 0);
     SAXIACPARID : in std_logic_vector(4 downto 0);
     SAXIACPARLEN : in std_logic_vector(7 downto 0);
     SAXIACPARPROT : in std_logic_vector(2 downto 0);
     SAXIACPARUSER : in std_logic_vector(1 downto 0);
     SAXIACPARVALID : in std_ulogic;
     SAXIACPAWADDR : in std_logic_vector(43 downto 0);
     SAXIACPAWCACHE : in std_logic_vector(3 downto 0);
     SAXIACPAWID : in std_logic_vector(4 downto 0);
     SAXIACPAWLEN : in std_logic_vector(7 downto 0);
     SAXIACPAWPROT : in std_logic_vector(2 downto 0);
     SAXIACPAWUSER : in std_logic_vector(1 downto 0);
     SAXIACPAWVALID : in std_ulogic;
     SAXIACPBREADY : in std_ulogic;
     SAXIACPRREADY : in std_ulogic;
     SAXIACPWDATA : in std_logic_vector(127 downto 0);
     SAXIACPWLAST : in std_ulogic;
     SAXIACPWSTRB : in std_logic_vector(15 downto 0);
     SAXIACPWVALID : in std_ulogic;
     SAXIGP0ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP0ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP0ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0ARID : in std_logic_vector(5 downto 0);
     SAXIGP0ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP0ARLOCK : in std_ulogic;
     SAXIGP0ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP0ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP0ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP0ARUSER : in std_logic_vector(9 downto 0);
     SAXIGP0ARVALID : in std_ulogic;
     SAXIGP0AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP0AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP0AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0AWID : in std_logic_vector(5 downto 0);
     SAXIGP0AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP0AWLOCK : in std_ulogic;
     SAXIGP0AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP0AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP0AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP0AWUSER : in std_logic_vector(9 downto 0);
     SAXIGP0AWVALID : in std_ulogic;
     SAXIGP0BREADY : in std_ulogic;
     SAXIGP0RCLK : in std_ulogic;
     SAXIGP0RREADY : in std_ulogic;
     SAXIGP0WCLK : in std_ulogic;
     SAXIGP0WDATA : in std_logic_vector(127 downto 0);
     SAXIGP0WLAST : in std_ulogic;
     SAXIGP0WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP0WVALID : in std_ulogic;
     SAXIGP2ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP2ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP2ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP2ARID : in std_logic_vector(5 downto 0);
     SAXIGP2ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP2ARLOCK : in std_ulogic;
     SAXIGP2ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP2ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP2ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP2ARUSER : in std_logic_vector(17 downto 0);
     SAXIGP2ARVALID : in std_ulogic;
     SAXIGP2AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP2AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP2AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP2AWID : in std_logic_vector(5 downto 0);
     SAXIGP2AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP2AWLOCK : in std_ulogic;
     SAXIGP2AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP2AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP2AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP2AWUSER : in std_logic_vector(17 downto 0);
     SAXIGP2AWVALID : in std_ulogic;
     SAXIGP2BREADY : in std_ulogic;
     SAXIGP2RCLK : in std_ulogic;
     SAXIGP2RREADY : in std_ulogic;
     SAXIGP2WCLK : in std_ulogic;
     SAXIGP2WDATA : in std_logic_vector(127 downto 0);
     SAXIGP2WLAST : in std_ulogic;
     SAXIGP2WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP2WVALID : in std_ulogic;
     SAXIGP4ARADDR : in std_logic_vector(48 downto 0);
     SAXIGP4ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP4ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP4ARID : in std_logic_vector(5 downto 0);
     SAXIGP4ARLEN : in std_logic_vector(7 downto 0);
     SAXIGP4ARLOCK : in std_ulogic;
     SAXIGP4ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP4ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP4ARSIZE : in std_logic_vector(2 downto 0);
     SAXIGP4ARUSER : in std_logic_vector(10 downto 0);
     SAXIGP4ARVALID : in std_ulogic;
     SAXIGP4AWADDR : in std_logic_vector(48 downto 0);
     SAXIGP4AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP4AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP4AWID : in std_logic_vector(5 downto 0);
     SAXIGP4AWLEN : in std_logic_vector(7 downto 0);
     SAXIGP4AWLOCK : in std_ulogic;
     SAXIGP4AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP4AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP4AWSIZE : in std_logic_vector(2 downto 0);
     SAXIGP4AWUSER : in std_logic_vector(10 downto 0);
     SAXIGP4AWVALID : in std_ulogic;
     SAXIGP4BREADY : in std_ulogic;
     SAXIGP4RCLK : in std_ulogic;
     SAXIGP4RREADY : in std_ulogic;
     SAXIGP4WCLK : in std_ulogic;
     SAXIGP4WDATA : in std_logic_vector(127 downto 0);
     SAXIGP4WLAST : in std_ulogic;
     SAXIGP4WSTRB : in std_logic_vector(15 downto 0);
     SAXIGP4WVALID : in std_ulogic;
     SCANCHNLINAPUEXT : in std_logic_vector(2 downto 0);
     SCANCHNLINCPU01EXT : in std_logic_vector(3 downto 0);
     SCANCHNLINEXTFPD : in std_logic_vector(9 downto 0);
     SCANCHNLINEXTFPDSMON : in std_ulogic;
     SCANCLKDIVRSTNEXTFPD : in std_ulogic;
     SCANCLKNEXT : in std_ulogic;
     SCANCLKNEXTFPD : in std_ulogic;
     SCANCNTRLCHNLINEXTAPU : in std_ulogic;
     SCANCNTRLCHNLINEXTFPD : in std_ulogic;
     SCANEDTUPDTNEXT : in std_ulogic;
     SCANEDTUPDTNEXTFPD : in std_ulogic;
     SCANENNEXT : in std_ulogic;
     SCANENNEXTFPD : in std_ulogic;
     SCANIOUCHNLINEXT : in std_logic_vector(1 downto 0);
     SCANIOUCNTRLCHNLINEXT : in std_ulogic;
     SCANIOUSPAREINEXT : in std_logic_vector(2 downto 0);
     SCANLPDINTCHNLINEXT : in std_logic_vector(14 downto 0);
     SCANLPDINTCLKDIVRSTNEXT : in std_ulogic;
     SCANLPDINTCNTRLCHNLINEXT : in std_ulogic;
     SCANLPDINTPLLRESETEXT : in std_ulogic;
     SCANLPDINTSPAREINEXT : in std_logic_vector(2 downto 0);
     SCANLPDSMONCHNLINEXT : in std_ulogic;
     SCANMODERSTNEXT : in std_ulogic;
     SCANMODERSTNEXTFPD : in std_ulogic;
     SCANPLLRESETEXTFPD : in std_ulogic;
     SCANRPUCHNLINEXT : in std_logic_vector(1 downto 0);
     SCANRPUCNTRLCHNLINEXT : in std_ulogic;
     SCANRPUSPAREINEXT : in std_logic_vector(2 downto 0);
     SCANSPAREINAPU : in std_logic_vector(2 downto 0);
     SCANSPAREINCPU0 : in std_logic_vector(2 downto 0);
     SCANSPAREINCPU1 : in std_logic_vector(2 downto 0);
     SCANSPAREINEXTFPD : in std_logic_vector(2 downto 0);
     SMMUPLTESTINPUT : in std_ulogic;
     STMEVENT : in std_logic_vector(59 downto 0);
     TESTBSCANACMODE : in std_ulogic;
     TESTBSCANACTEST : in std_ulogic;
     TESTBSCANCLOCKDR : in std_ulogic;
     TESTBSCANENN : in std_ulogic;
     TESTBSCANEXTEST : in std_ulogic;
     TESTBSCANEXTESTSMPL : in std_ulogic;
     TESTBSCANINITMEMORY : in std_ulogic;
     TESTBSCANMODEC : in std_ulogic;
     TESTBSCANRESETTAPB : in std_ulogic;
     TESTBSCANSHIFTDR : in std_ulogic;
     TESTBSCANTDI : in std_ulogic;
     TESTBSCANUPDATEDR : in std_ulogic;
     TESTUSB0FUNCMUX0N : in std_ulogic;
     TESTUSB0SCANMUX0N : in std_ulogic;
     TESTUSB1FUNCMUX0N : in std_ulogic;
     TESTUSB1SCANMUX0N : in std_ulogic;
     TKLBCLKDIVCONTROL : in std_ulogic;
     TKLBLBISTCAPTUREDR : in std_ulogic;
     TKLBLBISTCLK : in std_ulogic;
     TKLBLBISTSHIFTDR : in std_ulogic;
     TKLBLBISTTCK : in std_ulogic;
     TKLBLBISTTESTLOGICRESET : in std_ulogic;
     TKLBLBISTUPDATEDR : in std_ulogic;
     TKLBLPDINTCHANNELIN : in std_logic_vector(9 downto 0);
     TKLBLPDINTCONTROLLERCHAINEN : in std_ulogic;
     TKLBLPDINTCONTROLLERCHAINSCANIN : in std_ulogic;
     TKLBLPDINTCTRLCHAINSI : in std_ulogic;
     TKLBLPDINTEXTESTCHAINSI : in std_ulogic;
     TKLBLPDINTLBISTSHIFTSCANIN : in std_ulogic;
     TKLBLPDINTLBISTTAPINSTDECODE : in std_ulogic;
     TKLBLPDINTMFGPOSTCLOCK : in std_ulogic;
     TKLBLPDINTMFGPOSTRESETN : in std_ulogic;
     TKLBLPDINTPOSTISOLATIONEN : in std_ulogic;
     TKLBLPDINTSPAREINS : in std_logic_vector(1 downto 0);
     TKLBPLLRESET : in std_ulogic;
     TKLBRPUCHANNELIN : in std_logic_vector(9 downto 0);
     TKLBRPUCONTROLLERCHAINEN : in std_ulogic;
     TKLBRPUCONTROLLERCHAINSCANIN : in std_ulogic;
     TKLBRPUCTRLCHAINSI : in std_ulogic;
     TKLBRPUFUNCPOSTCLOCK : in std_ulogic;
     TKLBRPUFUNCPOSTEFUSEENABLE : in std_ulogic;
     TKLBRPUFUNCPOSTRESETN : in std_ulogic;
     TKLBRPULBISTSHIFTSCANIN : in std_ulogic;
     TKLBRPULBISTTAPINSTDECODE : in std_ulogic;
     TKLBRPUMFGPOSTCLOCK : in std_ulogic;
     TKLBRPUMFGPOSTRESETN : in std_ulogic;
     TKLBRPUSPAREINS : in std_logic_vector(1 downto 0);
     TKLBSCANEDTCLK : in std_ulogic;
     TKLBSCANEDTRESET : in std_ulogic;
     TKLBSCANEDTUPDATE : in std_ulogic;
     TKLBSCANRESET : in std_ulogic;
     TKLBSHIFTCLOCK : in std_ulogic;
     TKLBSHIFTENABLE : in std_ulogic;
     TSTRTCCALIBREGIN : in std_logic_vector(20 downto 0);
     TSTRTCCALIBREGWE : in std_ulogic;
     TSTRTCCLK : in std_ulogic;
     TSTRTCDISABLEBATOP : in std_ulogic;
     TSTRTCOSCCNTRLIN : in std_logic_vector(3 downto 0);
     TSTRTCOSCCNTRLWE : in std_ulogic;
     TSTRTCSECRELOAD : in std_ulogic;
     TSTRTCTESTCLOCKSELECTN : in std_ulogic;
     TSTRTCTESTMODEN : in std_ulogic;
     TSTRTCTIMESETREGIN : in std_logic_vector(31 downto 0);
     TSTRTCTIMESETREGWE : in std_ulogic;
     USRTDO : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  PS9 : component is "PRIMITIVE";

----- component PULLDOWN -----
component PULLDOWN
  port (
     O : out std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  PULLDOWN : component is "PRIMITIVE";

----- component PULLUP -----
component PULLUP
  port (
     O : out std_ulogic := 'H'
  );
end component;
attribute BOX_TYPE of
  PULLUP : component is "PRIMITIVE";

----- component PVT_SAS -----
component PVT_SAS
  port (
     ALARM : out std_logic_vector(7 downto 0);
     DATAREADY : out std_ulogic;
     PVALUE : out std_logic_vector(15 downto 0);
     TVALUE : out std_logic_vector(15 downto 0);
     VVALUE : out std_logic_vector(15 downto 0)
  );
end component;
attribute BOX_TYPE of
  PVT_SAS : component is "PRIMITIVE";

----- component RAM128X1D -----
component RAM128X1D
  generic (
     INIT : bit_vector(127 downto 0) := X"00000000000000000000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A : in std_logic_vector(6 downto 0);
     D : in std_ulogic;
     DPRA : in std_logic_vector(6 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM128X1D : component is "PRIMITIVE";

----- component RAM128X1S -----
component RAM128X1S
  generic (
     INIT : bit_vector(127 downto 0) := X"00000000000000000000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     A6 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM128X1S : component is "PRIMITIVE";

----- component RAM256X1D -----
component RAM256X1D
  generic (
     INIT : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A : in std_logic_vector(7 downto 0);
     D : in std_ulogic;
     DPRA : in std_logic_vector(7 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM256X1D : component is "PRIMITIVE";

----- component RAM256X1S -----
component RAM256X1S
  generic (
     INIT : bit_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A : in std_logic_vector(7 downto 0);
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM256X1S : component is "PRIMITIVE";

----- component RAM32M -----
component RAM32M
  generic (
     INIT_A : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_B : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_C : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_D : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DOA : out std_logic_vector (1 downto 0);
     DOB : out std_logic_vector (1 downto 0);
     DOC : out std_logic_vector (1 downto 0);
     DOD : out std_logic_vector (1 downto 0);
     ADDRA : in std_logic_vector(4 downto 0);
     ADDRB : in std_logic_vector(4 downto 0);
     ADDRC : in std_logic_vector(4 downto 0);
     ADDRD : in std_logic_vector(4 downto 0);
     DIA : in std_logic_vector (1 downto 0);
     DIB : in std_logic_vector (1 downto 0);
     DIC : in std_logic_vector (1 downto 0);
     DID : in std_logic_vector (1 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32M : component is "PRIMITIVE";

----- component RAM32M16 -----
component RAM32M16
  generic (
     INIT_A : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_B : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_C : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_D : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_E : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_F : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_G : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_H : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DOA : out std_logic_vector (1 downto 0);
     DOB : out std_logic_vector (1 downto 0);
     DOC : out std_logic_vector (1 downto 0);
     DOD : out std_logic_vector (1 downto 0);
     DOE : out std_logic_vector (1 downto 0);
     DOF : out std_logic_vector (1 downto 0);
     DOG : out std_logic_vector (1 downto 0);
     DOH : out std_logic_vector (1 downto 0);
     ADDRA : in std_logic_vector(4 downto 0);
     ADDRB : in std_logic_vector(4 downto 0);
     ADDRC : in std_logic_vector(4 downto 0);
     ADDRD : in std_logic_vector(4 downto 0);
     ADDRE : in std_logic_vector(4 downto 0);
     ADDRF : in std_logic_vector(4 downto 0);
     ADDRG : in std_logic_vector(4 downto 0);
     ADDRH : in std_logic_vector(4 downto 0);
     DIA : in std_logic_vector (1 downto 0);
     DIB : in std_logic_vector (1 downto 0);
     DIC : in std_logic_vector (1 downto 0);
     DID : in std_logic_vector (1 downto 0);
     DIE : in std_logic_vector (1 downto 0);
     DIF : in std_logic_vector (1 downto 0);
     DIG : in std_logic_vector (1 downto 0);
     DIH : in std_logic_vector (1 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32M16 : component is "PRIMITIVE";

----- component RAM32X16DR8 -----
component RAM32X16DR8
  generic (
     INIT_A : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_B : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_C : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_D : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_E : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_F : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_G : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_H : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DOA : out std_ulogic;
     DOB : out std_ulogic;
     DOC : out std_ulogic;
     DOD : out std_ulogic;
     DOE : out std_ulogic;
     DOF : out std_ulogic;
     DOG : out std_ulogic;
     DOH : out std_logic_vector(1 downto 0);
     ADDRA : in std_logic_vector(5 downto 0);
     ADDRB : in std_logic_vector(5 downto 0);
     ADDRC : in std_logic_vector(5 downto 0);
     ADDRD : in std_logic_vector(5 downto 0);
     ADDRE : in std_logic_vector(5 downto 0);
     ADDRF : in std_logic_vector(5 downto 0);
     ADDRG : in std_logic_vector(5 downto 0);
     ADDRH : in std_logic_vector(4 downto 0);
     DIA : in std_logic_vector(1 downto 0);
     DIB : in std_logic_vector(1 downto 0);
     DIC : in std_logic_vector(1 downto 0);
     DID : in std_logic_vector(1 downto 0);
     DIE : in std_logic_vector(1 downto 0);
     DIF : in std_logic_vector(1 downto 0);
     DIG : in std_logic_vector(1 downto 0);
     DIH : in std_logic_vector(1 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X16DR8 : component is "PRIMITIVE";

----- component RAM32X1D -----
component RAM32X1D
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     DPRA4 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X1D : component is "PRIMITIVE";

----- component RAM32X1S -----
component RAM32X1S
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X1S : component is "PRIMITIVE";

----- component RAM512X1S -----
component RAM512X1S
  generic (
     INIT : std_logic_vector(511 downto 0) := X"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A : in std_logic_vector(8 downto 0);
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM512X1S : component is "PRIMITIVE";

----- component RAM64M -----
component RAM64M
  generic (
     INIT_A : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_B : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_C : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_D : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DOA : out std_ulogic;
     DOB : out std_ulogic;
     DOC : out std_ulogic;
     DOD : out std_ulogic;
     ADDRA : in std_logic_vector(5 downto 0);
     ADDRB : in std_logic_vector(5 downto 0);
     ADDRC : in std_logic_vector(5 downto 0);
     ADDRD : in std_logic_vector(5 downto 0);
     DIA : in std_ulogic;
     DIB : in std_ulogic;
     DIC : in std_ulogic;
     DID : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64M : component is "PRIMITIVE";

----- component RAM64M8 -----
component RAM64M8
  generic (
     INIT_A : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_B : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_C : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_D : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_E : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_F : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_G : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_H : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DOA : out std_ulogic;
     DOB : out std_ulogic;
     DOC : out std_ulogic;
     DOD : out std_ulogic;
     DOE : out std_ulogic;
     DOF : out std_ulogic;
     DOG : out std_ulogic;
     DOH : out std_ulogic;
     ADDRA : in std_logic_vector(5 downto 0);
     ADDRB : in std_logic_vector(5 downto 0);
     ADDRC : in std_logic_vector(5 downto 0);
     ADDRD : in std_logic_vector(5 downto 0);
     ADDRE : in std_logic_vector(5 downto 0);
     ADDRF : in std_logic_vector(5 downto 0);
     ADDRG : in std_logic_vector(5 downto 0);
     ADDRH : in std_logic_vector(5 downto 0);
     DIA : in std_ulogic;
     DIB : in std_ulogic;
     DIC : in std_ulogic;
     DID : in std_ulogic;
     DIE : in std_ulogic;
     DIF : in std_ulogic;
     DIG : in std_ulogic;
     DIH : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64M8 : component is "PRIMITIVE";

----- component RAM64X1D -----
component RAM64X1D
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     DPRA4 : in std_ulogic;
     DPRA5 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64X1D : component is "PRIMITIVE";

----- component RAM64X1S -----
component RAM64X1S
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64X1S : component is "PRIMITIVE";

----- component RAM64X8SW -----
component RAM64X8SW
  generic (
     INIT_A : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_B : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_C : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_D : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_E : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_F : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_G : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_H : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : bit := '0'
  );
  port (
     O : out std_logic_vector(7 downto 0);
     A : in std_logic_vector(5 downto 0);
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic;
     WSEL : in std_logic_vector(2 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAM64X8SW : component is "PRIMITIVE";

----- component RAMB18E1 -----
component RAMB18E1
  generic (
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"00000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : bit := '0';
     IS_CLKBWRCLK_INVERTED : bit := '0';
     IS_ENARDEN_INVERTED : bit := '0';
     IS_ENBWREN_INVERTED : bit := '0';
     IS_RSTRAMARSTRAM_INVERTED : bit := '0';
     IS_RSTRAMB_INVERTED : bit := '0';
     IS_RSTREGARSTREG_INVERTED : bit := '0';
     IS_RSTREGB_INVERTED : bit := '0';
     RAM_MODE : string := "TDP";
     RDADDR_COLLISION_HWCONFIG : string := "DELAYED_WRITE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_DEVICE : string := "7SERIES";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     DOADO : out std_logic_vector(15 downto 0);
     DOBDO : out std_logic_vector(15 downto 0);
     DOPADOP : out std_logic_vector(1 downto 0);
     DOPBDOP : out std_logic_vector(1 downto 0);
     ADDRARDADDR : in std_logic_vector(13 downto 0);
     ADDRBWRADDR : in std_logic_vector(13 downto 0);
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DIADI : in std_logic_vector(15 downto 0);
     DIBDI : in std_logic_vector(15 downto 0);
     DIPADIP : in std_logic_vector(1 downto 0);
     DIPBDIP : in std_logic_vector(1 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEBWE : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB18E1 : component is "PRIMITIVE";

----- component RAMB18E2 -----
component RAMB18E2
  generic (
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     ENADDRENA : string := "FALSE";
     ENADDRENB : string := "FALSE";
     INITP_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : std_logic_vector (17 downto 0) := "00" & X"0000";
     INIT_B : std_logic_vector (17 downto 0) := "00" & X"0000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : bit := '0';
     IS_CLKBWRCLK_INVERTED : bit := '0';
     IS_ENARDEN_INVERTED : bit := '0';
     IS_ENBWREN_INVERTED : bit := '0';
     IS_RSTRAMARSTRAM_INVERTED : bit := '0';
     IS_RSTRAMB_INVERTED : bit := '0';
     IS_RSTREGARSTREG_INVERTED : bit := '0';
     IS_RSTREGB_INVERTED : bit := '0';
     RDADDRCHANGEA : string := "FALSE";
     RDADDRCHANGEB : string := "FALSE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector (17 downto 0) := "00" & X"0000";
     SRVAL_B : std_logic_vector (17 downto 0) := "00" & X"0000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASDOUTA : out std_logic_vector(15 downto 0);
     CASDOUTB : out std_logic_vector(15 downto 0);
     CASDOUTPA : out std_logic_vector(1 downto 0);
     CASDOUTPB : out std_logic_vector(1 downto 0);
     DOUTADOUT : out std_logic_vector(15 downto 0);
     DOUTBDOUT : out std_logic_vector(15 downto 0);
     DOUTPADOUTP : out std_logic_vector(1 downto 0);
     DOUTPBDOUTP : out std_logic_vector(1 downto 0);
     ADDRARDADDR : in std_logic_vector(13 downto 0);
     ADDRBWRADDR : in std_logic_vector(13 downto 0);
     ADDRENA : in std_ulogic;
     ADDRENB : in std_ulogic;
     CASDIMUXA : in std_ulogic;
     CASDIMUXB : in std_ulogic;
     CASDINA : in std_logic_vector(15 downto 0);
     CASDINB : in std_logic_vector(15 downto 0);
     CASDINPA : in std_logic_vector(1 downto 0);
     CASDINPB : in std_logic_vector(1 downto 0);
     CASDOMUXA : in std_ulogic;
     CASDOMUXB : in std_ulogic;
     CASDOMUXEN_A : in std_ulogic;
     CASDOMUXEN_B : in std_ulogic;
     CASOREGIMUXA : in std_ulogic;
     CASOREGIMUXB : in std_ulogic;
     CASOREGIMUXEN_A : in std_ulogic;
     CASOREGIMUXEN_B : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DINADIN : in std_logic_vector(15 downto 0);
     DINBDIN : in std_logic_vector(15 downto 0);
     DINPADINP : in std_logic_vector(1 downto 0);
     DINPBDINP : in std_logic_vector(1 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     SLEEP : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEBWE : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB18E2 : component is "PRIMITIVE";

----- component RAMB18E5 -----
component RAMB18E5
  generic (
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     INITP_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     IS_ARST_A_INVERTED : bit := '0';
     IS_ARST_B_INVERTED : bit := '0';
     IS_CLKARDCLK_INVERTED : bit := '0';
     IS_CLKBWRCLK_INVERTED : bit := '0';
     IS_ENARDEN_INVERTED : bit := '0';
     IS_ENBWREN_INVERTED : bit := '0';
     IS_RSTRAMARSTRAM_INVERTED : bit := '0';
     IS_RSTRAMB_INVERTED : bit := '0';
     IS_RSTREGARSTREG_INVERTED : bit := '0';
     IS_RSTREGB_INVERTED : bit := '0';
     PR_SAVE_DATA : string := "FALSE";
     READ_WIDTH_A : integer := 36;
     READ_WIDTH_B : integer := 18;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector(17 downto 0) := "00" & X"0000";
     SRVAL_B : std_logic_vector(17 downto 0) := "00" & X"0000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 18;
     WRITE_WIDTH_B : integer := 36
  );
  port (
     CASDOUTA : out std_logic_vector(15 downto 0);
     CASDOUTB : out std_logic_vector(15 downto 0);
     CASDOUTPA : out std_logic_vector(1 downto 0);
     CASDOUTPB : out std_logic_vector(1 downto 0);
     DOUTADOUT : out std_logic_vector(15 downto 0);
     DOUTBDOUT : out std_logic_vector(15 downto 0);
     DOUTPADOUTP : out std_logic_vector(1 downto 0);
     DOUTPBDOUTP : out std_logic_vector(1 downto 0);
     ADDRARDADDR : in std_logic_vector(10 downto 0);
     ADDRBWRADDR : in std_logic_vector(10 downto 0);
     ARST_A : in std_ulogic;
     ARST_B : in std_ulogic;
     CASDINA : in std_logic_vector(15 downto 0);
     CASDINB : in std_logic_vector(15 downto 0);
     CASDINPA : in std_logic_vector(1 downto 0);
     CASDINPB : in std_logic_vector(1 downto 0);
     CASDOMUXA : in std_ulogic;
     CASDOMUXB : in std_ulogic;
     CASDOMUXEN_A : in std_ulogic;
     CASDOMUXEN_B : in std_ulogic;
     CASOREGIMUXA : in std_ulogic;
     CASOREGIMUXB : in std_ulogic;
     CASOREGIMUXEN_A : in std_ulogic;
     CASOREGIMUXEN_B : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DINADIN : in std_logic_vector(15 downto 0);
     DINBDIN : in std_logic_vector(15 downto 0);
     DINPADINP : in std_logic_vector(1 downto 0);
     DINPBDINP : in std_logic_vector(1 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     SLEEP : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEBWE : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB18E5 : component is "PRIMITIVE";

----- component RAMB18E5_INT -----
component RAMB18E5_INT
  generic (
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     INITP_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     IS_ARST_A_INVERTED : bit := '0';
     IS_ARST_B_INVERTED : bit := '0';
     IS_CLKARDCLK_INVERTED : bit := '0';
     IS_CLKBWRCLK_INVERTED : bit := '0';
     IS_ENARDEN_INVERTED : bit := '0';
     IS_ENBWREN_INVERTED : bit := '0';
     IS_RSTRAMARSTRAM_INVERTED : bit := '0';
     IS_RSTRAMB_INVERTED : bit := '0';
     IS_RSTREGARSTREG_INVERTED : bit := '0';
     IS_RSTREGB_INVERTED : bit := '0';
     PR_SAVE_DATA : string := "FALSE";
     READ_WIDTH_A : integer := 36;
     READ_WIDTH_B : integer := 18;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector(17 downto 0) := "00" & X"0000";
     SRVAL_B : std_logic_vector(17 downto 0) := "00" & X"0000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 18;
     WRITE_WIDTH_B : integer := 36
  );
  port (
     CASDOUTA : out std_logic_vector(15 downto 0);
     CASDOUTB : out std_logic_vector(15 downto 0);
     CASDOUTPA : out std_logic_vector(1 downto 0);
     CASDOUTPB : out std_logic_vector(1 downto 0);
     DOUTADOUT : out std_logic_vector(15 downto 0);
     DOUTBDOUT : out std_logic_vector(15 downto 0);
     DOUTPADOUTP : out std_logic_vector(1 downto 0);
     DOUTPBDOUTP : out std_logic_vector(1 downto 0);
     ADDRARDADDR : in std_logic_vector(10 downto 0);
     ADDRBWRADDR : in std_logic_vector(10 downto 0);
     ARST_A : in std_ulogic;
     ARST_B : in std_ulogic;
     CASDINA : in std_logic_vector(15 downto 0);
     CASDINB : in std_logic_vector(15 downto 0);
     CASDINPA : in std_logic_vector(1 downto 0);
     CASDINPB : in std_logic_vector(1 downto 0);
     CASDOMUXA : in std_ulogic;
     CASDOMUXB : in std_ulogic;
     CASDOMUXEN_A : in std_ulogic;
     CASDOMUXEN_B : in std_ulogic;
     CASOREGIMUXA : in std_ulogic;
     CASOREGIMUXB : in std_ulogic;
     CASOREGIMUXEN_A : in std_ulogic;
     CASOREGIMUXEN_B : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DINADIN : in std_logic_vector(15 downto 0);
     DINBDIN : in std_logic_vector(15 downto 0);
     DINPADINP : in std_logic_vector(1 downto 0);
     DINPBDINP : in std_logic_vector(1 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     SLEEP : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEBWE : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB18E5_INT : component is "PRIMITIVE";

----- component RAMB36E1 -----
component RAMB36E1
  generic (
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     EN_ECC_READ : boolean := FALSE;
     EN_ECC_WRITE : boolean := FALSE;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : bit := '0';
     IS_CLKBWRCLK_INVERTED : bit := '0';
     IS_ENARDEN_INVERTED : bit := '0';
     IS_ENBWREN_INVERTED : bit := '0';
     IS_RSTRAMARSTRAM_INVERTED : bit := '0';
     IS_RSTRAMB_INVERTED : bit := '0';
     IS_RSTREGARSTREG_INVERTED : bit := '0';
     IS_RSTREGB_INVERTED : bit := '0';
     RAM_EXTENSION_A : string := "NONE";
     RAM_EXTENSION_B : string := "NONE";
     RAM_MODE : string := "TDP";
     RDADDR_COLLISION_HWCONFIG : string := "DELAYED_WRITE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_DEVICE : string := "7SERIES";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASCADEOUTA : out std_ulogic;
     CASCADEOUTB : out std_ulogic;
     DBITERR : out std_ulogic;
     DOADO : out std_logic_vector(31 downto 0);
     DOBDO : out std_logic_vector(31 downto 0);
     DOPADOP : out std_logic_vector(3 downto 0);
     DOPBDOP : out std_logic_vector(3 downto 0);
     ECCPARITY : out std_logic_vector(7 downto 0);
     RDADDRECC : out std_logic_vector(8 downto 0);
     SBITERR : out std_ulogic;
     ADDRARDADDR : in std_logic_vector(15 downto 0);
     ADDRBWRADDR : in std_logic_vector(15 downto 0);
     CASCADEINA : in std_ulogic;
     CASCADEINB : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DIADI : in std_logic_vector(31 downto 0);
     DIBDI : in std_logic_vector(31 downto 0);
     DIPADIP : in std_logic_vector(3 downto 0);
     DIPBDIP : in std_logic_vector(3 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEBWE : in std_logic_vector(7 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB36E1 : component is "PRIMITIVE";

----- component RAMB36E2 -----
component RAMB36E2
  generic (
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     ENADDRENA : string := "FALSE";
     ENADDRENB : string := "FALSE";
     EN_ECC_PIPE : string := "FALSE";
     EN_ECC_READ : string := "FALSE";
     EN_ECC_WRITE : string := "FALSE";
     INITP_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : std_logic_vector (35 downto 0) := X"000000000";
     INIT_B : std_logic_vector (35 downto 0) := X"000000000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : bit := '0';
     IS_CLKBWRCLK_INVERTED : bit := '0';
     IS_ENARDEN_INVERTED : bit := '0';
     IS_ENBWREN_INVERTED : bit := '0';
     IS_RSTRAMARSTRAM_INVERTED : bit := '0';
     IS_RSTRAMB_INVERTED : bit := '0';
     IS_RSTREGARSTREG_INVERTED : bit := '0';
     IS_RSTREGB_INVERTED : bit := '0';
     RDADDRCHANGEA : string := "FALSE";
     RDADDRCHANGEB : string := "FALSE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector (35 downto 0) := X"000000000";
     SRVAL_B : std_logic_vector (35 downto 0) := X"000000000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASDOUTA : out std_logic_vector(31 downto 0);
     CASDOUTB : out std_logic_vector(31 downto 0);
     CASDOUTPA : out std_logic_vector(3 downto 0);
     CASDOUTPB : out std_logic_vector(3 downto 0);
     CASOUTDBITERR : out std_ulogic;
     CASOUTSBITERR : out std_ulogic;
     DBITERR : out std_ulogic;
     DOUTADOUT : out std_logic_vector(31 downto 0);
     DOUTBDOUT : out std_logic_vector(31 downto 0);
     DOUTPADOUTP : out std_logic_vector(3 downto 0);
     DOUTPBDOUTP : out std_logic_vector(3 downto 0);
     ECCPARITY : out std_logic_vector(7 downto 0);
     RDADDRECC : out std_logic_vector(8 downto 0);
     SBITERR : out std_ulogic;
     ADDRARDADDR : in std_logic_vector(14 downto 0);
     ADDRBWRADDR : in std_logic_vector(14 downto 0);
     ADDRENA : in std_ulogic;
     ADDRENB : in std_ulogic;
     CASDIMUXA : in std_ulogic;
     CASDIMUXB : in std_ulogic;
     CASDINA : in std_logic_vector(31 downto 0);
     CASDINB : in std_logic_vector(31 downto 0);
     CASDINPA : in std_logic_vector(3 downto 0);
     CASDINPB : in std_logic_vector(3 downto 0);
     CASDOMUXA : in std_ulogic;
     CASDOMUXB : in std_ulogic;
     CASDOMUXEN_A : in std_ulogic;
     CASDOMUXEN_B : in std_ulogic;
     CASINDBITERR : in std_ulogic;
     CASINSBITERR : in std_ulogic;
     CASOREGIMUXA : in std_ulogic;
     CASOREGIMUXB : in std_ulogic;
     CASOREGIMUXEN_A : in std_ulogic;
     CASOREGIMUXEN_B : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DINADIN : in std_logic_vector(31 downto 0);
     DINBDIN : in std_logic_vector(31 downto 0);
     DINPADINP : in std_logic_vector(3 downto 0);
     DINPBDINP : in std_logic_vector(3 downto 0);
     ECCPIPECE : in std_ulogic;
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     SLEEP : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEBWE : in std_logic_vector(7 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB36E2 : component is "PRIMITIVE";

----- component RAMB36E5 -----
component RAMB36E5
  generic (
     BWE_MODE_B : string := "PARITY_INTERLEAVED";
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     EN_ECC_PIPE : string := "FALSE";
     EN_ECC_READ : string := "FALSE";
     EN_ECC_WRITE : string := "FALSE";
     INITP_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     IS_ARST_A_INVERTED : bit := '0';
     IS_ARST_B_INVERTED : bit := '0';
     IS_CLKARDCLK_INVERTED : bit := '0';
     IS_CLKBWRCLK_INVERTED : bit := '0';
     IS_ENARDEN_INVERTED : bit := '0';
     IS_ENBWREN_INVERTED : bit := '0';
     IS_RSTRAMARSTRAM_INVERTED : bit := '0';
     IS_RSTRAMB_INVERTED : bit := '0';
     IS_RSTREGARSTREG_INVERTED : bit := '0';
     IS_RSTREGB_INVERTED : bit := '0';
     PR_SAVE_DATA : string := "FALSE";
     READ_WIDTH_A : integer := 72;
     READ_WIDTH_B : integer := 36;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector(35 downto 0) := X"000000000";
     SRVAL_B : std_logic_vector(35 downto 0) := X"000000000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 36;
     WRITE_WIDTH_B : integer := 72
  );
  port (
     CASDOUTA : out std_logic_vector(31 downto 0);
     CASDOUTB : out std_logic_vector(31 downto 0);
     CASDOUTPA : out std_logic_vector(3 downto 0);
     CASDOUTPB : out std_logic_vector(3 downto 0);
     CASOUTDBITERR : out std_ulogic;
     CASOUTSBITERR : out std_ulogic;
     DBITERR : out std_ulogic;
     DOUTADOUT : out std_logic_vector(31 downto 0);
     DOUTBDOUT : out std_logic_vector(31 downto 0);
     DOUTPADOUTP : out std_logic_vector(3 downto 0);
     DOUTPBDOUTP : out std_logic_vector(3 downto 0);
     SBITERR : out std_ulogic;
     ADDRARDADDR : in std_logic_vector(11 downto 0);
     ADDRBWRADDR : in std_logic_vector(11 downto 0);
     ARST_A : in std_ulogic;
     ARST_B : in std_ulogic;
     CASDINA : in std_logic_vector(31 downto 0);
     CASDINB : in std_logic_vector(31 downto 0);
     CASDINPA : in std_logic_vector(3 downto 0);
     CASDINPB : in std_logic_vector(3 downto 0);
     CASDOMUXA : in std_ulogic;
     CASDOMUXB : in std_ulogic;
     CASDOMUXEN_A : in std_ulogic;
     CASDOMUXEN_B : in std_ulogic;
     CASINDBITERR : in std_ulogic;
     CASINSBITERR : in std_ulogic;
     CASOREGIMUXA : in std_ulogic;
     CASOREGIMUXB : in std_ulogic;
     CASOREGIMUXEN_A : in std_ulogic;
     CASOREGIMUXEN_B : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DINADIN : in std_logic_vector(31 downto 0);
     DINBDIN : in std_logic_vector(31 downto 0);
     DINPADINP : in std_logic_vector(3 downto 0);
     DINPBDINP : in std_logic_vector(3 downto 0);
     ECCPIPECE : in std_ulogic;
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     SLEEP : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEBWE : in std_logic_vector(8 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB36E5 : component is "PRIMITIVE";

----- component RAMB36E5_INT -----
component RAMB36E5_INT
  generic (
     BWE_MODE_B : string := "PARITY_INTERLEAVED";
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     EN_ECC_PIPE : string := "FALSE";
     EN_ECC_READ : string := "FALSE";
     EN_ECC_WRITE : string := "FALSE";
     INITP_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     IS_ARST_A_L_INVERTED : bit := '0';
     IS_ARST_A_U_INVERTED : bit := '0';
     IS_ARST_B_L_INVERTED : bit := '0';
     IS_ARST_B_U_INVERTED : bit := '0';
     IS_CLKARDCLKL_INVERTED : bit := '0';
     IS_CLKARDCLKU_INVERTED : bit := '0';
     IS_CLKBWRCLKL_INVERTED : bit := '0';
     IS_CLKBWRCLKU_INVERTED : bit := '0';
     IS_ENARDENL_INVERTED : bit := '0';
     IS_ENARDENU_INVERTED : bit := '0';
     IS_ENBWRENL_INVERTED : bit := '0';
     IS_ENBWRENU_INVERTED : bit := '0';
     IS_RSTRAMARSTRAML_INVERTED : bit := '0';
     IS_RSTRAMARSTRAMU_INVERTED : bit := '0';
     IS_RSTRAMBL_INVERTED : bit := '0';
     IS_RSTRAMBU_INVERTED : bit := '0';
     IS_RSTREGARSTREGL_INVERTED : bit := '0';
     IS_RSTREGARSTREGU_INVERTED : bit := '0';
     IS_RSTREGBL_INVERTED : bit := '0';
     IS_RSTREGBU_INVERTED : bit := '0';
     PR_SAVE_DATA : string := "FALSE";
     READ_WIDTH_A : integer := 72;
     READ_WIDTH_B : integer := 36;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector(35 downto 0) := X"000000000";
     SRVAL_B : std_logic_vector(35 downto 0) := X"000000000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 36;
     WRITE_WIDTH_B : integer := 72
  );
  port (
     CASDOUTA : out std_logic_vector(31 downto 0);
     CASDOUTB : out std_logic_vector(31 downto 0);
     CASDOUTPA : out std_logic_vector(3 downto 0);
     CASDOUTPB : out std_logic_vector(3 downto 0);
     CASOUTDBITERR : out std_ulogic;
     CASOUTSBITERR : out std_ulogic;
     DBITERR : out std_ulogic;
     DOUTADOUT : out std_logic_vector(31 downto 0);
     DOUTBDOUT : out std_logic_vector(31 downto 0);
     DOUTPADOUTP : out std_logic_vector(3 downto 0);
     DOUTPBDOUTP : out std_logic_vector(3 downto 0);
     SBITERR : out std_ulogic;
     ADDRARDADDRL : in std_logic_vector(11 downto 0);
     ADDRARDADDRU : in std_logic_vector(11 downto 0);
     ADDRBWRADDRL : in std_logic_vector(11 downto 0);
     ADDRBWRADDRU : in std_logic_vector(11 downto 0);
     ARST_A_L : in std_ulogic;
     ARST_A_U : in std_ulogic;
     ARST_B_L : in std_ulogic;
     ARST_B_U : in std_ulogic;
     CASDINA : in std_logic_vector(31 downto 0);
     CASDINB : in std_logic_vector(31 downto 0);
     CASDINPA : in std_logic_vector(3 downto 0);
     CASDINPB : in std_logic_vector(3 downto 0);
     CASDOMUXAL : in std_ulogic;
     CASDOMUXAU : in std_ulogic;
     CASDOMUXBL : in std_ulogic;
     CASDOMUXBU : in std_ulogic;
     CASDOMUXEN_AL : in std_ulogic;
     CASDOMUXEN_AU : in std_ulogic;
     CASDOMUXEN_BL : in std_ulogic;
     CASDOMUXEN_BU : in std_ulogic;
     CASINDBITERR : in std_ulogic;
     CASINSBITERR : in std_ulogic;
     CASOREGIMUXAL : in std_ulogic;
     CASOREGIMUXAU : in std_ulogic;
     CASOREGIMUXBL : in std_ulogic;
     CASOREGIMUXBU : in std_ulogic;
     CASOREGIMUXEN_AL : in std_ulogic;
     CASOREGIMUXEN_AU : in std_ulogic;
     CASOREGIMUXEN_BL : in std_ulogic;
     CASOREGIMUXEN_BU : in std_ulogic;
     CLKARDCLKL : in std_ulogic;
     CLKARDCLKU : in std_ulogic;
     CLKBWRCLKL : in std_ulogic;
     CLKBWRCLKU : in std_ulogic;
     DINADIN : in std_logic_vector(31 downto 0);
     DINBDIN : in std_logic_vector(31 downto 0);
     DINPADINP : in std_logic_vector(3 downto 0);
     DINPBDINP : in std_logic_vector(3 downto 0);
     ECCPIPECEL : in std_ulogic;
     ENARDENL : in std_ulogic;
     ENARDENU : in std_ulogic;
     ENBWRENL : in std_ulogic;
     ENBWRENU : in std_ulogic;
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     REGCEAREGCEL : in std_ulogic;
     REGCEAREGCEU : in std_ulogic;
     REGCEBL : in std_ulogic;
     REGCEBU : in std_ulogic;
     RSTRAMARSTRAML : in std_ulogic;
     RSTRAMARSTRAMU : in std_ulogic;
     RSTRAMBL : in std_ulogic;
     RSTRAMBU : in std_ulogic;
     RSTREGARSTREGL : in std_ulogic;
     RSTREGARSTREGU : in std_ulogic;
     RSTREGBL : in std_ulogic;
     RSTREGBU : in std_ulogic;
     SLEEPL : in std_ulogic;
     SLEEPU : in std_ulogic;
     WEAL : in std_logic_vector(3 downto 0);
     WEAU : in std_logic_vector(3 downto 0);
     WEBWEL : in std_logic_vector(3 downto 0);
     WEBWEU : in std_logic_vector(3 downto 0);
     WE_IND_PARITY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMB36E5_INT : component is "PRIMITIVE";

----- component RAMD32 -----
component RAMD32
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     RADR0 : in std_ulogic;
     RADR1 : in std_ulogic;
     RADR2 : in std_ulogic;
     RADR3 : in std_ulogic;
     RADR4 : in std_ulogic;
     WADR0 : in std_ulogic;
     WADR1 : in std_ulogic;
     WADR2 : in std_ulogic;
     WADR3 : in std_ulogic;
     WADR4 : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMD32 : component is "PRIMITIVE";

----- component RAMD64E -----
component RAMD64E
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_CLK_INVERTED : bit := '0';
     RAM_ADDRESS_MASK : std_logic_vector (1 downto 0) := "00";
     RAM_ADDRESS_SPACE : std_logic_vector (1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     RADR0 : in std_ulogic;
     RADR1 : in std_ulogic;
     RADR2 : in std_ulogic;
     RADR3 : in std_ulogic;
     RADR4 : in std_ulogic;
     RADR5 : in std_ulogic;
     WADR0 : in std_ulogic;
     WADR1 : in std_ulogic;
     WADR2 : in std_ulogic;
     WADR3 : in std_ulogic;
     WADR4 : in std_ulogic;
     WADR5 : in std_ulogic;
     WADR6 : in std_ulogic;
     WADR7 : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMD64E : component is "PRIMITIVE";

----- component RAMD64E5 -----
component RAMD64E5
  generic (
     INIT : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     ADR0 : in std_ulogic;
     ADR1 : in std_ulogic;
     ADR2 : in std_ulogic;
     ADR3 : in std_ulogic;
     ADR4 : in std_ulogic;
     ADR5 : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     WADR0 : in std_ulogic;
     WADR1 : in std_ulogic;
     WADR2 : in std_ulogic;
     WADR3 : in std_ulogic;
     WADR4 : in std_ulogic;
     WADR5 : in std_ulogic;
     WE : in std_ulogic;
     WE2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMD64E5 : component is "PRIMITIVE";

----- component RAMS32 -----
component RAMS32
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     ADR0 : in std_ulogic;
     ADR1 : in std_ulogic;
     ADR2 : in std_ulogic;
     ADR3 : in std_ulogic;
     ADR4 : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMS32 : component is "PRIMITIVE";

----- component RAMS64E -----
component RAMS64E
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_CLK_INVERTED : bit := '0';
     RAM_ADDRESS_MASK : std_logic_vector (1 downto 0) := "00";
     RAM_ADDRESS_SPACE : std_logic_vector (1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     ADR0 : in std_ulogic;
     ADR1 : in std_ulogic;
     ADR2 : in std_ulogic;
     ADR3 : in std_ulogic;
     ADR4 : in std_ulogic;
     ADR5 : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     WADR6 : in std_ulogic;
     WADR7 : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMS64E : component is "PRIMITIVE";

----- component RAMS64E1 -----
component RAMS64E1
  generic (
     INIT : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_CLK_INVERTED : bit := '0';
     RAM_ADDRESS_MASK : std_logic_vector (2 downto 0) := "000";
     RAM_ADDRESS_SPACE : std_logic_vector (2 downto 0) := "000"
  );
  port (
     O : out std_ulogic;
     ADR0 : in std_ulogic;
     ADR1 : in std_ulogic;
     ADR2 : in std_ulogic;
     ADR3 : in std_ulogic;
     ADR4 : in std_ulogic;
     ADR5 : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     WADR6 : in std_ulogic;
     WADR7 : in std_ulogic;
     WADR8 : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMS64E1 : component is "PRIMITIVE";

----- component RAMS64E5 -----
component RAMS64E5
  generic (
     INIT : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     O : out std_ulogic;
     ADR0 : in std_ulogic;
     ADR1 : in std_ulogic;
     ADR2 : in std_ulogic;
     ADR3 : in std_ulogic;
     ADR4 : in std_ulogic;
     ADR5 : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     WE : in std_ulogic;
     WE2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMS64E5 : component is "PRIMITIVE";

----- component RIU_OR -----
component RIU_OR
  generic (
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0
  );
  port (
     RIU_RD_DATA : out std_logic_vector(15 downto 0);
     RIU_RD_VALID : out std_ulogic;
     RIU_RD_DATA_LOW : in std_logic_vector(15 downto 0);
     RIU_RD_DATA_UPP : in std_logic_vector(15 downto 0);
     RIU_RD_VALID_LOW : in std_ulogic;
     RIU_RD_VALID_UPP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RIU_OR : component is "PRIMITIVE";

----- component RXTX_BITSLICE -----
component RXTX_BITSLICE
  generic (
     ENABLE_PRE_EMPHASIS : string := "FALSE";
     FIFO_SYNC_MODE : string := "FALSE";
     INIT : bit := '1';
     IS_RX_CLK_INVERTED : bit := '0';
     IS_RX_RST_DLY_INVERTED : bit := '0';
     IS_RX_RST_INVERTED : bit := '0';
     IS_TX_CLK_INVERTED : bit := '0';
     IS_TX_RST_DLY_INVERTED : bit := '0';
     IS_TX_RST_INVERTED : bit := '0';
     LOOPBACK : string := "FALSE";
     NATIVE_ODELAY_BYPASS : string := "FALSE";
     RX_DATA_TYPE : string := "DATA";
     RX_DATA_WIDTH : integer := 8;
     RX_DELAY_FORMAT : string := "TIME";
     RX_DELAY_TYPE : string := "FIXED";
     RX_DELAY_VALUE : integer := 0;
     RX_REFCLK_FREQUENCY : real := 300.0;
     RX_UPDATE_MODE : string := "ASYNC";
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0;
     TBYTE_CTL : string := "TBYTE_IN";
     TX_DATA_WIDTH : integer := 8;
     TX_DELAY_FORMAT : string := "TIME";
     TX_DELAY_TYPE : string := "FIXED";
     TX_DELAY_VALUE : integer := 0;
     TX_OUTPUT_PHASE_90 : string := "FALSE";
     TX_REFCLK_FREQUENCY : real := 300.0;
     TX_UPDATE_MODE : string := "ASYNC"
  );
  port (
     FIFO_EMPTY : out std_ulogic;
     FIFO_WRCLK_OUT : out std_ulogic;
     O : out std_ulogic;
     Q : out std_logic_vector(7 downto 0);
     RX_BIT_CTRL_OUT : out std_logic_vector(39 downto 0);
     RX_CNTVALUEOUT : out std_logic_vector(8 downto 0);
     TX_BIT_CTRL_OUT : out std_logic_vector(39 downto 0);
     TX_CNTVALUEOUT : out std_logic_vector(8 downto 0);
     T_OUT : out std_ulogic;
     D : in std_logic_vector(7 downto 0);
     DATAIN : in std_ulogic;
     FIFO_RD_CLK : in std_ulogic;
     FIFO_RD_EN : in std_ulogic;
     RX_BIT_CTRL_IN : in std_logic_vector(39 downto 0);
     RX_CE : in std_ulogic;
     RX_CLK : in std_ulogic;
     RX_CNTVALUEIN : in std_logic_vector(8 downto 0);
     RX_EN_VTC : in std_ulogic;
     RX_INC : in std_ulogic;
     RX_LOAD : in std_ulogic;
     RX_RST : in std_ulogic;
     RX_RST_DLY : in std_ulogic;
     T : in std_ulogic;
     TBYTE_IN : in std_ulogic;
     TX_BIT_CTRL_IN : in std_logic_vector(39 downto 0);
     TX_CE : in std_ulogic;
     TX_CLK : in std_ulogic;
     TX_CNTVALUEIN : in std_logic_vector(8 downto 0);
     TX_EN_VTC : in std_ulogic;
     TX_INC : in std_ulogic;
     TX_LOAD : in std_ulogic;
     TX_RST : in std_ulogic;
     TX_RST_DLY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RXTX_BITSLICE : component is "PRIMITIVE";

----- component RX_BITSLICE -----
component RX_BITSLICE
  generic (
     CASCADE : string := "FALSE";
     DATA_TYPE : string := "DATA";
     DATA_WIDTH : integer := 8;
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     DELAY_VALUE_EXT : integer := 0;
     FIFO_SYNC_MODE : string := "FALSE";
     IS_CLK_EXT_INVERTED : bit := '0';
     IS_CLK_INVERTED : bit := '0';
     IS_RST_DLY_EXT_INVERTED : bit := '0';
     IS_RST_DLY_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REFCLK_FREQUENCY : real := 300.0;
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0;
     UPDATE_MODE : string := "ASYNC";
     UPDATE_MODE_EXT : string := "ASYNC"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     CNTVALUEOUT_EXT : out std_logic_vector(8 downto 0);
     FIFO_EMPTY : out std_ulogic;
     FIFO_WRCLK_OUT : out std_ulogic;
     Q : out std_logic_vector(7 downto 0);
     RX_BIT_CTRL_OUT : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT : out std_logic_vector(39 downto 0);
     CE : in std_ulogic;
     CE_EXT : in std_ulogic;
     CLK : in std_ulogic;
     CLK_EXT : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     CNTVALUEIN_EXT : in std_logic_vector(8 downto 0);
     DATAIN : in std_ulogic;
     EN_VTC : in std_ulogic;
     EN_VTC_EXT : in std_ulogic;
     FIFO_RD_CLK : in std_ulogic;
     FIFO_RD_EN : in std_ulogic;
     INC : in std_ulogic;
     INC_EXT : in std_ulogic;
     LOAD : in std_ulogic;
     LOAD_EXT : in std_ulogic;
     RST : in std_ulogic;
     RST_DLY : in std_ulogic;
     RST_DLY_EXT : in std_ulogic;
     RX_BIT_CTRL_IN : in std_logic_vector(39 downto 0);
     TX_BIT_CTRL_IN : in std_logic_vector(39 downto 0)
  );
end component;
attribute BOX_TYPE of
  RX_BITSLICE : component is "PRIMITIVE";

----- component SIM_CONFIGE2 -----
component SIM_CONFIGE2
  generic (
     DEVICE_ID : bit_vector := X"00000000";
     ICAP_SUPPORT : boolean := false;
     ICAP_WIDTH : string := "X8"
  );
  port (
     CSOB : out std_ulogic := '1';
     D : inout std_logic_vector(31 downto 0);
     DONE : inout std_ulogic := '0';
     INITB : inout std_ulogic := 'H';
     CCLK : in std_ulogic := '0';
     CSB : in std_ulogic := '0';
     M : in std_logic_vector(2 downto 0) := "000";
     PROGB : in std_ulogic := '0';
     RDWRB : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  SIM_CONFIGE2 : component is "PRIMITIVE";

----- component SIM_CONFIGE3 -----
component SIM_CONFIGE3
  generic (
     DEVICE_ID : bit_vector := X"00000000";
     ICAP_SUPPORT : boolean := false;
     ICAP_WIDTH : string := "X8"
  );
  port (
     AVAIL : out std_ulogic := '0';
     CSOB : out std_ulogic := '1';
     PRDONE : out std_ulogic := '0';
     PRERROR : out std_ulogic := '0';
     D : inout std_logic_vector(31 downto 0);
     DONE : inout std_ulogic := '0';
     INITB : inout std_ulogic := 'H';
     CCLK : in std_ulogic := '0';
     CSB : in std_ulogic := '0';
     M : in std_logic_vector(2 downto 0) := "000";
     PROGB : in std_ulogic := '0';
     RDWRB : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  SIM_CONFIGE3 : component is "PRIMITIVE";

----- component SRL16E -----
component SRL16E
  generic (
     INIT : bit_vector := X"0000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     Q : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRL16E : component is "PRIMITIVE";

----- component SRLC16E -----
component SRLC16E
  generic (
     INIT : bit_vector := X"0000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     Q : out STD_ULOGIC;
     Q15 : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRLC16E : component is "PRIMITIVE";

----- component SRLC32E -----
component SRLC32E
  generic (
     INIT : bit_vector := X"00000000";
     IS_CLK_INVERTED : bit := '0'
  );
  port (
     Q : out STD_ULOGIC;
     Q31 : out STD_ULOGIC;
     A : in STD_LOGIC_VECTOR (4 downto 0) := "00000";
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRLC32E : component is "PRIMITIVE";

----- component STARTUPE2 -----
component STARTUPE2
  generic (
     PROG_USR : string := "FALSE";
     SIM_CCLK_FREQ : real := 0.0
  );
  port (
     CFGCLK : out std_ulogic;
     CFGMCLK : out std_ulogic;
     EOS : out std_ulogic;
     PREQ : out std_ulogic;
     CLK : in std_ulogic;
     GSR : in std_ulogic;
     GTS : in std_ulogic;
     KEYCLEARB : in std_ulogic;
     PACK : in std_ulogic;
     USRCCLKO : in std_ulogic;
     USRCCLKTS : in std_ulogic;
     USRDONEO : in std_ulogic;
     USRDONETS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  STARTUPE2 : component is "PRIMITIVE";

----- component STARTUPE3 -----
component STARTUPE3
  generic (
     PROG_USR : string := "FALSE";
     SIM_CCLK_FREQ : real := 0.0
  );
  port (
     CFGCLK : out std_ulogic;
     CFGMCLK : out std_ulogic;
     DI : out std_logic_vector(3 downto 0);
     EOS : out std_ulogic;
     PREQ : out std_ulogic;
     DO : in std_logic_vector(3 downto 0);
     DTS : in std_logic_vector(3 downto 0);
     FCSBO : in std_ulogic;
     FCSBTS : in std_ulogic;
     GSR : in std_ulogic;
     GTS : in std_ulogic;
     KEYCLEARB : in std_ulogic;
     PACK : in std_ulogic;
     USRCCLKO : in std_ulogic;
     USRCCLKTS : in std_ulogic;
     USRDONEO : in std_ulogic;
     USRDONETS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  STARTUPE3 : component is "PRIMITIVE";

----- component SYSMONE1 -----
component SYSMONE1
  generic (
     INIT_40 : bit_vector := X"0000";
     INIT_41 : bit_vector := X"0000";
     INIT_42 : bit_vector := X"0000";
     INIT_43 : bit_vector := X"0000";
     INIT_44 : bit_vector := X"0000";
     INIT_45 : bit_vector := X"0000";
     INIT_46 : bit_vector := X"0000";
     INIT_47 : bit_vector := X"0000";
     INIT_48 : bit_vector := X"0000";
     INIT_49 : bit_vector := X"0000";
     INIT_4A : bit_vector := X"0000";
     INIT_4B : bit_vector := X"0000";
     INIT_4C : bit_vector := X"0000";
     INIT_4D : bit_vector := X"0000";
     INIT_4E : bit_vector := X"0000";
     INIT_4F : bit_vector := X"0000";
     INIT_50 : bit_vector := X"0000";
     INIT_51 : bit_vector := X"0000";
     INIT_52 : bit_vector := X"0000";
     INIT_53 : bit_vector := X"0000";
     INIT_54 : bit_vector := X"0000";
     INIT_55 : bit_vector := X"0000";
     INIT_56 : bit_vector := X"0000";
     INIT_57 : bit_vector := X"0000";
     INIT_58 : bit_vector := X"0000";
     INIT_59 : bit_vector := X"0000";
     INIT_5A : bit_vector := X"0000";
     INIT_5B : bit_vector := X"0000";
     INIT_5C : bit_vector := X"0000";
     INIT_5D : bit_vector := X"0000";
     INIT_5E : bit_vector := X"0000";
     INIT_5F : bit_vector := X"0000";
     INIT_60 : bit_vector := X"0000";
     INIT_61 : bit_vector := X"0000";
     INIT_62 : bit_vector := X"0000";
     INIT_63 : bit_vector := X"0000";
     INIT_64 : bit_vector := X"0000";
     INIT_65 : bit_vector := X"0000";
     INIT_66 : bit_vector := X"0000";
     INIT_67 : bit_vector := X"0000";
     INIT_68 : bit_vector := X"0000";
     INIT_69 : bit_vector := X"0000";
     INIT_6A : bit_vector := X"0000";
     INIT_6B : bit_vector := X"0000";
     INIT_6C : bit_vector := X"0000";
     INIT_6D : bit_vector := X"0000";
     INIT_6E : bit_vector := X"0000";
     INIT_6F : bit_vector := X"0000";
     INIT_70 : bit_vector := X"0000";
     INIT_71 : bit_vector := X"0000";
     INIT_72 : bit_vector := X"0000";
     INIT_73 : bit_vector := X"0000";
     INIT_74 : bit_vector := X"0000";
     INIT_75 : bit_vector := X"0000";
     INIT_76 : bit_vector := X"0000";
     INIT_77 : bit_vector := X"0000";
     INIT_78 : bit_vector := X"0000";
     INIT_79 : bit_vector := X"0000";
     INIT_7A : bit_vector := X"0000";
     INIT_7B : bit_vector := X"0000";
     INIT_7C : bit_vector := X"0000";
     INIT_7D : bit_vector := X"0000";
     INIT_7E : bit_vector := X"0000";
     INIT_7F : bit_vector := X"0000";
     IS_CONVSTCLK_INVERTED : bit := '0';
     IS_DCLK_INVERTED : bit := '0';
     SIM_MONITOR_FILE : string := "design.txt";
     SYSMON_VUSER0_BANK : integer := 0;
     SYSMON_VUSER0_MONITOR : string := "NONE";
     SYSMON_VUSER1_BANK : integer := 0;
     SYSMON_VUSER1_MONITOR : string := "NONE";
     SYSMON_VUSER2_BANK : integer := 0;
     SYSMON_VUSER2_MONITOR : string := "NONE";
     SYSMON_VUSER3_BANK : integer := 0;
     SYSMON_VUSER3_MONITOR : string := "NONE"
  );
  port (
     ALM : out std_logic_vector(15 downto 0);
     BUSY : out std_ulogic;
     CHANNEL : out std_logic_vector(5 downto 0);
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     EOC : out std_ulogic;
     EOS : out std_ulogic;
     I2C_SCLK_TS : out std_ulogic;
     I2C_SDA_TS : out std_ulogic;
     JTAGBUSY : out std_ulogic;
     JTAGLOCKED : out std_ulogic;
     JTAGMODIFIED : out std_ulogic;
     MUXADDR : out std_logic_vector(4 downto 0);
     OT : out std_ulogic;
     CONVST : in std_ulogic;
     CONVSTCLK : in std_ulogic;
     DADDR : in std_logic_vector(7 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     I2C_SCLK : in std_ulogic;
     I2C_SDA : in std_ulogic;
     RESET : in std_ulogic;
     VAUXN : in std_logic_vector(15 downto 0);
     VAUXP : in std_logic_vector(15 downto 0);
     VN : in std_ulogic;
     VP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  SYSMONE1 : component is "PRIMITIVE";

----- component SYSMONE4 -----
component SYSMONE4
  generic (
     COMMON_N_SOURCE : std_logic_vector(15 downto 0) := X"FFFF";
     INIT_40 : std_logic_vector(15 downto 0) := X"0000";
     INIT_41 : std_logic_vector(15 downto 0) := X"0000";
     INIT_42 : std_logic_vector(15 downto 0) := X"0000";
     INIT_43 : std_logic_vector(15 downto 0) := X"0000";
     INIT_44 : std_logic_vector(15 downto 0) := X"0000";
     INIT_45 : std_logic_vector(15 downto 0) := X"0000";
     INIT_46 : std_logic_vector(15 downto 0) := X"0000";
     INIT_47 : std_logic_vector(15 downto 0) := X"0000";
     INIT_48 : std_logic_vector(15 downto 0) := X"0000";
     INIT_49 : std_logic_vector(15 downto 0) := X"0000";
     INIT_4A : std_logic_vector(15 downto 0) := X"0000";
     INIT_4B : std_logic_vector(15 downto 0) := X"0000";
     INIT_4C : std_logic_vector(15 downto 0) := X"0000";
     INIT_4D : std_logic_vector(15 downto 0) := X"0000";
     INIT_4E : std_logic_vector(15 downto 0) := X"0000";
     INIT_4F : std_logic_vector(15 downto 0) := X"0000";
     INIT_50 : std_logic_vector(15 downto 0) := X"0000";
     INIT_51 : std_logic_vector(15 downto 0) := X"0000";
     INIT_52 : std_logic_vector(15 downto 0) := X"0000";
     INIT_53 : std_logic_vector(15 downto 0) := X"0000";
     INIT_54 : std_logic_vector(15 downto 0) := X"0000";
     INIT_55 : std_logic_vector(15 downto 0) := X"0000";
     INIT_56 : std_logic_vector(15 downto 0) := X"0000";
     INIT_57 : std_logic_vector(15 downto 0) := X"0000";
     INIT_58 : std_logic_vector(15 downto 0) := X"0000";
     INIT_59 : std_logic_vector(15 downto 0) := X"0000";
     INIT_5A : std_logic_vector(15 downto 0) := X"0000";
     INIT_5B : std_logic_vector(15 downto 0) := X"0000";
     INIT_5C : std_logic_vector(15 downto 0) := X"0000";
     INIT_5D : std_logic_vector(15 downto 0) := X"0000";
     INIT_5E : std_logic_vector(15 downto 0) := X"0000";
     INIT_5F : std_logic_vector(15 downto 0) := X"0000";
     INIT_60 : std_logic_vector(15 downto 0) := X"0000";
     INIT_61 : std_logic_vector(15 downto 0) := X"0000";
     INIT_62 : std_logic_vector(15 downto 0) := X"0000";
     INIT_63 : std_logic_vector(15 downto 0) := X"0000";
     INIT_64 : std_logic_vector(15 downto 0) := X"0000";
     INIT_65 : std_logic_vector(15 downto 0) := X"0000";
     INIT_66 : std_logic_vector(15 downto 0) := X"0000";
     INIT_67 : std_logic_vector(15 downto 0) := X"0000";
     INIT_68 : std_logic_vector(15 downto 0) := X"0000";
     INIT_69 : std_logic_vector(15 downto 0) := X"0000";
     INIT_6A : std_logic_vector(15 downto 0) := X"0000";
     INIT_6B : std_logic_vector(15 downto 0) := X"0000";
     INIT_6C : std_logic_vector(15 downto 0) := X"0000";
     INIT_6D : std_logic_vector(15 downto 0) := X"0000";
     INIT_6E : std_logic_vector(15 downto 0) := X"0000";
     INIT_6F : std_logic_vector(15 downto 0) := X"0000";
     INIT_70 : std_logic_vector(15 downto 0) := X"0000";
     INIT_71 : std_logic_vector(15 downto 0) := X"0000";
     INIT_72 : std_logic_vector(15 downto 0) := X"0000";
     INIT_73 : std_logic_vector(15 downto 0) := X"0000";
     INIT_74 : std_logic_vector(15 downto 0) := X"0000";
     INIT_75 : std_logic_vector(15 downto 0) := X"0000";
     INIT_76 : std_logic_vector(15 downto 0) := X"0000";
     INIT_77 : std_logic_vector(15 downto 0) := X"0000";
     INIT_78 : std_logic_vector(15 downto 0) := X"0000";
     INIT_79 : std_logic_vector(15 downto 0) := X"0000";
     INIT_7A : std_logic_vector(15 downto 0) := X"0000";
     INIT_7B : std_logic_vector(15 downto 0) := X"0000";
     INIT_7C : std_logic_vector(15 downto 0) := X"0000";
     INIT_7D : std_logic_vector(15 downto 0) := X"0000";
     INIT_7E : std_logic_vector(15 downto 0) := X"0000";
     INIT_7F : std_logic_vector(15 downto 0) := X"0000";
     IS_CONVSTCLK_INVERTED : bit := '0';
     IS_DCLK_INVERTED : bit := '0';
     SIM_DEVICE : string := "ULTRASCALE_PLUS";
     SIM_MONITOR_FILE : string := "design.txt";
     SYSMON_VUSER0_BANK : integer := 0;
     SYSMON_VUSER0_MONITOR : string := "NONE";
     SYSMON_VUSER1_BANK : integer := 0;
     SYSMON_VUSER1_MONITOR : string := "NONE";
     SYSMON_VUSER2_BANK : integer := 0;
     SYSMON_VUSER2_MONITOR : string := "NONE";
     SYSMON_VUSER3_BANK : integer := 0;
     SYSMON_VUSER3_MONITOR : string := "NONE"
  );
  port (
     ADC_DATA : out std_logic_vector(15 downto 0);
     ALM : out std_logic_vector(15 downto 0);
     BUSY : out std_ulogic;
     CHANNEL : out std_logic_vector(5 downto 0);
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     EOC : out std_ulogic;
     EOS : out std_ulogic;
     I2C_SCLK_TS : out std_ulogic;
     I2C_SDA_TS : out std_ulogic;
     JTAGBUSY : out std_ulogic;
     JTAGLOCKED : out std_ulogic;
     JTAGMODIFIED : out std_ulogic;
     MUXADDR : out std_logic_vector(4 downto 0);
     OT : out std_ulogic;
     SMBALERT_TS : out std_ulogic;
     CONVST : in std_ulogic;
     CONVSTCLK : in std_ulogic;
     DADDR : in std_logic_vector(7 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     I2C_SCLK : in std_ulogic;
     I2C_SDA : in std_ulogic;
     RESET : in std_ulogic;
     VAUXN : in std_logic_vector(15 downto 0);
     VAUXP : in std_logic_vector(15 downto 0);
     VN : in std_ulogic;
     VP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  SYSMONE4 : component is "PRIMITIVE";

----- component TX_BITSLICE -----
component TX_BITSLICE
  generic (
     DATA_WIDTH : integer := 8;
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     ENABLE_PRE_EMPHASIS : string := "FALSE";
     INIT : bit := '1';
     IS_CLK_INVERTED : bit := '0';
     IS_RST_DLY_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     NATIVE_ODELAY_BYPASS : string := "FALSE";
     OUTPUT_PHASE_90 : string := "FALSE";
     REFCLK_FREQUENCY : real := 300.0;
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0;
     TBYTE_CTL : string := "TBYTE_IN";
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     O : out std_ulogic;
     RX_BIT_CTRL_OUT : out std_logic_vector(39 downto 0);
     TX_BIT_CTRL_OUT : out std_logic_vector(39 downto 0);
     T_OUT : out std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     D : in std_logic_vector(7 downto 0);
     EN_VTC : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     RST : in std_ulogic;
     RST_DLY : in std_ulogic;
     RX_BIT_CTRL_IN : in std_logic_vector(39 downto 0);
     T : in std_ulogic;
     TBYTE_IN : in std_ulogic;
     TX_BIT_CTRL_IN : in std_logic_vector(39 downto 0)
  );
end component;
attribute BOX_TYPE of
  TX_BITSLICE : component is "PRIMITIVE";

----- component TX_BITSLICE_TRI -----
component TX_BITSLICE_TRI
  generic (
     DATA_WIDTH : integer := 8;
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     INIT : bit := '1';
     IS_CLK_INVERTED : bit := '0';
     IS_RST_DLY_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     NATIVE_ODELAY_BYPASS : string := "FALSE";
     OUTPUT_PHASE_90 : string := "FALSE";
     REFCLK_FREQUENCY : real := 300.0;
     SIM_DEVICE : string := "ULTRASCALE";
     SIM_VERSION : real := 2.0;
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     BIT_CTRL_OUT : out std_logic_vector(39 downto 0);
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     TRI_OUT : out std_ulogic;
     BIT_CTRL_IN : in std_logic_vector(39 downto 0);
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     EN_VTC : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     RST : in std_ulogic;
     RST_DLY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  TX_BITSLICE_TRI : component is "PRIMITIVE";

----- component URAM288 -----
component URAM288
  generic (
     AUTO_SLEEP_LATENCY : integer := 8;
     AVG_CONS_INACTIVE_CYCLES : integer := 10;
     BWE_MODE_A : string := "PARITY_INTERLEAVED";
     BWE_MODE_B : string := "PARITY_INTERLEAVED";
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     EN_AUTO_SLEEP_MODE : string := "FALSE";
     EN_ECC_RD_A : string := "FALSE";
     EN_ECC_RD_B : string := "FALSE";
     EN_ECC_WR_A : string := "FALSE";
     EN_ECC_WR_B : string := "FALSE";
     IREG_PRE_A : string := "FALSE";
     IREG_PRE_B : string := "FALSE";
     IS_CLK_INVERTED : bit := '0';
     IS_EN_A_INVERTED : bit := '0';
     IS_EN_B_INVERTED : bit := '0';
     IS_RDB_WR_A_INVERTED : bit := '0';
     IS_RDB_WR_B_INVERTED : bit := '0';
     IS_RST_A_INVERTED : bit := '0';
     IS_RST_B_INVERTED : bit := '0';
     MATRIX_ID : string := "NONE";
     NUM_UNIQUE_SELF_ADDR_A : integer := 1;
     NUM_UNIQUE_SELF_ADDR_B : integer := 1;
     NUM_URAM_IN_MATRIX : integer := 1;
     OREG_A : string := "FALSE";
     OREG_B : string := "FALSE";
     OREG_ECC_A : string := "FALSE";
     OREG_ECC_B : string := "FALSE";
     REG_CAS_A : string := "FALSE";
     REG_CAS_B : string := "FALSE";
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     SELF_ADDR_A : std_logic_vector(10 downto 0) := "000" & X"00";
     SELF_ADDR_B : std_logic_vector(10 downto 0) := "000" & X"00";
     SELF_MASK_A : std_logic_vector(10 downto 0) := "111" & X"FF";
     SELF_MASK_B : std_logic_vector(10 downto 0) := "111" & X"FF";
     USE_EXT_CE_A : string := "FALSE";
     USE_EXT_CE_B : string := "FALSE"
  );
  port (
     CAS_OUT_ADDR_A : out std_logic_vector(22 downto 0);
     CAS_OUT_ADDR_B : out std_logic_vector(22 downto 0);
     CAS_OUT_BWE_A : out std_logic_vector(8 downto 0);
     CAS_OUT_BWE_B : out std_logic_vector(8 downto 0);
     CAS_OUT_DBITERR_A : out std_ulogic;
     CAS_OUT_DBITERR_B : out std_ulogic;
     CAS_OUT_DIN_A : out std_logic_vector(71 downto 0);
     CAS_OUT_DIN_B : out std_logic_vector(71 downto 0);
     CAS_OUT_DOUT_A : out std_logic_vector(71 downto 0);
     CAS_OUT_DOUT_B : out std_logic_vector(71 downto 0);
     CAS_OUT_EN_A : out std_ulogic;
     CAS_OUT_EN_B : out std_ulogic;
     CAS_OUT_RDACCESS_A : out std_ulogic;
     CAS_OUT_RDACCESS_B : out std_ulogic;
     CAS_OUT_RDB_WR_A : out std_ulogic;
     CAS_OUT_RDB_WR_B : out std_ulogic;
     CAS_OUT_SBITERR_A : out std_ulogic;
     CAS_OUT_SBITERR_B : out std_ulogic;
     DBITERR_A : out std_ulogic;
     DBITERR_B : out std_ulogic;
     DOUT_A : out std_logic_vector(71 downto 0);
     DOUT_B : out std_logic_vector(71 downto 0);
     RDACCESS_A : out std_ulogic;
     RDACCESS_B : out std_ulogic;
     SBITERR_A : out std_ulogic;
     SBITERR_B : out std_ulogic;
     ADDR_A : in std_logic_vector(22 downto 0);
     ADDR_B : in std_logic_vector(22 downto 0);
     BWE_A : in std_logic_vector(8 downto 0);
     BWE_B : in std_logic_vector(8 downto 0);
     CAS_IN_ADDR_A : in std_logic_vector(22 downto 0);
     CAS_IN_ADDR_B : in std_logic_vector(22 downto 0);
     CAS_IN_BWE_A : in std_logic_vector(8 downto 0);
     CAS_IN_BWE_B : in std_logic_vector(8 downto 0);
     CAS_IN_DBITERR_A : in std_ulogic;
     CAS_IN_DBITERR_B : in std_ulogic;
     CAS_IN_DIN_A : in std_logic_vector(71 downto 0);
     CAS_IN_DIN_B : in std_logic_vector(71 downto 0);
     CAS_IN_DOUT_A : in std_logic_vector(71 downto 0);
     CAS_IN_DOUT_B : in std_logic_vector(71 downto 0);
     CAS_IN_EN_A : in std_ulogic;
     CAS_IN_EN_B : in std_ulogic;
     CAS_IN_RDACCESS_A : in std_ulogic;
     CAS_IN_RDACCESS_B : in std_ulogic;
     CAS_IN_RDB_WR_A : in std_ulogic;
     CAS_IN_RDB_WR_B : in std_ulogic;
     CAS_IN_SBITERR_A : in std_ulogic;
     CAS_IN_SBITERR_B : in std_ulogic;
     CLK : in std_ulogic;
     DIN_A : in std_logic_vector(71 downto 0);
     DIN_B : in std_logic_vector(71 downto 0);
     EN_A : in std_ulogic;
     EN_B : in std_ulogic;
     INJECT_DBITERR_A : in std_ulogic;
     INJECT_DBITERR_B : in std_ulogic;
     INJECT_SBITERR_A : in std_ulogic;
     INJECT_SBITERR_B : in std_ulogic;
     OREG_CE_A : in std_ulogic;
     OREG_CE_B : in std_ulogic;
     OREG_ECC_CE_A : in std_ulogic;
     OREG_ECC_CE_B : in std_ulogic;
     RDB_WR_A : in std_ulogic;
     RDB_WR_B : in std_ulogic;
     RST_A : in std_ulogic;
     RST_B : in std_ulogic;
     SLEEP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  URAM288 : component is "PRIMITIVE";

----- component URAM288E5 -----
component URAM288E5
  generic (
     AUTO_SLEEP_LATENCY : integer := 8;
     AVG_CONS_INACTIVE_CYCLES : integer := 10;
     BWE_MODE_A : string := "PARITY_INTERLEAVED";
     BWE_MODE_B : string := "PARITY_INTERLEAVED";
     CASCADE_ORDER_CTRL_A : string := "NONE";
     CASCADE_ORDER_CTRL_B : string := "NONE";
     CASCADE_ORDER_DATA_A : string := "NONE";
     CASCADE_ORDER_DATA_B : string := "NONE";
     EN_AUTO_SLEEP_MODE : string := "FALSE";
     EN_ECC_RD_A : string := "FALSE";
     EN_ECC_RD_B : string := "FALSE";
     EN_ECC_WR_A : string := "FALSE";
     EN_ECC_WR_B : string := "FALSE";
     INIT_000 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_001 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_002 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_003 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_004 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_005 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_006 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_007 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_008 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_009 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_010 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_011 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_012 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_013 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_014 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_015 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_016 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_017 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_018 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_019 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_020 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_021 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_022 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_023 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_024 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_025 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_026 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_027 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_028 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_029 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_030 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_031 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_032 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_033 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_034 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_035 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_036 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_037 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_038 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_039 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_040 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_041 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_042 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_043 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_044 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_045 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_046 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_047 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_048 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_049 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_050 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_051 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_052 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_053 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_054 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_055 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_056 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_057 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_058 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_059 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_060 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_061 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_062 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_063 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_064 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_065 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_066 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_067 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_068 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_069 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_070 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_071 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_072 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_073 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_074 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_075 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_076 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_077 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_078 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_079 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_080 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_081 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_082 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_083 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_084 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_085 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_086 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_087 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_088 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_089 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_090 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_091 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_092 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_093 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_094 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_095 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_096 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_097 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_098 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_099 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_100 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_101 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_102 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_103 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_104 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_105 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_106 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_107 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_108 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_109 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_110 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_111 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_112 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_113 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_114 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_115 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_116 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_117 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_118 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_119 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_120 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_121 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_122 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_123 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_124 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_125 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_126 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_127 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_128 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_129 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_130 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_131 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_132 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_133 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_134 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_135 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_136 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_137 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_138 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_139 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_140 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_141 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_142 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_143 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_144 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_145 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_146 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_147 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_148 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_149 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_150 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_151 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_152 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_153 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_154 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_155 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_156 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_157 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_158 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_159 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_160 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_161 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_162 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_163 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_164 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_165 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_166 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_167 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_168 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_169 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_170 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_171 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_172 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_173 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_174 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_175 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_176 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_177 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_178 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_179 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_180 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_181 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_182 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_183 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_184 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_185 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_186 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_187 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_188 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_189 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_190 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_191 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_192 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_193 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_194 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_195 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_196 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_197 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_198 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_199 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_200 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_201 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_202 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_203 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_204 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_205 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_206 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_207 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_208 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_209 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_210 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_211 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_212 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_213 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_214 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_215 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_216 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_217 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_218 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_219 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_220 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_221 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_222 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_223 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_224 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_225 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_226 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_227 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_228 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_229 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_230 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_231 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_232 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_233 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_234 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_235 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_236 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_237 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_238 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_239 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_240 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_241 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_242 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_243 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_244 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_245 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_246 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_247 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_248 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_249 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_250 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_251 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_252 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_253 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_254 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_255 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_256 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_257 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_258 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_259 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_260 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_261 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_262 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_263 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_264 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_265 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_266 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_267 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_268 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_269 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_270 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_271 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_272 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_273 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_274 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_275 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_276 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_277 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_278 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_279 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_280 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_281 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_282 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_283 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_284 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_285 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_286 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_287 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_288 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_289 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_290 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_291 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_292 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_293 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_294 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_295 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_296 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_297 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_298 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_299 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_300 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_301 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_302 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_303 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_304 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_305 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_306 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_307 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_308 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_309 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_310 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_311 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_312 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_313 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_314 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_315 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_316 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_317 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_318 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_319 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_320 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_321 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_322 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_323 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_324 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_325 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_326 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_327 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_328 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_329 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_330 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_331 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_332 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_333 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_334 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_335 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_336 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_337 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_338 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_339 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_340 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_341 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_342 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_343 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_344 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_345 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_346 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_347 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_348 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_349 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_350 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_351 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_352 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_353 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_354 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_355 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_356 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_357 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_358 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_359 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_360 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_361 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_362 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_363 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_364 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_365 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_366 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_367 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_368 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_369 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_370 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_371 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_372 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_373 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_374 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_375 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_376 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_377 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_378 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_379 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_380 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_381 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_382 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_383 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_384 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_385 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_386 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_387 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_388 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_389 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_390 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_391 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_392 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_393 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_394 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_395 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_396 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_397 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_398 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_399 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     IREG_PRE_A : string := "FALSE";
     IREG_PRE_B : string := "FALSE";
     IS_CLK_INVERTED : bit := '0';
     IS_EN_A_INVERTED : bit := '0';
     IS_EN_B_INVERTED : bit := '0';
     IS_RDB_WR_A_INVERTED : bit := '0';
     IS_RDB_WR_B_INVERTED : bit := '0';
     IS_RST_A_INVERTED : bit := '0';
     IS_RST_B_INVERTED : bit := '0';
     MATRIX_ID : string := "NONE";
     NUM_UNIQUE_SELF_ADDR_A : integer := 1;
     NUM_UNIQUE_SELF_ADDR_B : integer := 1;
     NUM_URAM_IN_MATRIX : integer := 1;
     OREG_A : string := "FALSE";
     OREG_B : string := "FALSE";
     OREG_ECC_A : string := "FALSE";
     OREG_ECC_B : string := "FALSE";
     PR_SAVE_DATA : string := "FALSE";
     READ_WIDTH_A : integer := 72;
     READ_WIDTH_B : integer := 72;
     REG_CAS_A : string := "FALSE";
     REG_CAS_B : string := "FALSE";
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     SELF_ADDR_A : std_logic_vector(10 downto 0) := "000" & X"00";
     SELF_ADDR_B : std_logic_vector(10 downto 0) := "000" & X"00";
     SELF_MASK_A : std_logic_vector(10 downto 0) := "111" & X"FF";
     SELF_MASK_B : std_logic_vector(10 downto 0) := "111" & X"FF";
     USE_EXT_CE_A : string := "FALSE";
     USE_EXT_CE_B : string := "FALSE";
     WRITE_WIDTH_A : integer := 72;
     WRITE_WIDTH_B : integer := 72
  );
  port (
     CAS_OUT_ADDR_A : out std_logic_vector(25 downto 0);
     CAS_OUT_ADDR_B : out std_logic_vector(25 downto 0);
     CAS_OUT_BWE_A : out std_logic_vector(8 downto 0);
     CAS_OUT_BWE_B : out std_logic_vector(8 downto 0);
     CAS_OUT_DBITERR_A : out std_ulogic;
     CAS_OUT_DBITERR_B : out std_ulogic;
     CAS_OUT_DIN_A : out std_logic_vector(71 downto 0);
     CAS_OUT_DIN_B : out std_logic_vector(71 downto 0);
     CAS_OUT_DOUT_A : out std_logic_vector(71 downto 0);
     CAS_OUT_DOUT_B : out std_logic_vector(71 downto 0);
     CAS_OUT_EN_A : out std_ulogic;
     CAS_OUT_EN_B : out std_ulogic;
     CAS_OUT_RDACCESS_A : out std_ulogic;
     CAS_OUT_RDACCESS_B : out std_ulogic;
     CAS_OUT_RDB_WR_A : out std_ulogic;
     CAS_OUT_RDB_WR_B : out std_ulogic;
     CAS_OUT_SBITERR_A : out std_ulogic;
     CAS_OUT_SBITERR_B : out std_ulogic;
     DBITERR_A : out std_ulogic;
     DBITERR_B : out std_ulogic;
     DOUT_A : out std_logic_vector(71 downto 0);
     DOUT_B : out std_logic_vector(71 downto 0);
     RDACCESS_A : out std_ulogic;
     RDACCESS_B : out std_ulogic;
     SBITERR_A : out std_ulogic;
     SBITERR_B : out std_ulogic;
     ADDR_A : in std_logic_vector(25 downto 0);
     ADDR_B : in std_logic_vector(25 downto 0);
     BWE_A : in std_logic_vector(8 downto 0);
     BWE_B : in std_logic_vector(8 downto 0);
     CAS_IN_ADDR_A : in std_logic_vector(25 downto 0);
     CAS_IN_ADDR_B : in std_logic_vector(25 downto 0);
     CAS_IN_BWE_A : in std_logic_vector(8 downto 0);
     CAS_IN_BWE_B : in std_logic_vector(8 downto 0);
     CAS_IN_DBITERR_A : in std_ulogic;
     CAS_IN_DBITERR_B : in std_ulogic;
     CAS_IN_DIN_A : in std_logic_vector(71 downto 0);
     CAS_IN_DIN_B : in std_logic_vector(71 downto 0);
     CAS_IN_DOUT_A : in std_logic_vector(71 downto 0);
     CAS_IN_DOUT_B : in std_logic_vector(71 downto 0);
     CAS_IN_EN_A : in std_ulogic;
     CAS_IN_EN_B : in std_ulogic;
     CAS_IN_RDACCESS_A : in std_ulogic;
     CAS_IN_RDACCESS_B : in std_ulogic;
     CAS_IN_RDB_WR_A : in std_ulogic;
     CAS_IN_RDB_WR_B : in std_ulogic;
     CAS_IN_SBITERR_A : in std_ulogic;
     CAS_IN_SBITERR_B : in std_ulogic;
     CLK : in std_ulogic;
     DIN_A : in std_logic_vector(71 downto 0);
     DIN_B : in std_logic_vector(71 downto 0);
     EN_A : in std_ulogic;
     EN_B : in std_ulogic;
     INJECT_DBITERR_A : in std_ulogic;
     INJECT_DBITERR_B : in std_ulogic;
     INJECT_SBITERR_A : in std_ulogic;
     INJECT_SBITERR_B : in std_ulogic;
     OREG_CE_A : in std_ulogic;
     OREG_CE_B : in std_ulogic;
     OREG_ECC_CE_A : in std_ulogic;
     OREG_ECC_CE_B : in std_ulogic;
     RDB_WR_A : in std_ulogic;
     RDB_WR_B : in std_ulogic;
     RST_A : in std_ulogic;
     RST_B : in std_ulogic;
     SLEEP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  URAM288E5 : component is "PRIMITIVE";

----- component URAM288E5_BASE -----
component URAM288E5_BASE
  generic (
     AUTO_SLEEP_LATENCY : integer := 8;
     AVG_CONS_INACTIVE_CYCLES : integer := 10;
     BWE_MODE_A : string := "PARITY_INTERLEAVED";
     BWE_MODE_B : string := "PARITY_INTERLEAVED";
     EN_AUTO_SLEEP_MODE : string := "FALSE";
     EN_ECC_RD_A : string := "FALSE";
     EN_ECC_RD_B : string := "FALSE";
     EN_ECC_WR_A : string := "FALSE";
     EN_ECC_WR_B : string := "FALSE";
     INIT_000 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_001 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_002 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_003 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_004 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_005 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_006 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_007 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_008 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_009 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_00F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_010 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_011 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_012 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_013 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_014 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_015 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_016 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_017 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_018 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_019 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_01F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_020 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_021 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_022 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_023 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_024 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_025 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_026 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_027 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_028 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_029 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_02F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_030 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_031 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_032 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_033 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_034 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_035 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_036 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_037 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_038 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_039 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_03F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_040 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_041 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_042 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_043 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_044 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_045 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_046 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_047 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_048 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_049 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_04F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_050 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_051 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_052 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_053 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_054 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_055 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_056 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_057 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_058 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_059 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_05F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_060 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_061 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_062 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_063 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_064 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_065 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_066 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_067 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_068 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_069 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_06F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_070 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_071 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_072 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_073 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_074 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_075 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_076 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_077 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_078 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_079 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_07F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_080 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_081 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_082 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_083 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_084 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_085 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_086 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_087 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_088 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_089 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_08F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_090 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_091 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_092 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_093 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_094 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_095 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_096 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_097 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_098 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_099 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_09F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_0FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_100 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_101 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_102 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_103 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_104 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_105 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_106 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_107 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_108 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_109 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_10F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_110 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_111 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_112 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_113 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_114 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_115 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_116 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_117 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_118 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_119 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_11F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_120 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_121 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_122 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_123 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_124 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_125 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_126 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_127 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_128 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_129 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_12F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_130 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_131 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_132 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_133 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_134 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_135 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_136 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_137 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_138 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_139 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_13F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_140 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_141 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_142 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_143 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_144 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_145 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_146 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_147 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_148 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_149 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_14F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_150 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_151 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_152 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_153 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_154 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_155 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_156 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_157 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_158 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_159 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_15F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_160 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_161 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_162 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_163 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_164 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_165 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_166 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_167 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_168 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_169 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_16F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_170 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_171 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_172 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_173 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_174 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_175 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_176 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_177 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_178 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_179 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_17F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_180 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_181 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_182 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_183 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_184 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_185 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_186 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_187 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_188 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_189 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_18F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_190 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_191 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_192 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_193 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_194 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_195 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_196 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_197 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_198 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_199 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_19F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_1FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_200 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_201 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_202 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_203 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_204 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_205 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_206 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_207 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_208 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_209 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_20F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_210 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_211 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_212 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_213 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_214 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_215 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_216 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_217 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_218 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_219 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_21F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_220 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_221 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_222 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_223 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_224 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_225 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_226 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_227 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_228 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_229 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_22F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_230 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_231 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_232 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_233 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_234 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_235 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_236 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_237 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_238 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_239 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_23F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_240 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_241 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_242 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_243 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_244 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_245 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_246 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_247 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_248 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_249 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_24F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_250 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_251 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_252 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_253 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_254 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_255 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_256 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_257 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_258 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_259 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_25F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_260 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_261 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_262 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_263 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_264 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_265 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_266 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_267 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_268 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_269 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_26F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_270 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_271 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_272 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_273 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_274 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_275 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_276 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_277 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_278 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_279 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_27F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_280 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_281 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_282 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_283 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_284 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_285 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_286 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_287 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_288 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_289 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_28F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_290 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_291 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_292 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_293 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_294 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_295 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_296 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_297 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_298 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_299 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_29F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_2FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_300 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_301 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_302 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_303 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_304 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_305 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_306 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_307 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_308 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_309 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_30F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_310 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_311 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_312 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_313 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_314 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_315 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_316 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_317 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_318 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_319 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_31F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_320 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_321 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_322 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_323 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_324 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_325 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_326 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_327 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_328 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_329 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_32F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_330 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_331 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_332 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_333 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_334 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_335 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_336 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_337 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_338 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_339 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_33F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_340 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_341 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_342 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_343 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_344 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_345 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_346 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_347 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_348 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_349 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_34F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_350 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_351 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_352 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_353 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_354 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_355 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_356 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_357 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_358 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_359 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_35F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_360 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_361 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_362 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_363 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_364 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_365 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_366 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_367 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_368 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_369 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_36F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_370 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_371 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_372 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_373 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_374 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_375 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_376 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_377 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_378 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_379 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_37F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_380 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_381 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_382 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_383 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_384 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_385 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_386 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_387 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_388 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_389 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_38F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_390 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_391 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_392 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_393 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_394 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_395 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_396 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_397 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_398 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_399 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39A : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39B : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39C : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39D : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39E : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_39F : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3AF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3BF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3CF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3DF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3ED : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3EF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F0 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F1 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F2 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F3 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F4 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F5 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F6 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F7 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F8 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F9 : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FA : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FB : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FC : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FD : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FE : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_3FF : std_logic_vector(287 downto 0) := X"000000000000000000000000000000000000000000000000000000000000000000000000";
     INIT_FILE : string := "NONE";
     IREG_PRE_A : string := "FALSE";
     IREG_PRE_B : string := "FALSE";
     IS_CLK_INVERTED : bit := '0';
     IS_EN_A_INVERTED : bit := '0';
     IS_EN_B_INVERTED : bit := '0';
     IS_RDB_WR_A_INVERTED : bit := '0';
     IS_RDB_WR_B_INVERTED : bit := '0';
     IS_RST_A_INVERTED : bit := '0';
     IS_RST_B_INVERTED : bit := '0';
     OREG_A : string := "FALSE";
     OREG_B : string := "FALSE";
     OREG_ECC_A : string := "FALSE";
     OREG_ECC_B : string := "FALSE";
     PR_SAVE_DATA : string := "FALSE";
     READ_WIDTH_A : integer := 72;
     READ_WIDTH_B : integer := 72;
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     USE_EXT_CE_A : string := "FALSE";
     USE_EXT_CE_B : string := "FALSE";
     WRITE_WIDTH_A : integer := 72;
     WRITE_WIDTH_B : integer := 72
  );
  port (
     DBITERR_A : out std_ulogic;
     DBITERR_B : out std_ulogic;
     DOUT_A : out std_logic_vector(71 downto 0);
     DOUT_B : out std_logic_vector(71 downto 0);
     SBITERR_A : out std_ulogic;
     SBITERR_B : out std_ulogic;
     ADDR_A : in std_logic_vector(25 downto 0);
     ADDR_B : in std_logic_vector(25 downto 0);
     BWE_A : in std_logic_vector(8 downto 0);
     BWE_B : in std_logic_vector(8 downto 0);
     CLK : in std_ulogic;
     DIN_A : in std_logic_vector(71 downto 0);
     DIN_B : in std_logic_vector(71 downto 0);
     EN_A : in std_ulogic;
     EN_B : in std_ulogic;
     INJECT_DBITERR_A : in std_ulogic;
     INJECT_DBITERR_B : in std_ulogic;
     INJECT_SBITERR_A : in std_ulogic;
     INJECT_SBITERR_B : in std_ulogic;
     OREG_CE_A : in std_ulogic;
     OREG_CE_B : in std_ulogic;
     OREG_ECC_CE_A : in std_ulogic;
     OREG_ECC_CE_B : in std_ulogic;
     RDB_WR_A : in std_ulogic;
     RDB_WR_B : in std_ulogic;
     RST_A : in std_ulogic;
     RST_B : in std_ulogic;
     SLEEP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  URAM288E5_BASE : component is "PRIMITIVE";

----- component URAM288_BASE -----
component URAM288_BASE
  generic (
     AUTO_SLEEP_LATENCY : integer := 8;
     AVG_CONS_INACTIVE_CYCLES : integer := 10;
     BWE_MODE_A : string := "PARITY_INTERLEAVED";
     BWE_MODE_B : string := "PARITY_INTERLEAVED";
     EN_AUTO_SLEEP_MODE : string := "FALSE";
     EN_ECC_RD_A : string := "FALSE";
     EN_ECC_RD_B : string := "FALSE";
     EN_ECC_WR_A : string := "FALSE";
     EN_ECC_WR_B : string := "FALSE";
     IREG_PRE_A : string := "FALSE";
     IREG_PRE_B : string := "FALSE";
     IS_CLK_INVERTED : bit := '0';
     IS_EN_A_INVERTED : bit := '0';
     IS_EN_B_INVERTED : bit := '0';
     IS_RDB_WR_A_INVERTED : bit := '0';
     IS_RDB_WR_B_INVERTED : bit := '0';
     IS_RST_A_INVERTED : bit := '0';
     IS_RST_B_INVERTED : bit := '0';
     OREG_A : string := "FALSE";
     OREG_B : string := "FALSE";
     OREG_ECC_A : string := "FALSE";
     OREG_ECC_B : string := "FALSE";
     RST_MODE_A : string := "SYNC";
     RST_MODE_B : string := "SYNC";
     USE_EXT_CE_A : string := "FALSE";
     USE_EXT_CE_B : string := "FALSE"
  );
  port (
     DBITERR_A : out std_ulogic;
     DBITERR_B : out std_ulogic;
     DOUT_A : out std_logic_vector(71 downto 0);
     DOUT_B : out std_logic_vector(71 downto 0);
     SBITERR_A : out std_ulogic;
     SBITERR_B : out std_ulogic;
     ADDR_A : in std_logic_vector(22 downto 0);
     ADDR_B : in std_logic_vector(22 downto 0);
     BWE_A : in std_logic_vector(8 downto 0);
     BWE_B : in std_logic_vector(8 downto 0);
     CLK : in std_ulogic;
     DIN_A : in std_logic_vector(71 downto 0);
     DIN_B : in std_logic_vector(71 downto 0);
     EN_A : in std_ulogic;
     EN_B : in std_ulogic;
     INJECT_DBITERR_A : in std_ulogic;
     INJECT_DBITERR_B : in std_ulogic;
     INJECT_SBITERR_A : in std_ulogic;
     INJECT_SBITERR_B : in std_ulogic;
     OREG_CE_A : in std_ulogic;
     OREG_CE_B : in std_ulogic;
     OREG_ECC_CE_A : in std_ulogic;
     OREG_ECC_CE_B : in std_ulogic;
     RDB_WR_A : in std_ulogic;
     RDB_WR_B : in std_ulogic;
     RST_A : in std_ulogic;
     RST_B : in std_ulogic;
     SLEEP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  URAM288_BASE : component is "PRIMITIVE";

----- component USR_ACCESSE2 -----
component USR_ACCESSE2
  port (
     CFGCLK : out std_ulogic;
     DATA : out std_logic_vector(31 downto 0);
     DATAVALID : out std_ulogic
  );
end component;
attribute BOX_TYPE of
  USR_ACCESSE2 : component is "PRIMITIVE";

----- component VCC -----
component VCC
  port (
     P : out std_ulogic := '1'
  );
end component;
attribute BOX_TYPE of
  VCC : component is "PRIMITIVE";

----- component VCU -----
component VCU
  generic (
     CORECLKREQ : integer := 667;
     DECHORRESOLUTION : integer := 3840;
     DECODERCHROMAFORMAT : string := "4_2_2";
     DECODERCODING : string := "H.265";
     DECODERCOLORDEPTH : integer := 10;
     DECODERNUMCORES : integer := 2;
     DECVERTRESOLUTION : integer := 2160;
     ENABLEDECODER : string := "TRUE";
     ENABLEENCODER : string := "TRUE";
     ENCHORRESOLUTION : integer := 3840;
     ENCODERCHROMAFORMAT : string := "4_2_2";
     ENCODERCODING : string := "H.265";
     ENCODERCOLORDEPTH : integer := 10;
     ENCODERNUMCORES : integer := 4;
     ENCVERTRESOLUTION : integer := 2160
  );
  port (
     VCUPLARREADYAXILITEAPB : out std_ulogic;
     VCUPLAWREADYAXILITEAPB : out std_ulogic;
     VCUPLBRESPAXILITEAPB : out std_logic_vector(1 downto 0);
     VCUPLBVALIDAXILITEAPB : out std_ulogic;
     VCUPLCORESTATUSCLKPLL : out std_ulogic;
     VCUPLDECARADDR0 : out std_logic_vector(43 downto 0);
     VCUPLDECARADDR1 : out std_logic_vector(43 downto 0);
     VCUPLDECARBURST0 : out std_logic_vector(1 downto 0);
     VCUPLDECARBURST1 : out std_logic_vector(1 downto 0);
     VCUPLDECARCACHE0 : out std_logic_vector(3 downto 0);
     VCUPLDECARCACHE1 : out std_logic_vector(3 downto 0);
     VCUPLDECARID0 : out std_logic_vector(3 downto 0);
     VCUPLDECARID1 : out std_logic_vector(3 downto 0);
     VCUPLDECARLEN0 : out std_logic_vector(7 downto 0);
     VCUPLDECARLEN1 : out std_logic_vector(7 downto 0);
     VCUPLDECARPROT0 : out std_ulogic;
     VCUPLDECARPROT1 : out std_ulogic;
     VCUPLDECARQOS0 : out std_logic_vector(3 downto 0);
     VCUPLDECARQOS1 : out std_logic_vector(3 downto 0);
     VCUPLDECARSIZE0 : out std_logic_vector(2 downto 0);
     VCUPLDECARSIZE1 : out std_logic_vector(2 downto 0);
     VCUPLDECARVALID0 : out std_ulogic;
     VCUPLDECARVALID1 : out std_ulogic;
     VCUPLDECAWADDR0 : out std_logic_vector(43 downto 0);
     VCUPLDECAWADDR1 : out std_logic_vector(43 downto 0);
     VCUPLDECAWBURST0 : out std_logic_vector(1 downto 0);
     VCUPLDECAWBURST1 : out std_logic_vector(1 downto 0);
     VCUPLDECAWCACHE0 : out std_logic_vector(3 downto 0);
     VCUPLDECAWCACHE1 : out std_logic_vector(3 downto 0);
     VCUPLDECAWID0 : out std_logic_vector(3 downto 0);
     VCUPLDECAWID1 : out std_logic_vector(3 downto 0);
     VCUPLDECAWLEN0 : out std_logic_vector(7 downto 0);
     VCUPLDECAWLEN1 : out std_logic_vector(7 downto 0);
     VCUPLDECAWPROT0 : out std_ulogic;
     VCUPLDECAWPROT1 : out std_ulogic;
     VCUPLDECAWQOS0 : out std_logic_vector(3 downto 0);
     VCUPLDECAWQOS1 : out std_logic_vector(3 downto 0);
     VCUPLDECAWSIZE0 : out std_logic_vector(2 downto 0);
     VCUPLDECAWSIZE1 : out std_logic_vector(2 downto 0);
     VCUPLDECAWVALID0 : out std_ulogic;
     VCUPLDECAWVALID1 : out std_ulogic;
     VCUPLDECBREADY0 : out std_ulogic;
     VCUPLDECBREADY1 : out std_ulogic;
     VCUPLDECRREADY0 : out std_ulogic;
     VCUPLDECRREADY1 : out std_ulogic;
     VCUPLDECWDATA0 : out std_logic_vector(127 downto 0);
     VCUPLDECWDATA1 : out std_logic_vector(127 downto 0);
     VCUPLDECWLAST0 : out std_ulogic;
     VCUPLDECWLAST1 : out std_ulogic;
     VCUPLDECWVALID0 : out std_ulogic;
     VCUPLDECWVALID1 : out std_ulogic;
     VCUPLENCALL2CADDR : out std_logic_vector(16 downto 0);
     VCUPLENCALL2CRVALID : out std_ulogic;
     VCUPLENCALL2CWDATA : out std_logic_vector(319 downto 0);
     VCUPLENCALL2CWVALID : out std_ulogic;
     VCUPLENCARADDR0 : out std_logic_vector(43 downto 0);
     VCUPLENCARADDR1 : out std_logic_vector(43 downto 0);
     VCUPLENCARBURST0 : out std_logic_vector(1 downto 0);
     VCUPLENCARBURST1 : out std_logic_vector(1 downto 0);
     VCUPLENCARCACHE0 : out std_logic_vector(3 downto 0);
     VCUPLENCARCACHE1 : out std_logic_vector(3 downto 0);
     VCUPLENCARID0 : out std_logic_vector(3 downto 0);
     VCUPLENCARID1 : out std_logic_vector(3 downto 0);
     VCUPLENCARLEN0 : out std_logic_vector(7 downto 0);
     VCUPLENCARLEN1 : out std_logic_vector(7 downto 0);
     VCUPLENCARPROT0 : out std_ulogic;
     VCUPLENCARPROT1 : out std_ulogic;
     VCUPLENCARQOS0 : out std_logic_vector(3 downto 0);
     VCUPLENCARQOS1 : out std_logic_vector(3 downto 0);
     VCUPLENCARSIZE0 : out std_logic_vector(2 downto 0);
     VCUPLENCARSIZE1 : out std_logic_vector(2 downto 0);
     VCUPLENCARVALID0 : out std_ulogic;
     VCUPLENCARVALID1 : out std_ulogic;
     VCUPLENCAWADDR0 : out std_logic_vector(43 downto 0);
     VCUPLENCAWADDR1 : out std_logic_vector(43 downto 0);
     VCUPLENCAWBURST0 : out std_logic_vector(1 downto 0);
     VCUPLENCAWBURST1 : out std_logic_vector(1 downto 0);
     VCUPLENCAWCACHE0 : out std_logic_vector(3 downto 0);
     VCUPLENCAWCACHE1 : out std_logic_vector(3 downto 0);
     VCUPLENCAWID0 : out std_logic_vector(3 downto 0);
     VCUPLENCAWID1 : out std_logic_vector(3 downto 0);
     VCUPLENCAWLEN0 : out std_logic_vector(7 downto 0);
     VCUPLENCAWLEN1 : out std_logic_vector(7 downto 0);
     VCUPLENCAWPROT0 : out std_ulogic;
     VCUPLENCAWPROT1 : out std_ulogic;
     VCUPLENCAWQOS0 : out std_logic_vector(3 downto 0);
     VCUPLENCAWQOS1 : out std_logic_vector(3 downto 0);
     VCUPLENCAWSIZE0 : out std_logic_vector(2 downto 0);
     VCUPLENCAWSIZE1 : out std_logic_vector(2 downto 0);
     VCUPLENCAWVALID0 : out std_ulogic;
     VCUPLENCAWVALID1 : out std_ulogic;
     VCUPLENCBREADY0 : out std_ulogic;
     VCUPLENCBREADY1 : out std_ulogic;
     VCUPLENCRREADY0 : out std_ulogic;
     VCUPLENCRREADY1 : out std_ulogic;
     VCUPLENCWDATA0 : out std_logic_vector(127 downto 0);
     VCUPLENCWDATA1 : out std_logic_vector(127 downto 0);
     VCUPLENCWLAST0 : out std_ulogic;
     VCUPLENCWLAST1 : out std_ulogic;
     VCUPLENCWVALID0 : out std_ulogic;
     VCUPLENCWVALID1 : out std_ulogic;
     VCUPLMCUMAXIICDCARADDR : out std_logic_vector(43 downto 0);
     VCUPLMCUMAXIICDCARBURST : out std_logic_vector(1 downto 0);
     VCUPLMCUMAXIICDCARCACHE : out std_logic_vector(3 downto 0);
     VCUPLMCUMAXIICDCARID : out std_logic_vector(2 downto 0);
     VCUPLMCUMAXIICDCARLEN : out std_logic_vector(7 downto 0);
     VCUPLMCUMAXIICDCARLOCK : out std_ulogic;
     VCUPLMCUMAXIICDCARPROT : out std_logic_vector(2 downto 0);
     VCUPLMCUMAXIICDCARQOS : out std_logic_vector(3 downto 0);
     VCUPLMCUMAXIICDCARSIZE : out std_logic_vector(2 downto 0);
     VCUPLMCUMAXIICDCARVALID : out std_ulogic;
     VCUPLMCUMAXIICDCAWADDR : out std_logic_vector(43 downto 0);
     VCUPLMCUMAXIICDCAWBURST : out std_logic_vector(1 downto 0);
     VCUPLMCUMAXIICDCAWCACHE : out std_logic_vector(3 downto 0);
     VCUPLMCUMAXIICDCAWID : out std_logic_vector(2 downto 0);
     VCUPLMCUMAXIICDCAWLEN : out std_logic_vector(7 downto 0);
     VCUPLMCUMAXIICDCAWLOCK : out std_ulogic;
     VCUPLMCUMAXIICDCAWPROT : out std_logic_vector(2 downto 0);
     VCUPLMCUMAXIICDCAWQOS : out std_logic_vector(3 downto 0);
     VCUPLMCUMAXIICDCAWSIZE : out std_logic_vector(2 downto 0);
     VCUPLMCUMAXIICDCAWVALID : out std_ulogic;
     VCUPLMCUMAXIICDCBREADY : out std_ulogic;
     VCUPLMCUMAXIICDCRREADY : out std_ulogic;
     VCUPLMCUMAXIICDCWDATA : out std_logic_vector(31 downto 0);
     VCUPLMCUMAXIICDCWLAST : out std_ulogic;
     VCUPLMCUMAXIICDCWSTRB : out std_logic_vector(3 downto 0);
     VCUPLMCUMAXIICDCWVALID : out std_ulogic;
     VCUPLMCUSTATUSCLKPLL : out std_ulogic;
     VCUPLPINTREQ : out std_ulogic;
     VCUPLPLLSTATUSPLLLOCK : out std_ulogic;
     VCUPLPWRSUPPLYSTATUSVCCAUX : out std_ulogic;
     VCUPLPWRSUPPLYSTATUSVCUINT : out std_ulogic;
     VCUPLRDATAAXILITEAPB : out std_logic_vector(31 downto 0);
     VCUPLRRESPAXILITEAPB : out std_logic_vector(1 downto 0);
     VCUPLRVALIDAXILITEAPB : out std_ulogic;
     VCUPLWREADYAXILITEAPB : out std_ulogic;
     INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD : in std_ulogic;
     PLVCUARADDRAXILITEAPB : in std_logic_vector(19 downto 0);
     PLVCUARPROTAXILITEAPB : in std_logic_vector(2 downto 0);
     PLVCUARVALIDAXILITEAPB : in std_ulogic;
     PLVCUAWADDRAXILITEAPB : in std_logic_vector(19 downto 0);
     PLVCUAWPROTAXILITEAPB : in std_logic_vector(2 downto 0);
     PLVCUAWVALIDAXILITEAPB : in std_ulogic;
     PLVCUAXIDECCLK : in std_ulogic;
     PLVCUAXIENCCLK : in std_ulogic;
     PLVCUAXILITECLK : in std_ulogic;
     PLVCUAXIMCUCLK : in std_ulogic;
     PLVCUBREADYAXILITEAPB : in std_ulogic;
     PLVCUCORECLK : in std_ulogic;
     PLVCUDECARREADY0 : in std_ulogic;
     PLVCUDECARREADY1 : in std_ulogic;
     PLVCUDECAWREADY0 : in std_ulogic;
     PLVCUDECAWREADY1 : in std_ulogic;
     PLVCUDECBID0 : in std_logic_vector(3 downto 0);
     PLVCUDECBID1 : in std_logic_vector(3 downto 0);
     PLVCUDECBRESP0 : in std_logic_vector(1 downto 0);
     PLVCUDECBRESP1 : in std_logic_vector(1 downto 0);
     PLVCUDECBVALID0 : in std_ulogic;
     PLVCUDECBVALID1 : in std_ulogic;
     PLVCUDECRDATA0 : in std_logic_vector(127 downto 0);
     PLVCUDECRDATA1 : in std_logic_vector(127 downto 0);
     PLVCUDECRID0 : in std_logic_vector(3 downto 0);
     PLVCUDECRID1 : in std_logic_vector(3 downto 0);
     PLVCUDECRLAST0 : in std_ulogic;
     PLVCUDECRLAST1 : in std_ulogic;
     PLVCUDECRRESP0 : in std_logic_vector(1 downto 0);
     PLVCUDECRRESP1 : in std_logic_vector(1 downto 0);
     PLVCUDECRVALID0 : in std_ulogic;
     PLVCUDECRVALID1 : in std_ulogic;
     PLVCUDECWREADY0 : in std_ulogic;
     PLVCUDECWREADY1 : in std_ulogic;
     PLVCUENCALL2CRDATA : in std_logic_vector(319 downto 0);
     PLVCUENCALL2CRREADY : in std_ulogic;
     PLVCUENCARREADY0 : in std_ulogic;
     PLVCUENCARREADY1 : in std_ulogic;
     PLVCUENCAWREADY0 : in std_ulogic;
     PLVCUENCAWREADY1 : in std_ulogic;
     PLVCUENCBID0 : in std_logic_vector(3 downto 0);
     PLVCUENCBID1 : in std_logic_vector(3 downto 0);
     PLVCUENCBRESP0 : in std_logic_vector(1 downto 0);
     PLVCUENCBRESP1 : in std_logic_vector(1 downto 0);
     PLVCUENCBVALID0 : in std_ulogic;
     PLVCUENCBVALID1 : in std_ulogic;
     PLVCUENCL2CCLK : in std_ulogic;
     PLVCUENCRDATA0 : in std_logic_vector(127 downto 0);
     PLVCUENCRDATA1 : in std_logic_vector(127 downto 0);
     PLVCUENCRID0 : in std_logic_vector(3 downto 0);
     PLVCUENCRID1 : in std_logic_vector(3 downto 0);
     PLVCUENCRLAST0 : in std_ulogic;
     PLVCUENCRLAST1 : in std_ulogic;
     PLVCUENCRRESP0 : in std_logic_vector(1 downto 0);
     PLVCUENCRRESP1 : in std_logic_vector(1 downto 0);
     PLVCUENCRVALID0 : in std_ulogic;
     PLVCUENCRVALID1 : in std_ulogic;
     PLVCUENCWREADY0 : in std_ulogic;
     PLVCUENCWREADY1 : in std_ulogic;
     PLVCUMCUCLK : in std_ulogic;
     PLVCUMCUMAXIICDCARREADY : in std_ulogic;
     PLVCUMCUMAXIICDCAWREADY : in std_ulogic;
     PLVCUMCUMAXIICDCBID : in std_logic_vector(2 downto 0);
     PLVCUMCUMAXIICDCBRESP : in std_logic_vector(1 downto 0);
     PLVCUMCUMAXIICDCBVALID : in std_ulogic;
     PLVCUMCUMAXIICDCRDATA : in std_logic_vector(31 downto 0);
     PLVCUMCUMAXIICDCRID : in std_logic_vector(2 downto 0);
     PLVCUMCUMAXIICDCRLAST : in std_ulogic;
     PLVCUMCUMAXIICDCRRESP : in std_logic_vector(1 downto 0);
     PLVCUMCUMAXIICDCRVALID : in std_ulogic;
     PLVCUMCUMAXIICDCWREADY : in std_ulogic;
     PLVCUPLLREFCLKPL : in std_ulogic;
     PLVCURAWRSTN : in std_ulogic;
     PLVCURREADYAXILITEAPB : in std_ulogic;
     PLVCUWDATAAXILITEAPB : in std_logic_vector(31 downto 0);
     PLVCUWSTRBAXILITEAPB : in std_logic_vector(3 downto 0);
     PLVCUWVALIDAXILITEAPB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  VCU : component is "PRIMITIVE";

----- component XADC -----
component XADC
  generic (
     INIT_40 : bit_vector := X"0000";
     INIT_41 : bit_vector := X"0000";
     INIT_42 : bit_vector := X"0800";
     INIT_43 : bit_vector := X"0000";
     INIT_44 : bit_vector := X"0000";
     INIT_45 : bit_vector := X"0000";
     INIT_46 : bit_vector := X"0000";
     INIT_47 : bit_vector := X"0000";
     INIT_48 : bit_vector := X"0000";
     INIT_49 : bit_vector := X"0000";
     INIT_4A : bit_vector := X"0000";
     INIT_4B : bit_vector := X"0000";
     INIT_4C : bit_vector := X"0000";
     INIT_4D : bit_vector := X"0000";
     INIT_4E : bit_vector := X"0000";
     INIT_4F : bit_vector := X"0000";
     INIT_50 : bit_vector := X"0000";
     INIT_51 : bit_vector := X"0000";
     INIT_52 : bit_vector := X"0000";
     INIT_53 : bit_vector := X"0000";
     INIT_54 : bit_vector := X"0000";
     INIT_55 : bit_vector := X"0000";
     INIT_56 : bit_vector := X"0000";
     INIT_57 : bit_vector := X"0000";
     INIT_58 : bit_vector := X"0000";
     INIT_59 : bit_vector := X"0000";
     INIT_5A : bit_vector := X"0000";
     INIT_5B : bit_vector := X"0000";
     INIT_5C : bit_vector := X"0000";
     INIT_5D : bit_vector := X"0000";
     INIT_5E : bit_vector := X"0000";
     INIT_5F : bit_vector := X"0000";
     IS_CONVSTCLK_INVERTED : bit := '0';
     IS_DCLK_INVERTED : bit := '0';
     SIM_DEVICE : string := "7SERIES";
     SIM_MONITOR_FILE : string := "design.txt"
  );
  port (
     ALM : out std_logic_vector(7 downto 0);
     BUSY : out std_ulogic;
     CHANNEL : out std_logic_vector(4 downto 0);
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     EOC : out std_ulogic;
     EOS : out std_ulogic;
     JTAGBUSY : out std_ulogic;
     JTAGLOCKED : out std_ulogic;
     JTAGMODIFIED : out std_ulogic;
     MUXADDR : out std_logic_vector(4 downto 0);
     OT : out std_ulogic;
     CONVST : in std_ulogic;
     CONVSTCLK : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     RESET : in std_ulogic;
     VAUXN : in std_logic_vector(15 downto 0);
     VAUXP : in std_logic_vector(15 downto 0);
     VN : in std_ulogic;
     VP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XADC : component is "PRIMITIVE";

----- component XORCY -----
component XORCY
  port (
     O : out std_ulogic;
     CI : in std_ulogic;
     LI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XORCY : component is "PRIMITIVE";

----- component XPHY -----
component XPHY
  generic (
     CASCADE_0 : string := "FALSE";
     CASCADE_1 : string := "FALSE";
     CASCADE_2 : string := "FALSE";
     CASCADE_3 : string := "FALSE";
     CASCADE_4 : string := "FALSE";
     CASCADE_5 : string := "FALSE";
     CONTINUOUS_DQS : string := "FALSE";
     CRSE_DLY_EN : string := "FALSE";
     DELAY_VALUE_0 : integer := 0;
     DELAY_VALUE_1 : integer := 0;
     DELAY_VALUE_2 : integer := 0;
     DELAY_VALUE_3 : integer := 0;
     DELAY_VALUE_4 : integer := 0;
     DELAY_VALUE_5 : integer := 0;
     DIS_IDLY_VT_TRACK : string := "FALSE";
     DIS_ODLY_VT_TRACK : string := "FALSE";
     DIS_QDLY_VT_TRACK : string := "FALSE";
     DQS_MODE : string := "DDR4_1TCK";
     DQS_SRC : string := "LOCAL";
     EN_CLK_TO_LOWER : string := "DISABLE";
     EN_CLK_TO_UPPER : string := "DISABLE";
     EN_DYN_DLY_MODE : string := "FALSE";
     EN_OTHER_NCLK : string := "FALSE";
     EN_OTHER_PCLK : string := "FALSE";
     FAST_CK : string := "FALSE";
     FIFO_MODE_0 : string := "ASYNC";
     FIFO_MODE_1 : string := "ASYNC";
     FIFO_MODE_2 : string := "ASYNC";
     FIFO_MODE_3 : string := "ASYNC";
     FIFO_MODE_4 : string := "ASYNC";
     FIFO_MODE_5 : string := "ASYNC";
     IBUF_DIS_SRC_0 : string := "EXTERNAL";
     IBUF_DIS_SRC_1 : string := "EXTERNAL";
     IBUF_DIS_SRC_2 : string := "EXTERNAL";
     IBUF_DIS_SRC_3 : string := "EXTERNAL";
     IBUF_DIS_SRC_4 : string := "EXTERNAL";
     IBUF_DIS_SRC_5 : string := "EXTERNAL";
     INV_RXCLK : string := "FALSE";
     LP4_DQS : string := "FALSE";
     ODELAY_BYPASS_0 : string := "FALSE";
     ODELAY_BYPASS_1 : string := "FALSE";
     ODELAY_BYPASS_2 : string := "FALSE";
     ODELAY_BYPASS_3 : string := "FALSE";
     ODELAY_BYPASS_4 : string := "FALSE";
     ODELAY_BYPASS_5 : string := "FALSE";
     ODT_SRC_0 : string := "EXTERNAL";
     ODT_SRC_1 : string := "EXTERNAL";
     ODT_SRC_2 : string := "EXTERNAL";
     ODT_SRC_3 : string := "EXTERNAL";
     ODT_SRC_4 : string := "EXTERNAL";
     ODT_SRC_5 : string := "EXTERNAL";
     PRIME_VAL : bit := '0';
     REFCLK_FREQUENCY : real := 200.0;
     RX_CLK_PHASE_N : string := "SHIFT_0";
     RX_CLK_PHASE_P : string := "SHIFT_0";
     RX_DATA_WIDTH : integer := 8;
     RX_GATING : string := "DISABLE";
     SELF_CALIBRATE : string := "ENABLE";
     SERIAL_MODE : string := "FALSE";
     TBYTE_CTL_0 : string := "T";
     TBYTE_CTL_1 : string := "T";
     TBYTE_CTL_2 : string := "T";
     TBYTE_CTL_3 : string := "T";
     TBYTE_CTL_4 : string := "T";
     TBYTE_CTL_5 : string := "T";
     TXRX_LOOPBACK_0 : string := "FALSE";
     TXRX_LOOPBACK_1 : string := "FALSE";
     TXRX_LOOPBACK_2 : string := "FALSE";
     TXRX_LOOPBACK_3 : string := "FALSE";
     TXRX_LOOPBACK_4 : string := "FALSE";
     TXRX_LOOPBACK_5 : string := "FALSE";
     TX_DATA_WIDTH : integer := 8;
     TX_GATING : string := "DISABLE";
     TX_INIT_0 : bit := '0';
     TX_INIT_1 : bit := '0';
     TX_INIT_2 : bit := '0';
     TX_INIT_3 : bit := '0';
     TX_INIT_4 : bit := '0';
     TX_INIT_5 : bit := '0';
     TX_INIT_TRI : bit := '1';
     TX_OUTPUT_PHASE_90_0 : string := "FALSE";
     TX_OUTPUT_PHASE_90_1 : string := "FALSE";
     TX_OUTPUT_PHASE_90_2 : string := "FALSE";
     TX_OUTPUT_PHASE_90_3 : string := "FALSE";
     TX_OUTPUT_PHASE_90_4 : string := "FALSE";
     TX_OUTPUT_PHASE_90_5 : string := "FALSE";
     TX_OUTPUT_PHASE_90_TRI : string := "FALSE";
     WRITE_LEVELING : string := "FALSE"
  );
  port (
     CLK_TO_LOWER : out std_ulogic;
     CLK_TO_UPPER : out std_ulogic;
     CNTVALUEOUT : out std_logic_vector(53 downto 0);
     DLY_RDY : out std_ulogic;
     DYN_DCI : out std_logic_vector(5 downto 0);
     FIFO_EMPTY : out std_ulogic;
     FIFO_WR_CLK : out std_ulogic;
     GT_STATUS : out std_ulogic;
     IBUF_DISABLE : out std_logic_vector(5 downto 0);
     NCLK_NIBBLE_OUT : out std_ulogic;
     O0 : out std_logic_vector(5 downto 0);
     PCLK_NIBBLE_OUT : out std_ulogic;
     PHY_RDY : out std_ulogic;
     Q0 : out std_logic_vector(7 downto 0);
     Q1 : out std_logic_vector(7 downto 0);
     Q2 : out std_logic_vector(7 downto 0);
     Q3 : out std_logic_vector(7 downto 0);
     Q4 : out std_logic_vector(7 downto 0);
     Q5 : out std_logic_vector(7 downto 0);
     RIU_RD_DATA : out std_logic_vector(15 downto 0);
     RIU_RD_VALID : out std_ulogic;
     T_OUT : out std_logic_vector(5 downto 0);
     CE : in std_logic_vector(5 downto 0);
     CLK_FROM_OTHER_XPHY : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(53 downto 0);
     CTRL_CLK : in std_ulogic;
     D0 : in std_logic_vector(7 downto 0);
     D1 : in std_logic_vector(7 downto 0);
     D2 : in std_logic_vector(7 downto 0);
     D3 : in std_logic_vector(7 downto 0);
     D4 : in std_logic_vector(7 downto 0);
     D5 : in std_logic_vector(7 downto 0);
     DATAIN : in std_logic_vector(5 downto 0);
     EN_VTC : in std_ulogic;
     FIFO_RDEN : in std_ulogic;
     FIFO_RD_CLK : in std_ulogic;
     INC : in std_logic_vector(5 downto 0);
     LD : in std_logic_vector(5 downto 0);
     NCLK_NIBBLE_IN : in std_ulogic;
     PCLK_NIBBLE_IN : in std_ulogic;
     PHY_RDCS0 : in std_logic_vector(3 downto 0);
     PHY_RDCS1 : in std_logic_vector(3 downto 0);
     PHY_RDEN : in std_logic_vector(3 downto 0);
     PHY_WRCS0 : in std_logic_vector(3 downto 0);
     PHY_WRCS1 : in std_logic_vector(3 downto 0);
     PHY_WREN : in std_logic_vector(3 downto 0);
     PLL_CLK : in std_ulogic;
     RIU_ADDR : in std_logic_vector(7 downto 0);
     RIU_NIBBLE_SEL : in std_ulogic;
     RIU_WR_DATA : in std_logic_vector(15 downto 0);
     RIU_WR_EN : in std_ulogic;
     RST : in std_ulogic;
     RXTX_SEL : in std_logic_vector(5 downto 0);
     RX_EN_VTC : in std_logic_vector(5 downto 0);
     RX_RST : in std_logic_vector(5 downto 0);
     T : in std_logic_vector(5 downto 0);
     TX_EN_VTC : in std_logic_vector(5 downto 0);
     TX_RST : in std_logic_vector(5 downto 0)
  );
end component;
attribute BOX_TYPE of
  XPHY : component is "PRIMITIVE";

----- component XPIO_VREF -----
component XPIO_VREF
  port (
     VREF : out std_ulogic;
     FABRIC_VREF_TUNE : in std_logic_vector(9 downto 0)
  );
end component;
attribute BOX_TYPE of
  XPIO_VREF : component is "PRIMITIVE";

----- component XPIPE_QUAD -----
component XPIPE_QUAD
  generic (
     SIM_DEVICE : string := "EVEREST";
     XPIPE_CLKDLY_CFG : std_logic_vector(31 downto 0) := X"00000000";
     XPIPE_CLK_CFG : std_logic_vector(31 downto 0) := X"00000000";
     XPIPE_INSTANTIATED : bit := '1';
     XPIPE_LINK0_CFG : string := "DISABLE";
     XPIPE_LINK1_CFG : string := "DISABLE";
     XPIPE_LOC : string := "QUAD0";
     XPIPE_MODE : std_logic_vector(1 downto 0) := "00";
     XPIPE_REG_CFG : std_logic_vector(15 downto 0) := X"0000";
     XPIPE_RSVD : std_logic_vector(31 downto 0) := X"00000000"
  );
  port (
     ALTCLK_M : out std_ulogic;
     APB3CLK_M : out std_ulogic;
     APB3PADDR_M : out std_logic_vector(15 downto 0);
     APB3PENABLE_M : out std_ulogic;
     APB3PRDATA : out std_logic_vector(31 downto 0);
     APB3PREADY : out std_ulogic;
     APB3PRESETN_M : out std_ulogic;
     APB3PSEL_M : out std_ulogic;
     APB3PSLVERR : out std_ulogic;
     APB3PWDATA_M : out std_logic_vector(31 downto 0);
     APB3PWRITE_M : out std_ulogic;
     AXISCLK_M : out std_ulogic;
     BGBYPASSB_M : out std_ulogic;
     BGMONITORENB_M : out std_ulogic;
     BGPDB_M : out std_ulogic;
     BGRCALOVRDENB_M : out std_ulogic;
     BGRCALOVRD_M : out std_logic_vector(4 downto 0);
     CH0_BUFGTCE : out std_ulogic;
     CH0_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH0_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH0_BUFGTRST : out std_ulogic;
     CH0_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH0_CDRBMCDRREQ_M : out std_ulogic;
     CH0_CDRFREQOS_M : out std_ulogic;
     CH0_CDRINCPCTRL_M : out std_ulogic;
     CH0_CDRSTEPDIR_M : out std_ulogic;
     CH0_CDRSTEPSQ_M : out std_ulogic;
     CH0_CDRSTEPSX_M : out std_ulogic;
     CH0_CFOKOVRDFINISH_M : out std_ulogic;
     CH0_CFOKOVRDPULSE_M : out std_ulogic;
     CH0_CFOKOVRDRDY0 : out std_ulogic;
     CH0_CFOKOVRDRDY1 : out std_ulogic;
     CH0_CFOKOVRDSTART_M : out std_ulogic;
     CH0_CLKRSVD0_M : out std_ulogic;
     CH0_CLKRSVD1_M : out std_ulogic;
     CH0_DMONFIFORESET_M : out std_ulogic;
     CH0_DMONITORCLK_M : out std_ulogic;
     CH0_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH0_EYESCANDATAERROR : out std_ulogic;
     CH0_EYESCANRESET_M : out std_ulogic;
     CH0_EYESCANTRIGGER_M : out std_ulogic;
     CH0_GTRSVD_M : out std_logic_vector(15 downto 0);
     CH0_GTRXRESET_M : out std_ulogic;
     CH0_GTTXRESET_M : out std_ulogic;
     CH0_HSDPPCSRESET_M : out std_ulogic;
     CH0_ILORESETDONE : out std_ulogic;
     CH0_ILORESETMASK_M : out std_ulogic;
     CH0_ILORESET_M : out std_ulogic;
     CH0_LOOPBACK_M : out std_logic_vector(2 downto 0);
     CH0_PCIERSTB_M : out std_ulogic;
     CH0_PCSRSVDIN_M : out std_logic_vector(15 downto 0);
     CH0_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH0_PHYESMADAPTSAVE_M : out std_ulogic;
     CH0_PHYREADY : out std_ulogic;
     CH0_PHYSTATUS : out std_ulogic;
     CH0_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH0_RESETEXCEPTION : out std_ulogic;
     CH0_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH0_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH0_RXBYTEISALIGNED : out std_ulogic;
     CH0_RXBYTEREALIGN : out std_ulogic;
     CH0_RXCDRHOLD_M : out std_ulogic;
     CH0_RXCDRLOCK : out std_ulogic;
     CH0_RXCDROVRDEN_M : out std_ulogic;
     CH0_RXCDRPHDONE : out std_ulogic;
     CH0_RXCDRRESET_M : out std_ulogic;
     CH0_RXCHANBONDSEQ : out std_ulogic;
     CH0_RXCHANISALIGNED : out std_ulogic;
     CH0_RXCHANREALIGN : out std_ulogic;
     CH0_RXCHBONDI_M : out std_logic_vector(4 downto 0);
     CH0_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH0_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH0_RXCOMINITDET : out std_ulogic;
     CH0_RXCOMMADET : out std_ulogic;
     CH0_RXCOMSASDET : out std_ulogic;
     CH0_RXCOMWAKEDET : out std_ulogic;
     CH0_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH0_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH0_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH0_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH0_RXDAPICODEOVRDEN_M : out std_ulogic;
     CH0_RXDAPICODERESET_M : out std_ulogic;
     CH0_RXDATA : out std_logic_vector(127 downto 0);
     CH0_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH0_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH0_RXDCCDONE : out std_ulogic;
     CH0_RXDLYALIGNERR : out std_ulogic;
     CH0_RXDLYALIGNPROG : out std_ulogic;
     CH0_RXDLYALIGNREQ_M : out std_ulogic;
     CH0_RXELECIDLE : out std_ulogic;
     CH0_RXEQTRAINING_M : out std_ulogic;
     CH0_RXFINEALIGNDONE : out std_ulogic;
     CH0_RXGEARBOXSLIP_M : out std_ulogic;
     CH0_RXHEADER : out std_logic_vector(5 downto 0);
     CH0_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH0_RXLATCLK_M : out std_ulogic;
     CH0_RXLPMEN_M : out std_ulogic;
     CH0_RXMLDCHAINDONE_M : out std_ulogic;
     CH0_RXMLDCHAINREQ_M : out std_ulogic;
     CH0_RXMLFINEALIGNREQ_M : out std_ulogic;
     CH0_RXOOBRESET_M : out std_ulogic;
     CH0_RXOSINTDONE : out std_ulogic;
     CH0_RXOSINTSTARTED : out std_ulogic;
     CH0_RXOSINTSTROBEDONE : out std_ulogic;
     CH0_RXOSINTSTROBESTARTED : out std_ulogic;
     CH0_RXPCSRESETMASK_M : out std_logic_vector(4 downto 0);
     CH0_RXPD_M : out std_logic_vector(1 downto 0);
     CH0_RXPHALIGNDONE : out std_ulogic;
     CH0_RXPHALIGNERR : out std_ulogic;
     CH0_RXPHALIGNREQ_M : out std_ulogic;
     CH0_RXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH0_RXPHDLYPD_M : out std_ulogic;
     CH0_RXPHDLYRESETDONE : out std_ulogic;
     CH0_RXPHDLYRESET_M : out std_ulogic;
     CH0_RXPHSETINITDONE : out std_ulogic;
     CH0_RXPHSETINITREQ_M : out std_ulogic;
     CH0_RXPHSHIFT180DONE : out std_ulogic;
     CH0_RXPHSHIFT180_M : out std_ulogic;
     CH0_RXPMARESETDONE : out std_ulogic;
     CH0_RXPMARESETMASK_M : out std_logic_vector(6 downto 0);
     CH0_RXPOLARITY_M : out std_ulogic;
     CH0_RXPRBSCNTRESET_M : out std_ulogic;
     CH0_RXPRBSERR : out std_ulogic;
     CH0_RXPRBSLOCKED : out std_ulogic;
     CH0_RXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH0_RXPROGDIVRESETDONE : out std_ulogic;
     CH0_RXPROGDIVRESET_M : out std_ulogic;
     CH0_RXRATE_M : out std_logic_vector(7 downto 0);
     CH0_RXRESETDONE : out std_ulogic;
     CH0_RXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH0_RXSLIDERDY : out std_ulogic;
     CH0_RXSLIDE_M : out std_ulogic;
     CH0_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH0_RXSTATUS : out std_logic_vector(2 downto 0);
     CH0_RXSYNCALLIN_M : out std_ulogic;
     CH0_RXSYNCDONE : out std_ulogic;
     CH0_RXTERMINATION_M : out std_ulogic;
     CH0_RXUSERRDY_M : out std_ulogic;
     CH0_RXUSRCLK_M : out std_ulogic;
     CH0_RXVALID : out std_ulogic;
     CH0_TSTIN_M : out std_logic_vector(19 downto 0);
     CH0_TX10GSTAT : out std_ulogic;
     CH0_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH0_TXCOMFINISH : out std_ulogic;
     CH0_TXCOMINIT_M : out std_ulogic;
     CH0_TXCOMSAS_M : out std_ulogic;
     CH0_TXCOMWAKE_M : out std_ulogic;
     CH0_TXCTRL0_M : out std_logic_vector(15 downto 0);
     CH0_TXCTRL1_M : out std_logic_vector(15 downto 0);
     CH0_TXCTRL2_M : out std_logic_vector(7 downto 0);
     CH0_TXDAPICODEOVRDEN_M : out std_ulogic;
     CH0_TXDAPICODERESET_M : out std_ulogic;
     CH0_TXDATAEXTENDRSVD_M : out std_logic_vector(7 downto 0);
     CH0_TXDATA_M : out std_logic_vector(127 downto 0);
     CH0_TXDCCDONE : out std_ulogic;
     CH0_TXDEEMPH_M : out std_logic_vector(1 downto 0);
     CH0_TXDETECTRX_M : out std_ulogic;
     CH0_TXDIFFCTRL_M : out std_logic_vector(4 downto 0);
     CH0_TXDLYALIGNERR : out std_ulogic;
     CH0_TXDLYALIGNPROG : out std_ulogic;
     CH0_TXDLYALIGNREQ_M : out std_ulogic;
     CH0_TXELECIDLE_M : out std_ulogic;
     CH0_TXHEADER_M : out std_logic_vector(5 downto 0);
     CH0_TXINHIBIT_M : out std_ulogic;
     CH0_TXLATCLK_M : out std_ulogic;
     CH0_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     CH0_TXMARGIN_M : out std_logic_vector(2 downto 0);
     CH0_TXMLDCHAINDONE_M : out std_ulogic;
     CH0_TXMLDCHAINREQ_M : out std_ulogic;
     CH0_TXONESZEROS_M : out std_ulogic;
     CH0_TXPAUSEDELAYALIGN_M : out std_ulogic;
     CH0_TXPCSRESETMASK_M : out std_ulogic;
     CH0_TXPD_M : out std_logic_vector(1 downto 0);
     CH0_TXPHALIGNDONE : out std_ulogic;
     CH0_TXPHALIGNERR : out std_ulogic;
     CH0_TXPHALIGNOUTRSVD : out std_ulogic;
     CH0_TXPHALIGNREQ_M : out std_ulogic;
     CH0_TXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH0_TXPHDLYPD_M : out std_ulogic;
     CH0_TXPHDLYRESETDONE : out std_ulogic;
     CH0_TXPHDLYRESET_M : out std_ulogic;
     CH0_TXPHDLYTSTCLK_M : out std_ulogic;
     CH0_TXPHSETINITDONE : out std_ulogic;
     CH0_TXPHSETINITREQ_M : out std_ulogic;
     CH0_TXPHSHIFT180DONE : out std_ulogic;
     CH0_TXPHSHIFT180_M : out std_ulogic;
     CH0_TXPICODEOVRDEN_M : out std_ulogic;
     CH0_TXPICODERESET_M : out std_ulogic;
     CH0_TXPIPPMEN_M : out std_ulogic;
     CH0_TXPIPPMSTEPSIZE_M : out std_logic_vector(4 downto 0);
     CH0_TXPISOPD_M : out std_ulogic;
     CH0_TXPMARESETDONE : out std_ulogic;
     CH0_TXPMARESETMASK_M : out std_logic_vector(2 downto 0);
     CH0_TXPOLARITY_M : out std_ulogic;
     CH0_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     CH0_TXPRBSFORCEERR_M : out std_ulogic;
     CH0_TXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH0_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     CH0_TXPROGDIVRESETDONE : out std_ulogic;
     CH0_TXPROGDIVRESET_M : out std_ulogic;
     CH0_TXRATE_M : out std_logic_vector(7 downto 0);
     CH0_TXRESETDONE : out std_ulogic;
     CH0_TXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH0_TXSEQUENCE_M : out std_logic_vector(6 downto 0);
     CH0_TXSWING_M : out std_ulogic;
     CH0_TXSYNCALLIN_M : out std_ulogic;
     CH0_TXSYNCDONE : out std_ulogic;
     CH0_TXUSERRDY_M : out std_ulogic;
     CH0_TXUSRCLK_M : out std_ulogic;
     CH1_BUFGTCE : out std_ulogic;
     CH1_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH1_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH1_BUFGTRST : out std_ulogic;
     CH1_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH1_CDRBMCDRREQ_M : out std_ulogic;
     CH1_CDRFREQOS_M : out std_ulogic;
     CH1_CDRINCPCTRL_M : out std_ulogic;
     CH1_CDRSTEPDIR_M : out std_ulogic;
     CH1_CDRSTEPSQ_M : out std_ulogic;
     CH1_CDRSTEPSX_M : out std_ulogic;
     CH1_CFOKOVRDFINISH_M : out std_ulogic;
     CH1_CFOKOVRDPULSE_M : out std_ulogic;
     CH1_CFOKOVRDRDY0 : out std_ulogic;
     CH1_CFOKOVRDRDY1 : out std_ulogic;
     CH1_CFOKOVRDSTART_M : out std_ulogic;
     CH1_CLKRSVD0_M : out std_ulogic;
     CH1_CLKRSVD1_M : out std_ulogic;
     CH1_DMONFIFORESET_M : out std_ulogic;
     CH1_DMONITORCLK_M : out std_ulogic;
     CH1_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH1_EYESCANDATAERROR : out std_ulogic;
     CH1_EYESCANRESET_M : out std_ulogic;
     CH1_EYESCANTRIGGER_M : out std_ulogic;
     CH1_GTRSVD_M : out std_logic_vector(15 downto 0);
     CH1_GTRXRESET_M : out std_ulogic;
     CH1_GTTXRESET_M : out std_ulogic;
     CH1_HSDPPCSRESET_M : out std_ulogic;
     CH1_ILORESETDONE : out std_ulogic;
     CH1_ILORESETMASK_M : out std_ulogic;
     CH1_ILORESET_M : out std_ulogic;
     CH1_LOOPBACK_M : out std_logic_vector(2 downto 0);
     CH1_PCIERSTB_M : out std_ulogic;
     CH1_PCSRSVDIN_M : out std_logic_vector(15 downto 0);
     CH1_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH1_PHYESMADAPTSAVE_M : out std_ulogic;
     CH1_PHYREADY : out std_ulogic;
     CH1_PHYSTATUS : out std_ulogic;
     CH1_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH1_RESETEXCEPTION : out std_ulogic;
     CH1_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH1_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH1_RXBYTEISALIGNED : out std_ulogic;
     CH1_RXBYTEREALIGN : out std_ulogic;
     CH1_RXCDRHOLD_M : out std_ulogic;
     CH1_RXCDRLOCK : out std_ulogic;
     CH1_RXCDROVRDEN_M : out std_ulogic;
     CH1_RXCDRPHDONE : out std_ulogic;
     CH1_RXCDRRESET_M : out std_ulogic;
     CH1_RXCHANBONDSEQ : out std_ulogic;
     CH1_RXCHANISALIGNED : out std_ulogic;
     CH1_RXCHANREALIGN : out std_ulogic;
     CH1_RXCHBONDI_M : out std_logic_vector(4 downto 0);
     CH1_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH1_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH1_RXCOMINITDET : out std_ulogic;
     CH1_RXCOMMADET : out std_ulogic;
     CH1_RXCOMSASDET : out std_ulogic;
     CH1_RXCOMWAKEDET : out std_ulogic;
     CH1_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH1_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH1_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH1_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH1_RXDAPICODEOVRDEN_M : out std_ulogic;
     CH1_RXDAPICODERESET_M : out std_ulogic;
     CH1_RXDATA : out std_logic_vector(127 downto 0);
     CH1_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH1_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH1_RXDCCDONE : out std_ulogic;
     CH1_RXDLYALIGNERR : out std_ulogic;
     CH1_RXDLYALIGNPROG : out std_ulogic;
     CH1_RXDLYALIGNREQ_M : out std_ulogic;
     CH1_RXELECIDLE : out std_ulogic;
     CH1_RXEQTRAINING_M : out std_ulogic;
     CH1_RXFINEALIGNDONE : out std_ulogic;
     CH1_RXGEARBOXSLIP_M : out std_ulogic;
     CH1_RXHEADER : out std_logic_vector(5 downto 0);
     CH1_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH1_RXLATCLK_M : out std_ulogic;
     CH1_RXLPMEN_M : out std_ulogic;
     CH1_RXMLDCHAINDONE_M : out std_ulogic;
     CH1_RXMLDCHAINREQ_M : out std_ulogic;
     CH1_RXMLFINEALIGNREQ_M : out std_ulogic;
     CH1_RXOOBRESET_M : out std_ulogic;
     CH1_RXOSINTDONE : out std_ulogic;
     CH1_RXOSINTSTARTED : out std_ulogic;
     CH1_RXOSINTSTROBEDONE : out std_ulogic;
     CH1_RXOSINTSTROBESTARTED : out std_ulogic;
     CH1_RXPCSRESETMASK_M : out std_logic_vector(4 downto 0);
     CH1_RXPD_M : out std_logic_vector(1 downto 0);
     CH1_RXPHALIGNDONE : out std_ulogic;
     CH1_RXPHALIGNERR : out std_ulogic;
     CH1_RXPHALIGNREQ_M : out std_ulogic;
     CH1_RXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH1_RXPHDLYPD_M : out std_ulogic;
     CH1_RXPHDLYRESETDONE : out std_ulogic;
     CH1_RXPHDLYRESET_M : out std_ulogic;
     CH1_RXPHSETINITDONE : out std_ulogic;
     CH1_RXPHSETINITREQ_M : out std_ulogic;
     CH1_RXPHSHIFT180DONE : out std_ulogic;
     CH1_RXPHSHIFT180_M : out std_ulogic;
     CH1_RXPMARESETDONE : out std_ulogic;
     CH1_RXPMARESETMASK_M : out std_logic_vector(6 downto 0);
     CH1_RXPOLARITY_M : out std_ulogic;
     CH1_RXPRBSCNTRESET_M : out std_ulogic;
     CH1_RXPRBSERR : out std_ulogic;
     CH1_RXPRBSLOCKED : out std_ulogic;
     CH1_RXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH1_RXPROGDIVRESETDONE : out std_ulogic;
     CH1_RXPROGDIVRESET_M : out std_ulogic;
     CH1_RXRATE_M : out std_logic_vector(7 downto 0);
     CH1_RXRESETDONE : out std_ulogic;
     CH1_RXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH1_RXSLIDERDY : out std_ulogic;
     CH1_RXSLIDE_M : out std_ulogic;
     CH1_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH1_RXSTATUS : out std_logic_vector(2 downto 0);
     CH1_RXSYNCALLIN_M : out std_ulogic;
     CH1_RXSYNCDONE : out std_ulogic;
     CH1_RXTERMINATION_M : out std_ulogic;
     CH1_RXUSERRDY_M : out std_ulogic;
     CH1_RXUSRCLK_M : out std_ulogic;
     CH1_RXVALID : out std_ulogic;
     CH1_TSTIN_M : out std_logic_vector(19 downto 0);
     CH1_TX10GSTAT : out std_ulogic;
     CH1_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH1_TXCOMFINISH : out std_ulogic;
     CH1_TXCOMINIT_M : out std_ulogic;
     CH1_TXCOMSAS_M : out std_ulogic;
     CH1_TXCOMWAKE_M : out std_ulogic;
     CH1_TXCTRL0_M : out std_logic_vector(15 downto 0);
     CH1_TXCTRL1_M : out std_logic_vector(15 downto 0);
     CH1_TXCTRL2_M : out std_logic_vector(7 downto 0);
     CH1_TXDAPICODEOVRDEN_M : out std_ulogic;
     CH1_TXDAPICODERESET_M : out std_ulogic;
     CH1_TXDATAEXTENDRSVD_M : out std_logic_vector(7 downto 0);
     CH1_TXDATA_M : out std_logic_vector(127 downto 0);
     CH1_TXDCCDONE : out std_ulogic;
     CH1_TXDEEMPH_M : out std_logic_vector(1 downto 0);
     CH1_TXDETECTRX_M : out std_ulogic;
     CH1_TXDIFFCTRL_M : out std_logic_vector(4 downto 0);
     CH1_TXDLYALIGNERR : out std_ulogic;
     CH1_TXDLYALIGNPROG : out std_ulogic;
     CH1_TXDLYALIGNREQ_M : out std_ulogic;
     CH1_TXELECIDLE_M : out std_ulogic;
     CH1_TXHEADER_M : out std_logic_vector(5 downto 0);
     CH1_TXINHIBIT_M : out std_ulogic;
     CH1_TXLATCLK_M : out std_ulogic;
     CH1_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     CH1_TXMARGIN_M : out std_logic_vector(2 downto 0);
     CH1_TXMLDCHAINDONE_M : out std_ulogic;
     CH1_TXMLDCHAINREQ_M : out std_ulogic;
     CH1_TXONESZEROS_M : out std_ulogic;
     CH1_TXPAUSEDELAYALIGN_M : out std_ulogic;
     CH1_TXPCSRESETMASK_M : out std_ulogic;
     CH1_TXPD_M : out std_logic_vector(1 downto 0);
     CH1_TXPHALIGNDONE : out std_ulogic;
     CH1_TXPHALIGNERR : out std_ulogic;
     CH1_TXPHALIGNOUTRSVD : out std_ulogic;
     CH1_TXPHALIGNREQ_M : out std_ulogic;
     CH1_TXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH1_TXPHDLYPD_M : out std_ulogic;
     CH1_TXPHDLYRESETDONE : out std_ulogic;
     CH1_TXPHDLYRESET_M : out std_ulogic;
     CH1_TXPHDLYTSTCLK_M : out std_ulogic;
     CH1_TXPHSETINITDONE : out std_ulogic;
     CH1_TXPHSETINITREQ_M : out std_ulogic;
     CH1_TXPHSHIFT180DONE : out std_ulogic;
     CH1_TXPHSHIFT180_M : out std_ulogic;
     CH1_TXPICODEOVRDEN_M : out std_ulogic;
     CH1_TXPICODERESET_M : out std_ulogic;
     CH1_TXPIPPMEN_M : out std_ulogic;
     CH1_TXPIPPMSTEPSIZE_M : out std_logic_vector(4 downto 0);
     CH1_TXPISOPD_M : out std_ulogic;
     CH1_TXPMARESETDONE : out std_ulogic;
     CH1_TXPMARESETMASK_M : out std_logic_vector(2 downto 0);
     CH1_TXPOLARITY_M : out std_ulogic;
     CH1_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     CH1_TXPRBSFORCEERR_M : out std_ulogic;
     CH1_TXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH1_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     CH1_TXPROGDIVRESETDONE : out std_ulogic;
     CH1_TXPROGDIVRESET_M : out std_ulogic;
     CH1_TXRATE_M : out std_logic_vector(7 downto 0);
     CH1_TXRESETDONE : out std_ulogic;
     CH1_TXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH1_TXSEQUENCE_M : out std_logic_vector(6 downto 0);
     CH1_TXSWING_M : out std_ulogic;
     CH1_TXSYNCALLIN_M : out std_ulogic;
     CH1_TXSYNCDONE : out std_ulogic;
     CH1_TXUSERRDY_M : out std_ulogic;
     CH1_TXUSRCLK_M : out std_ulogic;
     CH2_BUFGTCE : out std_ulogic;
     CH2_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH2_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH2_BUFGTRST : out std_ulogic;
     CH2_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH2_CDRBMCDRREQ_M : out std_ulogic;
     CH2_CDRFREQOS_M : out std_ulogic;
     CH2_CDRINCPCTRL_M : out std_ulogic;
     CH2_CDRSTEPDIR_M : out std_ulogic;
     CH2_CDRSTEPSQ_M : out std_ulogic;
     CH2_CDRSTEPSX_M : out std_ulogic;
     CH2_CFOKOVRDFINISH_M : out std_ulogic;
     CH2_CFOKOVRDPULSE_M : out std_ulogic;
     CH2_CFOKOVRDRDY0 : out std_ulogic;
     CH2_CFOKOVRDRDY1 : out std_ulogic;
     CH2_CFOKOVRDSTART_M : out std_ulogic;
     CH2_CLKRSVD0_M : out std_ulogic;
     CH2_CLKRSVD1_M : out std_ulogic;
     CH2_DMONFIFORESET_M : out std_ulogic;
     CH2_DMONITORCLK_M : out std_ulogic;
     CH2_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH2_EYESCANDATAERROR : out std_ulogic;
     CH2_EYESCANRESET_M : out std_ulogic;
     CH2_EYESCANTRIGGER_M : out std_ulogic;
     CH2_GTRSVD_M : out std_logic_vector(15 downto 0);
     CH2_GTRXRESET_M : out std_ulogic;
     CH2_GTTXRESET_M : out std_ulogic;
     CH2_HSDPPCSRESET_M : out std_ulogic;
     CH2_ILORESETDONE : out std_ulogic;
     CH2_ILORESETMASK_M : out std_ulogic;
     CH2_ILORESET_M : out std_ulogic;
     CH2_LOOPBACK_M : out std_logic_vector(2 downto 0);
     CH2_PCIERSTB_M : out std_ulogic;
     CH2_PCSRSVDIN_M : out std_logic_vector(15 downto 0);
     CH2_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH2_PHYESMADAPTSAVE_M : out std_ulogic;
     CH2_PHYREADY : out std_ulogic;
     CH2_PHYSTATUS : out std_ulogic;
     CH2_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH2_RESETEXCEPTION : out std_ulogic;
     CH2_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH2_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH2_RXBYTEISALIGNED : out std_ulogic;
     CH2_RXBYTEREALIGN : out std_ulogic;
     CH2_RXCDRHOLD_M : out std_ulogic;
     CH2_RXCDRLOCK : out std_ulogic;
     CH2_RXCDROVRDEN_M : out std_ulogic;
     CH2_RXCDRPHDONE : out std_ulogic;
     CH2_RXCDRRESET_M : out std_ulogic;
     CH2_RXCHANBONDSEQ : out std_ulogic;
     CH2_RXCHANISALIGNED : out std_ulogic;
     CH2_RXCHANREALIGN : out std_ulogic;
     CH2_RXCHBONDI_M : out std_logic_vector(4 downto 0);
     CH2_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH2_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH2_RXCOMINITDET : out std_ulogic;
     CH2_RXCOMMADET : out std_ulogic;
     CH2_RXCOMSASDET : out std_ulogic;
     CH2_RXCOMWAKEDET : out std_ulogic;
     CH2_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH2_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH2_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH2_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH2_RXDAPICODEOVRDEN_M : out std_ulogic;
     CH2_RXDAPICODERESET_M : out std_ulogic;
     CH2_RXDATA : out std_logic_vector(127 downto 0);
     CH2_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH2_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH2_RXDCCDONE : out std_ulogic;
     CH2_RXDLYALIGNERR : out std_ulogic;
     CH2_RXDLYALIGNPROG : out std_ulogic;
     CH2_RXDLYALIGNREQ_M : out std_ulogic;
     CH2_RXELECIDLE : out std_ulogic;
     CH2_RXEQTRAINING_M : out std_ulogic;
     CH2_RXFINEALIGNDONE : out std_ulogic;
     CH2_RXGEARBOXSLIP_M : out std_ulogic;
     CH2_RXHEADER : out std_logic_vector(5 downto 0);
     CH2_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH2_RXLATCLK_M : out std_ulogic;
     CH2_RXLPMEN_M : out std_ulogic;
     CH2_RXMLDCHAINDONE_M : out std_ulogic;
     CH2_RXMLDCHAINREQ_M : out std_ulogic;
     CH2_RXMLFINEALIGNREQ_M : out std_ulogic;
     CH2_RXOOBRESET_M : out std_ulogic;
     CH2_RXOSINTDONE : out std_ulogic;
     CH2_RXOSINTSTARTED : out std_ulogic;
     CH2_RXOSINTSTROBEDONE : out std_ulogic;
     CH2_RXOSINTSTROBESTARTED : out std_ulogic;
     CH2_RXPCSRESETMASK_M : out std_logic_vector(4 downto 0);
     CH2_RXPD_M : out std_logic_vector(1 downto 0);
     CH2_RXPHALIGNDONE : out std_ulogic;
     CH2_RXPHALIGNERR : out std_ulogic;
     CH2_RXPHALIGNREQ_M : out std_ulogic;
     CH2_RXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH2_RXPHDLYPD_M : out std_ulogic;
     CH2_RXPHDLYRESETDONE : out std_ulogic;
     CH2_RXPHDLYRESET_M : out std_ulogic;
     CH2_RXPHSETINITDONE : out std_ulogic;
     CH2_RXPHSETINITREQ_M : out std_ulogic;
     CH2_RXPHSHIFT180DONE : out std_ulogic;
     CH2_RXPHSHIFT180_M : out std_ulogic;
     CH2_RXPMARESETDONE : out std_ulogic;
     CH2_RXPMARESETMASK_M : out std_logic_vector(6 downto 0);
     CH2_RXPOLARITY_M : out std_ulogic;
     CH2_RXPRBSCNTRESET_M : out std_ulogic;
     CH2_RXPRBSERR : out std_ulogic;
     CH2_RXPRBSLOCKED : out std_ulogic;
     CH2_RXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH2_RXPROGDIVRESETDONE : out std_ulogic;
     CH2_RXPROGDIVRESET_M : out std_ulogic;
     CH2_RXRATE_M : out std_logic_vector(7 downto 0);
     CH2_RXRESETDONE : out std_ulogic;
     CH2_RXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH2_RXSLIDERDY : out std_ulogic;
     CH2_RXSLIDE_M : out std_ulogic;
     CH2_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH2_RXSTATUS : out std_logic_vector(2 downto 0);
     CH2_RXSYNCALLIN_M : out std_ulogic;
     CH2_RXSYNCDONE : out std_ulogic;
     CH2_RXTERMINATION_M : out std_ulogic;
     CH2_RXUSERRDY_M : out std_ulogic;
     CH2_RXUSRCLK_M : out std_ulogic;
     CH2_RXVALID : out std_ulogic;
     CH2_TSTIN_M : out std_logic_vector(19 downto 0);
     CH2_TX10GSTAT : out std_ulogic;
     CH2_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH2_TXCOMFINISH : out std_ulogic;
     CH2_TXCOMINIT_M : out std_ulogic;
     CH2_TXCOMSAS_M : out std_ulogic;
     CH2_TXCOMWAKE_M : out std_ulogic;
     CH2_TXCTRL0_M : out std_logic_vector(15 downto 0);
     CH2_TXCTRL1_M : out std_logic_vector(15 downto 0);
     CH2_TXCTRL2_M : out std_logic_vector(7 downto 0);
     CH2_TXDAPICODEOVRDEN_M : out std_ulogic;
     CH2_TXDAPICODERESET_M : out std_ulogic;
     CH2_TXDATAEXTENDRSVD_M : out std_logic_vector(7 downto 0);
     CH2_TXDATA_M : out std_logic_vector(127 downto 0);
     CH2_TXDCCDONE : out std_ulogic;
     CH2_TXDEEMPH_M : out std_logic_vector(1 downto 0);
     CH2_TXDETECTRX_M : out std_ulogic;
     CH2_TXDIFFCTRL_M : out std_logic_vector(4 downto 0);
     CH2_TXDLYALIGNERR : out std_ulogic;
     CH2_TXDLYALIGNPROG : out std_ulogic;
     CH2_TXDLYALIGNREQ_M : out std_ulogic;
     CH2_TXELECIDLE_M : out std_ulogic;
     CH2_TXHEADER_M : out std_logic_vector(5 downto 0);
     CH2_TXINHIBIT_M : out std_ulogic;
     CH2_TXLATCLK_M : out std_ulogic;
     CH2_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     CH2_TXMARGIN_M : out std_logic_vector(2 downto 0);
     CH2_TXMLDCHAINDONE_M : out std_ulogic;
     CH2_TXMLDCHAINREQ_M : out std_ulogic;
     CH2_TXONESZEROS_M : out std_ulogic;
     CH2_TXPAUSEDELAYALIGN_M : out std_ulogic;
     CH2_TXPCSRESETMASK_M : out std_ulogic;
     CH2_TXPD_M : out std_logic_vector(1 downto 0);
     CH2_TXPHALIGNDONE : out std_ulogic;
     CH2_TXPHALIGNERR : out std_ulogic;
     CH2_TXPHALIGNOUTRSVD : out std_ulogic;
     CH2_TXPHALIGNREQ_M : out std_ulogic;
     CH2_TXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH2_TXPHDLYPD_M : out std_ulogic;
     CH2_TXPHDLYRESETDONE : out std_ulogic;
     CH2_TXPHDLYRESET_M : out std_ulogic;
     CH2_TXPHDLYTSTCLK_M : out std_ulogic;
     CH2_TXPHSETINITDONE : out std_ulogic;
     CH2_TXPHSETINITREQ_M : out std_ulogic;
     CH2_TXPHSHIFT180DONE : out std_ulogic;
     CH2_TXPHSHIFT180_M : out std_ulogic;
     CH2_TXPICODEOVRDEN_M : out std_ulogic;
     CH2_TXPICODERESET_M : out std_ulogic;
     CH2_TXPIPPMEN_M : out std_ulogic;
     CH2_TXPIPPMSTEPSIZE_M : out std_logic_vector(4 downto 0);
     CH2_TXPISOPD_M : out std_ulogic;
     CH2_TXPMARESETDONE : out std_ulogic;
     CH2_TXPMARESETMASK_M : out std_logic_vector(2 downto 0);
     CH2_TXPOLARITY_M : out std_ulogic;
     CH2_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     CH2_TXPRBSFORCEERR_M : out std_ulogic;
     CH2_TXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH2_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     CH2_TXPROGDIVRESETDONE : out std_ulogic;
     CH2_TXPROGDIVRESET_M : out std_ulogic;
     CH2_TXRATE_M : out std_logic_vector(7 downto 0);
     CH2_TXRESETDONE : out std_ulogic;
     CH2_TXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH2_TXSEQUENCE_M : out std_logic_vector(6 downto 0);
     CH2_TXSWING_M : out std_ulogic;
     CH2_TXSYNCALLIN_M : out std_ulogic;
     CH2_TXSYNCDONE : out std_ulogic;
     CH2_TXUSERRDY_M : out std_ulogic;
     CH2_TXUSRCLK_M : out std_ulogic;
     CH3_BUFGTCE : out std_ulogic;
     CH3_BUFGTCEMASK : out std_logic_vector(3 downto 0);
     CH3_BUFGTDIV : out std_logic_vector(11 downto 0);
     CH3_BUFGTRST : out std_ulogic;
     CH3_BUFGTRSTMASK : out std_logic_vector(3 downto 0);
     CH3_CDRBMCDRREQ_M : out std_ulogic;
     CH3_CDRFREQOS_M : out std_ulogic;
     CH3_CDRINCPCTRL_M : out std_ulogic;
     CH3_CDRSTEPDIR_M : out std_ulogic;
     CH3_CDRSTEPSQ_M : out std_ulogic;
     CH3_CDRSTEPSX_M : out std_ulogic;
     CH3_CFOKOVRDFINISH_M : out std_ulogic;
     CH3_CFOKOVRDPULSE_M : out std_ulogic;
     CH3_CFOKOVRDRDY0 : out std_ulogic;
     CH3_CFOKOVRDRDY1 : out std_ulogic;
     CH3_CFOKOVRDSTART_M : out std_ulogic;
     CH3_CLKRSVD0_M : out std_ulogic;
     CH3_CLKRSVD1_M : out std_ulogic;
     CH3_DMONFIFORESET_M : out std_ulogic;
     CH3_DMONITORCLK_M : out std_ulogic;
     CH3_DMONITOROUT : out std_logic_vector(31 downto 0);
     CH3_EYESCANDATAERROR : out std_ulogic;
     CH3_EYESCANRESET_M : out std_ulogic;
     CH3_EYESCANTRIGGER_M : out std_ulogic;
     CH3_GTRSVD_M : out std_logic_vector(15 downto 0);
     CH3_GTRXRESET_M : out std_ulogic;
     CH3_GTTXRESET_M : out std_ulogic;
     CH3_HSDPPCSRESET_M : out std_ulogic;
     CH3_ILORESETDONE : out std_ulogic;
     CH3_ILORESETMASK_M : out std_ulogic;
     CH3_ILORESET_M : out std_ulogic;
     CH3_LOOPBACK_M : out std_logic_vector(2 downto 0);
     CH3_PCIERSTB_M : out std_ulogic;
     CH3_PCSRSVDIN_M : out std_logic_vector(15 downto 0);
     CH3_PCSRSVDOUT : out std_logic_vector(15 downto 0);
     CH3_PHYESMADAPTSAVE_M : out std_ulogic;
     CH3_PHYREADY : out std_ulogic;
     CH3_PHYSTATUS : out std_ulogic;
     CH3_PINRSVDAS : out std_logic_vector(15 downto 0);
     CH3_RESETEXCEPTION : out std_ulogic;
     CH3_RX10GSTAT : out std_logic_vector(7 downto 0);
     CH3_RXBUFSTATUS : out std_logic_vector(2 downto 0);
     CH3_RXBYTEISALIGNED : out std_ulogic;
     CH3_RXBYTEREALIGN : out std_ulogic;
     CH3_RXCDRHOLD_M : out std_ulogic;
     CH3_RXCDRLOCK : out std_ulogic;
     CH3_RXCDROVRDEN_M : out std_ulogic;
     CH3_RXCDRPHDONE : out std_ulogic;
     CH3_RXCDRRESET_M : out std_ulogic;
     CH3_RXCHANBONDSEQ : out std_ulogic;
     CH3_RXCHANISALIGNED : out std_ulogic;
     CH3_RXCHANREALIGN : out std_ulogic;
     CH3_RXCHBONDI_M : out std_logic_vector(4 downto 0);
     CH3_RXCHBONDO : out std_logic_vector(4 downto 0);
     CH3_RXCLKCORCNT : out std_logic_vector(1 downto 0);
     CH3_RXCOMINITDET : out std_ulogic;
     CH3_RXCOMMADET : out std_ulogic;
     CH3_RXCOMSASDET : out std_ulogic;
     CH3_RXCOMWAKEDET : out std_ulogic;
     CH3_RXCTRL0 : out std_logic_vector(15 downto 0);
     CH3_RXCTRL1 : out std_logic_vector(15 downto 0);
     CH3_RXCTRL2 : out std_logic_vector(7 downto 0);
     CH3_RXCTRL3 : out std_logic_vector(7 downto 0);
     CH3_RXDAPICODEOVRDEN_M : out std_ulogic;
     CH3_RXDAPICODERESET_M : out std_ulogic;
     CH3_RXDATA : out std_logic_vector(127 downto 0);
     CH3_RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     CH3_RXDATAVALID : out std_logic_vector(1 downto 0);
     CH3_RXDCCDONE : out std_ulogic;
     CH3_RXDLYALIGNERR : out std_ulogic;
     CH3_RXDLYALIGNPROG : out std_ulogic;
     CH3_RXDLYALIGNREQ_M : out std_ulogic;
     CH3_RXELECIDLE : out std_ulogic;
     CH3_RXEQTRAINING_M : out std_ulogic;
     CH3_RXFINEALIGNDONE : out std_ulogic;
     CH3_RXGEARBOXSLIP_M : out std_ulogic;
     CH3_RXHEADER : out std_logic_vector(5 downto 0);
     CH3_RXHEADERVALID : out std_logic_vector(1 downto 0);
     CH3_RXLATCLK_M : out std_ulogic;
     CH3_RXLPMEN_M : out std_ulogic;
     CH3_RXMLDCHAINDONE_M : out std_ulogic;
     CH3_RXMLDCHAINREQ_M : out std_ulogic;
     CH3_RXMLFINEALIGNREQ_M : out std_ulogic;
     CH3_RXOOBRESET_M : out std_ulogic;
     CH3_RXOSINTDONE : out std_ulogic;
     CH3_RXOSINTSTARTED : out std_ulogic;
     CH3_RXOSINTSTROBEDONE : out std_ulogic;
     CH3_RXOSINTSTROBESTARTED : out std_ulogic;
     CH3_RXPCSRESETMASK_M : out std_logic_vector(4 downto 0);
     CH3_RXPD_M : out std_logic_vector(1 downto 0);
     CH3_RXPHALIGNDONE : out std_ulogic;
     CH3_RXPHALIGNERR : out std_ulogic;
     CH3_RXPHALIGNREQ_M : out std_ulogic;
     CH3_RXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH3_RXPHDLYPD_M : out std_ulogic;
     CH3_RXPHDLYRESETDONE : out std_ulogic;
     CH3_RXPHDLYRESET_M : out std_ulogic;
     CH3_RXPHSETINITDONE : out std_ulogic;
     CH3_RXPHSETINITREQ_M : out std_ulogic;
     CH3_RXPHSHIFT180DONE : out std_ulogic;
     CH3_RXPHSHIFT180_M : out std_ulogic;
     CH3_RXPMARESETDONE : out std_ulogic;
     CH3_RXPMARESETMASK_M : out std_logic_vector(6 downto 0);
     CH3_RXPOLARITY_M : out std_ulogic;
     CH3_RXPRBSCNTRESET_M : out std_ulogic;
     CH3_RXPRBSERR : out std_ulogic;
     CH3_RXPRBSLOCKED : out std_ulogic;
     CH3_RXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH3_RXPROGDIVRESETDONE : out std_ulogic;
     CH3_RXPROGDIVRESET_M : out std_ulogic;
     CH3_RXRATE_M : out std_logic_vector(7 downto 0);
     CH3_RXRESETDONE : out std_ulogic;
     CH3_RXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH3_RXSLIDERDY : out std_ulogic;
     CH3_RXSLIDE_M : out std_ulogic;
     CH3_RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     CH3_RXSTATUS : out std_logic_vector(2 downto 0);
     CH3_RXSYNCALLIN_M : out std_ulogic;
     CH3_RXSYNCDONE : out std_ulogic;
     CH3_RXTERMINATION_M : out std_ulogic;
     CH3_RXUSERRDY_M : out std_ulogic;
     CH3_RXUSRCLK_M : out std_ulogic;
     CH3_RXVALID : out std_ulogic;
     CH3_TSTIN_M : out std_logic_vector(19 downto 0);
     CH3_TX10GSTAT : out std_ulogic;
     CH3_TXBUFSTATUS : out std_logic_vector(1 downto 0);
     CH3_TXCOMFINISH : out std_ulogic;
     CH3_TXCOMINIT_M : out std_ulogic;
     CH3_TXCOMSAS_M : out std_ulogic;
     CH3_TXCOMWAKE_M : out std_ulogic;
     CH3_TXCTRL0_M : out std_logic_vector(15 downto 0);
     CH3_TXCTRL1_M : out std_logic_vector(15 downto 0);
     CH3_TXCTRL2_M : out std_logic_vector(7 downto 0);
     CH3_TXDAPICODEOVRDEN_M : out std_ulogic;
     CH3_TXDAPICODERESET_M : out std_ulogic;
     CH3_TXDATAEXTENDRSVD_M : out std_logic_vector(7 downto 0);
     CH3_TXDATA_M : out std_logic_vector(127 downto 0);
     CH3_TXDCCDONE : out std_ulogic;
     CH3_TXDEEMPH_M : out std_logic_vector(1 downto 0);
     CH3_TXDETECTRX_M : out std_ulogic;
     CH3_TXDIFFCTRL_M : out std_logic_vector(4 downto 0);
     CH3_TXDLYALIGNERR : out std_ulogic;
     CH3_TXDLYALIGNPROG : out std_ulogic;
     CH3_TXDLYALIGNREQ_M : out std_ulogic;
     CH3_TXELECIDLE_M : out std_ulogic;
     CH3_TXHEADER_M : out std_logic_vector(5 downto 0);
     CH3_TXINHIBIT_M : out std_ulogic;
     CH3_TXLATCLK_M : out std_ulogic;
     CH3_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     CH3_TXMARGIN_M : out std_logic_vector(2 downto 0);
     CH3_TXMLDCHAINDONE_M : out std_ulogic;
     CH3_TXMLDCHAINREQ_M : out std_ulogic;
     CH3_TXONESZEROS_M : out std_ulogic;
     CH3_TXPAUSEDELAYALIGN_M : out std_ulogic;
     CH3_TXPCSRESETMASK_M : out std_ulogic;
     CH3_TXPD_M : out std_logic_vector(1 downto 0);
     CH3_TXPHALIGNDONE : out std_ulogic;
     CH3_TXPHALIGNERR : out std_ulogic;
     CH3_TXPHALIGNOUTRSVD : out std_ulogic;
     CH3_TXPHALIGNREQ_M : out std_ulogic;
     CH3_TXPHALIGNRESETMASK_M : out std_logic_vector(1 downto 0);
     CH3_TXPHDLYPD_M : out std_ulogic;
     CH3_TXPHDLYRESETDONE : out std_ulogic;
     CH3_TXPHDLYRESET_M : out std_ulogic;
     CH3_TXPHDLYTSTCLK_M : out std_ulogic;
     CH3_TXPHSETINITDONE : out std_ulogic;
     CH3_TXPHSETINITREQ_M : out std_ulogic;
     CH3_TXPHSHIFT180DONE : out std_ulogic;
     CH3_TXPHSHIFT180_M : out std_ulogic;
     CH3_TXPICODEOVRDEN_M : out std_ulogic;
     CH3_TXPICODERESET_M : out std_ulogic;
     CH3_TXPIPPMEN_M : out std_ulogic;
     CH3_TXPIPPMSTEPSIZE_M : out std_logic_vector(4 downto 0);
     CH3_TXPISOPD_M : out std_ulogic;
     CH3_TXPMARESETDONE : out std_ulogic;
     CH3_TXPMARESETMASK_M : out std_logic_vector(2 downto 0);
     CH3_TXPOLARITY_M : out std_ulogic;
     CH3_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     CH3_TXPRBSFORCEERR_M : out std_ulogic;
     CH3_TXPRBSSEL_M : out std_logic_vector(3 downto 0);
     CH3_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     CH3_TXPROGDIVRESETDONE : out std_ulogic;
     CH3_TXPROGDIVRESET_M : out std_ulogic;
     CH3_TXRATE_M : out std_logic_vector(7 downto 0);
     CH3_TXRESETDONE : out std_ulogic;
     CH3_TXRESETMODE_M : out std_logic_vector(1 downto 0);
     CH3_TXSEQUENCE_M : out std_logic_vector(6 downto 0);
     CH3_TXSWING_M : out std_ulogic;
     CH3_TXSYNCALLIN_M : out std_ulogic;
     CH3_TXSYNCDONE : out std_ulogic;
     CH3_TXUSERRDY_M : out std_ulogic;
     CH3_TXUSRCLK_M : out std_ulogic;
     CORRECTERR : out std_ulogic;
     CTRLRSVDIN0_M : out std_logic_vector(15 downto 0);
     CTRLRSVDIN1_M : out std_logic_vector(13 downto 0);
     CTRLRSVDOUT : out std_logic_vector(31 downto 0);
     DEBUGTRACECLK_M : out std_ulogic;
     DEBUGTRACEREADY_M : out std_ulogic;
     DEBUGTRACETDATA : out std_logic_vector(15 downto 0);
     DEBUGTRACETVALID : out std_ulogic;
     GPI_M : out std_logic_vector(15 downto 0);
     GPO : out std_logic_vector(15 downto 0);
     GTPOWERGOOD : out std_ulogic;
     HSCLK0_LCPLLCLKRSVD0_M : out std_ulogic;
     HSCLK0_LCPLLCLKRSVD1_M : out std_ulogic;
     HSCLK0_LCPLLFBCLKLOST : out std_ulogic;
     HSCLK0_LCPLLFBDIV_M : out std_logic_vector(7 downto 0);
     HSCLK0_LCPLLGTGREFCLK_M : out std_ulogic;
     HSCLK0_LCPLLLOCK : out std_ulogic;
     HSCLK0_LCPLLPD_M : out std_ulogic;
     HSCLK0_LCPLLREFCLKLOST : out std_ulogic;
     HSCLK0_LCPLLREFCLKMONITOR : out std_ulogic;
     HSCLK0_LCPLLREFCLKSEL_M : out std_logic_vector(2 downto 0);
     HSCLK0_LCPLLRESETBYPASSMODE_M : out std_ulogic;
     HSCLK0_LCPLLRESETMASK_M : out std_logic_vector(1 downto 0);
     HSCLK0_LCPLLRESET_M : out std_ulogic;
     HSCLK0_LCPLLRSVD0_M : out std_logic_vector(7 downto 0);
     HSCLK0_LCPLLRSVD1_M : out std_logic_vector(7 downto 0);
     HSCLK0_LCPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK0_LCPLLSDMDATA_M : out std_logic_vector(25 downto 0);
     HSCLK0_LCPLLSDMTOGGLE_M : out std_ulogic;
     HSCLK0_RPLLCLKRSVD0_M : out std_ulogic;
     HSCLK0_RPLLCLKRSVD1_M : out std_ulogic;
     HSCLK0_RPLLFBCLKLOST : out std_ulogic;
     HSCLK0_RPLLFBDIV_M : out std_logic_vector(7 downto 0);
     HSCLK0_RPLLGTGREFCLK_M : out std_ulogic;
     HSCLK0_RPLLLOCK : out std_ulogic;
     HSCLK0_RPLLPD_M : out std_ulogic;
     HSCLK0_RPLLREFCLKLOST : out std_ulogic;
     HSCLK0_RPLLREFCLKMONITOR : out std_ulogic;
     HSCLK0_RPLLREFCLKSEL_M : out std_logic_vector(2 downto 0);
     HSCLK0_RPLLRESETBYPASSMODE_M : out std_ulogic;
     HSCLK0_RPLLRESETMASK_M : out std_logic_vector(1 downto 0);
     HSCLK0_RPLLRESET_M : out std_ulogic;
     HSCLK0_RPLLRSVD0_M : out std_logic_vector(7 downto 0);
     HSCLK0_RPLLRSVD1_M : out std_logic_vector(7 downto 0);
     HSCLK0_RPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK0_RPLLSDMDATA_M : out std_logic_vector(25 downto 0);
     HSCLK0_RPLLSDMTOGGLE_M : out std_ulogic;
     HSCLK1_LCPLLCLKRSVD0_M : out std_ulogic;
     HSCLK1_LCPLLCLKRSVD1_M : out std_ulogic;
     HSCLK1_LCPLLFBCLKLOST : out std_ulogic;
     HSCLK1_LCPLLFBDIV_M : out std_logic_vector(7 downto 0);
     HSCLK1_LCPLLGTGREFCLK_M : out std_ulogic;
     HSCLK1_LCPLLLOCK : out std_ulogic;
     HSCLK1_LCPLLPD_M : out std_ulogic;
     HSCLK1_LCPLLREFCLKLOST : out std_ulogic;
     HSCLK1_LCPLLREFCLKMONITOR : out std_ulogic;
     HSCLK1_LCPLLREFCLKSEL_M : out std_logic_vector(2 downto 0);
     HSCLK1_LCPLLRESETBYPASSMODE_M : out std_ulogic;
     HSCLK1_LCPLLRESETMASK_M : out std_logic_vector(1 downto 0);
     HSCLK1_LCPLLRESET_M : out std_ulogic;
     HSCLK1_LCPLLRSVD0_M : out std_logic_vector(7 downto 0);
     HSCLK1_LCPLLRSVD1_M : out std_logic_vector(7 downto 0);
     HSCLK1_LCPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK1_LCPLLSDMDATA_M : out std_logic_vector(25 downto 0);
     HSCLK1_LCPLLSDMTOGGLE_M : out std_ulogic;
     HSCLK1_RPLLCLKRSVD0_M : out std_ulogic;
     HSCLK1_RPLLCLKRSVD1_M : out std_ulogic;
     HSCLK1_RPLLFBCLKLOST : out std_ulogic;
     HSCLK1_RPLLFBDIV_M : out std_logic_vector(7 downto 0);
     HSCLK1_RPLLGTGREFCLK_M : out std_ulogic;
     HSCLK1_RPLLLOCK : out std_ulogic;
     HSCLK1_RPLLPD_M : out std_ulogic;
     HSCLK1_RPLLREFCLKLOST : out std_ulogic;
     HSCLK1_RPLLREFCLKMONITOR : out std_ulogic;
     HSCLK1_RPLLREFCLKSEL_M : out std_logic_vector(2 downto 0);
     HSCLK1_RPLLRESETBYPASSMODE_M : out std_ulogic;
     HSCLK1_RPLLRESETMASK_M : out std_logic_vector(1 downto 0);
     HSCLK1_RPLLRESET_M : out std_ulogic;
     HSCLK1_RPLLRSVD0_M : out std_logic_vector(7 downto 0);
     HSCLK1_RPLLRSVD1_M : out std_logic_vector(7 downto 0);
     HSCLK1_RPLLRSVDOUT : out std_logic_vector(7 downto 0);
     HSCLK1_RPLLSDMDATA_M : out std_logic_vector(25 downto 0);
     HSCLK1_RPLLSDMTOGGLE_M : out std_ulogic;
     M0_AXIS_TDATA : out std_logic_vector(31 downto 0);
     M0_AXIS_TLAST : out std_ulogic;
     M0_AXIS_TREADY_M : out std_ulogic;
     M0_AXIS_TVALID : out std_ulogic;
     M1_AXIS_TDATA : out std_logic_vector(31 downto 0);
     M1_AXIS_TLAST : out std_ulogic;
     M1_AXIS_TREADY_M : out std_ulogic;
     M1_AXIS_TVALID : out std_ulogic;
     M2_AXIS_TDATA : out std_logic_vector(31 downto 0);
     M2_AXIS_TLAST : out std_ulogic;
     M2_AXIS_TREADY_M : out std_ulogic;
     M2_AXIS_TVALID : out std_ulogic;
     MSTRXRESETDONE : out std_logic_vector(3 downto 0);
     MSTRXRESET_M : out std_logic_vector(3 downto 0);
     MSTTXRESETDONE : out std_logic_vector(3 downto 0);
     MSTTXRESET_M : out std_logic_vector(3 downto 0);
     PCIELINKREACHTARGET_M : out std_ulogic;
     PCIELTSSM_M : out std_logic_vector(5 downto 0);
     RCALENB_M : out std_ulogic;
     REFCLK0_CLKTESTSIG_M : out std_ulogic;
     REFCLK0_GTREFCLKPD_M : out std_ulogic;
     REFCLK1_CLKTESTSIG_M : out std_ulogic;
     REFCLK1_GTREFCLKPD_M : out std_ulogic;
     RXMARGINCLK_M : out std_ulogic;
     RXMARGINREQACK : out std_ulogic;
     RXMARGINREQCMD_M : out std_logic_vector(3 downto 0);
     RXMARGINREQLANENUM_M : out std_logic_vector(1 downto 0);
     RXMARGINREQPAYLD_M : out std_logic_vector(7 downto 0);
     RXMARGINREQREQ_M : out std_ulogic;
     RXMARGINRESACK_M : out std_ulogic;
     RXMARGINRESCMD : out std_logic_vector(3 downto 0);
     RXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     RXMARGINRESPAYLD : out std_logic_vector(7 downto 0);
     RXMARGINRESREQ : out std_ulogic;
     S0_AXIS_TDATA_M : out std_logic_vector(31 downto 0);
     S0_AXIS_TLAST_M : out std_ulogic;
     S0_AXIS_TREADY : out std_ulogic;
     S0_AXIS_TVALID_M : out std_ulogic;
     S1_AXIS_TDATA_M : out std_logic_vector(31 downto 0);
     S1_AXIS_TLAST_M : out std_ulogic;
     S1_AXIS_TREADY : out std_ulogic;
     S1_AXIS_TVALID_M : out std_ulogic;
     S2_AXIS_TDATA_M : out std_logic_vector(31 downto 0);
     S2_AXIS_TLAST_M : out std_ulogic;
     S2_AXIS_TREADY : out std_ulogic;
     S2_AXIS_TVALID_M : out std_ulogic;
     TRIGACKIN0 : out std_ulogic;
     TRIGACKOUT0_M : out std_ulogic;
     TRIGIN0_M : out std_ulogic;
     TRIGOUT0 : out std_ulogic;
     TXOUTCLKDBG_NORTH : out std_ulogic;
     TXOUTCLKDBG_SOUTH : out std_ulogic;
     UBENABLE_M : out std_ulogic;
     UBINTERRUPT : out std_ulogic;
     UBINTR_M : out std_logic_vector(11 downto 0);
     UBIOLMBRST_M : out std_ulogic;
     UBMBRST_M : out std_ulogic;
     UBRXUART_M : out std_ulogic;
     UBTXUART : out std_ulogic;
     UNCORRECTERR : out std_ulogic;
     XPIPE_BUFGTCE : out std_ulogic;
     XPIPE_BUFGTCE_1 : out std_ulogic;
     XPIPE_BUFGTCE_MASK : out std_logic_vector(3 downto 0);
     XPIPE_BUFGTCE_MASK_1 : out std_logic_vector(3 downto 0);
     XPIPE_BUFGTDIV : out std_logic_vector(11 downto 0);
     XPIPE_BUFGTDIV_1 : out std_logic_vector(11 downto 0);
     XPIPE_BUFGTRST : out std_ulogic;
     XPIPE_BUFGTRST_1 : out std_ulogic;
     XPIPE_BUFGTRST_MASK : out std_logic_vector(3 downto 0);
     XPIPE_BUFGTRST_MASK_1 : out std_logic_vector(3 downto 0);
     XPIPE_GT_OUTCLK : out std_ulogic;
     XPIPE_GT_OUTCLK_1 : out std_ulogic;
     XPIPE_GT_PIPECLK_M : out std_ulogic;
     XPIPE_GT_PIPECLK_M_1 : out std_ulogic;
     XPIPE_GT_RXOUTCLK : out std_ulogic;
     XPIPE_GT_RXUSRCLK_M : out std_ulogic;
     XPIPE_HSDP_RXDATAVALID : out std_ulogic;
     XPIPE_HSDP_RXDATAVALID_1 : out std_ulogic;
     XPIPE_HSDP_RXDATAVALID_2 : out std_ulogic;
     XPIPE_HSDP_RXGEARBOXSLIP_M : out std_ulogic;
     XPIPE_HSDP_RXGEARBOXSLIP_M_1 : out std_ulogic;
     XPIPE_HSDP_RXGEARBOXSLIP_M_2 : out std_ulogic;
     XPIPE_HSDP_RXHEADER : out std_logic_vector(1 downto 0);
     XPIPE_HSDP_RXHEADERVALID : out std_ulogic;
     XPIPE_HSDP_RXHEADERVALID_1 : out std_ulogic;
     XPIPE_HSDP_RXHEADERVALID_2 : out std_ulogic;
     XPIPE_HSDP_RXHEADER_1 : out std_logic_vector(1 downto 0);
     XPIPE_HSDP_RXHEADER_2 : out std_logic_vector(1 downto 0);
     XPIPE_HSDP_RXPCSRESET_M : out std_ulogic;
     XPIPE_HSDP_RXPCSRESET_M_1 : out std_ulogic;
     XPIPE_HSDP_RXPCSRESET_M_2 : out std_ulogic;
     XPIPE_HSDP_RXRESETDONE : out std_ulogic;
     XPIPE_HSDP_RXRESETDONE_1 : out std_ulogic;
     XPIPE_HSDP_RXRESETDONE_2 : out std_ulogic;
     XPIPE_HSDP_TXHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_HSDP_TXHEADER_M_1 : out std_logic_vector(1 downto 0);
     XPIPE_HSDP_TXHEADER_M_2 : out std_logic_vector(1 downto 0);
     XPIPE_HSDP_TXRESETDONE : out std_ulogic;
     XPIPE_HSDP_TXRESETDONE_1 : out std_ulogic;
     XPIPE_HSDP_TXRESETDONE_2 : out std_ulogic;
     XPIPE_HSDP_TXSEQUENCE_M : out std_logic_vector(6 downto 0);
     XPIPE_HSDP_TXSEQUENCE_M_1 : out std_logic_vector(6 downto 0);
     XPIPE_HSDP_TXSEQUENCE_M_2 : out std_logic_vector(6 downto 0);
     XPIPE_PCIELINKREACHTARGET_M : out std_ulogic;
     XPIPE_PCIELINKREACHTARGET_M_1 : out std_ulogic;
     XPIPE_PCIELTSSMSTATE_M : out std_logic_vector(5 downto 0);
     XPIPE_PCIELTSSMSTATE_M_1 : out std_logic_vector(5 downto 0);
     XPIPE_PCIE_PERST_N_M : out std_ulogic;
     XPIPE_PCIE_PERST_N_M_1 : out std_ulogic;
     XPIPE_PCIE_RATE_M : out std_logic_vector(2 downto 0);
     XPIPE_PCIE_RATE_M_1 : out std_logic_vector(2 downto 0);
     XPIPE_PHYESMADAPTSAVE_M : out std_ulogic;
     XPIPE_PHYESMADAPTSAVE_M_1 : out std_ulogic;
     XPIPE_PHYREADY_FR_BOT_M : out std_ulogic;
     XPIPE_PHYREADY_TO_BOT : out std_ulogic;
     XPIPE_PHY_READY : out std_ulogic;
     XPIPE_PHY_READY_1 : out std_ulogic;
     XPIPE_PIPE_CH0_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH0_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH0_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH0_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH0_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH0_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH0_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH0_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH0_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH0_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH0_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH0_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH0_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH0_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH0_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH0_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH0_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH0_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH0_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH0_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH0_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH10_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH10_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH10_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH10_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH10_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH10_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH10_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH10_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH10_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH10_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH10_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH10_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH10_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH10_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH10_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH10_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH10_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH10_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH10_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH10_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH11_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH11_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH11_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH11_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH11_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH11_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH11_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH11_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH11_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH11_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH11_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH11_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH11_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH11_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH11_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH11_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH11_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH11_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH11_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH11_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH12_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH12_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH12_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH12_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH12_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH12_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH12_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH12_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH12_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH12_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH12_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH12_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH12_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH12_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH12_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH12_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH12_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH12_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH12_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH12_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH13_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH13_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH13_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH13_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH13_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH13_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH13_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH13_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH13_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH13_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH13_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH13_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH13_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH13_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH13_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH13_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH13_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH13_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH13_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH13_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH14_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH14_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH14_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH14_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH14_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH14_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH14_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH14_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH14_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH14_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH14_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH14_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH14_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH14_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH14_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH14_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH14_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH14_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH14_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH14_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH15_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH15_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH15_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH15_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH15_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH15_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH15_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH15_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH15_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH15_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH15_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH15_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH15_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH15_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH15_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH15_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH15_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH15_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH15_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH15_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH1_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH1_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH1_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH1_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH1_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH1_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH1_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH1_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH1_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH1_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH1_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH1_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH1_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH1_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH1_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH1_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH1_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH1_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH1_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH1_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH2_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH2_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH2_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH2_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH2_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH2_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH2_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH2_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH2_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH2_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH2_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH2_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH2_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH2_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH2_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH2_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH2_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH2_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH2_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH2_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH3_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH3_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH3_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH3_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH3_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH3_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH3_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH3_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH3_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH3_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH3_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH3_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH3_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH3_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH3_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH3_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH3_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH3_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH3_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH3_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH4_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH4_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH4_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH4_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH4_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH4_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH4_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH4_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH4_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH4_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH4_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH4_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH4_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH4_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH4_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH4_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH4_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH4_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH4_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH4_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH5_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH5_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH5_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH5_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH5_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH5_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH5_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH5_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH5_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH5_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH5_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH5_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH5_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH5_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH5_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH5_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH5_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH5_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH5_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH5_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH6_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH6_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH6_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH6_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH6_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH6_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH6_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH6_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH6_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH6_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH6_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH6_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH6_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH6_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH6_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH6_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH6_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH6_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH6_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH6_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH7_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH7_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH7_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH7_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH7_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH7_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH7_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH7_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH7_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH7_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH7_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH7_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH7_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH7_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH7_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH7_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH7_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH7_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH7_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH7_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH8_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH8_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH8_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH8_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH8_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH8_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH8_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH8_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH8_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH8_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH8_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH8_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH8_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH8_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH8_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH8_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH8_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH8_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH8_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH8_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_PHYSTATUS : out std_ulogic;
     XPIPE_PIPE_CH9_POWERDOWN_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_RXCHARISK : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_RXDATA : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH9_RXDATAVALID : out std_ulogic;
     XPIPE_PIPE_CH9_RXELECIDLE : out std_ulogic;
     XPIPE_PIPE_CH9_RXPOLARITY_M : out std_ulogic;
     XPIPE_PIPE_CH9_RXSTARTBLOCK : out std_ulogic;
     XPIPE_PIPE_CH9_RXSTATUS : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH9_RXSYNCHEADER : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_RXTERMINATION_M : out std_ulogic;
     XPIPE_PIPE_CH9_RXVALID : out std_ulogic;
     XPIPE_PIPE_CH9_TXCHARISK_M : out std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_TXCOMPLIANCE_M : out std_ulogic;
     XPIPE_PIPE_CH9_TXDATAVALID_M : out std_ulogic;
     XPIPE_PIPE_CH9_TXDATA_M : out std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH9_TXDEEMPH_M : out std_ulogic;
     XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK_M : out std_ulogic;
     XPIPE_PIPE_CH9_TXELECIDLE_M : out std_ulogic;
     XPIPE_PIPE_CH9_TXMAINCURSOR_M : out std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH9_TXMARGIN_M : out std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH9_TXPOSTCURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH9_TXPRECURSOR_M : out std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH9_TXSTARTBLOCK_M : out std_ulogic;
     XPIPE_PIPE_CH9_TXSWING_M : out std_ulogic;
     XPIPE_PIPE_CH9_TXSYNCHEADER_M : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQACK : out std_ulogic;
     XPIPE_RXMARGINREQACK_1 : out std_ulogic;
     XPIPE_RXMARGINREQACK_2 : out std_ulogic;
     XPIPE_RXMARGINREQACK_3 : out std_ulogic;
     XPIPE_RXMARGINREQCMD_M : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQCMD_M_1 : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQCMD_M_2 : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQCMD_M_3 : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQLANENUM_M : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQLANENUM_M_1 : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQLANENUM_M_2 : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQLANENUM_M_3 : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQPAYLOAD_M : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQPAYLOAD_M_1 : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQPAYLOAD_M_2 : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQPAYLOAD_M_3 : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQREQ_M : out std_ulogic;
     XPIPE_RXMARGINREQREQ_M_1 : out std_ulogic;
     XPIPE_RXMARGINREQREQ_M_2 : out std_ulogic;
     XPIPE_RXMARGINREQREQ_M_3 : out std_ulogic;
     XPIPE_RXMARGINRESACK_M : out std_ulogic;
     XPIPE_RXMARGINRESACK_M_1 : out std_ulogic;
     XPIPE_RXMARGINRESACK_M_2 : out std_ulogic;
     XPIPE_RXMARGINRESACK_M_3 : out std_ulogic;
     XPIPE_RXMARGINRESCMD : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESCMD_1 : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESCMD_2 : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESCMD_3 : out std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESLANENUM : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESLANENUM_1 : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESLANENUM_2 : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESLANENUM_3 : out std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESPAYLOAD : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESPAYLOAD_1 : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESPAYLOAD_2 : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESPAYLOAD_3 : out std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESREQ : out std_ulogic;
     XPIPE_RXMARGINRESREQ_1 : out std_ulogic;
     XPIPE_RXMARGINRESREQ_2 : out std_ulogic;
     XPIPE_RXMARGINRESREQ_3 : out std_ulogic;
     ALTCLK : in std_ulogic;
     APB3CLK : in std_ulogic;
     APB3PADDR : in std_logic_vector(15 downto 0);
     APB3PENABLE : in std_ulogic;
     APB3PRDATA_M : in std_logic_vector(31 downto 0);
     APB3PREADY_M : in std_ulogic;
     APB3PRESETN : in std_ulogic;
     APB3PSEL : in std_ulogic;
     APB3PSLVERR_M : in std_ulogic;
     APB3PWDATA : in std_logic_vector(31 downto 0);
     APB3PWRITE : in std_ulogic;
     AXISCLK : in std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     CH0_BUFGTCEMASK_M : in std_logic_vector(3 downto 0);
     CH0_BUFGTCE_M : in std_ulogic;
     CH0_BUFGTDIV_M : in std_logic_vector(11 downto 0);
     CH0_BUFGTRSTMASK_M : in std_logic_vector(3 downto 0);
     CH0_BUFGTRST_M : in std_ulogic;
     CH0_CDRBMCDRREQ : in std_ulogic;
     CH0_CDRFREQOS : in std_ulogic;
     CH0_CDRINCPCTRL : in std_ulogic;
     CH0_CDRSTEPDIR : in std_ulogic;
     CH0_CDRSTEPSQ : in std_ulogic;
     CH0_CDRSTEPSX : in std_ulogic;
     CH0_CFOKOVRDFINISH : in std_ulogic;
     CH0_CFOKOVRDPULSE : in std_ulogic;
     CH0_CFOKOVRDRDY0_M : in std_ulogic;
     CH0_CFOKOVRDRDY1_M : in std_ulogic;
     CH0_CFOKOVRDSTART : in std_ulogic;
     CH0_CLKRSVD0 : in std_ulogic;
     CH0_CLKRSVD1 : in std_ulogic;
     CH0_DMONFIFORESET : in std_ulogic;
     CH0_DMONITORCLK : in std_ulogic;
     CH0_DMONITOROUT_M : in std_logic_vector(31 downto 0);
     CH0_EYESCANDATAERROR_M : in std_ulogic;
     CH0_EYESCANRESET : in std_ulogic;
     CH0_EYESCANTRIGGER : in std_ulogic;
     CH0_GTRSVD : in std_logic_vector(15 downto 0);
     CH0_GTRXRESET : in std_ulogic;
     CH0_GTTXRESET : in std_ulogic;
     CH0_HSDPPCSRESET : in std_ulogic;
     CH0_ILORESET : in std_ulogic;
     CH0_ILORESETDONE_M : in std_ulogic;
     CH0_ILORESETMASK : in std_ulogic;
     CH0_LOOPBACK : in std_logic_vector(2 downto 0);
     CH0_PCIERSTB : in std_ulogic;
     CH0_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH0_PCSRSVDOUT_M : in std_logic_vector(15 downto 0);
     CH0_PHYESMADAPTSAVE : in std_ulogic;
     CH0_PHYREADY_M : in std_ulogic;
     CH0_PHYSTATUS_M : in std_ulogic;
     CH0_PINRSVDAS_M : in std_logic_vector(15 downto 0);
     CH0_RESETEXCEPTION_M : in std_ulogic;
     CH0_RX10GSTAT_M : in std_logic_vector(7 downto 0);
     CH0_RXBUFSTATUS_M : in std_logic_vector(2 downto 0);
     CH0_RXBYTEISALIGNED_M : in std_ulogic;
     CH0_RXBYTEREALIGN_M : in std_ulogic;
     CH0_RXCDRHOLD : in std_ulogic;
     CH0_RXCDRLOCK_M : in std_ulogic;
     CH0_RXCDROVRDEN : in std_ulogic;
     CH0_RXCDRPHDONE_M : in std_ulogic;
     CH0_RXCDRRESET : in std_ulogic;
     CH0_RXCHANBONDSEQ_M : in std_ulogic;
     CH0_RXCHANISALIGNED_M : in std_ulogic;
     CH0_RXCHANREALIGN_M : in std_ulogic;
     CH0_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH0_RXCHBONDO_M : in std_logic_vector(4 downto 0);
     CH0_RXCLKCORCNT_M : in std_logic_vector(1 downto 0);
     CH0_RXCOMINITDET_M : in std_ulogic;
     CH0_RXCOMMADET_M : in std_ulogic;
     CH0_RXCOMSASDET_M : in std_ulogic;
     CH0_RXCOMWAKEDET_M : in std_ulogic;
     CH0_RXCTRL0_M : in std_logic_vector(15 downto 0);
     CH0_RXCTRL1_M : in std_logic_vector(15 downto 0);
     CH0_RXCTRL2_M : in std_logic_vector(7 downto 0);
     CH0_RXCTRL3_M : in std_logic_vector(7 downto 0);
     CH0_RXDAPICODEOVRDEN : in std_ulogic;
     CH0_RXDAPICODERESET : in std_ulogic;
     CH0_RXDATAEXTENDRSVD_M : in std_logic_vector(7 downto 0);
     CH0_RXDATAVALID_M : in std_logic_vector(1 downto 0);
     CH0_RXDATA_M : in std_logic_vector(127 downto 0);
     CH0_RXDCCDONE_M : in std_ulogic;
     CH0_RXDLYALIGNERR_M : in std_ulogic;
     CH0_RXDLYALIGNPROG_M : in std_ulogic;
     CH0_RXDLYALIGNREQ : in std_ulogic;
     CH0_RXELECIDLE_M : in std_ulogic;
     CH0_RXEQTRAINING : in std_ulogic;
     CH0_RXFINEALIGNDONE_M : in std_ulogic;
     CH0_RXGEARBOXSLIP : in std_ulogic;
     CH0_RXHEADERVALID_M : in std_logic_vector(1 downto 0);
     CH0_RXHEADER_M : in std_logic_vector(5 downto 0);
     CH0_RXLATCLK : in std_ulogic;
     CH0_RXLPMEN : in std_ulogic;
     CH0_RXMLDCHAINDONE : in std_ulogic;
     CH0_RXMLDCHAINREQ : in std_ulogic;
     CH0_RXMLFINEALIGNREQ : in std_ulogic;
     CH0_RXOOBRESET : in std_ulogic;
     CH0_RXOSINTDONE_M : in std_ulogic;
     CH0_RXOSINTSTARTED_M : in std_ulogic;
     CH0_RXOSINTSTROBEDONE_M : in std_ulogic;
     CH0_RXOSINTSTROBESTARTED_M : in std_ulogic;
     CH0_RXOUTCLK_M : in std_ulogic;
     CH0_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH0_RXPD : in std_logic_vector(1 downto 0);
     CH0_RXPHALIGNDONE_M : in std_ulogic;
     CH0_RXPHALIGNERR_M : in std_ulogic;
     CH0_RXPHALIGNREQ : in std_ulogic;
     CH0_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH0_RXPHDLYPD : in std_ulogic;
     CH0_RXPHDLYRESET : in std_ulogic;
     CH0_RXPHDLYRESETDONE_M : in std_ulogic;
     CH0_RXPHSETINITDONE_M : in std_ulogic;
     CH0_RXPHSETINITREQ : in std_ulogic;
     CH0_RXPHSHIFT180 : in std_ulogic;
     CH0_RXPHSHIFT180DONE_M : in std_ulogic;
     CH0_RXPMARESETDONE_M : in std_ulogic;
     CH0_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH0_RXPOLARITY : in std_ulogic;
     CH0_RXPRBSCNTRESET : in std_ulogic;
     CH0_RXPRBSERR_M : in std_ulogic;
     CH0_RXPRBSLOCKED_M : in std_ulogic;
     CH0_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH0_RXPROGDIVRESET : in std_ulogic;
     CH0_RXPROGDIVRESETDONE_M : in std_ulogic;
     CH0_RXRATE : in std_logic_vector(7 downto 0);
     CH0_RXRESETDONE_M : in std_ulogic;
     CH0_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH0_RXSLIDE : in std_ulogic;
     CH0_RXSLIDERDY_M : in std_ulogic;
     CH0_RXSTARTOFSEQ_M : in std_logic_vector(1 downto 0);
     CH0_RXSTATUS_M : in std_logic_vector(2 downto 0);
     CH0_RXSYNCALLIN : in std_ulogic;
     CH0_RXSYNCDONE_M : in std_ulogic;
     CH0_RXTERMINATION : in std_ulogic;
     CH0_RXUSERRDY : in std_ulogic;
     CH0_RXUSRCLK : in std_ulogic;
     CH0_RXVALID_M : in std_ulogic;
     CH0_TSTIN : in std_logic_vector(19 downto 0);
     CH0_TX10GSTAT_M : in std_ulogic;
     CH0_TXBUFSTATUS_M : in std_logic_vector(1 downto 0);
     CH0_TXCOMFINISH_M : in std_ulogic;
     CH0_TXCOMINIT : in std_ulogic;
     CH0_TXCOMSAS : in std_ulogic;
     CH0_TXCOMWAKE : in std_ulogic;
     CH0_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH0_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH0_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH0_TXDAPICODEOVRDEN : in std_ulogic;
     CH0_TXDAPICODERESET : in std_ulogic;
     CH0_TXDATA : in std_logic_vector(127 downto 0);
     CH0_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH0_TXDCCDONE_M : in std_ulogic;
     CH0_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH0_TXDETECTRX : in std_ulogic;
     CH0_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH0_TXDLYALIGNERR_M : in std_ulogic;
     CH0_TXDLYALIGNPROG_M : in std_ulogic;
     CH0_TXDLYALIGNREQ : in std_ulogic;
     CH0_TXELECIDLE : in std_ulogic;
     CH0_TXHEADER : in std_logic_vector(5 downto 0);
     CH0_TXINHIBIT : in std_ulogic;
     CH0_TXLATCLK : in std_ulogic;
     CH0_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH0_TXMARGIN : in std_logic_vector(2 downto 0);
     CH0_TXMLDCHAINDONE : in std_ulogic;
     CH0_TXMLDCHAINREQ : in std_ulogic;
     CH0_TXONESZEROS : in std_ulogic;
     CH0_TXOUTCLK_M : in std_ulogic;
     CH0_TXPAUSEDELAYALIGN : in std_ulogic;
     CH0_TXPCSRESETMASK : in std_ulogic;
     CH0_TXPD : in std_logic_vector(1 downto 0);
     CH0_TXPHALIGNDONE_M : in std_ulogic;
     CH0_TXPHALIGNERR_M : in std_ulogic;
     CH0_TXPHALIGNOUTRSVD_M : in std_ulogic;
     CH0_TXPHALIGNREQ : in std_ulogic;
     CH0_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH0_TXPHDLYPD : in std_ulogic;
     CH0_TXPHDLYRESET : in std_ulogic;
     CH0_TXPHDLYRESETDONE_M : in std_ulogic;
     CH0_TXPHDLYTSTCLK : in std_ulogic;
     CH0_TXPHSETINITDONE_M : in std_ulogic;
     CH0_TXPHSETINITREQ : in std_ulogic;
     CH0_TXPHSHIFT180 : in std_ulogic;
     CH0_TXPHSHIFT180DONE_M : in std_ulogic;
     CH0_TXPICODEOVRDEN : in std_ulogic;
     CH0_TXPICODERESET : in std_ulogic;
     CH0_TXPIPPMEN : in std_ulogic;
     CH0_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH0_TXPISOPD : in std_ulogic;
     CH0_TXPMARESETDONE_M : in std_ulogic;
     CH0_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH0_TXPOLARITY : in std_ulogic;
     CH0_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH0_TXPRBSFORCEERR : in std_ulogic;
     CH0_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH0_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH0_TXPROGDIVRESET : in std_ulogic;
     CH0_TXPROGDIVRESETDONE_M : in std_ulogic;
     CH0_TXRATE : in std_logic_vector(7 downto 0);
     CH0_TXRESETDONE_M : in std_ulogic;
     CH0_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH0_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH0_TXSWING : in std_ulogic;
     CH0_TXSYNCALLIN : in std_ulogic;
     CH0_TXSYNCDONE_M : in std_ulogic;
     CH0_TXUSERRDY : in std_ulogic;
     CH0_TXUSRCLK : in std_ulogic;
     CH1_BUFGTCEMASK_M : in std_logic_vector(3 downto 0);
     CH1_BUFGTCE_M : in std_ulogic;
     CH1_BUFGTDIV_M : in std_logic_vector(11 downto 0);
     CH1_BUFGTRSTMASK_M : in std_logic_vector(3 downto 0);
     CH1_BUFGTRST_M : in std_ulogic;
     CH1_CDRBMCDRREQ : in std_ulogic;
     CH1_CDRFREQOS : in std_ulogic;
     CH1_CDRINCPCTRL : in std_ulogic;
     CH1_CDRSTEPDIR : in std_ulogic;
     CH1_CDRSTEPSQ : in std_ulogic;
     CH1_CDRSTEPSX : in std_ulogic;
     CH1_CFOKOVRDFINISH : in std_ulogic;
     CH1_CFOKOVRDPULSE : in std_ulogic;
     CH1_CFOKOVRDRDY0_M : in std_ulogic;
     CH1_CFOKOVRDRDY1_M : in std_ulogic;
     CH1_CFOKOVRDSTART : in std_ulogic;
     CH1_CLKRSVD0 : in std_ulogic;
     CH1_CLKRSVD1 : in std_ulogic;
     CH1_DMONFIFORESET : in std_ulogic;
     CH1_DMONITORCLK : in std_ulogic;
     CH1_DMONITOROUT_M : in std_logic_vector(31 downto 0);
     CH1_EYESCANDATAERROR_M : in std_ulogic;
     CH1_EYESCANRESET : in std_ulogic;
     CH1_EYESCANTRIGGER : in std_ulogic;
     CH1_GTRSVD : in std_logic_vector(15 downto 0);
     CH1_GTRXRESET : in std_ulogic;
     CH1_GTTXRESET : in std_ulogic;
     CH1_HSDPPCSRESET : in std_ulogic;
     CH1_ILORESET : in std_ulogic;
     CH1_ILORESETDONE_M : in std_ulogic;
     CH1_ILORESETMASK : in std_ulogic;
     CH1_LOOPBACK : in std_logic_vector(2 downto 0);
     CH1_PCIERSTB : in std_ulogic;
     CH1_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH1_PCSRSVDOUT_M : in std_logic_vector(15 downto 0);
     CH1_PHYESMADAPTSAVE : in std_ulogic;
     CH1_PHYREADY_M : in std_ulogic;
     CH1_PHYSTATUS_M : in std_ulogic;
     CH1_PINRSVDAS_M : in std_logic_vector(15 downto 0);
     CH1_RESETEXCEPTION_M : in std_ulogic;
     CH1_RX10GSTAT_M : in std_logic_vector(7 downto 0);
     CH1_RXBUFSTATUS_M : in std_logic_vector(2 downto 0);
     CH1_RXBYTEISALIGNED_M : in std_ulogic;
     CH1_RXBYTEREALIGN_M : in std_ulogic;
     CH1_RXCDRHOLD : in std_ulogic;
     CH1_RXCDRLOCK_M : in std_ulogic;
     CH1_RXCDROVRDEN : in std_ulogic;
     CH1_RXCDRPHDONE_M : in std_ulogic;
     CH1_RXCDRRESET : in std_ulogic;
     CH1_RXCHANBONDSEQ_M : in std_ulogic;
     CH1_RXCHANISALIGNED_M : in std_ulogic;
     CH1_RXCHANREALIGN_M : in std_ulogic;
     CH1_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH1_RXCHBONDO_M : in std_logic_vector(4 downto 0);
     CH1_RXCLKCORCNT_M : in std_logic_vector(1 downto 0);
     CH1_RXCOMINITDET_M : in std_ulogic;
     CH1_RXCOMMADET_M : in std_ulogic;
     CH1_RXCOMSASDET_M : in std_ulogic;
     CH1_RXCOMWAKEDET_M : in std_ulogic;
     CH1_RXCTRL0_M : in std_logic_vector(15 downto 0);
     CH1_RXCTRL1_M : in std_logic_vector(15 downto 0);
     CH1_RXCTRL2_M : in std_logic_vector(7 downto 0);
     CH1_RXCTRL3_M : in std_logic_vector(7 downto 0);
     CH1_RXDAPICODEOVRDEN : in std_ulogic;
     CH1_RXDAPICODERESET : in std_ulogic;
     CH1_RXDATAEXTENDRSVD_M : in std_logic_vector(7 downto 0);
     CH1_RXDATAVALID_M : in std_logic_vector(1 downto 0);
     CH1_RXDATA_M : in std_logic_vector(127 downto 0);
     CH1_RXDCCDONE_M : in std_ulogic;
     CH1_RXDLYALIGNERR_M : in std_ulogic;
     CH1_RXDLYALIGNPROG_M : in std_ulogic;
     CH1_RXDLYALIGNREQ : in std_ulogic;
     CH1_RXELECIDLE_M : in std_ulogic;
     CH1_RXEQTRAINING : in std_ulogic;
     CH1_RXFINEALIGNDONE_M : in std_ulogic;
     CH1_RXGEARBOXSLIP : in std_ulogic;
     CH1_RXHEADERVALID_M : in std_logic_vector(1 downto 0);
     CH1_RXHEADER_M : in std_logic_vector(5 downto 0);
     CH1_RXLATCLK : in std_ulogic;
     CH1_RXLPMEN : in std_ulogic;
     CH1_RXMLDCHAINDONE : in std_ulogic;
     CH1_RXMLDCHAINREQ : in std_ulogic;
     CH1_RXMLFINEALIGNREQ : in std_ulogic;
     CH1_RXOOBRESET : in std_ulogic;
     CH1_RXOSINTDONE_M : in std_ulogic;
     CH1_RXOSINTSTARTED_M : in std_ulogic;
     CH1_RXOSINTSTROBEDONE_M : in std_ulogic;
     CH1_RXOSINTSTROBESTARTED_M : in std_ulogic;
     CH1_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH1_RXPD : in std_logic_vector(1 downto 0);
     CH1_RXPHALIGNDONE_M : in std_ulogic;
     CH1_RXPHALIGNERR_M : in std_ulogic;
     CH1_RXPHALIGNREQ : in std_ulogic;
     CH1_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH1_RXPHDLYPD : in std_ulogic;
     CH1_RXPHDLYRESET : in std_ulogic;
     CH1_RXPHDLYRESETDONE_M : in std_ulogic;
     CH1_RXPHSETINITDONE_M : in std_ulogic;
     CH1_RXPHSETINITREQ : in std_ulogic;
     CH1_RXPHSHIFT180 : in std_ulogic;
     CH1_RXPHSHIFT180DONE_M : in std_ulogic;
     CH1_RXPMARESETDONE_M : in std_ulogic;
     CH1_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH1_RXPOLARITY : in std_ulogic;
     CH1_RXPRBSCNTRESET : in std_ulogic;
     CH1_RXPRBSERR_M : in std_ulogic;
     CH1_RXPRBSLOCKED_M : in std_ulogic;
     CH1_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH1_RXPROGDIVRESET : in std_ulogic;
     CH1_RXPROGDIVRESETDONE_M : in std_ulogic;
     CH1_RXRATE : in std_logic_vector(7 downto 0);
     CH1_RXRESETDONE_M : in std_ulogic;
     CH1_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH1_RXSLIDE : in std_ulogic;
     CH1_RXSLIDERDY_M : in std_ulogic;
     CH1_RXSTARTOFSEQ_M : in std_logic_vector(1 downto 0);
     CH1_RXSTATUS_M : in std_logic_vector(2 downto 0);
     CH1_RXSYNCALLIN : in std_ulogic;
     CH1_RXSYNCDONE_M : in std_ulogic;
     CH1_RXTERMINATION : in std_ulogic;
     CH1_RXUSERRDY : in std_ulogic;
     CH1_RXUSRCLK : in std_ulogic;
     CH1_RXVALID_M : in std_ulogic;
     CH1_TSTIN : in std_logic_vector(19 downto 0);
     CH1_TX10GSTAT_M : in std_ulogic;
     CH1_TXBUFSTATUS_M : in std_logic_vector(1 downto 0);
     CH1_TXCOMFINISH_M : in std_ulogic;
     CH1_TXCOMINIT : in std_ulogic;
     CH1_TXCOMSAS : in std_ulogic;
     CH1_TXCOMWAKE : in std_ulogic;
     CH1_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH1_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH1_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH1_TXDAPICODEOVRDEN : in std_ulogic;
     CH1_TXDAPICODERESET : in std_ulogic;
     CH1_TXDATA : in std_logic_vector(127 downto 0);
     CH1_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH1_TXDCCDONE_M : in std_ulogic;
     CH1_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH1_TXDETECTRX : in std_ulogic;
     CH1_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH1_TXDLYALIGNERR_M : in std_ulogic;
     CH1_TXDLYALIGNPROG_M : in std_ulogic;
     CH1_TXDLYALIGNREQ : in std_ulogic;
     CH1_TXELECIDLE : in std_ulogic;
     CH1_TXHEADER : in std_logic_vector(5 downto 0);
     CH1_TXINHIBIT : in std_ulogic;
     CH1_TXLATCLK : in std_ulogic;
     CH1_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH1_TXMARGIN : in std_logic_vector(2 downto 0);
     CH1_TXMLDCHAINDONE : in std_ulogic;
     CH1_TXMLDCHAINREQ : in std_ulogic;
     CH1_TXONESZEROS : in std_ulogic;
     CH1_TXPAUSEDELAYALIGN : in std_ulogic;
     CH1_TXPCSRESETMASK : in std_ulogic;
     CH1_TXPD : in std_logic_vector(1 downto 0);
     CH1_TXPHALIGNDONE_M : in std_ulogic;
     CH1_TXPHALIGNERR_M : in std_ulogic;
     CH1_TXPHALIGNOUTRSVD_M : in std_ulogic;
     CH1_TXPHALIGNREQ : in std_ulogic;
     CH1_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH1_TXPHDLYPD : in std_ulogic;
     CH1_TXPHDLYRESET : in std_ulogic;
     CH1_TXPHDLYRESETDONE_M : in std_ulogic;
     CH1_TXPHDLYTSTCLK : in std_ulogic;
     CH1_TXPHSETINITDONE_M : in std_ulogic;
     CH1_TXPHSETINITREQ : in std_ulogic;
     CH1_TXPHSHIFT180 : in std_ulogic;
     CH1_TXPHSHIFT180DONE_M : in std_ulogic;
     CH1_TXPICODEOVRDEN : in std_ulogic;
     CH1_TXPICODERESET : in std_ulogic;
     CH1_TXPIPPMEN : in std_ulogic;
     CH1_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH1_TXPISOPD : in std_ulogic;
     CH1_TXPMARESETDONE_M : in std_ulogic;
     CH1_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH1_TXPOLARITY : in std_ulogic;
     CH1_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH1_TXPRBSFORCEERR : in std_ulogic;
     CH1_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH1_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH1_TXPROGDIVRESET : in std_ulogic;
     CH1_TXPROGDIVRESETDONE_M : in std_ulogic;
     CH1_TXRATE : in std_logic_vector(7 downto 0);
     CH1_TXRESETDONE_M : in std_ulogic;
     CH1_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH1_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH1_TXSWING : in std_ulogic;
     CH1_TXSYNCALLIN : in std_ulogic;
     CH1_TXSYNCDONE_M : in std_ulogic;
     CH1_TXUSERRDY : in std_ulogic;
     CH1_TXUSRCLK : in std_ulogic;
     CH2_BUFGTCEMASK_M : in std_logic_vector(3 downto 0);
     CH2_BUFGTCE_M : in std_ulogic;
     CH2_BUFGTDIV_M : in std_logic_vector(11 downto 0);
     CH2_BUFGTRSTMASK_M : in std_logic_vector(3 downto 0);
     CH2_BUFGTRST_M : in std_ulogic;
     CH2_CDRBMCDRREQ : in std_ulogic;
     CH2_CDRFREQOS : in std_ulogic;
     CH2_CDRINCPCTRL : in std_ulogic;
     CH2_CDRSTEPDIR : in std_ulogic;
     CH2_CDRSTEPSQ : in std_ulogic;
     CH2_CDRSTEPSX : in std_ulogic;
     CH2_CFOKOVRDFINISH : in std_ulogic;
     CH2_CFOKOVRDPULSE : in std_ulogic;
     CH2_CFOKOVRDRDY0_M : in std_ulogic;
     CH2_CFOKOVRDRDY1_M : in std_ulogic;
     CH2_CFOKOVRDSTART : in std_ulogic;
     CH2_CLKRSVD0 : in std_ulogic;
     CH2_CLKRSVD1 : in std_ulogic;
     CH2_DMONFIFORESET : in std_ulogic;
     CH2_DMONITORCLK : in std_ulogic;
     CH2_DMONITOROUT_M : in std_logic_vector(31 downto 0);
     CH2_EYESCANDATAERROR_M : in std_ulogic;
     CH2_EYESCANRESET : in std_ulogic;
     CH2_EYESCANTRIGGER : in std_ulogic;
     CH2_GTRSVD : in std_logic_vector(15 downto 0);
     CH2_GTRXRESET : in std_ulogic;
     CH2_GTTXRESET : in std_ulogic;
     CH2_HSDPPCSRESET : in std_ulogic;
     CH2_ILORESET : in std_ulogic;
     CH2_ILORESETDONE_M : in std_ulogic;
     CH2_ILORESETMASK : in std_ulogic;
     CH2_LOOPBACK : in std_logic_vector(2 downto 0);
     CH2_PCIERSTB : in std_ulogic;
     CH2_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH2_PCSRSVDOUT_M : in std_logic_vector(15 downto 0);
     CH2_PHYESMADAPTSAVE : in std_ulogic;
     CH2_PHYREADY_M : in std_ulogic;
     CH2_PHYSTATUS_M : in std_ulogic;
     CH2_PINRSVDAS_M : in std_logic_vector(15 downto 0);
     CH2_RESETEXCEPTION_M : in std_ulogic;
     CH2_RX10GSTAT_M : in std_logic_vector(7 downto 0);
     CH2_RXBUFSTATUS_M : in std_logic_vector(2 downto 0);
     CH2_RXBYTEISALIGNED_M : in std_ulogic;
     CH2_RXBYTEREALIGN_M : in std_ulogic;
     CH2_RXCDRHOLD : in std_ulogic;
     CH2_RXCDRLOCK_M : in std_ulogic;
     CH2_RXCDROVRDEN : in std_ulogic;
     CH2_RXCDRPHDONE_M : in std_ulogic;
     CH2_RXCDRRESET : in std_ulogic;
     CH2_RXCHANBONDSEQ_M : in std_ulogic;
     CH2_RXCHANISALIGNED_M : in std_ulogic;
     CH2_RXCHANREALIGN_M : in std_ulogic;
     CH2_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH2_RXCHBONDO_M : in std_logic_vector(4 downto 0);
     CH2_RXCLKCORCNT_M : in std_logic_vector(1 downto 0);
     CH2_RXCOMINITDET_M : in std_ulogic;
     CH2_RXCOMMADET_M : in std_ulogic;
     CH2_RXCOMSASDET_M : in std_ulogic;
     CH2_RXCOMWAKEDET_M : in std_ulogic;
     CH2_RXCTRL0_M : in std_logic_vector(15 downto 0);
     CH2_RXCTRL1_M : in std_logic_vector(15 downto 0);
     CH2_RXCTRL2_M : in std_logic_vector(7 downto 0);
     CH2_RXCTRL3_M : in std_logic_vector(7 downto 0);
     CH2_RXDAPICODEOVRDEN : in std_ulogic;
     CH2_RXDAPICODERESET : in std_ulogic;
     CH2_RXDATAEXTENDRSVD_M : in std_logic_vector(7 downto 0);
     CH2_RXDATAVALID_M : in std_logic_vector(1 downto 0);
     CH2_RXDATA_M : in std_logic_vector(127 downto 0);
     CH2_RXDCCDONE_M : in std_ulogic;
     CH2_RXDLYALIGNERR_M : in std_ulogic;
     CH2_RXDLYALIGNPROG_M : in std_ulogic;
     CH2_RXDLYALIGNREQ : in std_ulogic;
     CH2_RXELECIDLE_M : in std_ulogic;
     CH2_RXEQTRAINING : in std_ulogic;
     CH2_RXFINEALIGNDONE_M : in std_ulogic;
     CH2_RXGEARBOXSLIP : in std_ulogic;
     CH2_RXHEADERVALID_M : in std_logic_vector(1 downto 0);
     CH2_RXHEADER_M : in std_logic_vector(5 downto 0);
     CH2_RXLATCLK : in std_ulogic;
     CH2_RXLPMEN : in std_ulogic;
     CH2_RXMLDCHAINDONE : in std_ulogic;
     CH2_RXMLDCHAINREQ : in std_ulogic;
     CH2_RXMLFINEALIGNREQ : in std_ulogic;
     CH2_RXOOBRESET : in std_ulogic;
     CH2_RXOSINTDONE_M : in std_ulogic;
     CH2_RXOSINTSTARTED_M : in std_ulogic;
     CH2_RXOSINTSTROBEDONE_M : in std_ulogic;
     CH2_RXOSINTSTROBESTARTED_M : in std_ulogic;
     CH2_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH2_RXPD : in std_logic_vector(1 downto 0);
     CH2_RXPHALIGNDONE_M : in std_ulogic;
     CH2_RXPHALIGNERR_M : in std_ulogic;
     CH2_RXPHALIGNREQ : in std_ulogic;
     CH2_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH2_RXPHDLYPD : in std_ulogic;
     CH2_RXPHDLYRESET : in std_ulogic;
     CH2_RXPHDLYRESETDONE_M : in std_ulogic;
     CH2_RXPHSETINITDONE_M : in std_ulogic;
     CH2_RXPHSETINITREQ : in std_ulogic;
     CH2_RXPHSHIFT180 : in std_ulogic;
     CH2_RXPHSHIFT180DONE_M : in std_ulogic;
     CH2_RXPMARESETDONE_M : in std_ulogic;
     CH2_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH2_RXPOLARITY : in std_ulogic;
     CH2_RXPRBSCNTRESET : in std_ulogic;
     CH2_RXPRBSERR_M : in std_ulogic;
     CH2_RXPRBSLOCKED_M : in std_ulogic;
     CH2_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH2_RXPROGDIVRESET : in std_ulogic;
     CH2_RXPROGDIVRESETDONE_M : in std_ulogic;
     CH2_RXRATE : in std_logic_vector(7 downto 0);
     CH2_RXRESETDONE_M : in std_ulogic;
     CH2_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH2_RXSLIDE : in std_ulogic;
     CH2_RXSLIDERDY_M : in std_ulogic;
     CH2_RXSTARTOFSEQ_M : in std_logic_vector(1 downto 0);
     CH2_RXSTATUS_M : in std_logic_vector(2 downto 0);
     CH2_RXSYNCALLIN : in std_ulogic;
     CH2_RXSYNCDONE_M : in std_ulogic;
     CH2_RXTERMINATION : in std_ulogic;
     CH2_RXUSERRDY : in std_ulogic;
     CH2_RXUSRCLK : in std_ulogic;
     CH2_RXVALID_M : in std_ulogic;
     CH2_TSTIN : in std_logic_vector(19 downto 0);
     CH2_TX10GSTAT_M : in std_ulogic;
     CH2_TXBUFSTATUS_M : in std_logic_vector(1 downto 0);
     CH2_TXCOMFINISH_M : in std_ulogic;
     CH2_TXCOMINIT : in std_ulogic;
     CH2_TXCOMSAS : in std_ulogic;
     CH2_TXCOMWAKE : in std_ulogic;
     CH2_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH2_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH2_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH2_TXDAPICODEOVRDEN : in std_ulogic;
     CH2_TXDAPICODERESET : in std_ulogic;
     CH2_TXDATA : in std_logic_vector(127 downto 0);
     CH2_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH2_TXDCCDONE_M : in std_ulogic;
     CH2_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH2_TXDETECTRX : in std_ulogic;
     CH2_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH2_TXDLYALIGNERR_M : in std_ulogic;
     CH2_TXDLYALIGNPROG_M : in std_ulogic;
     CH2_TXDLYALIGNREQ : in std_ulogic;
     CH2_TXELECIDLE : in std_ulogic;
     CH2_TXHEADER : in std_logic_vector(5 downto 0);
     CH2_TXINHIBIT : in std_ulogic;
     CH2_TXLATCLK : in std_ulogic;
     CH2_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH2_TXMARGIN : in std_logic_vector(2 downto 0);
     CH2_TXMLDCHAINDONE : in std_ulogic;
     CH2_TXMLDCHAINREQ : in std_ulogic;
     CH2_TXONESZEROS : in std_ulogic;
     CH2_TXPAUSEDELAYALIGN : in std_ulogic;
     CH2_TXPCSRESETMASK : in std_ulogic;
     CH2_TXPD : in std_logic_vector(1 downto 0);
     CH2_TXPHALIGNDONE_M : in std_ulogic;
     CH2_TXPHALIGNERR_M : in std_ulogic;
     CH2_TXPHALIGNOUTRSVD_M : in std_ulogic;
     CH2_TXPHALIGNREQ : in std_ulogic;
     CH2_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH2_TXPHDLYPD : in std_ulogic;
     CH2_TXPHDLYRESET : in std_ulogic;
     CH2_TXPHDLYRESETDONE_M : in std_ulogic;
     CH2_TXPHDLYTSTCLK : in std_ulogic;
     CH2_TXPHSETINITDONE_M : in std_ulogic;
     CH2_TXPHSETINITREQ : in std_ulogic;
     CH2_TXPHSHIFT180 : in std_ulogic;
     CH2_TXPHSHIFT180DONE_M : in std_ulogic;
     CH2_TXPICODEOVRDEN : in std_ulogic;
     CH2_TXPICODERESET : in std_ulogic;
     CH2_TXPIPPMEN : in std_ulogic;
     CH2_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH2_TXPISOPD : in std_ulogic;
     CH2_TXPMARESETDONE_M : in std_ulogic;
     CH2_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH2_TXPOLARITY : in std_ulogic;
     CH2_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH2_TXPRBSFORCEERR : in std_ulogic;
     CH2_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH2_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH2_TXPROGDIVRESET : in std_ulogic;
     CH2_TXPROGDIVRESETDONE_M : in std_ulogic;
     CH2_TXRATE : in std_logic_vector(7 downto 0);
     CH2_TXRESETDONE_M : in std_ulogic;
     CH2_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH2_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH2_TXSWING : in std_ulogic;
     CH2_TXSYNCALLIN : in std_ulogic;
     CH2_TXSYNCDONE_M : in std_ulogic;
     CH2_TXUSERRDY : in std_ulogic;
     CH2_TXUSRCLK : in std_ulogic;
     CH3_BUFGTCEMASK_M : in std_logic_vector(3 downto 0);
     CH3_BUFGTCE_M : in std_ulogic;
     CH3_BUFGTDIV_M : in std_logic_vector(11 downto 0);
     CH3_BUFGTRSTMASK_M : in std_logic_vector(3 downto 0);
     CH3_BUFGTRST_M : in std_ulogic;
     CH3_CDRBMCDRREQ : in std_ulogic;
     CH3_CDRFREQOS : in std_ulogic;
     CH3_CDRINCPCTRL : in std_ulogic;
     CH3_CDRSTEPDIR : in std_ulogic;
     CH3_CDRSTEPSQ : in std_ulogic;
     CH3_CDRSTEPSX : in std_ulogic;
     CH3_CFOKOVRDFINISH : in std_ulogic;
     CH3_CFOKOVRDPULSE : in std_ulogic;
     CH3_CFOKOVRDRDY0_M : in std_ulogic;
     CH3_CFOKOVRDRDY1_M : in std_ulogic;
     CH3_CFOKOVRDSTART : in std_ulogic;
     CH3_CLKRSVD0 : in std_ulogic;
     CH3_CLKRSVD1 : in std_ulogic;
     CH3_DMONFIFORESET : in std_ulogic;
     CH3_DMONITORCLK : in std_ulogic;
     CH3_DMONITOROUT_M : in std_logic_vector(31 downto 0);
     CH3_EYESCANDATAERROR_M : in std_ulogic;
     CH3_EYESCANRESET : in std_ulogic;
     CH3_EYESCANTRIGGER : in std_ulogic;
     CH3_GTRSVD : in std_logic_vector(15 downto 0);
     CH3_GTRXRESET : in std_ulogic;
     CH3_GTTXRESET : in std_ulogic;
     CH3_HSDPPCSRESET : in std_ulogic;
     CH3_ILORESET : in std_ulogic;
     CH3_ILORESETDONE_M : in std_ulogic;
     CH3_ILORESETMASK : in std_ulogic;
     CH3_LOOPBACK : in std_logic_vector(2 downto 0);
     CH3_PCIERSTB : in std_ulogic;
     CH3_PCSRSVDIN : in std_logic_vector(15 downto 0);
     CH3_PCSRSVDOUT_M : in std_logic_vector(15 downto 0);
     CH3_PHYESMADAPTSAVE : in std_ulogic;
     CH3_PHYREADY_M : in std_ulogic;
     CH3_PHYSTATUS_M : in std_ulogic;
     CH3_PINRSVDAS_M : in std_logic_vector(15 downto 0);
     CH3_RESETEXCEPTION_M : in std_ulogic;
     CH3_RX10GSTAT_M : in std_logic_vector(7 downto 0);
     CH3_RXBUFSTATUS_M : in std_logic_vector(2 downto 0);
     CH3_RXBYTEISALIGNED_M : in std_ulogic;
     CH3_RXBYTEREALIGN_M : in std_ulogic;
     CH3_RXCDRHOLD : in std_ulogic;
     CH3_RXCDRLOCK_M : in std_ulogic;
     CH3_RXCDROVRDEN : in std_ulogic;
     CH3_RXCDRPHDONE_M : in std_ulogic;
     CH3_RXCDRRESET : in std_ulogic;
     CH3_RXCHANBONDSEQ_M : in std_ulogic;
     CH3_RXCHANISALIGNED_M : in std_ulogic;
     CH3_RXCHANREALIGN_M : in std_ulogic;
     CH3_RXCHBONDI : in std_logic_vector(4 downto 0);
     CH3_RXCHBONDO_M : in std_logic_vector(4 downto 0);
     CH3_RXCLKCORCNT_M : in std_logic_vector(1 downto 0);
     CH3_RXCOMINITDET_M : in std_ulogic;
     CH3_RXCOMMADET_M : in std_ulogic;
     CH3_RXCOMSASDET_M : in std_ulogic;
     CH3_RXCOMWAKEDET_M : in std_ulogic;
     CH3_RXCTRL0_M : in std_logic_vector(15 downto 0);
     CH3_RXCTRL1_M : in std_logic_vector(15 downto 0);
     CH3_RXCTRL2_M : in std_logic_vector(7 downto 0);
     CH3_RXCTRL3_M : in std_logic_vector(7 downto 0);
     CH3_RXDAPICODEOVRDEN : in std_ulogic;
     CH3_RXDAPICODERESET : in std_ulogic;
     CH3_RXDATAEXTENDRSVD_M : in std_logic_vector(7 downto 0);
     CH3_RXDATAVALID_M : in std_logic_vector(1 downto 0);
     CH3_RXDATA_M : in std_logic_vector(127 downto 0);
     CH3_RXDCCDONE_M : in std_ulogic;
     CH3_RXDLYALIGNERR_M : in std_ulogic;
     CH3_RXDLYALIGNPROG_M : in std_ulogic;
     CH3_RXDLYALIGNREQ : in std_ulogic;
     CH3_RXELECIDLE_M : in std_ulogic;
     CH3_RXEQTRAINING : in std_ulogic;
     CH3_RXFINEALIGNDONE_M : in std_ulogic;
     CH3_RXGEARBOXSLIP : in std_ulogic;
     CH3_RXHEADERVALID_M : in std_logic_vector(1 downto 0);
     CH3_RXHEADER_M : in std_logic_vector(5 downto 0);
     CH3_RXLATCLK : in std_ulogic;
     CH3_RXLPMEN : in std_ulogic;
     CH3_RXMLDCHAINDONE : in std_ulogic;
     CH3_RXMLDCHAINREQ : in std_ulogic;
     CH3_RXMLFINEALIGNREQ : in std_ulogic;
     CH3_RXOOBRESET : in std_ulogic;
     CH3_RXOSINTDONE_M : in std_ulogic;
     CH3_RXOSINTSTARTED_M : in std_ulogic;
     CH3_RXOSINTSTROBEDONE_M : in std_ulogic;
     CH3_RXOSINTSTROBESTARTED_M : in std_ulogic;
     CH3_RXPCSRESETMASK : in std_logic_vector(4 downto 0);
     CH3_RXPD : in std_logic_vector(1 downto 0);
     CH3_RXPHALIGNDONE_M : in std_ulogic;
     CH3_RXPHALIGNERR_M : in std_ulogic;
     CH3_RXPHALIGNREQ : in std_ulogic;
     CH3_RXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH3_RXPHDLYPD : in std_ulogic;
     CH3_RXPHDLYRESET : in std_ulogic;
     CH3_RXPHDLYRESETDONE_M : in std_ulogic;
     CH3_RXPHSETINITDONE_M : in std_ulogic;
     CH3_RXPHSETINITREQ : in std_ulogic;
     CH3_RXPHSHIFT180 : in std_ulogic;
     CH3_RXPHSHIFT180DONE_M : in std_ulogic;
     CH3_RXPMARESETDONE_M : in std_ulogic;
     CH3_RXPMARESETMASK : in std_logic_vector(6 downto 0);
     CH3_RXPOLARITY : in std_ulogic;
     CH3_RXPRBSCNTRESET : in std_ulogic;
     CH3_RXPRBSERR_M : in std_ulogic;
     CH3_RXPRBSLOCKED_M : in std_ulogic;
     CH3_RXPRBSSEL : in std_logic_vector(3 downto 0);
     CH3_RXPROGDIVRESET : in std_ulogic;
     CH3_RXPROGDIVRESETDONE_M : in std_ulogic;
     CH3_RXRATE : in std_logic_vector(7 downto 0);
     CH3_RXRESETDONE_M : in std_ulogic;
     CH3_RXRESETMODE : in std_logic_vector(1 downto 0);
     CH3_RXSLIDE : in std_ulogic;
     CH3_RXSLIDERDY_M : in std_ulogic;
     CH3_RXSTARTOFSEQ_M : in std_logic_vector(1 downto 0);
     CH3_RXSTATUS_M : in std_logic_vector(2 downto 0);
     CH3_RXSYNCALLIN : in std_ulogic;
     CH3_RXSYNCDONE_M : in std_ulogic;
     CH3_RXTERMINATION : in std_ulogic;
     CH3_RXUSERRDY : in std_ulogic;
     CH3_RXUSRCLK : in std_ulogic;
     CH3_RXVALID_M : in std_ulogic;
     CH3_TSTIN : in std_logic_vector(19 downto 0);
     CH3_TX10GSTAT_M : in std_ulogic;
     CH3_TXBUFSTATUS_M : in std_logic_vector(1 downto 0);
     CH3_TXCOMFINISH_M : in std_ulogic;
     CH3_TXCOMINIT : in std_ulogic;
     CH3_TXCOMSAS : in std_ulogic;
     CH3_TXCOMWAKE : in std_ulogic;
     CH3_TXCTRL0 : in std_logic_vector(15 downto 0);
     CH3_TXCTRL1 : in std_logic_vector(15 downto 0);
     CH3_TXCTRL2 : in std_logic_vector(7 downto 0);
     CH3_TXDAPICODEOVRDEN : in std_ulogic;
     CH3_TXDAPICODERESET : in std_ulogic;
     CH3_TXDATA : in std_logic_vector(127 downto 0);
     CH3_TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     CH3_TXDCCDONE_M : in std_ulogic;
     CH3_TXDEEMPH : in std_logic_vector(1 downto 0);
     CH3_TXDETECTRX : in std_ulogic;
     CH3_TXDIFFCTRL : in std_logic_vector(4 downto 0);
     CH3_TXDLYALIGNERR_M : in std_ulogic;
     CH3_TXDLYALIGNPROG_M : in std_ulogic;
     CH3_TXDLYALIGNREQ : in std_ulogic;
     CH3_TXELECIDLE : in std_ulogic;
     CH3_TXHEADER : in std_logic_vector(5 downto 0);
     CH3_TXINHIBIT : in std_ulogic;
     CH3_TXLATCLK : in std_ulogic;
     CH3_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     CH3_TXMARGIN : in std_logic_vector(2 downto 0);
     CH3_TXMLDCHAINDONE : in std_ulogic;
     CH3_TXMLDCHAINREQ : in std_ulogic;
     CH3_TXONESZEROS : in std_ulogic;
     CH3_TXPAUSEDELAYALIGN : in std_ulogic;
     CH3_TXPCSRESETMASK : in std_ulogic;
     CH3_TXPD : in std_logic_vector(1 downto 0);
     CH3_TXPHALIGNDONE_M : in std_ulogic;
     CH3_TXPHALIGNERR_M : in std_ulogic;
     CH3_TXPHALIGNOUTRSVD_M : in std_ulogic;
     CH3_TXPHALIGNREQ : in std_ulogic;
     CH3_TXPHALIGNRESETMASK : in std_logic_vector(1 downto 0);
     CH3_TXPHDLYPD : in std_ulogic;
     CH3_TXPHDLYRESET : in std_ulogic;
     CH3_TXPHDLYRESETDONE_M : in std_ulogic;
     CH3_TXPHDLYTSTCLK : in std_ulogic;
     CH3_TXPHSETINITDONE_M : in std_ulogic;
     CH3_TXPHSETINITREQ : in std_ulogic;
     CH3_TXPHSHIFT180 : in std_ulogic;
     CH3_TXPHSHIFT180DONE_M : in std_ulogic;
     CH3_TXPICODEOVRDEN : in std_ulogic;
     CH3_TXPICODERESET : in std_ulogic;
     CH3_TXPIPPMEN : in std_ulogic;
     CH3_TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     CH3_TXPISOPD : in std_ulogic;
     CH3_TXPMARESETDONE_M : in std_ulogic;
     CH3_TXPMARESETMASK : in std_logic_vector(2 downto 0);
     CH3_TXPOLARITY : in std_ulogic;
     CH3_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     CH3_TXPRBSFORCEERR : in std_ulogic;
     CH3_TXPRBSSEL : in std_logic_vector(3 downto 0);
     CH3_TXPRECURSOR : in std_logic_vector(4 downto 0);
     CH3_TXPROGDIVRESET : in std_ulogic;
     CH3_TXPROGDIVRESETDONE_M : in std_ulogic;
     CH3_TXRATE : in std_logic_vector(7 downto 0);
     CH3_TXRESETDONE_M : in std_ulogic;
     CH3_TXRESETMODE : in std_logic_vector(1 downto 0);
     CH3_TXSEQUENCE : in std_logic_vector(6 downto 0);
     CH3_TXSWING : in std_ulogic;
     CH3_TXSYNCALLIN : in std_ulogic;
     CH3_TXSYNCDONE_M : in std_ulogic;
     CH3_TXUSERRDY : in std_ulogic;
     CH3_TXUSRCLK : in std_ulogic;
     CORRECTERR_M : in std_ulogic;
     CTRLRSVDIN0 : in std_logic_vector(15 downto 0);
     CTRLRSVDIN1 : in std_logic_vector(13 downto 0);
     CTRLRSVDOUT_M : in std_logic_vector(31 downto 0);
     DEBUGTRACECLK : in std_ulogic;
     DEBUGTRACEREADY : in std_ulogic;
     DEBUGTRACETDATA_M : in std_logic_vector(15 downto 0);
     DEBUGTRACETVALID_M : in std_ulogic;
     GPI : in std_logic_vector(15 downto 0);
     GPO_M : in std_logic_vector(15 downto 0);
     GTPOWERGOOD_M : in std_ulogic;
     HSCLK0_LCPLLCLKRSVD0 : in std_ulogic;
     HSCLK0_LCPLLCLKRSVD1 : in std_ulogic;
     HSCLK0_LCPLLFBCLKLOST_M : in std_ulogic;
     HSCLK0_LCPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK0_LCPLLGTGREFCLK : in std_ulogic;
     HSCLK0_LCPLLLOCK_M : in std_ulogic;
     HSCLK0_LCPLLPD : in std_ulogic;
     HSCLK0_LCPLLREFCLKLOST_M : in std_ulogic;
     HSCLK0_LCPLLREFCLKMONITOR_M : in std_ulogic;
     HSCLK0_LCPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK0_LCPLLRESET : in std_ulogic;
     HSCLK0_LCPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK0_LCPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK0_LCPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK0_LCPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK0_LCPLLRSVDOUT_M : in std_logic_vector(7 downto 0);
     HSCLK0_LCPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK0_LCPLLSDMTOGGLE : in std_ulogic;
     HSCLK0_RPLLCLKRSVD0 : in std_ulogic;
     HSCLK0_RPLLCLKRSVD1 : in std_ulogic;
     HSCLK0_RPLLFBCLKLOST_M : in std_ulogic;
     HSCLK0_RPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK0_RPLLGTGREFCLK : in std_ulogic;
     HSCLK0_RPLLLOCK_M : in std_ulogic;
     HSCLK0_RPLLPD : in std_ulogic;
     HSCLK0_RPLLREFCLKLOST_M : in std_ulogic;
     HSCLK0_RPLLREFCLKMONITOR_M : in std_ulogic;
     HSCLK0_RPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK0_RPLLRESET : in std_ulogic;
     HSCLK0_RPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK0_RPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK0_RPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK0_RPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK0_RPLLRSVDOUT_M : in std_logic_vector(7 downto 0);
     HSCLK0_RPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK0_RPLLSDMTOGGLE : in std_ulogic;
     HSCLK1_LCPLLCLKRSVD0 : in std_ulogic;
     HSCLK1_LCPLLCLKRSVD1 : in std_ulogic;
     HSCLK1_LCPLLFBCLKLOST_M : in std_ulogic;
     HSCLK1_LCPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK1_LCPLLGTGREFCLK : in std_ulogic;
     HSCLK1_LCPLLLOCK_M : in std_ulogic;
     HSCLK1_LCPLLPD : in std_ulogic;
     HSCLK1_LCPLLREFCLKLOST_M : in std_ulogic;
     HSCLK1_LCPLLREFCLKMONITOR_M : in std_ulogic;
     HSCLK1_LCPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK1_LCPLLRESET : in std_ulogic;
     HSCLK1_LCPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK1_LCPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK1_LCPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK1_LCPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK1_LCPLLRSVDOUT_M : in std_logic_vector(7 downto 0);
     HSCLK1_LCPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK1_LCPLLSDMTOGGLE : in std_ulogic;
     HSCLK1_RPLLCLKRSVD0 : in std_ulogic;
     HSCLK1_RPLLCLKRSVD1 : in std_ulogic;
     HSCLK1_RPLLFBCLKLOST_M : in std_ulogic;
     HSCLK1_RPLLFBDIV : in std_logic_vector(7 downto 0);
     HSCLK1_RPLLGTGREFCLK : in std_ulogic;
     HSCLK1_RPLLLOCK_M : in std_ulogic;
     HSCLK1_RPLLPD : in std_ulogic;
     HSCLK1_RPLLREFCLKLOST_M : in std_ulogic;
     HSCLK1_RPLLREFCLKMONITOR_M : in std_ulogic;
     HSCLK1_RPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     HSCLK1_RPLLRESET : in std_ulogic;
     HSCLK1_RPLLRESETBYPASSMODE : in std_ulogic;
     HSCLK1_RPLLRESETMASK : in std_logic_vector(1 downto 0);
     HSCLK1_RPLLRSVD0 : in std_logic_vector(7 downto 0);
     HSCLK1_RPLLRSVD1 : in std_logic_vector(7 downto 0);
     HSCLK1_RPLLRSVDOUT_M : in std_logic_vector(7 downto 0);
     HSCLK1_RPLLSDMDATA : in std_logic_vector(25 downto 0);
     HSCLK1_RPLLSDMTOGGLE : in std_ulogic;
     M0_AXIS_TDATA_M : in std_logic_vector(31 downto 0);
     M0_AXIS_TLAST_M : in std_ulogic;
     M0_AXIS_TREADY : in std_ulogic;
     M0_AXIS_TVALID_M : in std_ulogic;
     M1_AXIS_TDATA_M : in std_logic_vector(31 downto 0);
     M1_AXIS_TLAST_M : in std_ulogic;
     M1_AXIS_TREADY : in std_ulogic;
     M1_AXIS_TVALID_M : in std_ulogic;
     M2_AXIS_TDATA_M : in std_logic_vector(31 downto 0);
     M2_AXIS_TLAST_M : in std_ulogic;
     M2_AXIS_TREADY : in std_ulogic;
     M2_AXIS_TVALID_M : in std_ulogic;
     MSTRXRESET : in std_logic_vector(3 downto 0);
     MSTRXRESETDONE_M : in std_logic_vector(3 downto 0);
     MSTTXRESET : in std_logic_vector(3 downto 0);
     MSTTXRESETDONE_M : in std_logic_vector(3 downto 0);
     PCIELINKREACHTARGET : in std_ulogic;
     PCIELTSSM : in std_logic_vector(5 downto 0);
     RCALENB : in std_ulogic;
     REFCLK0_CLKTESTSIG : in std_ulogic;
     REFCLK0_GTREFCLKPD : in std_ulogic;
     REFCLK1_CLKTESTSIG : in std_ulogic;
     REFCLK1_GTREFCLKPD : in std_ulogic;
     RXMARGINCLK : in std_ulogic;
     RXMARGINREQACK_M : in std_ulogic;
     RXMARGINREQCMD : in std_logic_vector(3 downto 0);
     RXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     RXMARGINREQPAYLD : in std_logic_vector(7 downto 0);
     RXMARGINREQREQ : in std_ulogic;
     RXMARGINRESACK : in std_ulogic;
     RXMARGINRESCMD_M : in std_logic_vector(3 downto 0);
     RXMARGINRESLANENUM_M : in std_logic_vector(1 downto 0);
     RXMARGINRESPAYLD_M : in std_logic_vector(7 downto 0);
     RXMARGINRESREQ_M : in std_ulogic;
     S0_AXIS_TDATA : in std_logic_vector(31 downto 0);
     S0_AXIS_TLAST : in std_ulogic;
     S0_AXIS_TREADY_M : in std_ulogic;
     S0_AXIS_TVALID : in std_ulogic;
     S1_AXIS_TDATA : in std_logic_vector(31 downto 0);
     S1_AXIS_TLAST : in std_ulogic;
     S1_AXIS_TREADY_M : in std_ulogic;
     S1_AXIS_TVALID : in std_ulogic;
     S2_AXIS_TDATA : in std_logic_vector(31 downto 0);
     S2_AXIS_TLAST : in std_ulogic;
     S2_AXIS_TREADY_M : in std_ulogic;
     S2_AXIS_TVALID : in std_ulogic;
     TRIGACKIN0_M : in std_ulogic;
     TRIGACKOUT0 : in std_ulogic;
     TRIGIN0 : in std_ulogic;
     TRIGOUT0_M : in std_ulogic;
     UBENABLE : in std_ulogic;
     UBINTERRUPT_M : in std_ulogic;
     UBINTR : in std_logic_vector(11 downto 0);
     UBIOLMBRST : in std_ulogic;
     UBMBRST : in std_ulogic;
     UBRXUART : in std_ulogic;
     UBTXUART_M : in std_ulogic;
     UNCORRECTERR_M : in std_ulogic;
     XPIPE_BUFGTCE_M : in std_ulogic;
     XPIPE_BUFGTCE_MASK_M : in std_logic_vector(3 downto 0);
     XPIPE_BUFGTCE_MASK_M_1 : in std_logic_vector(3 downto 0);
     XPIPE_BUFGTCE_M_1 : in std_ulogic;
     XPIPE_BUFGTDIV_M : in std_logic_vector(11 downto 0);
     XPIPE_BUFGTDIV_M_1 : in std_logic_vector(11 downto 0);
     XPIPE_BUFGTRST_M : in std_ulogic;
     XPIPE_BUFGTRST_MASK_M : in std_logic_vector(3 downto 0);
     XPIPE_BUFGTRST_MASK_M_1 : in std_logic_vector(3 downto 0);
     XPIPE_BUFGTRST_M_1 : in std_ulogic;
     XPIPE_GT_OUTCLK_M : in std_ulogic;
     XPIPE_GT_OUTCLK_M_1 : in std_ulogic;
     XPIPE_GT_PIPECLK : in std_ulogic;
     XPIPE_GT_PIPECLK_1 : in std_ulogic;
     XPIPE_GT_RXOUTCLK_M : in std_ulogic;
     XPIPE_GT_RXUSRCLK : in std_ulogic;
     XPIPE_HSDP_RXDATAVALID_M : in std_ulogic;
     XPIPE_HSDP_RXDATAVALID_M_1 : in std_ulogic;
     XPIPE_HSDP_RXDATAVALID_M_2 : in std_ulogic;
     XPIPE_HSDP_RXGEARBOXSLIP : in std_ulogic;
     XPIPE_HSDP_RXGEARBOXSLIP_1 : in std_ulogic;
     XPIPE_HSDP_RXGEARBOXSLIP_2 : in std_ulogic;
     XPIPE_HSDP_RXHEADERVALID_M : in std_ulogic;
     XPIPE_HSDP_RXHEADERVALID_M_1 : in std_ulogic;
     XPIPE_HSDP_RXHEADERVALID_M_2 : in std_ulogic;
     XPIPE_HSDP_RXHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_HSDP_RXHEADER_M_1 : in std_logic_vector(1 downto 0);
     XPIPE_HSDP_RXHEADER_M_2 : in std_logic_vector(1 downto 0);
     XPIPE_HSDP_RXPCSRESET : in std_ulogic;
     XPIPE_HSDP_RXPCSRESET_1 : in std_ulogic;
     XPIPE_HSDP_RXPCSRESET_2 : in std_ulogic;
     XPIPE_HSDP_RXRESETDONE_M : in std_ulogic;
     XPIPE_HSDP_RXRESETDONE_M_1 : in std_ulogic;
     XPIPE_HSDP_RXRESETDONE_M_2 : in std_ulogic;
     XPIPE_HSDP_TXHEADER : in std_logic_vector(1 downto 0);
     XPIPE_HSDP_TXHEADER_1 : in std_logic_vector(1 downto 0);
     XPIPE_HSDP_TXHEADER_2 : in std_logic_vector(1 downto 0);
     XPIPE_HSDP_TXRESETDONE_M : in std_ulogic;
     XPIPE_HSDP_TXRESETDONE_M_1 : in std_ulogic;
     XPIPE_HSDP_TXRESETDONE_M_2 : in std_ulogic;
     XPIPE_HSDP_TXSEQUENCE : in std_logic_vector(6 downto 0);
     XPIPE_HSDP_TXSEQUENCE_1 : in std_logic_vector(6 downto 0);
     XPIPE_HSDP_TXSEQUENCE_2 : in std_logic_vector(6 downto 0);
     XPIPE_PCIELINKREACHTARGET : in std_ulogic;
     XPIPE_PCIELINKREACHTARGET_1 : in std_ulogic;
     XPIPE_PCIELTSSMSTATE : in std_logic_vector(5 downto 0);
     XPIPE_PCIELTSSMSTATE_1 : in std_logic_vector(5 downto 0);
     XPIPE_PCIE_PERST_N : in std_ulogic;
     XPIPE_PCIE_PERST_N_1 : in std_ulogic;
     XPIPE_PCIE_RATE : in std_logic_vector(2 downto 0);
     XPIPE_PCIE_RATE_1 : in std_logic_vector(2 downto 0);
     XPIPE_PHYESMADAPTSAVE : in std_ulogic;
     XPIPE_PHYESMADAPTSAVE_1 : in std_ulogic;
     XPIPE_PHYREADY_FR_BOT : in std_ulogic;
     XPIPE_PHYREADY_TO_BOT_M : in std_ulogic;
     XPIPE_PHY_READY_M : in std_ulogic;
     XPIPE_PHY_READY_M_1 : in std_ulogic;
     XPIPE_PIPE_CH0_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH0_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH0_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH0_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH0_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH0_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH0_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH0_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH0_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH0_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH0_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH0_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH0_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH0_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH0_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH0_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH0_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH0_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH0_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH0_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH0_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH0_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH0_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH10_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH10_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH10_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH10_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH10_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH10_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH10_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH10_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH10_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH10_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH10_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH10_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH10_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH10_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH10_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH10_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH10_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH10_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH10_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH10_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH10_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH10_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH11_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH11_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH11_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH11_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH11_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH11_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH11_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH11_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH11_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH11_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH11_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH11_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH11_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH11_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH11_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH11_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH11_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH11_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH11_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH11_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH11_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH11_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH12_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH12_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH12_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH12_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH12_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH12_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH12_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH12_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH12_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH12_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH12_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH12_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH12_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH12_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH12_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH12_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH12_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH12_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH12_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH12_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH12_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH12_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH13_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH13_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH13_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH13_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH13_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH13_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH13_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH13_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH13_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH13_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH13_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH13_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH13_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH13_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH13_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH13_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH13_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH13_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH13_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH13_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH13_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH13_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH14_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH14_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH14_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH14_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH14_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH14_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH14_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH14_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH14_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH14_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH14_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH14_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH14_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH14_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH14_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH14_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH14_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH14_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH14_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH14_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH14_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH14_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH15_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH15_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH15_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH15_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH15_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH15_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH15_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH15_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH15_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH15_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH15_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH15_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH15_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH15_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH15_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH15_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH15_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH15_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH15_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH15_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH15_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH15_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH1_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH1_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH1_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH1_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH1_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH1_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH1_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH1_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH1_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH1_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH1_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH1_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH1_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH1_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH1_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH1_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH1_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH1_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH1_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH1_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH1_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH1_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH2_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH2_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH2_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH2_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH2_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH2_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH2_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH2_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH2_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH2_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH2_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH2_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH2_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH2_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH2_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH2_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH2_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH2_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH2_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH2_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH2_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH2_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH3_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH3_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH3_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH3_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH3_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH3_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH3_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH3_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH3_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH3_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH3_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH3_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH3_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH3_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH3_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH3_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH3_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH3_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH3_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH3_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH3_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH3_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH4_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH4_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH4_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH4_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH4_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH4_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH4_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH4_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH4_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH4_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH4_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH4_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH4_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH4_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH4_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH4_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH4_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH4_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH4_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH4_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH4_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH4_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH5_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH5_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH5_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH5_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH5_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH5_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH5_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH5_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH5_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH5_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH5_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH5_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH5_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH5_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH5_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH5_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH5_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH5_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH5_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH5_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH5_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH5_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH6_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH6_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH6_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH6_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH6_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH6_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH6_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH6_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH6_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH6_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH6_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH6_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH6_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH6_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH6_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH6_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH6_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH6_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH6_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH6_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH6_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH6_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH7_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH7_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH7_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH7_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH7_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH7_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH7_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH7_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH7_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH7_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH7_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH7_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH7_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH7_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH7_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH7_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH7_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH7_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH7_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH7_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH7_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH7_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH8_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH8_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH8_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH8_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH8_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH8_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH8_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH8_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH8_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH8_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH8_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH8_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH8_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH8_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH8_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH8_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH8_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH8_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH8_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH8_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH8_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH8_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_PHYSTATUS_M : in std_ulogic;
     XPIPE_PIPE_CH9_POWERDOWN : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_RXCHARISK_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_RXDATAVALID_M : in std_ulogic;
     XPIPE_PIPE_CH9_RXDATA_M : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH9_RXELECIDLE_M : in std_ulogic;
     XPIPE_PIPE_CH9_RXPOLARITY : in std_ulogic;
     XPIPE_PIPE_CH9_RXSTARTBLOCK_M : in std_ulogic;
     XPIPE_PIPE_CH9_RXSTATUS_M : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH9_RXSYNCHEADER_M : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_RXTERMINATION : in std_ulogic;
     XPIPE_PIPE_CH9_RXVALID_M : in std_ulogic;
     XPIPE_PIPE_CH9_TXCHARISK : in std_logic_vector(1 downto 0);
     XPIPE_PIPE_CH9_TXCOMPLIANCE : in std_ulogic;
     XPIPE_PIPE_CH9_TXDATA : in std_logic_vector(31 downto 0);
     XPIPE_PIPE_CH9_TXDATAVALID : in std_ulogic;
     XPIPE_PIPE_CH9_TXDEEMPH : in std_ulogic;
     XPIPE_PIPE_CH9_TXDETECTRXLOOPBACK : in std_ulogic;
     XPIPE_PIPE_CH9_TXELECIDLE : in std_ulogic;
     XPIPE_PIPE_CH9_TXMAINCURSOR : in std_logic_vector(6 downto 0);
     XPIPE_PIPE_CH9_TXMARGIN : in std_logic_vector(2 downto 0);
     XPIPE_PIPE_CH9_TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH9_TXPRECURSOR : in std_logic_vector(4 downto 0);
     XPIPE_PIPE_CH9_TXSTARTBLOCK : in std_ulogic;
     XPIPE_PIPE_CH9_TXSWING : in std_ulogic;
     XPIPE_PIPE_CH9_TXSYNCHEADER : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQACK_M : in std_ulogic;
     XPIPE_RXMARGINREQACK_M_1 : in std_ulogic;
     XPIPE_RXMARGINREQACK_M_2 : in std_ulogic;
     XPIPE_RXMARGINREQACK_M_3 : in std_ulogic;
     XPIPE_RXMARGINREQCMD : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQCMD_1 : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQCMD_2 : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQCMD_3 : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINREQLANENUM : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQLANENUM_1 : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQLANENUM_2 : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQLANENUM_3 : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINREQPAYLOAD : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQPAYLOAD_1 : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQPAYLOAD_2 : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQPAYLOAD_3 : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINREQREQ : in std_ulogic;
     XPIPE_RXMARGINREQREQ_1 : in std_ulogic;
     XPIPE_RXMARGINREQREQ_2 : in std_ulogic;
     XPIPE_RXMARGINREQREQ_3 : in std_ulogic;
     XPIPE_RXMARGINRESACK : in std_ulogic;
     XPIPE_RXMARGINRESACK_1 : in std_ulogic;
     XPIPE_RXMARGINRESACK_2 : in std_ulogic;
     XPIPE_RXMARGINRESACK_3 : in std_ulogic;
     XPIPE_RXMARGINRESCMD_M : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESCMD_M_1 : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESCMD_M_2 : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESCMD_M_3 : in std_logic_vector(3 downto 0);
     XPIPE_RXMARGINRESLANENUM_M : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESLANENUM_M_1 : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESLANENUM_M_2 : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESLANENUM_M_3 : in std_logic_vector(1 downto 0);
     XPIPE_RXMARGINRESPAYLOAD_M : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESPAYLOAD_M_1 : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESPAYLOAD_M_2 : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESPAYLOAD_M_3 : in std_logic_vector(7 downto 0);
     XPIPE_RXMARGINRESREQ_M : in std_ulogic;
     XPIPE_RXMARGINRESREQ_M_1 : in std_ulogic;
     XPIPE_RXMARGINRESREQ_M_2 : in std_ulogic;
     XPIPE_RXMARGINRESREQ_M_3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XPIPE_QUAD : component is "PRIMITIVE";

----- component XPLL -----
component XPLL
  generic (
     CLKFBOUT_MULT : integer := 42;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 2;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT1_DIVIDE : integer := 2;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT2_DIVIDE : integer := 2;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUT3_DIVIDE : integer := 2;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_PHASE_CTRL : std_logic_vector(1 downto 0) := "00";
     CLKOUTPHY_DIVIDE : string := "DIV8";
     DESKEW_DELAY1 : integer := 0;
     DESKEW_DELAY2 : integer := 0;
     DESKEW_DELAY_EN1 : string := "FALSE";
     DESKEW_DELAY_EN2 : string := "FALSE";
     DESKEW_DELAY_PATH1 : string := "FALSE";
     DESKEW_DELAY_PATH2 : string := "FALSE";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKIN_INVERTED : bit := '0';
     IS_PSEN_INVERTED : bit := '0';
     IS_PSINCDEC_INVERTED : bit := '0';
     IS_PWRDWN_INVERTED : bit := '0';
     IS_RST_INVERTED : bit := '0';
     REF_JITTER : real := 0.010
  );
  port (
     CLKOUT0 : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUTPHY : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     LOCKED1_DESKEW : out std_ulogic;
     LOCKED2_DESKEW : out std_ulogic;
     LOCKED_FB : out std_ulogic;
     PSDONE : out std_ulogic;
     RIU_RD_DATA : out std_logic_vector(15 downto 0);
     RIU_VALID : out std_ulogic;
     CLKFB1_DESKEW : in std_ulogic;
     CLKFB2_DESKEW : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKIN1_DESKEW : in std_ulogic;
     CLKIN2_DESKEW : in std_ulogic;
     CLKOUTPHYEN : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RIU_ADDR : in std_logic_vector(7 downto 0);
     RIU_CLK : in std_ulogic;
     RIU_NIBBLE_SEL : in std_ulogic;
     RIU_WR_DATA : in std_logic_vector(15 downto 0);
     RIU_WR_EN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XPLL : component is "PRIMITIVE";

----- component ZHOLD_DELAY -----
component ZHOLD_DELAY
  generic (
     IS_DLYIN_INVERTED : bit := '0';
     ZHOLD_FABRIC : string := "DEFAULT";
     ZHOLD_IFF : string := "DEFAULT"
  );
  port (
     DLYFABRIC : out std_ulogic;
     DLYIFF : out std_ulogic;
     DLYIN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ZHOLD_DELAY : component is "PRIMITIVE";

-- END COMPONENT

end VCOMPONENTS;
