#!/bin/sh
# ------------------------------------------------------------
# Convert the vhdl code to verilog


STORE_DIR="sim_dir"
NEXT_PNR_ACTIVE=0


[ "$1" ] && NEXT_PNR_ACTIVE=1 && echo "Next-pnr activated: $NEXT_PNR_ACTIVE"

rm -r $STORE_DIR
[ ! -d "$STORE_DIR" ] && echo "Creating $STORE_DIR" && mkdir "$STORE_DIR"

# ------------------------------------------------------------
# 1 - take all the vhdl files and store them locally in .cf file

#ghdl --clean
#ghdl -i --work=unisim unisims/*.vhd
#ghdl -i --work=unisim unisims/primitive/*.vhd
#ghdl -i RTL/vhdl/ring_oscillator.vhd
#ghdl -m -g -Punisim --warn-unused --ieee=synopsys ring_oscillator

echo "1 - GHDL"

TOP="ro_puf_s7"
INPUT_DIR="RTL_PUF/vhdl"
OUTPUT_DIR="RTL_PUF/verilog"

ghdl --clean

#ghdl -i --std=08 --workdir=$STORE_DIR --work=unisim unisims/*.vhd
#ghdl -i --std=08 --workdir=$STORE_DIR --work=unisim unisims/primitive/*.vhd

# ghdl -i --std=08 --workdir=$STORE_DIR --work=unisim unisims/*.vhd
# ghdl -i --std=08 --workdir=$STORE_DIR --work=unisim unisims/primitive/*.vhd

ghdl -i --std=08 -fsynopsys --workdir=$STORE_DIR --work=unisim $INPUT_DIR/*.vhd

ghdl -m --std=08 -fsynopsys --warn-all --work=unisim --workdir=$STORE_DIR $TOP
ghdl synth --latches --std=08 -fsynopsys --work=unisim --workdir=$STORE_DIR --out=verilog $TOP > $OUTPUT_DIR/$TOP.v


# ------------------------------------------------------------
# 2 - Process the code in Yosys to create JSON file
# usage of -p command to put all commands separated with ";"
#yosys -s flow_puf/yosys.ys
echo "2 - yosys"

# yosys -p "
#     read_verilog $OUTPUT_DIR/$TOP.v;
#     show -format svg -prefix $STORE_DIR/my_design_graph_before $TOP;
#     synth -top $TOP;
#     write_json $STORE_DIR/$TOP.json;
#     show -format svg -prefix $STORE_DIR/my_design_graphafter $TOP;
# "


# ------------------------------------------------------------
# 3 - Process the JSON in Nextpnr-Xilinx to create FASM file
# When cloning nextpnr, don't forget to do git submodule update --recursive --remote

# Generate binary file for xc7s50csga324-1
# python3 ./xilinx/python/bbaexport.py --device xc7s50csga324-1 --bba xilinx/xc7s50csga324-1.bba
#./bba/bbasm --l xilinx/xc7s50csga324-1.bba xilinx/xc7s50csga324-1.bin

# --json   -> input file
# --router -> way to ordonance place and route

# Specific to the architecture
# --chipdb ->  xc7s50csga324-1.bin      (/home/adrien/nextpnr-xilinx/xilinx/)
# --xdc    ->  xdc/xc7s50csga324-1.xdc  TODO constraint file
# --fasm   ->                           TODO check if needed ?
# --device ->  xc7s50csga324-1

#================================================
# Routing with nextpnr-xilinx (experimental)
#================================================


if [ "$NEXT_PNR_ACTIVE" -eq 1 ]; then
    echo "3 - next-pnr Xilinx"
    CHIPDB=/home/adrien/nextpnr-xilinx/xilinx/xc7s50csga324-1.bin
    FILENAME_NETLIST=ro_puf.json
    FILENAME_ROUTED=ro_puf_routed.json
    FILENAME_FASM=ro_puf.fasm

    nextpnr-xilinx -l nextpnr.log --chipdb $(CHIPDB) --xdc $(XDC)\
    --json $(FILENAME_NETLIST)  --write $(FILENAME_ROUTED)\
    --fasm $(FILENAME_FASM) --router router1
fi


# ------------------------------------------------------------
# Process the JSON in Nextpnr-Xilinx to create FASM file



